
IMG_Transfer_via_TCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b78  0800f490  0800f490  0001f490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012008  08012008  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08012008  08012008  00022008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012010  08012010  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012010  08012010  00022010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012014  08012014  00022014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08012018  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068d8  20000078  08012090  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006950  08012090  00036950  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031736  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005b1a  00000000  00000000  000617de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001908  00000000  00000000  000672f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017e0  00000000  00000000  00068c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032e97  00000000  00000000  0006a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000225cb  00000000  00000000  0009d277  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010823f  00000000  00000000  000bf842  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c7a81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c10  00000000  00000000  001c7afc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f478 	.word	0x0800f478

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800f478 	.word	0x0800f478

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <TCP_Close_Connection>:
 * @retval    : none.
 * @brief     : This function closes TCP connection. All motorized systems is closed in respect.
 */

static void TCP_Close_Connection(struct tcp_pcb *pcb)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
      tcp_arg(pcb, NULL);
 80005b8:	2100      	movs	r1, #0
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f007 f9e6 	bl	800798c <tcp_arg>
      tcp_sent(pcb, NULL);
 80005c0:	2100      	movs	r1, #0
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f007 fa16 	bl	80079f4 <tcp_sent>
      tcp_recv(pcb, NULL);
 80005c8:	2100      	movs	r1, #0
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f007 f9f0 	bl	80079b0 <tcp_recv>
      tcp_close(pcb);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f006 f83d 	bl	8006650 <tcp_close>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <TCP_Recv>:
 * @retval     : Function error state returnig value.
 * @brief      : This function Recieves data via TCP/IP protocol and copies into global buffer.
 * */

static err_t TCP_Recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
 80005ec:	70fb      	strb	r3, [r7, #3]
	LWIP_UNUSED_ARG(arg);

	if ((err == ERR_OK) && (p != NULL))
 80005ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d114      	bne.n	8000620 <TCP_Recv+0x40>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d011      	beq.n	8000620 <TCP_Recv+0x40>
	{

		tcp_recved(pcb, p->tot_len);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	891b      	ldrh	r3, [r3, #8]
 8000600:	4619      	mov	r1, r3
 8000602:	68b8      	ldr	r0, [r7, #8]
 8000604:	f006 fae8 	bl	8006bd8 <tcp_recved>
		memcpy(tcp_rx_buf, (char*)p->payload, p->tot_len);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6859      	ldr	r1, [r3, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	891b      	ldrh	r3, [r3, #8]
 8000610:	461a      	mov	r2, r3
 8000612:	480c      	ldr	r0, [pc, #48]	; (8000644 <TCP_Recv+0x64>)
 8000614:	f00d fffd 	bl	800e612 <memcpy>
		pbuf_free(p);
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f005 fb83 	bl	8005d24 <pbuf_free>
 800061e:	e002      	b.n	8000626 <TCP_Recv+0x46>

	}
	else
	{
		pbuf_free(p);
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f005 fb7f 	bl	8005d24 <pbuf_free>
	}

	if ((err == ERR_OK) && (p == NULL))
 8000626:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d105      	bne.n	800063a <TCP_Recv+0x5a>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d102      	bne.n	800063a <TCP_Recv+0x5a>
	{
		TCP_Close_Connection(pcb);
 8000634:	68b8      	ldr	r0, [r7, #8]
 8000636:	f7ff ffbb 	bl	80005b0 <TCP_Close_Connection>
	}

	return ERR_OK;
 800063a:	2300      	movs	r3, #0
}
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000214 	.word	0x20000214

08000648 <TCP_Accept>:
 * @retval     : Function error state returnig value.
 * @brief      : This function accepts requests from TCP clients.
 */

static err_t TCP_Accept(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	4613      	mov	r3, r2
 8000654:	71fb      	strb	r3, [r7, #7]
      LWIP_UNUSED_ARG(arg);
      LWIP_UNUSED_ARG(err);

      tcp_setprio(pcb, TCP_PRIO_NORMAL);
 8000656:	2140      	movs	r1, #64	; 0x40
 8000658:	68b8      	ldr	r0, [r7, #8]
 800065a:	f006 ff9d 	bl	8007598 <tcp_setprio>
      tcp_recv(pcb, TCP_Recv);
 800065e:	4909      	ldr	r1, [pc, #36]	; (8000684 <TCP_Accept+0x3c>)
 8000660:	68b8      	ldr	r0, [r7, #8]
 8000662:	f007 f9a5 	bl	80079b0 <tcp_recv>
      tcp_err(pcb, NULL);
 8000666:	2100      	movs	r1, #0
 8000668:	68b8      	ldr	r0, [r7, #8]
 800066a:	f007 f9e5 	bl	8007a38 <tcp_err>
      tcp_poll(pcb, NULL, 4);
 800066e:	2204      	movs	r2, #4
 8000670:	2100      	movs	r1, #0
 8000672:	68b8      	ldr	r0, [r7, #8]
 8000674:	f007 fa1a 	bl	8007aac <tcp_poll>

      return ERR_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	080005e1 	.word	0x080005e1

08000688 <TCP_Server_Runtime_Task>:
 * @brief      : This function manages run-time data manipulation.
 * @NOTE       : It must be called in super loop.
 */

void TCP_Server_Runtime_Task()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

	static struct tcp_pcb *tcp_controller;
	static const uint16_t port_number[CLIENT_NUM] = CLIENT_PORTS;

	tcp_controller = tcp_new();
 800068c:	f007 f976 	bl	800797c <tcp_new>
 8000690:	4602      	mov	r2, r0
 8000692:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <TCP_Server_Runtime_Task+0x7c>)
 8000694:	601a      	str	r2, [r3, #0]

	if( tcp_bind(tcp_controller, IP_ADDR_ANY, port_number[tracker]) == ERR_OK )
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <TCP_Server_Runtime_Task+0x7c>)
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <TCP_Server_Runtime_Task+0x80>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a1b      	ldr	r2, [pc, #108]	; (800070c <TCP_Server_Runtime_Task+0x84>)
 80006a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a4:	461a      	mov	r2, r3
 80006a6:	491a      	ldr	r1, [pc, #104]	; (8000710 <TCP_Server_Runtime_Task+0x88>)
 80006a8:	f006 f8c8 	bl	800683c <tcp_bind>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d114      	bne.n	80006dc <TCP_Server_Runtime_Task+0x54>
	{
		tcp_controller = tcp_listen(tcp_controller);
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <TCP_Server_Runtime_Task+0x7c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	21ff      	movs	r1, #255	; 0xff
 80006b8:	4618      	mov	r0, r3
 80006ba:	f006 f977 	bl	80069ac <tcp_listen_with_backlog>
 80006be:	4602      	mov	r2, r0
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <TCP_Server_Runtime_Task+0x7c>)
 80006c2:	601a      	str	r2, [r3, #0]
		tcp_accept(tcp_controller, TCP_Accept);
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <TCP_Server_Runtime_Task+0x7c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4912      	ldr	r1, [pc, #72]	; (8000714 <TCP_Server_Runtime_Task+0x8c>)
 80006ca:	4618      	mov	r0, r3
 80006cc:	f007 f9d6 	bl	8007a7c <tcp_accept>
		tracker++;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <TCP_Server_Runtime_Task+0x80>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a0c      	ldr	r2, [pc, #48]	; (8000708 <TCP_Server_Runtime_Task+0x80>)
 80006d8:	6013      	str	r3, [r2, #0]
 80006da:	e00a      	b.n	80006f2 <TCP_Server_Runtime_Task+0x6a>
	}
	else
	{
		memp_free(MEMP_TCP_PCB, tcp_controller);
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <TCP_Server_Runtime_Task+0x7c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	2001      	movs	r0, #1
 80006e4:	f004 fd10 	bl	8005108 <memp_free>
		tracker++;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <TCP_Server_Runtime_Task+0x80>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a06      	ldr	r2, [pc, #24]	; (8000708 <TCP_Server_Runtime_Task+0x80>)
 80006f0:	6013      	str	r3, [r2, #0]
	}

	if( tracker >= CLIENT_NUM )
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <TCP_Server_Runtime_Task+0x80>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <TCP_Server_Runtime_Task+0x78>
		tracker = 0;
 80006fa:	4b03      	ldr	r3, [pc, #12]	; (8000708 <TCP_Server_Runtime_Task+0x80>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000094 	.word	0x20000094
 8000708:	20000224 	.word	0x20000224
 800070c:	08011e70 	.word	0x08011e70
 8000710:	08011f5c 	.word	0x08011f5c
 8000714:	08000649 	.word	0x08000649

08000718 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b090      	sub	sp, #64	; 0x40
 800071c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800072e:	4b58      	ldr	r3, [pc, #352]	; (8000890 <MX_GPIO_Init+0x178>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a57      	ldr	r2, [pc, #348]	; (8000890 <MX_GPIO_Init+0x178>)
 8000734:	f043 0310 	orr.w	r3, r3, #16
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b55      	ldr	r3, [pc, #340]	; (8000890 <MX_GPIO_Init+0x178>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0310 	and.w	r3, r3, #16
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
 8000744:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000746:	4b52      	ldr	r3, [pc, #328]	; (8000890 <MX_GPIO_Init+0x178>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a51      	ldr	r2, [pc, #324]	; (8000890 <MX_GPIO_Init+0x178>)
 800074c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b4f      	ldr	r3, [pc, #316]	; (8000890 <MX_GPIO_Init+0x178>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
 800075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b4c      	ldr	r3, [pc, #304]	; (8000890 <MX_GPIO_Init+0x178>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a4b      	ldr	r2, [pc, #300]	; (8000890 <MX_GPIO_Init+0x178>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b49      	ldr	r3, [pc, #292]	; (8000890 <MX_GPIO_Init+0x178>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	623b      	str	r3, [r7, #32]
 8000774:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000776:	4b46      	ldr	r3, [pc, #280]	; (8000890 <MX_GPIO_Init+0x178>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a45      	ldr	r2, [pc, #276]	; (8000890 <MX_GPIO_Init+0x178>)
 800077c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b43      	ldr	r3, [pc, #268]	; (8000890 <MX_GPIO_Init+0x178>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800078a:	61fb      	str	r3, [r7, #28]
 800078c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	4b40      	ldr	r3, [pc, #256]	; (8000890 <MX_GPIO_Init+0x178>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a3f      	ldr	r2, [pc, #252]	; (8000890 <MX_GPIO_Init+0x178>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b3d      	ldr	r3, [pc, #244]	; (8000890 <MX_GPIO_Init+0x178>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80007a6:	4b3a      	ldr	r3, [pc, #232]	; (8000890 <MX_GPIO_Init+0x178>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a39      	ldr	r2, [pc, #228]	; (8000890 <MX_GPIO_Init+0x178>)
 80007ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b37      	ldr	r3, [pc, #220]	; (8000890 <MX_GPIO_Init+0x178>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b34      	ldr	r3, [pc, #208]	; (8000890 <MX_GPIO_Init+0x178>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a33      	ldr	r2, [pc, #204]	; (8000890 <MX_GPIO_Init+0x178>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b31      	ldr	r3, [pc, #196]	; (8000890 <MX_GPIO_Init+0x178>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007d6:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <MX_GPIO_Init+0x178>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a2d      	ldr	r2, [pc, #180]	; (8000890 <MX_GPIO_Init+0x178>)
 80007dc:	f043 0320 	orr.w	r3, r3, #32
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b2b      	ldr	r3, [pc, #172]	; (8000890 <MX_GPIO_Init+0x178>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0320 	and.w	r3, r3, #32
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <MX_GPIO_Init+0x178>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a27      	ldr	r2, [pc, #156]	; (8000890 <MX_GPIO_Init+0x178>)
 80007f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b25      	ldr	r3, [pc, #148]	; (8000890 <MX_GPIO_Init+0x178>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_GPIO_Init+0x178>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a21      	ldr	r2, [pc, #132]	; (8000890 <MX_GPIO_Init+0x178>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_GPIO_Init+0x178>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2108      	movs	r1, #8
 8000822:	481c      	ldr	r0, [pc, #112]	; (8000894 <MX_GPIO_Init+0x17c>)
 8000824:	f001 ff7a 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	f241 0102 	movw	r1, #4098	; 0x1002
 800082e:	481a      	ldr	r0, [pc, #104]	; (8000898 <MX_GPIO_Init+0x180>)
 8000830:	f001 ff74 	bl	800271c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 8000834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083a:	2300      	movs	r3, #0
 800083c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000846:	4619      	mov	r1, r3
 8000848:	4814      	ldr	r0, [pc, #80]	; (800089c <MX_GPIO_Init+0x184>)
 800084a:	f001 fdbd 	bl	80023c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800084e:	2308      	movs	r3, #8
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800085a:	2303      	movs	r3, #3
 800085c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800085e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000862:	4619      	mov	r1, r3
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <MX_GPIO_Init+0x17c>)
 8000866:	f001 fdaf 	bl	80023c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 800086a:	f241 0302 	movw	r3, #4098	; 0x1002
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800087c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000880:	4619      	mov	r1, r3
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_GPIO_Init+0x180>)
 8000884:	f001 fda0 	bl	80023c8 <HAL_GPIO_Init>

}
 8000888:	bf00      	nop
 800088a:	3740      	adds	r7, #64	; 0x40
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40022800 	.word	0x40022800
 8000898:	40022000 	.word	0x40022000
 800089c:	40020800 	.word	0x40020800

080008a0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a8:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <SCB_EnableICache+0x3c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80008b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008b8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <SCB_EnableICache+0x3c>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <SCB_EnableICache+0x3c>)
 80008c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <SCB_EnableDCache+0x7c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008ee:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <SCB_EnableDCache+0x7c>)
 80008f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008f8:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	0b5b      	lsrs	r3, r3, #13
 80008fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000902:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	08db      	lsrs	r3, r3, #3
 8000908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800090c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	015a      	lsls	r2, r3, #5
 8000912:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000916:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800091c:	490f      	ldr	r1, [pc, #60]	; (800095c <SCB_EnableDCache+0x7c>)
 800091e:	4313      	orrs	r3, r2
 8000920:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	1e5a      	subs	r2, r3, #1
 8000928:	60ba      	str	r2, [r7, #8]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1ef      	bne.n	800090e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	1e5a      	subs	r2, r3, #1
 8000932:	60fa      	str	r2, [r7, #12]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1e5      	bne.n	8000904 <SCB_EnableDCache+0x24>
 8000938:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <SCB_EnableDCache+0x7c>)
 800093e:	695b      	ldr	r3, [r3, #20]
 8000940:	4a06      	ldr	r2, [pc, #24]	; (800095c <SCB_EnableDCache+0x7c>)
 8000942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000946:	6153      	str	r3, [r2, #20]
 8000948:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800094c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000964:	f7ff ff9c 	bl	80008a0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000968:	f7ff ffba 	bl	80008e0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096c:	f000 fa6f 	bl	8000e4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000970:	f000 f80a 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000974:	f7ff fed0 	bl	8000718 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000978:	f003 fa68 	bl	8003e4c <MX_LWIP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 800097c:	f003 fb98 	bl	80040b0 <MX_LWIP_Process>
	  TCP_Server_Runtime_Task();
 8000980:	f7ff fe82 	bl	8000688 <TCP_Server_Runtime_Task>
	  MX_LWIP_Process();
 8000984:	e7fa      	b.n	800097c <main+0x1c>
	...

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0b4      	sub	sp, #208	; 0xd0
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000992:	2230      	movs	r2, #48	; 0x30
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f00d fe46 	bl	800e628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	2284      	movs	r2, #132	; 0x84
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f00d fe37 	bl	800e628 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b40      	ldr	r3, [pc, #256]	; (8000abc <SystemClock_Config+0x134>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a3f      	ldr	r2, [pc, #252]	; (8000abc <SystemClock_Config+0x134>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b3d      	ldr	r3, [pc, #244]	; (8000abc <SystemClock_Config+0x134>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d2:	4b3b      	ldr	r3, [pc, #236]	; (8000ac0 <SystemClock_Config+0x138>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a3a      	ldr	r2, [pc, #232]	; (8000ac0 <SystemClock_Config+0x138>)
 80009d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009dc:	6013      	str	r3, [r2, #0]
 80009de:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <SystemClock_Config+0x138>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ea:	2301      	movs	r3, #1
 80009ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f8:	2302      	movs	r3, #2
 80009fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000a06:	230f      	movs	r3, #15
 8000a08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000a0c:	23f0      	movs	r3, #240	; 0xf0
 8000a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a18:	2309      	movs	r3, #9
 8000a1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fefe 	bl	8002824 <HAL_RCC_OscConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a2e:	f000 f85d 	bl	8000aec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a32:	f001 fea7 	bl	8002784 <HAL_PWREx_EnableOverDrive>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000a3c:	f000 f856 	bl	8000aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	230f      	movs	r3, #15
 8000a42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a46:	2302      	movs	r3, #2
 8000a48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a62:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000a66:	2106      	movs	r1, #6
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f002 f97f 	bl	8002d6c <HAL_RCC_ClockConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000a74:	f000 f83a 	bl	8000aec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3;
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <SystemClock_Config+0x13c>)
 8000a7a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 114;
 8000a7c:	2372      	movs	r3, #114	; 0x72
 8000a7e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000a80:	2305      	movs	r3, #5
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000a84:	2302      	movs	r3, #2
 8000a86:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 fb80 	bl	80031a4 <HAL_RCCEx_PeriphCLKConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000aaa:	f000 f81f 	bl	8000aec <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000aae:	f002 fa49 	bl	8002f44 <HAL_RCC_EnableCSS>
}
 8000ab2:	bf00      	nop
 8000ab4:	37d0      	adds	r7, #208	; 0xd0
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000
 8000ac4:	00010008 	.word	0x00010008

08000ac8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d101      	bne.n	8000ade <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ada:	f000 f9c5 	bl	8000e68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010000 	.word	0x40010000

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <Error_Handler+0x6>

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <HAL_MspInit+0x44>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <HAL_MspInit+0x44>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <HAL_MspInit+0x44>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_MspInit+0x44>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_MspInit+0x44>)
 8000b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_MspInit+0x44>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	; 0x30
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	2019      	movs	r0, #25
 8000b52:	f000 fa83 	bl	800105c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b56:	2019      	movs	r0, #25
 8000b58:	f000 fa9c 	bl	8001094 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <HAL_InitTick+0xa0>)
 8000b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b60:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <HAL_InitTick+0xa0>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	6453      	str	r3, [r2, #68]	; 0x44
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_InitTick+0xa0>)
 8000b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0210 	add.w	r2, r7, #16
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 fac2 	bl	8003108 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b84:	f002 faac 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <HAL_InitTick+0xa4>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	0c9b      	lsrs	r3, r3, #18
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_InitTick+0xa8>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <HAL_InitTick+0xac>)
 8000ba0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_InitTick+0xa8>)
 8000ba4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_InitTick+0xa8>)
 8000bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bae:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_InitTick+0xa8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_InitTick+0xa8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bbc:	4809      	ldr	r0, [pc, #36]	; (8000be4 <HAL_InitTick+0xa8>)
 8000bbe:	f002 fedf 	bl	8003980 <HAL_TIM_Base_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d104      	bne.n	8000bd2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <HAL_InitTick+0xa8>)
 8000bca:	f002 ff0f 	bl	80039ec <HAL_TIM_Base_Start_IT>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	e000      	b.n	8000bd4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3730      	adds	r7, #48	; 0x30
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	431bde83 	.word	0x431bde83
 8000be4:	20000274 	.word	0x20000274
 8000be8:	40010000 	.word	0x40010000

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000bf0:	f002 fabc 	bl	800316c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler+0x8>

08000bf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler+0x4>

08000c02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <BusFault_Handler+0x4>

08000c08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <UsageFault_Handler+0x4>

08000c0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c4e:	f002 fef7 	bl	8003a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000274 	.word	0x20000274

08000c5c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <ETH_IRQHandler+0x10>)
 8000c62:	f000 fe05 	bl	8001870 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20001bd4 	.word	0x20001bd4

08000c70 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <I2C3_EV_IRQHandler+0x10>)
 8000c76:	f001 fd6a 	bl	800274e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000228 	.word	0x20000228

08000c84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e00a      	b.n	8000cac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c96:	f3af 8000 	nop.w
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	b2ca      	uxtb	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf0      	blt.n	8000c96 <_read+0x12>
	}

return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e009      	b.n	8000ce4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbf1      	blt.n	8000cd0 <_write+0x12>
	}
	return len;
 8000cec:	687b      	ldr	r3, [r7, #4]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_close>:

int _close(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	return -1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_isatty>:

int _isatty(int file)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	return 1;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d205      	bcs.n	8000d9c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d90:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <_sbrk+0x6c>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	371c      	adds	r7, #28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	20050000 	.word	0x20050000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	20000098 	.word	0x20000098
 8000dc8:	20006950 	.word	0x20006950
 8000dcc:	2000694c 	.word	0x2000694c

08000dd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <SystemInit+0x28>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <SystemInit+0x28>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SystemInit+0x28>)
 8000de6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dea:	609a      	str	r2, [r3, #8]
#endif
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e02:	e003      	b.n	8000e0c <LoopCopyDataInit>

08000e04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e0a:	3104      	adds	r1, #4

08000e0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e0c:	480b      	ldr	r0, [pc, #44]	; (8000e3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e14:	d3f6      	bcc.n	8000e04 <CopyDataInit>
  ldr  r2, =_sbss
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e18:	e002      	b.n	8000e20 <LoopFillZerobss>

08000e1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e1c:	f842 3b04 	str.w	r3, [r2], #4

08000e20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e24:	d3f9      	bcc.n	8000e1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e26:	f7ff ffd3 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f00d fbbf 	bl	800e5ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fd97 	bl	8000960 <main>
  bx  lr    
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e34:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000e38:	08012018 	.word	0x08012018
  ldr  r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e40:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000e44:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000e48:	20006950 	.word	0x20006950

08000e4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC_IRQHandler>

08000e4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e52:	2003      	movs	r0, #3
 8000e54:	f000 f8f7 	bl	8001046 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e58:	2000      	movs	r0, #0
 8000e5a:	f7ff fe6f 	bl	8000b3c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e5e:	f7ff fe49 	bl	8000af4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	200002b4 	.word	0x200002b4

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	200002b4 	.word	0x200002b4

08000ea8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb0:	f7ff ffee 	bl	8000e90 <HAL_GetTick>
 8000eb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec0:	d005      	beq.n	8000ece <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_Delay+0x40>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4413      	add	r3, r2
 8000ecc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ece:	bf00      	nop
 8000ed0:	f7ff ffde 	bl	8000e90 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d8f7      	bhi.n	8000ed0 <HAL_Delay+0x28>
  {
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000008 	.word	0x20000008

08000eec <__NVIC_SetPriorityGrouping>:
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x40>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	05fa0000 	.word	0x05fa0000

08000f34 <__NVIC_GetPriorityGrouping>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff4c 	bl	8000eec <__NVIC_SetPriorityGrouping>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800106e:	f7ff ff61 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 8001072:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	68b9      	ldr	r1, [r7, #8]
 8001078:	6978      	ldr	r0, [r7, #20]
 800107a:	f7ff ffb1 	bl	8000fe0 <NVIC_EncodePriority>
 800107e:	4602      	mov	r2, r0
 8001080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001084:	4611      	mov	r1, r2
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff80 	bl	8000f8c <__NVIC_SetPriority>
}
 800108c:	bf00      	nop
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff54 	bl	8000f50 <__NVIC_EnableIRQ>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80010c0:	4ba9      	ldr	r3, [pc, #676]	; (8001368 <HAL_ETH_Init+0x2b8>)
 80010c2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e183      	b.n	80013de <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d106      	bne.n	80010f0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f002 ffec 	bl	80040c8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	4b9e      	ldr	r3, [pc, #632]	; (800136c <HAL_ETH_Init+0x2bc>)
 80010f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f4:	4a9d      	ldr	r2, [pc, #628]	; (800136c <HAL_ETH_Init+0x2bc>)
 80010f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fa:	6453      	str	r3, [r2, #68]	; 0x44
 80010fc:	4b9b      	ldr	r3, [pc, #620]	; (800136c <HAL_ETH_Init+0x2bc>)
 80010fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001108:	4b99      	ldr	r3, [pc, #612]	; (8001370 <HAL_ETH_Init+0x2c0>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a98      	ldr	r2, [pc, #608]	; (8001370 <HAL_ETH_Init+0x2c0>)
 800110e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001112:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001114:	4b96      	ldr	r3, [pc, #600]	; (8001370 <HAL_ETH_Init+0x2c0>)
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4994      	ldr	r1, [pc, #592]	; (8001370 <HAL_ETH_Init+0x2c0>)
 800111e:	4313      	orrs	r3, r2
 8001120:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 0201 	orr.w	r2, r2, #1
 8001134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001138:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800113a:	f7ff fea9 	bl	8000e90 <HAL_GetTick>
 800113e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001140:	e011      	b.n	8001166 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001142:	f7ff fea5 	bl	8000e90 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001150:	d909      	bls.n	8001166 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2203      	movs	r2, #3
 8001156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e13b      	b.n	80013de <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e4      	bne.n	8001142 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f023 031c 	bic.w	r3, r3, #28
 8001186:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001188:	f001 ff9e 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 800118c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	4a78      	ldr	r2, [pc, #480]	; (8001374 <HAL_ETH_Init+0x2c4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d908      	bls.n	80011a8 <HAL_ETH_Init+0xf8>
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	4a77      	ldr	r2, [pc, #476]	; (8001378 <HAL_ETH_Init+0x2c8>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d804      	bhi.n	80011a8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e027      	b.n	80011f8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	4a73      	ldr	r2, [pc, #460]	; (8001378 <HAL_ETH_Init+0x2c8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d908      	bls.n	80011c2 <HAL_ETH_Init+0x112>
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	4a72      	ldr	r2, [pc, #456]	; (800137c <HAL_ETH_Init+0x2cc>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d804      	bhi.n	80011c2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f043 030c 	orr.w	r3, r3, #12
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	e01a      	b.n	80011f8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4a6d      	ldr	r2, [pc, #436]	; (800137c <HAL_ETH_Init+0x2cc>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d903      	bls.n	80011d2 <HAL_ETH_Init+0x122>
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	4a6c      	ldr	r2, [pc, #432]	; (8001380 <HAL_ETH_Init+0x2d0>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d911      	bls.n	80011f6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4a6a      	ldr	r2, [pc, #424]	; (8001380 <HAL_ETH_Init+0x2d0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d908      	bls.n	80011ec <HAL_ETH_Init+0x13c>
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	4a69      	ldr	r2, [pc, #420]	; (8001384 <HAL_ETH_Init+0x2d4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d804      	bhi.n	80011ec <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	e005      	b.n	80011f8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f043 0310 	orr.w	r3, r3, #16
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	e000      	b.n	80011f8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80011f6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001200:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001204:	2100      	movs	r1, #0
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fc1f 	bl	8001a4a <HAL_ETH_WritePHYRegister>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001216:	6939      	ldr	r1, [r7, #16]
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 fdd5 	bl	8001dc8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e0d9      	b.n	80013de <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800122a:	20ff      	movs	r0, #255	; 0xff
 800122c:	f7ff fe3c 	bl	8000ea8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 80a7 	beq.w	8001388 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800123a:	f7ff fe29 	bl	8000e90 <HAL_GetTick>
 800123e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	461a      	mov	r2, r3
 8001246:	2101      	movs	r1, #1
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fb96 	bl	800197a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800124e:	f7ff fe1f 	bl	8000e90 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	f241 3288 	movw	r2, #5000	; 0x1388
 800125c:	4293      	cmp	r3, r2
 800125e:	d90f      	bls.n	8001280 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001264:	6939      	ldr	r1, [r7, #16]
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 fdae 	bl	8001dc8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2201      	movs	r2, #1
 8001270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e0ae      	b.n	80013de <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f003 0304 	and.w	r3, r3, #4
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0da      	beq.n	8001240 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800128a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800128e:	2100      	movs	r1, #0
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 fbda 	bl	8001a4a <HAL_ETH_WritePHYRegister>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00b      	beq.n	80012b4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012a0:	6939      	ldr	r1, [r7, #16]
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 fd90 	bl	8001dc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2201      	movs	r2, #1
 80012ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012b0:	2301      	movs	r3, #1
 80012b2:	e094      	b.n	80013de <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80012b4:	f7ff fdec 	bl	8000e90 <HAL_GetTick>
 80012b8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	461a      	mov	r2, r3
 80012c0:	2101      	movs	r1, #1
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 fb59 	bl	800197a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80012c8:	f7ff fde2 	bl	8000e90 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d90f      	bls.n	80012fa <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80012de:	6939      	ldr	r1, [r7, #16]
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 fd71 	bl	8001dc8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e071      	b.n	80013de <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0da      	beq.n	80012ba <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	461a      	mov	r2, r3
 800130a:	211f      	movs	r1, #31
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fb34 	bl	800197a <HAL_ETH_ReadPHYRegister>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00b      	beq.n	8001330 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800131c:	6939      	ldr	r1, [r7, #16]
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 fd52 	bl	8001dc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800132c:	2301      	movs	r3, #1
 800132e:	e056      	b.n	80013de <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	2b00      	cmp	r3, #0
 8001338:	d004      	beq.n	8001344 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	e002      	b.n	800134a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	e037      	b.n	80013cc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	e032      	b.n	80013cc <HAL_ETH_Init+0x31c>
 8001366:	bf00      	nop
 8001368:	03938700 	.word	0x03938700
 800136c:	40023800 	.word	0x40023800
 8001370:	40013800 	.word	0x40013800
 8001374:	01312cff 	.word	0x01312cff
 8001378:	02160ebf 	.word	0x02160ebf
 800137c:	039386ff 	.word	0x039386ff
 8001380:	05f5e0ff 	.word	0x05f5e0ff
 8001384:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	08db      	lsrs	r3, r3, #3
 800138e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	085b      	lsrs	r3, r3, #1
 8001396:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001398:	4313      	orrs	r3, r2
 800139a:	b29b      	uxth	r3, r3
 800139c:	461a      	mov	r2, r3
 800139e:	2100      	movs	r1, #0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 fb52 	bl	8001a4a <HAL_ETH_WritePHYRegister>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d00b      	beq.n	80013c4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013b0:	6939      	ldr	r1, [r7, #16]
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 fd08 	bl	8001dc8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e00c      	b.n	80013de <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80013c4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80013c8:	f7ff fd6e 	bl	8000ea8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80013cc:	6939      	ldr	r1, [r7, #16]
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 fcfa 	bl	8001dc8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop

080013e8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001400:	2b01      	cmp	r3, #1
 8001402:	d101      	bne.n	8001408 <HAL_ETH_DMATxDescListInit+0x20>
 8001404:	2302      	movs	r3, #2
 8001406:	e052      	b.n	80014ae <HAL_ETH_DMATxDescListInit+0xc6>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2202      	movs	r2, #2
 8001414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	e030      	b.n	8001486 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	015b      	lsls	r3, r3, #5
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	4413      	add	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001434:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800143c:	fb02 f303 	mul.w	r3, r2, r3
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	461a      	mov	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d105      	bne.n	800145e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	3b01      	subs	r3, #1
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	429a      	cmp	r2, r3
 8001466:	d208      	bcs.n	800147a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3301      	adds	r3, #1
 800146c:	015b      	lsls	r3, r3, #5
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	4413      	add	r3, r2
 8001472:	461a      	mov	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	e002      	b.n	8001480 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3301      	adds	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d3ca      	bcc.n	8001424 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f241 0310 	movw	r3, #4112	; 0x1010
 8001498:	440b      	add	r3, r1
 800149a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	371c      	adds	r7, #28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b087      	sub	sp, #28
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <HAL_ETH_DMARxDescListInit+0x20>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e056      	b.n	8001588 <HAL_ETH_DMARxDescListInit+0xce>
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2202      	movs	r2, #2
 80014e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e034      	b.n	8001560 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	015b      	lsls	r3, r3, #5
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	4413      	add	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001506:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800150e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	461a      	mov	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d105      	bne.n	8001538 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	3b01      	subs	r3, #1
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	429a      	cmp	r2, r3
 8001540:	d208      	bcs.n	8001554 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	015b      	lsls	r3, r3, #5
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	4413      	add	r3, r2
 800154c:	461a      	mov	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	e002      	b.n	800155a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	3301      	adds	r3, #1
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d3c6      	bcc.n	80014f6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6819      	ldr	r1, [r3, #0]
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	f241 030c 	movw	r3, #4108	; 0x100c
 8001572:	440b      	add	r3, r1
 8001574:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	371c      	adds	r7, #28
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d101      	bne.n	80015b8 <HAL_ETH_TransmitFrame+0x24>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e0cd      	b.n	8001754 <HAL_ETH_TransmitFrame+0x1c0>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2202      	movs	r2, #2
 80015c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d109      	bne.n	80015e2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80015de:	2301      	movs	r3, #1
 80015e0:	e0b8      	b.n	8001754 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	da09      	bge.n	8001600 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2212      	movs	r2, #18
 80015f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0a9      	b.n	8001754 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001606:	4293      	cmp	r3, r2
 8001608:	d915      	bls.n	8001636 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	4a54      	ldr	r2, [pc, #336]	; (8001760 <HAL_ETH_TransmitFrame+0x1cc>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0a9b      	lsrs	r3, r3, #10
 8001614:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	4b51      	ldr	r3, [pc, #324]	; (8001760 <HAL_ETH_TransmitFrame+0x1cc>)
 800161a:	fba3 1302 	umull	r1, r3, r3, r2
 800161e:	0a9b      	lsrs	r3, r3, #10
 8001620:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001624:	fb01 f303 	mul.w	r3, r1, r3
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d005      	beq.n	800163a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3301      	adds	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e001      	b.n	800163a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001636:	2301      	movs	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d11c      	bne.n	800167a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800164e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800165a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800166a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	62da      	str	r2, [r3, #44]	; 0x2c
 8001678:	e04b      	b.n	8001712 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	e044      	b.n	800170a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800168e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d107      	bne.n	80016a6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016a4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016ae:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d116      	bne.n	80016e8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80016c8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	4a25      	ldr	r2, [pc, #148]	; (8001764 <HAL_ETH_TransmitFrame+0x1d0>)
 80016ce:	fb02 f203 	mul.w	r2, r2, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	4413      	add	r3, r2
 80016d6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80016da:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80016e6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016f6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	461a      	mov	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	3301      	adds	r3, #1
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	429a      	cmp	r2, r3
 8001710:	d3b6      	bcc.n	8001680 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	f241 0314 	movw	r3, #4116	; 0x1014
 800171a:	4413      	add	r3, r2
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0304 	and.w	r3, r3, #4
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00d      	beq.n	8001742 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	f241 0314 	movw	r3, #4116	; 0x1014
 800172e:	4413      	add	r3, r2
 8001730:	2204      	movs	r2, #4
 8001732:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	f241 0304 	movw	r3, #4100	; 0x1004
 800173c:	4413      	add	r3, r2
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	ac02b00b 	.word	0xac02b00b
 8001764:	fffffa0c 	.word	0xfffffa0c

08001768 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <HAL_ETH_GetReceivedFrame+0x1a>
 800177e:	2302      	movs	r3, #2
 8001780:	e070      	b.n	8001864 <HAL_ETH_GetReceivedFrame+0xfc>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2202      	movs	r2, #2
 800178e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db5a      	blt.n	8001852 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d030      	beq.n	800180c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d103      	bne.n	80017c4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017d8:	3b04      	subs	r3, #4
 80017da:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	461a      	mov	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	e02b      	b.n	8001864 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001816:	2b00      	cmp	r3, #0
 8001818:	d010      	beq.n	800183c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	629a      	str	r2, [r3, #40]	; 0x28
 800183a:	e00a      	b.n	8001852 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	461a      	mov	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001880:	4413      	add	r3, r2
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001888:	2b40      	cmp	r3, #64	; 0x40
 800188a:	d112      	bne.n	80018b2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f000 f860 	bl	8001952 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	f241 0314 	movw	r3, #4116	; 0x1014
 800189a:	4413      	add	r3, r2
 800189c:	2240      	movs	r2, #64	; 0x40
 800189e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018b0:	e01b      	b.n	80018ea <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	f241 0314 	movw	r3, #4116	; 0x1014
 80018ba:	4413      	add	r3, r2
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d111      	bne.n	80018ea <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 f839 	bl	800193e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	f241 0314 	movw	r3, #4116	; 0x1014
 80018d4:	4413      	add	r3, r2
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	f241 0314 	movw	r3, #4116	; 0x1014
 80018f2:	4413      	add	r3, r2
 80018f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018f8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	f241 0314 	movw	r3, #4116	; 0x1014
 8001902:	4413      	add	r3, r2
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800190a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800190e:	d112      	bne.n	8001936 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f828 	bl	8001966 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	f241 0314 	movw	r3, #4116	; 0x1014
 800191e:	4413      	add	r3, r2
 8001920:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001924:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	460b      	mov	r3, r1
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001996:	b2db      	uxtb	r3, r3
 8001998:	2b82      	cmp	r3, #130	; 0x82
 800199a:	d101      	bne.n	80019a0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800199c:	2302      	movs	r3, #2
 800199e:	e050      	b.n	8001a42 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2282      	movs	r2, #130	; 0x82
 80019a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f003 031c 	and.w	r3, r3, #28
 80019b6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8a1b      	ldrh	r3, [r3, #16]
 80019bc:	02db      	lsls	r3, r3, #11
 80019be:	b29b      	uxth	r3, r3
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80019c6:	897b      	ldrh	r3, [r7, #10]
 80019c8:	019b      	lsls	r3, r3, #6
 80019ca:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f023 0302 	bic.w	r3, r3, #2
 80019da:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019ec:	f7ff fa50 	bl	8000e90 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019f2:	e015      	b.n	8001a20 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80019f4:	f7ff fa4c 	bl	8000e90 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a02:	d309      	bcc.n	8001a18 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e014      	b.n	8001a42 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1e4      	bne.n	80019f4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	460b      	mov	r3, r1
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b42      	cmp	r3, #66	; 0x42
 8001a6a:	d101      	bne.n	8001a70 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e04e      	b.n	8001b0e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2242      	movs	r2, #66	; 0x42
 8001a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 031c 	and.w	r3, r3, #28
 8001a86:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	8a1b      	ldrh	r3, [r3, #16]
 8001a8c:	02db      	lsls	r3, r3, #11
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001a96:	897b      	ldrh	r3, [r7, #10]
 8001a98:	019b      	lsls	r3, r3, #6
 8001a9a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac6:	f7ff f9e3 	bl	8000e90 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001acc:	e015      	b.n	8001afa <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001ace:	f7ff f9df 	bl	8000e90 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001adc:	d309      	bcc.n	8001af2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e00d      	b.n	8001b0e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e4      	bne.n	8001ace <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_ETH_Start+0x16>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e01f      	b.n	8001b6c <HAL_ETH_Start+0x56>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2202      	movs	r2, #2
 8001b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 fb45 	bl	80021cc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fb7c 	bl	8002240 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fc13 	bl	8002374 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 fbb0 	bl	80022b4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 fbdd 	bl	8002314 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d101      	bne.n	8001b8a <HAL_ETH_Stop+0x16>
 8001b86:	2302      	movs	r3, #2
 8001b88:	e01f      	b.n	8001bca <HAL_ETH_Stop+0x56>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2202      	movs	r2, #2
 8001b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 fba2 	bl	80022e4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 fbcf 	bl	8002344 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fb67 	bl	800227a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fbe1 	bl	8002374 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 fb27 	bl	8002206 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_ETH_ConfigMAC+0x1c>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e0e4      	b.n	8001dba <HAL_ETH_ConfigMAC+0x1e6>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80b1 	beq.w	8001d6a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4b6c      	ldr	r3, [pc, #432]	; (8001dc4 <HAL_ETH_ConfigMAC+0x1f0>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001c20:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001c26:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001c2c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001c32:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001c38:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001c3e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001c44:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001c4a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001c50:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001c56:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001c5c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001c62:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f7ff f914 	bl	8000ea8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001c90:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001c96:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001c9c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001ca2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001ca8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001cae:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001cba:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001cbc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7ff f8ee 	bl	8000ea8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001cdc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ce6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001d04:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001d0a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001d10:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001d16:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001d1c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f7ff f8b7 	bl	8000ea8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f7ff f8a4 	bl	8000ea8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	61da      	str	r2, [r3, #28]
 8001d68:	e01e      	b.n	8001da8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001d78:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff f884 	bl	8000ea8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	ff20810f 	.word	0xff20810f

08001dc8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b0b0      	sub	sp, #192	; 0xc0
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001de4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001df6:	2300      	movs	r3, #0
 8001df8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d103      	bne.n	8001e16 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e12:	663b      	str	r3, [r7, #96]	; 0x60
 8001e14:	e001      	b.n	8001e1a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e1e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e24:	2300      	movs	r3, #0
 8001e26:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001e34:	2340      	movs	r3, #64	; 0x40
 8001e36:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001e9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ea0:	4bab      	ldr	r3, [pc, #684]	; (8002150 <ETH_MACDMAConfig+0x388>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001eac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001eb0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001eb4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001eba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001ebc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001ebe:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001ec2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001ec8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001ecc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001ece:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001ed0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001ed2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001ed4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001ed8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001edc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001ede:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ef0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7fe ffd3 	bl	8000ea8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f0a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f0c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f10:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f14:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001f16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f1a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001f20:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f26:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f2c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001f30:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001f38:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f3a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f7fe ffae 	bl	8000ea8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f54:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f5e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001f68:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001f74:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f78:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001f82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f86:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001f88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001f8c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001f8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001f92:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001f98:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001f9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001f9e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001fa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001fa4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001fa6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f7fe ff6f 	bl	8000ea8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fd2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001fd4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001fd8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f7fe ff5a 	bl	8000ea8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ffc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002006:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800200c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002010:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002022:	2304      	movs	r3, #4
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800202c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002032:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002036:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800203c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002042:	2300      	movs	r3, #0
 8002044:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002046:	2300      	movs	r3, #0
 8002048:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002052:	4413      	add	r3, r2
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800205a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800205e:	4b3d      	ldr	r3, [pc, #244]	; (8002154 <ETH_MACDMAConfig+0x38c>)
 8002060:	4013      	ands	r3, r2
 8002062:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002066:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002068:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800206a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800206c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800206e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002070:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002072:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002074:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002076:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002078:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800207a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800207c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800207e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002082:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002086:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002088:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	f241 0318 	movw	r3, #4120	; 0x1018
 800209a:	4413      	add	r3, r2
 800209c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	f241 0318 	movw	r3, #4120	; 0x1018
 80020aa:	4413      	add	r3, r2
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7fe fef8 	bl	8000ea8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	f241 0318 	movw	r3, #4120	; 0x1018
 80020c0:	4413      	add	r3, r2
 80020c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020cc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80020ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80020d0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80020d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80020d4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80020d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80020d8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80020da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020dc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80020de:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80020e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80020e2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020f0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002100:	2001      	movs	r0, #1
 8002102:	f7fe fed1 	bl	8000ea8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800210e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002112:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d10d      	bne.n	8002138 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	f241 031c 	movw	r3, #4124	; 0x101c
 8002124:	4413      	add	r3, r2
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6811      	ldr	r1, [r2, #0]
 800212c:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <ETH_MACDMAConfig+0x390>)
 800212e:	431a      	orrs	r2, r3
 8002130:	f241 031c 	movw	r3, #4124	; 0x101c
 8002134:	440b      	add	r3, r1
 8002136:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	461a      	mov	r2, r3
 800213e:	2100      	movs	r1, #0
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f80b 	bl	800215c <ETH_MACAddressConfig>
}
 8002146:	bf00      	nop
 8002148:	37c0      	adds	r7, #192	; 0xc0
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	ff20810f 	.word	0xff20810f
 8002154:	f8de3f23 	.word	0xf8de3f23
 8002158:	00010040 	.word	0x00010040

0800215c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3305      	adds	r3, #5
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	021b      	lsls	r3, r3, #8
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	3204      	adds	r2, #4
 8002174:	7812      	ldrb	r2, [r2, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <ETH_MACAddressConfig+0x68>)
 800217e:	4413      	add	r3, r2
 8002180:	461a      	mov	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3303      	adds	r3, #3
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	061a      	lsls	r2, r3, #24
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3302      	adds	r3, #2
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3301      	adds	r3, #1
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	4313      	orrs	r3, r2
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	7812      	ldrb	r2, [r2, #0]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <ETH_MACAddressConfig+0x6c>)
 80021ae:	4413      	add	r3, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	6013      	str	r3, [r2, #0]
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40028040 	.word	0x40028040
 80021c8:	40028044 	.word	0x40028044

080021cc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0208 	orr.w	r2, r2, #8
 80021e6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f0:	2001      	movs	r0, #1
 80021f2:	f7fe fe59 	bl	8000ea8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	601a      	str	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0208 	bic.w	r2, r2, #8
 8002220:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800222a:	2001      	movs	r0, #1
 800222c:	f7fe fe3c 	bl	8000ea8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	601a      	str	r2, [r3, #0]
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0204 	orr.w	r2, r2, #4
 800225a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002264:	2001      	movs	r0, #1
 8002266:	f7fe fe1f 	bl	8000ea8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	601a      	str	r2, [r3, #0]
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800227a:	b580      	push	{r7, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0204 	bic.w	r2, r2, #4
 8002294:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800229e:	2001      	movs	r0, #1
 80022a0:	f7fe fe02 	bl	8000ea8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	f241 0318 	movw	r3, #4120	; 0x1018
 80022c4:	4413      	add	r3, r2
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6811      	ldr	r1, [r2, #0]
 80022cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022d0:	f241 0318 	movw	r3, #4120	; 0x1018
 80022d4:	440b      	add	r3, r1
 80022d6:	601a      	str	r2, [r3, #0]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	f241 0318 	movw	r3, #4120	; 0x1018
 80022f4:	4413      	add	r3, r2
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6811      	ldr	r1, [r2, #0]
 80022fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002300:	f241 0318 	movw	r3, #4120	; 0x1018
 8002304:	440b      	add	r3, r1
 8002306:	601a      	str	r2, [r3, #0]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	f241 0318 	movw	r3, #4120	; 0x1018
 8002324:	4413      	add	r3, r2
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6811      	ldr	r1, [r2, #0]
 800232c:	f043 0202 	orr.w	r2, r3, #2
 8002330:	f241 0318 	movw	r3, #4120	; 0x1018
 8002334:	440b      	add	r3, r1
 8002336:	601a      	str	r2, [r3, #0]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	f241 0318 	movw	r3, #4120	; 0x1018
 8002354:	4413      	add	r3, r2
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6811      	ldr	r1, [r2, #0]
 800235c:	f023 0202 	bic.w	r2, r3, #2
 8002360:	f241 0318 	movw	r3, #4120	; 0x1018
 8002364:	440b      	add	r3, r1
 8002366:	601a      	str	r2, [r3, #0]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	f241 0318 	movw	r3, #4120	; 0x1018
 8002388:	4413      	add	r3, r2
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6811      	ldr	r1, [r2, #0]
 8002390:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002394:	f241 0318 	movw	r3, #4120	; 0x1018
 8002398:	440b      	add	r3, r1
 800239a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	f241 0318 	movw	r3, #4120	; 0x1018
 80023a4:	4413      	add	r3, r2
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023aa:	2001      	movs	r0, #1
 80023ac:	f7fe fd7c 	bl	8000ea8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6819      	ldr	r1, [r3, #0]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	f241 0318 	movw	r3, #4120	; 0x1018
 80023ba:	440b      	add	r3, r1
 80023bc:	601a      	str	r2, [r3, #0]
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80023da:	2300      	movs	r3, #0
 80023dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80023de:	2300      	movs	r3, #0
 80023e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	e175      	b.n	80026d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80023e8:	2201      	movs	r2, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	429a      	cmp	r2, r3
 8002402:	f040 8164 	bne.w	80026ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d00b      	beq.n	8002426 <HAL_GPIO_Init+0x5e>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d007      	beq.n	8002426 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800241a:	2b11      	cmp	r3, #17
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b12      	cmp	r3, #18
 8002424:	d130      	bne.n	8002488 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	2203      	movs	r2, #3
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800245c:	2201      	movs	r2, #1
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 0201 	and.w	r2, r3, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4313      	orrs	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x100>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	2b12      	cmp	r3, #18
 80024c6:	d123      	bne.n	8002510 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	08da      	lsrs	r2, r3, #3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3208      	adds	r2, #8
 80024d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	220f      	movs	r2, #15
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	08da      	lsrs	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3208      	adds	r2, #8
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0203 	and.w	r2, r3, #3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80be 	beq.w	80026ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002552:	4b65      	ldr	r3, [pc, #404]	; (80026e8 <HAL_GPIO_Init+0x320>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4a64      	ldr	r2, [pc, #400]	; (80026e8 <HAL_GPIO_Init+0x320>)
 8002558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	4b62      	ldr	r3, [pc, #392]	; (80026e8 <HAL_GPIO_Init+0x320>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800256a:	4a60      	ldr	r2, [pc, #384]	; (80026ec <HAL_GPIO_Init+0x324>)
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	3302      	adds	r3, #2
 8002572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	220f      	movs	r2, #15
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4013      	ands	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a57      	ldr	r2, [pc, #348]	; (80026f0 <HAL_GPIO_Init+0x328>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d037      	beq.n	8002606 <HAL_GPIO_Init+0x23e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a56      	ldr	r2, [pc, #344]	; (80026f4 <HAL_GPIO_Init+0x32c>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d031      	beq.n	8002602 <HAL_GPIO_Init+0x23a>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a55      	ldr	r2, [pc, #340]	; (80026f8 <HAL_GPIO_Init+0x330>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d02b      	beq.n	80025fe <HAL_GPIO_Init+0x236>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a54      	ldr	r2, [pc, #336]	; (80026fc <HAL_GPIO_Init+0x334>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d025      	beq.n	80025fa <HAL_GPIO_Init+0x232>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a53      	ldr	r2, [pc, #332]	; (8002700 <HAL_GPIO_Init+0x338>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d01f      	beq.n	80025f6 <HAL_GPIO_Init+0x22e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a52      	ldr	r2, [pc, #328]	; (8002704 <HAL_GPIO_Init+0x33c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d019      	beq.n	80025f2 <HAL_GPIO_Init+0x22a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a51      	ldr	r2, [pc, #324]	; (8002708 <HAL_GPIO_Init+0x340>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_GPIO_Init+0x226>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a50      	ldr	r2, [pc, #320]	; (800270c <HAL_GPIO_Init+0x344>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d00d      	beq.n	80025ea <HAL_GPIO_Init+0x222>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a4f      	ldr	r2, [pc, #316]	; (8002710 <HAL_GPIO_Init+0x348>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d007      	beq.n	80025e6 <HAL_GPIO_Init+0x21e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4e      	ldr	r2, [pc, #312]	; (8002714 <HAL_GPIO_Init+0x34c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d101      	bne.n	80025e2 <HAL_GPIO_Init+0x21a>
 80025de:	2309      	movs	r3, #9
 80025e0:	e012      	b.n	8002608 <HAL_GPIO_Init+0x240>
 80025e2:	230a      	movs	r3, #10
 80025e4:	e010      	b.n	8002608 <HAL_GPIO_Init+0x240>
 80025e6:	2308      	movs	r3, #8
 80025e8:	e00e      	b.n	8002608 <HAL_GPIO_Init+0x240>
 80025ea:	2307      	movs	r3, #7
 80025ec:	e00c      	b.n	8002608 <HAL_GPIO_Init+0x240>
 80025ee:	2306      	movs	r3, #6
 80025f0:	e00a      	b.n	8002608 <HAL_GPIO_Init+0x240>
 80025f2:	2305      	movs	r3, #5
 80025f4:	e008      	b.n	8002608 <HAL_GPIO_Init+0x240>
 80025f6:	2304      	movs	r3, #4
 80025f8:	e006      	b.n	8002608 <HAL_GPIO_Init+0x240>
 80025fa:	2303      	movs	r3, #3
 80025fc:	e004      	b.n	8002608 <HAL_GPIO_Init+0x240>
 80025fe:	2302      	movs	r3, #2
 8002600:	e002      	b.n	8002608 <HAL_GPIO_Init+0x240>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_GPIO_Init+0x240>
 8002606:	2300      	movs	r3, #0
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	f002 0203 	and.w	r2, r2, #3
 800260e:	0092      	lsls	r2, r2, #2
 8002610:	4093      	lsls	r3, r2
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002618:	4934      	ldr	r1, [pc, #208]	; (80026ec <HAL_GPIO_Init+0x324>)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	3302      	adds	r3, #2
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002626:	4b3c      	ldr	r3, [pc, #240]	; (8002718 <HAL_GPIO_Init+0x350>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800264a:	4a33      	ldr	r2, [pc, #204]	; (8002718 <HAL_GPIO_Init+0x350>)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002650:	4b31      	ldr	r3, [pc, #196]	; (8002718 <HAL_GPIO_Init+0x350>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002674:	4a28      	ldr	r2, [pc, #160]	; (8002718 <HAL_GPIO_Init+0x350>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267a:	4b27      	ldr	r3, [pc, #156]	; (8002718 <HAL_GPIO_Init+0x350>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <HAL_GPIO_Init+0x350>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a4:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <HAL_GPIO_Init+0x350>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c8:	4a13      	ldr	r2, [pc, #76]	; (8002718 <HAL_GPIO_Init+0x350>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3301      	adds	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	f67f ae86 	bls.w	80023e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80026dc:	bf00      	nop
 80026de:	3724      	adds	r7, #36	; 0x24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40013800 	.word	0x40013800
 80026f0:	40020000 	.word	0x40020000
 80026f4:	40020400 	.word	0x40020400
 80026f8:	40020800 	.word	0x40020800
 80026fc:	40020c00 	.word	0x40020c00
 8002700:	40021000 	.word	0x40021000
 8002704:	40021400 	.word	0x40021400
 8002708:	40021800 	.word	0x40021800
 800270c:	40021c00 	.word	0x40021c00
 8002710:	40022000 	.word	0x40022000
 8002714:	40022400 	.word	0x40022400
 8002718:	40013c00 	.word	0x40013c00

0800271c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
 8002728:	4613      	mov	r3, r2
 800272a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800272c:	787b      	ldrb	r3, [r7, #1]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002732:	887a      	ldrh	r2, [r7, #2]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002738:	e003      	b.n	8002742 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	041a      	lsls	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	619a      	str	r2, [r3, #24]
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	68f9      	ldr	r1, [r7, #12]
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
  }
}
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b23      	ldr	r3, [pc, #140]	; (800281c <HAL_PWREx_EnableOverDrive+0x98>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a22      	ldr	r2, [pc, #136]	; (800281c <HAL_PWREx_EnableOverDrive+0x98>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <HAL_PWREx_EnableOverDrive+0x98>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80027a6:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027b2:	f7fe fb6d 	bl	8000e90 <HAL_GetTick>
 80027b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027b8:	e009      	b.n	80027ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027ba:	f7fe fb69 	bl	8000e90 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027c8:	d901      	bls.n	80027ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e022      	b.n	8002814 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027da:	d1ee      	bne.n	80027ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0f      	ldr	r2, [pc, #60]	; (8002820 <HAL_PWREx_EnableOverDrive+0x9c>)
 80027e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027e8:	f7fe fb52 	bl	8000e90 <HAL_GetTick>
 80027ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027ee:	e009      	b.n	8002804 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027f0:	f7fe fb4e 	bl	8000e90 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027fe:	d901      	bls.n	8002804 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e007      	b.n	8002814 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002804:	4b06      	ldr	r3, [pc, #24]	; (8002820 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002810:	d1ee      	bne.n	80027f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	40007000 	.word	0x40007000

08002824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800282c:	2300      	movs	r3, #0
 800282e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e291      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 8087 	beq.w	8002956 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002848:	4b96      	ldr	r3, [pc, #600]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b04      	cmp	r3, #4
 8002852:	d00c      	beq.n	800286e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002854:	4b93      	ldr	r3, [pc, #588]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 030c 	and.w	r3, r3, #12
 800285c:	2b08      	cmp	r3, #8
 800285e:	d112      	bne.n	8002886 <HAL_RCC_OscConfig+0x62>
 8002860:	4b90      	ldr	r3, [pc, #576]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800286c:	d10b      	bne.n	8002886 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286e:	4b8d      	ldr	r3, [pc, #564]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d06c      	beq.n	8002954 <HAL_RCC_OscConfig+0x130>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d168      	bne.n	8002954 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e26b      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288e:	d106      	bne.n	800289e <HAL_RCC_OscConfig+0x7a>
 8002890:	4b84      	ldr	r3, [pc, #528]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a83      	ldr	r2, [pc, #524]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	e02e      	b.n	80028fc <HAL_RCC_OscConfig+0xd8>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x9c>
 80028a6:	4b7f      	ldr	r3, [pc, #508]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a7e      	ldr	r2, [pc, #504]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b7c      	ldr	r3, [pc, #496]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a7b      	ldr	r2, [pc, #492]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e01d      	b.n	80028fc <HAL_RCC_OscConfig+0xd8>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0xc0>
 80028ca:	4b76      	ldr	r3, [pc, #472]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a75      	ldr	r2, [pc, #468]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b73      	ldr	r3, [pc, #460]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a72      	ldr	r2, [pc, #456]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e00b      	b.n	80028fc <HAL_RCC_OscConfig+0xd8>
 80028e4:	4b6f      	ldr	r3, [pc, #444]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a6e      	ldr	r2, [pc, #440]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	4b6c      	ldr	r3, [pc, #432]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a6b      	ldr	r2, [pc, #428]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80028f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002904:	f7fe fac4 	bl	8000e90 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7fe fac0 	bl	8000e90 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e21f      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291e:	4b61      	ldr	r3, [pc, #388]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0xe8>
 800292a:	e014      	b.n	8002956 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fab0 	bl	8000e90 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002934:	f7fe faac 	bl	8000e90 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b64      	cmp	r3, #100	; 0x64
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e20b      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002946:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x110>
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d069      	beq.n	8002a36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002962:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296e:	4b4d      	ldr	r3, [pc, #308]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b08      	cmp	r3, #8
 8002978:	d11c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x190>
 800297a:	4b4a      	ldr	r3, [pc, #296]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d116      	bne.n	80029b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d005      	beq.n	800299e <HAL_RCC_OscConfig+0x17a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e1df      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	493d      	ldr	r1, [pc, #244]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029b2:	e040      	b.n	8002a36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d023      	beq.n	8002a04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029bc:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a38      	ldr	r2, [pc, #224]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c8:	f7fe fa62 	bl	8000e90 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d0:	f7fe fa5e 	bl	8000e90 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1bd      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ee:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4929      	ldr	r1, [pc, #164]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]
 8002a02:	e018      	b.n	8002a36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a04:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a26      	ldr	r2, [pc, #152]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fa3e 	bl	8000e90 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a18:	f7fe fa3a 	bl	8000e90 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e199      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0308 	and.w	r3, r3, #8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d038      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d019      	beq.n	8002a7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4e:	4a15      	ldr	r2, [pc, #84]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a56:	f7fe fa1b 	bl	8000e90 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5e:	f7fe fa17 	bl	8000e90 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e176      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x23a>
 8002a7c:	e01a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a82:	4a08      	ldr	r2, [pc, #32]	; (8002aa4 <HAL_RCC_OscConfig+0x280>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fa01 	bl	8000e90 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a92:	f7fe f9fd 	bl	8000e90 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d903      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e15c      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
 8002aa4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa8:	4b91      	ldr	r3, [pc, #580]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ee      	bne.n	8002a92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80a4 	beq.w	8002c0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac2:	4b8b      	ldr	r3, [pc, #556]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10d      	bne.n	8002aea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	4b88      	ldr	r3, [pc, #544]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	4a87      	ldr	r2, [pc, #540]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ada:	4b85      	ldr	r3, [pc, #532]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aea:	4b82      	ldr	r3, [pc, #520]	; (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d118      	bne.n	8002b28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002af6:	4b7f      	ldr	r3, [pc, #508]	; (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a7e      	ldr	r2, [pc, #504]	; (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b02:	f7fe f9c5 	bl	8000e90 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0a:	f7fe f9c1 	bl	8000e90 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b64      	cmp	r3, #100	; 0x64
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e120      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b1c:	4b75      	ldr	r3, [pc, #468]	; (8002cf4 <HAL_RCC_OscConfig+0x4d0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x31a>
 8002b30:	4b6f      	ldr	r3, [pc, #444]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	4a6e      	ldr	r2, [pc, #440]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3c:	e02d      	b.n	8002b9a <HAL_RCC_OscConfig+0x376>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x33c>
 8002b46:	4b6a      	ldr	r3, [pc, #424]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4a:	4a69      	ldr	r2, [pc, #420]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b4c:	f023 0301 	bic.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	; 0x70
 8002b52:	4b67      	ldr	r3, [pc, #412]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	4a66      	ldr	r2, [pc, #408]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b58:	f023 0304 	bic.w	r3, r3, #4
 8002b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5e:	e01c      	b.n	8002b9a <HAL_RCC_OscConfig+0x376>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b05      	cmp	r3, #5
 8002b66:	d10c      	bne.n	8002b82 <HAL_RCC_OscConfig+0x35e>
 8002b68:	4b61      	ldr	r3, [pc, #388]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a60      	ldr	r2, [pc, #384]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b6e:	f043 0304 	orr.w	r3, r3, #4
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	4b5e      	ldr	r3, [pc, #376]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a5d      	ldr	r2, [pc, #372]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	e00b      	b.n	8002b9a <HAL_RCC_OscConfig+0x376>
 8002b82:	4b5b      	ldr	r3, [pc, #364]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	4a5a      	ldr	r2, [pc, #360]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8e:	4b58      	ldr	r3, [pc, #352]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	4a57      	ldr	r2, [pc, #348]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002b94:	f023 0304 	bic.w	r3, r3, #4
 8002b98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d015      	beq.n	8002bce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7fe f975 	bl	8000e90 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe f971 	bl	8000e90 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e0ce      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc0:	4b4b      	ldr	r3, [pc, #300]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ee      	beq.n	8002baa <HAL_RCC_OscConfig+0x386>
 8002bcc:	e014      	b.n	8002bf8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bce:	f7fe f95f 	bl	8000e90 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fe f95b 	bl	8000e90 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e0b8      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bec:	4b40      	ldr	r3, [pc, #256]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ee      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d105      	bne.n	8002c0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfe:	4b3c      	ldr	r3, [pc, #240]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	4a3b      	ldr	r2, [pc, #236]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80a4 	beq.w	8002d5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c14:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d06b      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d149      	bne.n	8002cbc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c28:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a30      	ldr	r2, [pc, #192]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe f92c 	bl	8000e90 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe f928 	bl	8000e90 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e087      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c4e:	4b28      	ldr	r3, [pc, #160]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69da      	ldr	r2, [r3, #28]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	019b      	lsls	r3, r3, #6
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	3b01      	subs	r3, #1
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002c82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c86:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a18      	ldr	r2, [pc, #96]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fe f8fc 	bl	8000e90 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9c:	f7fe f8f8 	bl	8000e90 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e057      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0x478>
 8002cba:	e04f      	b.n	8002d5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbc:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe f8e2 	bl	8000e90 <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd0:	f7fe f8de 	bl	8000e90 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e03d      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4ac>
 8002cee:	e035      	b.n	8002d5c <HAL_RCC_OscConfig+0x538>
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_RCC_OscConfig+0x544>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d028      	beq.n	8002d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d121      	bne.n	8002d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d11a      	bne.n	8002d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d111      	bne.n	8002d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	3b01      	subs	r3, #1
 8002d42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d107      	bne.n	8002d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800

08002d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0d0      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d84:	4b6a      	ldr	r3, [pc, #424]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d910      	bls.n	8002db4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b67      	ldr	r3, [pc, #412]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 020f 	bic.w	r2, r3, #15
 8002d9a:	4965      	ldr	r1, [pc, #404]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b63      	ldr	r3, [pc, #396]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0b8      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d020      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dcc:	4b59      	ldr	r3, [pc, #356]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4a58      	ldr	r2, [pc, #352]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002de4:	4b53      	ldr	r3, [pc, #332]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4a52      	ldr	r2, [pc, #328]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df0:	4b50      	ldr	r3, [pc, #320]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	494d      	ldr	r1, [pc, #308]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d040      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	4b47      	ldr	r3, [pc, #284]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d115      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e07f      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2e:	4b41      	ldr	r3, [pc, #260]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e073      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e06b      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e4e:	4b39      	ldr	r3, [pc, #228]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f023 0203 	bic.w	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4936      	ldr	r1, [pc, #216]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e60:	f7fe f816 	bl	8000e90 <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	e00a      	b.n	8002e7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e68:	f7fe f812 	bl	8000e90 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e053      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 020c 	and.w	r2, r3, #12
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d1eb      	bne.n	8002e68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e90:	4b27      	ldr	r3, [pc, #156]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d210      	bcs.n	8002ec0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f023 020f 	bic.w	r2, r3, #15
 8002ea6:	4922      	ldr	r1, [pc, #136]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e032      	b.n	8002f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4916      	ldr	r1, [pc, #88]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eea:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	490e      	ldr	r1, [pc, #56]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002efe:	f000 f831 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8002f02:	4601      	mov	r1, r0
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <HAL_RCC_ClockConfig+0x1cc>)
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	fa21 f303 	lsr.w	r3, r1, r3
 8002f16:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <HAL_RCC_ClockConfig+0x1d0>)
 8002f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f1a:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <HAL_RCC_ClockConfig+0x1d4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fe0c 	bl	8000b3c <HAL_InitTick>

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023c00 	.word	0x40023c00
 8002f34:	40023800 	.word	0x40023800
 8002f38:	08011e74 	.word	0x08011e74
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	20000004 	.word	0x20000004

08002f44 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8002f48:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <HAL_RCC_EnableCSS+0x1c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <HAL_RCC_EnableCSS+0x1c>)
 8002f4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f52:	6013      	str	r3, [r2, #0]
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800

08002f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	2300      	movs	r3, #0
 8002f74:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f7a:	4b50      	ldr	r3, [pc, #320]	; (80030bc <HAL_RCC_GetSysClockFreq+0x158>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d007      	beq.n	8002f96 <HAL_RCC_GetSysClockFreq+0x32>
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d008      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x38>
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 808d 	bne.w	80030aa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f90:	4b4b      	ldr	r3, [pc, #300]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002f92:	60bb      	str	r3, [r7, #8]
      break;
 8002f94:	e08c      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f96:	4b4b      	ldr	r3, [pc, #300]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002f98:	60bb      	str	r3, [r7, #8]
      break;
 8002f9a:	e089      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f9c:	4b47      	ldr	r3, [pc, #284]	; (80030bc <HAL_RCC_GetSysClockFreq+0x158>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fa4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002fa6:	4b45      	ldr	r3, [pc, #276]	; (80030bc <HAL_RCC_GetSysClockFreq+0x158>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d023      	beq.n	8002ffa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb2:	4b42      	ldr	r3, [pc, #264]	; (80030bc <HAL_RCC_GetSysClockFreq+0x158>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	099b      	lsrs	r3, r3, #6
 8002fb8:	f04f 0400 	mov.w	r4, #0
 8002fbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	ea03 0501 	and.w	r5, r3, r1
 8002fc8:	ea04 0602 	and.w	r6, r4, r2
 8002fcc:	4a3d      	ldr	r2, [pc, #244]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fce:	fb02 f106 	mul.w	r1, r2, r6
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	fb02 f205 	mul.w	r2, r2, r5
 8002fd8:	440a      	add	r2, r1
 8002fda:	493a      	ldr	r1, [pc, #232]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002fdc:	fba5 0101 	umull	r0, r1, r5, r1
 8002fe0:	1853      	adds	r3, r2, r1
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f04f 0400 	mov.w	r4, #0
 8002fea:	461a      	mov	r2, r3
 8002fec:	4623      	mov	r3, r4
 8002fee:	f7fd f95f 	bl	80002b0 <__aeabi_uldivmod>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	460c      	mov	r4, r1
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	e049      	b.n	800308e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffa:	4b30      	ldr	r3, [pc, #192]	; (80030bc <HAL_RCC_GetSysClockFreq+0x158>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	099b      	lsrs	r3, r3, #6
 8003000:	f04f 0400 	mov.w	r4, #0
 8003004:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	ea03 0501 	and.w	r5, r3, r1
 8003010:	ea04 0602 	and.w	r6, r4, r2
 8003014:	4629      	mov	r1, r5
 8003016:	4632      	mov	r2, r6
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	f04f 0400 	mov.w	r4, #0
 8003020:	0154      	lsls	r4, r2, #5
 8003022:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003026:	014b      	lsls	r3, r1, #5
 8003028:	4619      	mov	r1, r3
 800302a:	4622      	mov	r2, r4
 800302c:	1b49      	subs	r1, r1, r5
 800302e:	eb62 0206 	sbc.w	r2, r2, r6
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	f04f 0400 	mov.w	r4, #0
 800303a:	0194      	lsls	r4, r2, #6
 800303c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003040:	018b      	lsls	r3, r1, #6
 8003042:	1a5b      	subs	r3, r3, r1
 8003044:	eb64 0402 	sbc.w	r4, r4, r2
 8003048:	f04f 0100 	mov.w	r1, #0
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	00e2      	lsls	r2, r4, #3
 8003052:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003056:	00d9      	lsls	r1, r3, #3
 8003058:	460b      	mov	r3, r1
 800305a:	4614      	mov	r4, r2
 800305c:	195b      	adds	r3, r3, r5
 800305e:	eb44 0406 	adc.w	r4, r4, r6
 8003062:	f04f 0100 	mov.w	r1, #0
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	02a2      	lsls	r2, r4, #10
 800306c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003070:	0299      	lsls	r1, r3, #10
 8003072:	460b      	mov	r3, r1
 8003074:	4614      	mov	r4, r2
 8003076:	4618      	mov	r0, r3
 8003078:	4621      	mov	r1, r4
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f04f 0400 	mov.w	r4, #0
 8003080:	461a      	mov	r2, r3
 8003082:	4623      	mov	r3, r4
 8003084:	f7fd f914 	bl	80002b0 <__aeabi_uldivmod>
 8003088:	4603      	mov	r3, r0
 800308a:	460c      	mov	r4, r1
 800308c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_RCC_GetSysClockFreq+0x158>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	0c1b      	lsrs	r3, r3, #16
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	3301      	adds	r3, #1
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	60bb      	str	r3, [r7, #8]
      break;
 80030a8:	e002      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030aa:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80030ac:	60bb      	str	r3, [r7, #8]
      break;
 80030ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030b0:	68bb      	ldr	r3, [r7, #8]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023800 	.word	0x40023800
 80030c0:	00f42400 	.word	0x00f42400
 80030c4:	017d7840 	.word	0x017d7840

080030c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030cc:	4b03      	ldr	r3, [pc, #12]	; (80030dc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000000 	.word	0x20000000

080030e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030e4:	f7ff fff0 	bl	80030c8 <HAL_RCC_GetHCLKFreq>
 80030e8:	4601      	mov	r1, r0
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0b5b      	lsrs	r3, r3, #13
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4a03      	ldr	r2, [pc, #12]	; (8003104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f6:	5cd3      	ldrb	r3, [r2, r3]
 80030f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	08011e84 	.word	0x08011e84

08003108 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	220f      	movs	r2, #15
 8003116:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003118:	4b12      	ldr	r3, [pc, #72]	; (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0203 	and.w	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCC_GetClockConfig+0x5c>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	08db      	lsrs	r3, r3, #3
 8003142:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <HAL_RCC_GetClockConfig+0x60>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 020f 	and.w	r2, r3, #15
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	601a      	str	r2, [r3, #0]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
 8003168:	40023c00 	.word	0x40023c00

0800316c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <HAL_RCC_NMI_IRQHandler+0x20>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	2b80      	cmp	r3, #128	; 0x80
 800317a:	d104      	bne.n	8003186 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800317c:	f000 f80a 	bl	8003194 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003182:	2280      	movs	r2, #128	; 0x80
 8003184:	701a      	strb	r2, [r3, #0]
  }
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40023800 	.word	0x40023800
 8003190:	4002380e 	.word	0x4002380e

08003194 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b088      	sub	sp, #32
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d012      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031cc:	4b69      	ldr	r3, [pc, #420]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a68      	ldr	r2, [pc, #416]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80031d6:	6093      	str	r3, [r2, #8]
 80031d8:	4b66      	ldr	r3, [pc, #408]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e0:	4964      	ldr	r1, [pc, #400]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d017      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031fe:	4b5d      	ldr	r3, [pc, #372]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003204:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	4959      	ldr	r1, [pc, #356]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800321c:	d101      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800321e:	2301      	movs	r3, #1
 8003220:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800322a:	2301      	movs	r3, #1
 800322c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d017      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800323a:	4b4e      	ldr	r3, [pc, #312]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003240:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	494a      	ldr	r1, [pc, #296]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800324a:	4313      	orrs	r3, r2
 800324c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003258:	d101      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800325a:	2301      	movs	r3, #1
 800325c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003266:	2301      	movs	r3, #1
 8003268:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003276:	2301      	movs	r3, #1
 8003278:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 808b 	beq.w	800339e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003288:	4b3a      	ldr	r3, [pc, #232]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	4a39      	ldr	r2, [pc, #228]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003292:	6413      	str	r3, [r2, #64]	; 0x40
 8003294:	4b37      	ldr	r3, [pc, #220]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032a0:	4b35      	ldr	r3, [pc, #212]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a34      	ldr	r2, [pc, #208]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032ac:	f7fd fdf0 	bl	8000e90 <HAL_GetTick>
 80032b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b4:	f7fd fdec 	bl	8000e90 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e355      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80032c6:	4b2c      	ldr	r3, [pc, #176]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032d2:	4b28      	ldr	r3, [pc, #160]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d035      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d02e      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032f0:	4b20      	ldr	r3, [pc, #128]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032fa:	4b1e      	ldr	r3, [pc, #120]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a1d      	ldr	r2, [pc, #116]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003306:	4b1b      	ldr	r3, [pc, #108]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a1a      	ldr	r2, [pc, #104]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003310:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003312:	4a18      	ldr	r2, [pc, #96]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003318:	4b16      	ldr	r3, [pc, #88]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d114      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fd fdb4 	bl	8000e90 <HAL_GetTick>
 8003328:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332a:	e00a      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332c:	f7fd fdb0 	bl	8000e90 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	f241 3288 	movw	r2, #5000	; 0x1388
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e317      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0ee      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800335a:	d111      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800336a:	400b      	ands	r3, r1
 800336c:	4901      	ldr	r1, [pc, #4]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
 8003372:	e00b      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003374:	40023800 	.word	0x40023800
 8003378:	40007000 	.word	0x40007000
 800337c:	0ffffcff 	.word	0x0ffffcff
 8003380:	4bb0      	ldr	r3, [pc, #704]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4aaf      	ldr	r2, [pc, #700]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003386:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800338a:	6093      	str	r3, [r2, #8]
 800338c:	4bad      	ldr	r3, [pc, #692]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800338e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003398:	49aa      	ldr	r1, [pc, #680]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800339a:	4313      	orrs	r3, r2
 800339c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d010      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033aa:	4ba6      	ldr	r3, [pc, #664]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b0:	4aa4      	ldr	r2, [pc, #656]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033ba:	4ba2      	ldr	r3, [pc, #648]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	499f      	ldr	r1, [pc, #636]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00a      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033d8:	4b9a      	ldr	r3, [pc, #616]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e6:	4997      	ldr	r1, [pc, #604]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033fa:	4b92      	ldr	r3, [pc, #584]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003408:	498e      	ldr	r1, [pc, #568]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800341c:	4b89      	ldr	r3, [pc, #548]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003422:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342a:	4986      	ldr	r1, [pc, #536]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800343e:	4b81      	ldr	r3, [pc, #516]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344c:	497d      	ldr	r1, [pc, #500]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003460:	4b78      	ldr	r3, [pc, #480]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	f023 0203 	bic.w	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	4975      	ldr	r1, [pc, #468]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003482:	4b70      	ldr	r3, [pc, #448]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	f023 020c 	bic.w	r2, r3, #12
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003490:	496c      	ldr	r1, [pc, #432]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034a4:	4b67      	ldr	r3, [pc, #412]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b2:	4964      	ldr	r1, [pc, #400]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034c6:	4b5f      	ldr	r3, [pc, #380]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d4:	495b      	ldr	r1, [pc, #364]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034e8:	4b56      	ldr	r3, [pc, #344]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	4953      	ldr	r1, [pc, #332]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800350a:	4b4e      	ldr	r3, [pc, #312]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800350c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003510:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003518:	494a      	ldr	r1, [pc, #296]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800352c:	4b45      	ldr	r3, [pc, #276]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003532:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	4942      	ldr	r1, [pc, #264]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800354e:	4b3d      	ldr	r3, [pc, #244]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003554:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355c:	4939      	ldr	r1, [pc, #228]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003570:	4b34      	ldr	r3, [pc, #208]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003576:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800357e:	4931      	ldr	r1, [pc, #196]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d011      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003592:	4b2c      	ldr	r3, [pc, #176]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003598:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035a0:	4928      	ldr	r1, [pc, #160]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035b0:	d101      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80035b2:	2301      	movs	r3, #1
 80035b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035d2:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e0:	4918      	ldr	r1, [pc, #96]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00b      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035f4:	4b13      	ldr	r3, [pc, #76]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003604:	490f      	ldr	r1, [pc, #60]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d005      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800361a:	f040 80d8 	bne.w	80037ce <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a08      	ldr	r2, [pc, #32]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003624:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362a:	f7fd fc31 	bl	8000e90 <HAL_GetTick>
 800362e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003630:	e00a      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003632:	f7fd fc2d 	bl	8000e90 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b64      	cmp	r3, #100	; 0x64
 800363e:	d903      	bls.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e196      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003644:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003648:	4b6c      	ldr	r3, [pc, #432]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1ee      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d021      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003664:	2b00      	cmp	r3, #0
 8003666:	d11d      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003668:	4b64      	ldr	r3, [pc, #400]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800366a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	f003 0303 	and.w	r3, r3, #3
 8003674:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003676:	4b61      	ldr	r3, [pc, #388]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367c:	0e1b      	lsrs	r3, r3, #24
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	019a      	lsls	r2, r3, #6
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	041b      	lsls	r3, r3, #16
 800368e:	431a      	orrs	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	061b      	lsls	r3, r3, #24
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	071b      	lsls	r3, r3, #28
 800369c:	4957      	ldr	r1, [pc, #348]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d004      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x516>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d02e      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ce:	d129      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036d0:	4b4a      	ldr	r3, [pc, #296]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80036d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d6:	0c1b      	lsrs	r3, r3, #16
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036de:	4b47      	ldr	r3, [pc, #284]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80036e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e4:	0f1b      	lsrs	r3, r3, #28
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	019a      	lsls	r2, r3, #6
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	431a      	orrs	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	071b      	lsls	r3, r3, #28
 8003704:	493d      	ldr	r1, [pc, #244]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003706:	4313      	orrs	r3, r2
 8003708:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800370c:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800370e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003712:	f023 021f 	bic.w	r2, r3, #31
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	3b01      	subs	r3, #1
 800371c:	4937      	ldr	r1, [pc, #220]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01d      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003730:	4b32      	ldr	r3, [pc, #200]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003736:	0e1b      	lsrs	r3, r3, #24
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800373e:	4b2f      	ldr	r3, [pc, #188]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003744:	0f1b      	lsrs	r3, r3, #28
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	019a      	lsls	r2, r3, #6
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	431a      	orrs	r2, r3
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	061b      	lsls	r3, r3, #24
 800375e:	431a      	orrs	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	071b      	lsls	r3, r3, #28
 8003764:	4925      	ldr	r1, [pc, #148]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d011      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	019a      	lsls	r2, r3, #6
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	061b      	lsls	r3, r3, #24
 800378c:	431a      	orrs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	071b      	lsls	r3, r3, #28
 8003794:	4919      	ldr	r1, [pc, #100]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a16      	ldr	r2, [pc, #88]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037a8:	f7fd fb72 	bl	8000e90 <HAL_GetTick>
 80037ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037b0:	f7fd fb6e 	bl	8000e90 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e0d7      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	f040 80cd 	bne.w	8003970 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a08      	ldr	r2, [pc, #32]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80037dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e2:	f7fd fb55 	bl	8000e90 <HAL_GetTick>
 80037e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037ea:	f7fd fb51 	bl	8000e90 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b64      	cmp	r3, #100	; 0x64
 80037f6:	d903      	bls.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0ba      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80037fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003800:	4b5e      	ldr	r3, [pc, #376]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800380c:	d0ed      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d009      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800382a:	2b00      	cmp	r3, #0
 800382c:	d02e      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d12a      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003836:	4b51      	ldr	r3, [pc, #324]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003844:	4b4d      	ldr	r3, [pc, #308]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	0f1b      	lsrs	r3, r3, #28
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	019a      	lsls	r2, r3, #6
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	041b      	lsls	r3, r3, #16
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	061b      	lsls	r3, r3, #24
 8003864:	431a      	orrs	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	071b      	lsls	r3, r3, #28
 800386a:	4944      	ldr	r1, [pc, #272]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003872:	4b42      	ldr	r3, [pc, #264]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003878:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	3b01      	subs	r3, #1
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	493d      	ldr	r1, [pc, #244]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003886:	4313      	orrs	r3, r2
 8003888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d022      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800389c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a0:	d11d      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038a2:	4b36      	ldr	r3, [pc, #216]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	0f1b      	lsrs	r3, r3, #28
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	019a      	lsls	r2, r3, #6
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	041b      	lsls	r3, r3, #16
 80038ca:	431a      	orrs	r2, r3
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	061b      	lsls	r3, r3, #24
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	071b      	lsls	r3, r3, #28
 80038d6:	4929      	ldr	r1, [pc, #164]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d028      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	0e1b      	lsrs	r3, r3, #24
 80038f2:	f003 030f 	and.w	r3, r3, #15
 80038f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038f8:	4b20      	ldr	r3, [pc, #128]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	0c1b      	lsrs	r3, r3, #16
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	019a      	lsls	r2, r3, #6
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	041b      	lsls	r3, r3, #16
 8003910:	431a      	orrs	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	071b      	lsls	r3, r3, #28
 800391e:	4917      	ldr	r1, [pc, #92]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003926:	4b15      	ldr	r3, [pc, #84]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800392c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	4911      	ldr	r1, [pc, #68]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0e      	ldr	r2, [pc, #56]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003948:	f7fd faa2 	bl	8000e90 <HAL_GetTick>
 800394c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003950:	f7fd fa9e 	bl	8000e90 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	; 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e007      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003962:	4b06      	ldr	r3, [pc, #24]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800396a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396e:	d1ef      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3720      	adds	r7, #32
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40023800 	.word	0x40023800

08003980 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e01d      	b.n	80039ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f815 	bl	80039d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	4619      	mov	r1, r3
 80039be:	4610      	mov	r0, r2
 80039c0:	f000 f986 	bl	8003cd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <HAL_TIM_Base_Start_IT+0x50>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b06      	cmp	r3, #6
 8003a14:	d00b      	beq.n	8003a2e <HAL_TIM_Base_Start_IT+0x42>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1c:	d007      	beq.n	8003a2e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0201 	orr.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	00010007 	.word	0x00010007

08003a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d122      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d11b      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0202 	mvn.w	r2, #2
 8003a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f905 	bl	8003c92 <HAL_TIM_IC_CaptureCallback>
 8003a88:	e005      	b.n	8003a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8f7 	bl	8003c7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f908 	bl	8003ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d122      	bne.n	8003af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d11b      	bne.n	8003af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f06f 0204 	mvn.w	r2, #4
 8003ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f8db 	bl	8003c92 <HAL_TIM_IC_CaptureCallback>
 8003adc:	e005      	b.n	8003aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f8cd 	bl	8003c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f8de 	bl	8003ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d122      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0308 	and.w	r3, r3, #8
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d11b      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f06f 0208 	mvn.w	r2, #8
 8003b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2204      	movs	r2, #4
 8003b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8b1 	bl	8003c92 <HAL_TIM_IC_CaptureCallback>
 8003b30:	e005      	b.n	8003b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8a3 	bl	8003c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f8b4 	bl	8003ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d122      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b10      	cmp	r3, #16
 8003b5e:	d11b      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0210 	mvn.w	r2, #16
 8003b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d003      	beq.n	8003b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f887 	bl	8003c92 <HAL_TIM_IC_CaptureCallback>
 8003b84:	e005      	b.n	8003b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f879 	bl	8003c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f88a 	bl	8003ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d10e      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d107      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0201 	mvn.w	r2, #1
 8003bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fc ff82 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bce:	2b80      	cmp	r3, #128	; 0x80
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bdc:	2b80      	cmp	r3, #128	; 0x80
 8003bde:	d107      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f91a 	bl	8003e24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bfe:	d10e      	bne.n	8003c1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d107      	bne.n	8003c1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f90d 	bl	8003e38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d10e      	bne.n	8003c4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d107      	bne.n	8003c4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f838 	bl	8003cba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d10e      	bne.n	8003c76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d107      	bne.n	8003c76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f06f 0220 	mvn.w	r2, #32
 8003c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f8cd 	bl	8003e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a40      	ldr	r2, [pc, #256]	; (8003de4 <TIM_Base_SetConfig+0x114>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d013      	beq.n	8003d10 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cee:	d00f      	beq.n	8003d10 <TIM_Base_SetConfig+0x40>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a3d      	ldr	r2, [pc, #244]	; (8003de8 <TIM_Base_SetConfig+0x118>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00b      	beq.n	8003d10 <TIM_Base_SetConfig+0x40>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a3c      	ldr	r2, [pc, #240]	; (8003dec <TIM_Base_SetConfig+0x11c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d007      	beq.n	8003d10 <TIM_Base_SetConfig+0x40>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a3b      	ldr	r2, [pc, #236]	; (8003df0 <TIM_Base_SetConfig+0x120>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d003      	beq.n	8003d10 <TIM_Base_SetConfig+0x40>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a3a      	ldr	r2, [pc, #232]	; (8003df4 <TIM_Base_SetConfig+0x124>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d108      	bne.n	8003d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2f      	ldr	r2, [pc, #188]	; (8003de4 <TIM_Base_SetConfig+0x114>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d02b      	beq.n	8003d82 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d30:	d027      	beq.n	8003d82 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a2c      	ldr	r2, [pc, #176]	; (8003de8 <TIM_Base_SetConfig+0x118>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d023      	beq.n	8003d82 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a2b      	ldr	r2, [pc, #172]	; (8003dec <TIM_Base_SetConfig+0x11c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01f      	beq.n	8003d82 <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a2a      	ldr	r2, [pc, #168]	; (8003df0 <TIM_Base_SetConfig+0x120>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d01b      	beq.n	8003d82 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a29      	ldr	r2, [pc, #164]	; (8003df4 <TIM_Base_SetConfig+0x124>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d017      	beq.n	8003d82 <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a28      	ldr	r2, [pc, #160]	; (8003df8 <TIM_Base_SetConfig+0x128>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d013      	beq.n	8003d82 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a27      	ldr	r2, [pc, #156]	; (8003dfc <TIM_Base_SetConfig+0x12c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00f      	beq.n	8003d82 <TIM_Base_SetConfig+0xb2>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a26      	ldr	r2, [pc, #152]	; (8003e00 <TIM_Base_SetConfig+0x130>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00b      	beq.n	8003d82 <TIM_Base_SetConfig+0xb2>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <TIM_Base_SetConfig+0x134>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d007      	beq.n	8003d82 <TIM_Base_SetConfig+0xb2>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a24      	ldr	r2, [pc, #144]	; (8003e08 <TIM_Base_SetConfig+0x138>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d003      	beq.n	8003d82 <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a23      	ldr	r2, [pc, #140]	; (8003e0c <TIM_Base_SetConfig+0x13c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d108      	bne.n	8003d94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <TIM_Base_SetConfig+0x114>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_Base_SetConfig+0xf8>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a0c      	ldr	r2, [pc, #48]	; (8003df4 <TIM_Base_SetConfig+0x124>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d103      	bne.n	8003dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	615a      	str	r2, [r3, #20]
}
 8003dd6:	bf00      	nop
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	40010000 	.word	0x40010000
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40000800 	.word	0x40000800
 8003df0:	40000c00 	.word	0x40000c00
 8003df4:	40010400 	.word	0x40010400
 8003df8:	40014000 	.word	0x40014000
 8003dfc:	40014400 	.word	0x40014400
 8003e00:	40014800 	.word	0x40014800
 8003e04:	40001800 	.word	0x40001800
 8003e08:	40001c00 	.word	0x40001c00
 8003e0c:	40002000 	.word	0x40002000

08003e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003e52:	4b8d      	ldr	r3, [pc, #564]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003e54:	22c0      	movs	r2, #192	; 0xc0
 8003e56:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003e58:	4b8b      	ldr	r3, [pc, #556]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003e5a:	22a8      	movs	r2, #168	; 0xa8
 8003e5c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003e5e:	4b8a      	ldr	r3, [pc, #552]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 68;
 8003e64:	4b88      	ldr	r3, [pc, #544]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003e66:	2244      	movs	r2, #68	; 0x44
 8003e68:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003e6a:	4b88      	ldr	r3, [pc, #544]	; (800408c <MX_LWIP_Init+0x240>)
 8003e6c:	22ff      	movs	r2, #255	; 0xff
 8003e6e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003e70:	4b86      	ldr	r3, [pc, #536]	; (800408c <MX_LWIP_Init+0x240>)
 8003e72:	22ff      	movs	r2, #255	; 0xff
 8003e74:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003e76:	4b85      	ldr	r3, [pc, #532]	; (800408c <MX_LWIP_Init+0x240>)
 8003e78:	22ff      	movs	r2, #255	; 0xff
 8003e7a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003e7c:	4b83      	ldr	r3, [pc, #524]	; (800408c <MX_LWIP_Init+0x240>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003e82:	4b83      	ldr	r3, [pc, #524]	; (8004090 <MX_LWIP_Init+0x244>)
 8003e84:	22c0      	movs	r2, #192	; 0xc0
 8003e86:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 169;
 8003e88:	4b81      	ldr	r3, [pc, #516]	; (8004090 <MX_LWIP_Init+0x244>)
 8003e8a:	22a9      	movs	r2, #169	; 0xa9
 8003e8c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8003e8e:	4b80      	ldr	r3, [pc, #512]	; (8004090 <MX_LWIP_Init+0x244>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003e94:	4b7e      	ldr	r3, [pc, #504]	; (8004090 <MX_LWIP_Init+0x244>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003e9a:	f000 fcc1 	bl	8004820 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003e9e:	4b7a      	ldr	r3, [pc, #488]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	061a      	lsls	r2, r3, #24
 8003ea4:	4b78      	ldr	r3, [pc, #480]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003ea6:	785b      	ldrb	r3, [r3, #1]
 8003ea8:	041b      	lsls	r3, r3, #16
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	4b76      	ldr	r3, [pc, #472]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003eae:	789b      	ldrb	r3, [r3, #2]
 8003eb0:	021b      	lsls	r3, r3, #8
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	4a74      	ldr	r2, [pc, #464]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003eb6:	78d2      	ldrb	r2, [r2, #3]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	061a      	lsls	r2, r3, #24
 8003ebc:	4b72      	ldr	r3, [pc, #456]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	0619      	lsls	r1, r3, #24
 8003ec2:	4b71      	ldr	r3, [pc, #452]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003ec4:	785b      	ldrb	r3, [r3, #1]
 8003ec6:	041b      	lsls	r3, r3, #16
 8003ec8:	4319      	orrs	r1, r3
 8003eca:	4b6f      	ldr	r3, [pc, #444]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003ecc:	789b      	ldrb	r3, [r3, #2]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	496d      	ldr	r1, [pc, #436]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003ed4:	78c9      	ldrb	r1, [r1, #3]
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	4b69      	ldr	r3, [pc, #420]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	0619      	lsls	r1, r3, #24
 8003ee6:	4b68      	ldr	r3, [pc, #416]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003ee8:	785b      	ldrb	r3, [r3, #1]
 8003eea:	041b      	lsls	r3, r3, #16
 8003eec:	4319      	orrs	r1, r3
 8003eee:	4b66      	ldr	r3, [pc, #408]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003ef0:	789b      	ldrb	r3, [r3, #2]
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	430b      	orrs	r3, r1
 8003ef6:	4964      	ldr	r1, [pc, #400]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003ef8:	78c9      	ldrb	r1, [r1, #3]
 8003efa:	430b      	orrs	r3, r1
 8003efc:	0a1b      	lsrs	r3, r3, #8
 8003efe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f02:	431a      	orrs	r2, r3
 8003f04:	4b60      	ldr	r3, [pc, #384]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	0619      	lsls	r1, r3, #24
 8003f0a:	4b5f      	ldr	r3, [pc, #380]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003f0c:	785b      	ldrb	r3, [r3, #1]
 8003f0e:	041b      	lsls	r3, r3, #16
 8003f10:	4319      	orrs	r1, r3
 8003f12:	4b5d      	ldr	r3, [pc, #372]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003f14:	789b      	ldrb	r3, [r3, #2]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	495b      	ldr	r1, [pc, #364]	; (8004088 <MX_LWIP_Init+0x23c>)
 8003f1c:	78c9      	ldrb	r1, [r1, #3]
 8003f1e:	430b      	orrs	r3, r1
 8003f20:	0e1b      	lsrs	r3, r3, #24
 8003f22:	4313      	orrs	r3, r2
 8003f24:	4a5b      	ldr	r2, [pc, #364]	; (8004094 <MX_LWIP_Init+0x248>)
 8003f26:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003f28:	4b58      	ldr	r3, [pc, #352]	; (800408c <MX_LWIP_Init+0x240>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	061a      	lsls	r2, r3, #24
 8003f2e:	4b57      	ldr	r3, [pc, #348]	; (800408c <MX_LWIP_Init+0x240>)
 8003f30:	785b      	ldrb	r3, [r3, #1]
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	431a      	orrs	r2, r3
 8003f36:	4b55      	ldr	r3, [pc, #340]	; (800408c <MX_LWIP_Init+0x240>)
 8003f38:	789b      	ldrb	r3, [r3, #2]
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	4a53      	ldr	r2, [pc, #332]	; (800408c <MX_LWIP_Init+0x240>)
 8003f40:	78d2      	ldrb	r2, [r2, #3]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	061a      	lsls	r2, r3, #24
 8003f46:	4b51      	ldr	r3, [pc, #324]	; (800408c <MX_LWIP_Init+0x240>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	0619      	lsls	r1, r3, #24
 8003f4c:	4b4f      	ldr	r3, [pc, #316]	; (800408c <MX_LWIP_Init+0x240>)
 8003f4e:	785b      	ldrb	r3, [r3, #1]
 8003f50:	041b      	lsls	r3, r3, #16
 8003f52:	4319      	orrs	r1, r3
 8003f54:	4b4d      	ldr	r3, [pc, #308]	; (800408c <MX_LWIP_Init+0x240>)
 8003f56:	789b      	ldrb	r3, [r3, #2]
 8003f58:	021b      	lsls	r3, r3, #8
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	494b      	ldr	r1, [pc, #300]	; (800408c <MX_LWIP_Init+0x240>)
 8003f5e:	78c9      	ldrb	r1, [r1, #3]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	4b48      	ldr	r3, [pc, #288]	; (800408c <MX_LWIP_Init+0x240>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	0619      	lsls	r1, r3, #24
 8003f70:	4b46      	ldr	r3, [pc, #280]	; (800408c <MX_LWIP_Init+0x240>)
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	4319      	orrs	r1, r3
 8003f78:	4b44      	ldr	r3, [pc, #272]	; (800408c <MX_LWIP_Init+0x240>)
 8003f7a:	789b      	ldrb	r3, [r3, #2]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	4942      	ldr	r1, [pc, #264]	; (800408c <MX_LWIP_Init+0x240>)
 8003f82:	78c9      	ldrb	r1, [r1, #3]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	0a1b      	lsrs	r3, r3, #8
 8003f88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	4b3f      	ldr	r3, [pc, #252]	; (800408c <MX_LWIP_Init+0x240>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	0619      	lsls	r1, r3, #24
 8003f94:	4b3d      	ldr	r3, [pc, #244]	; (800408c <MX_LWIP_Init+0x240>)
 8003f96:	785b      	ldrb	r3, [r3, #1]
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	4319      	orrs	r1, r3
 8003f9c:	4b3b      	ldr	r3, [pc, #236]	; (800408c <MX_LWIP_Init+0x240>)
 8003f9e:	789b      	ldrb	r3, [r3, #2]
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	4939      	ldr	r1, [pc, #228]	; (800408c <MX_LWIP_Init+0x240>)
 8003fa6:	78c9      	ldrb	r1, [r1, #3]
 8003fa8:	430b      	orrs	r3, r1
 8003faa:	0e1b      	lsrs	r3, r3, #24
 8003fac:	4313      	orrs	r3, r2
 8003fae:	4a3a      	ldr	r2, [pc, #232]	; (8004098 <MX_LWIP_Init+0x24c>)
 8003fb0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <MX_LWIP_Init+0x244>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	061a      	lsls	r2, r3, #24
 8003fb8:	4b35      	ldr	r3, [pc, #212]	; (8004090 <MX_LWIP_Init+0x244>)
 8003fba:	785b      	ldrb	r3, [r3, #1]
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	4b33      	ldr	r3, [pc, #204]	; (8004090 <MX_LWIP_Init+0x244>)
 8003fc2:	789b      	ldrb	r3, [r3, #2]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	4a31      	ldr	r2, [pc, #196]	; (8004090 <MX_LWIP_Init+0x244>)
 8003fca:	78d2      	ldrb	r2, [r2, #3]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	061a      	lsls	r2, r3, #24
 8003fd0:	4b2f      	ldr	r3, [pc, #188]	; (8004090 <MX_LWIP_Init+0x244>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	0619      	lsls	r1, r3, #24
 8003fd6:	4b2e      	ldr	r3, [pc, #184]	; (8004090 <MX_LWIP_Init+0x244>)
 8003fd8:	785b      	ldrb	r3, [r3, #1]
 8003fda:	041b      	lsls	r3, r3, #16
 8003fdc:	4319      	orrs	r1, r3
 8003fde:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <MX_LWIP_Init+0x244>)
 8003fe0:	789b      	ldrb	r3, [r3, #2]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	492a      	ldr	r1, [pc, #168]	; (8004090 <MX_LWIP_Init+0x244>)
 8003fe8:	78c9      	ldrb	r1, [r1, #3]
 8003fea:	430b      	orrs	r3, r1
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	4b26      	ldr	r3, [pc, #152]	; (8004090 <MX_LWIP_Init+0x244>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	0619      	lsls	r1, r3, #24
 8003ffa:	4b25      	ldr	r3, [pc, #148]	; (8004090 <MX_LWIP_Init+0x244>)
 8003ffc:	785b      	ldrb	r3, [r3, #1]
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	4319      	orrs	r1, r3
 8004002:	4b23      	ldr	r3, [pc, #140]	; (8004090 <MX_LWIP_Init+0x244>)
 8004004:	789b      	ldrb	r3, [r3, #2]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	430b      	orrs	r3, r1
 800400a:	4921      	ldr	r1, [pc, #132]	; (8004090 <MX_LWIP_Init+0x244>)
 800400c:	78c9      	ldrb	r1, [r1, #3]
 800400e:	430b      	orrs	r3, r1
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004016:	431a      	orrs	r2, r3
 8004018:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <MX_LWIP_Init+0x244>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	0619      	lsls	r1, r3, #24
 800401e:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <MX_LWIP_Init+0x244>)
 8004020:	785b      	ldrb	r3, [r3, #1]
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	4319      	orrs	r1, r3
 8004026:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <MX_LWIP_Init+0x244>)
 8004028:	789b      	ldrb	r3, [r3, #2]
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	430b      	orrs	r3, r1
 800402e:	4918      	ldr	r1, [pc, #96]	; (8004090 <MX_LWIP_Init+0x244>)
 8004030:	78c9      	ldrb	r1, [r1, #3]
 8004032:	430b      	orrs	r3, r1
 8004034:	0e1b      	lsrs	r3, r3, #24
 8004036:	4313      	orrs	r3, r2
 8004038:	4a18      	ldr	r2, [pc, #96]	; (800409c <MX_LWIP_Init+0x250>)
 800403a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800403c:	4b18      	ldr	r3, [pc, #96]	; (80040a0 <MX_LWIP_Init+0x254>)
 800403e:	9302      	str	r3, [sp, #8]
 8004040:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <MX_LWIP_Init+0x258>)
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	2300      	movs	r3, #0
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	4b14      	ldr	r3, [pc, #80]	; (800409c <MX_LWIP_Init+0x250>)
 800404a:	4a13      	ldr	r2, [pc, #76]	; (8004098 <MX_LWIP_Init+0x24c>)
 800404c:	4911      	ldr	r1, [pc, #68]	; (8004094 <MX_LWIP_Init+0x248>)
 800404e:	4816      	ldr	r0, [pc, #88]	; (80040a8 <MX_LWIP_Init+0x25c>)
 8004050:	f001 f88c 	bl	800516c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004054:	4814      	ldr	r0, [pc, #80]	; (80040a8 <MX_LWIP_Init+0x25c>)
 8004056:	f001 fa3b 	bl	80054d0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800405a:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <MX_LWIP_Init+0x25c>)
 800405c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004060:	089b      	lsrs	r3, r3, #2
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800406c:	480e      	ldr	r0, [pc, #56]	; (80040a8 <MX_LWIP_Init+0x25c>)
 800406e:	f001 fa3f 	bl	80054f0 <netif_set_up>
 8004072:	e002      	b.n	800407a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004074:	480c      	ldr	r0, [pc, #48]	; (80040a8 <MX_LWIP_Init+0x25c>)
 8004076:	f001 faa7 	bl	80055c8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800407a:	490c      	ldr	r1, [pc, #48]	; (80040ac <MX_LWIP_Init+0x260>)
 800407c:	480a      	ldr	r0, [pc, #40]	; (80040a8 <MX_LWIP_Init+0x25c>)
 800407e:	f001 fad5 	bl	800562c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004082:	bf00      	nop
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	200002f8 	.word	0x200002f8
 800408c:	200002f4 	.word	0x200002f4
 8004090:	200002b8 	.word	0x200002b8
 8004094:	200002f0 	.word	0x200002f0
 8004098:	200002fc 	.word	0x200002fc
 800409c:	20000300 	.word	0x20000300
 80040a0:	0800e401 	.word	0x0800e401
 80040a4:	0800464d 	.word	0x0800464d
 80040a8:	200002bc 	.word	0x200002bc
 80040ac:	080046b9 	.word	0x080046b9

080040b0 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80040b4:	4803      	ldr	r0, [pc, #12]	; (80040c4 <MX_LWIP_Process+0x14>)
 80040b6:	f000 faa9 	bl	800460c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80040ba:	f007 fdc3 	bl	800bc44 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80040be:	bf00      	nop
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	200002bc 	.word	0x200002bc

080040c8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08e      	sub	sp, #56	; 0x38
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	605a      	str	r2, [r3, #4]
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a44      	ldr	r2, [pc, #272]	; (80041f8 <HAL_ETH_MspInit+0x130>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	f040 8081 	bne.w	80041ee <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80040ec:	4b43      	ldr	r3, [pc, #268]	; (80041fc <HAL_ETH_MspInit+0x134>)
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	4a42      	ldr	r2, [pc, #264]	; (80041fc <HAL_ETH_MspInit+0x134>)
 80040f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040f6:	6313      	str	r3, [r2, #48]	; 0x30
 80040f8:	4b40      	ldr	r3, [pc, #256]	; (80041fc <HAL_ETH_MspInit+0x134>)
 80040fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	4b3d      	ldr	r3, [pc, #244]	; (80041fc <HAL_ETH_MspInit+0x134>)
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	4a3c      	ldr	r2, [pc, #240]	; (80041fc <HAL_ETH_MspInit+0x134>)
 800410a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800410e:	6313      	str	r3, [r2, #48]	; 0x30
 8004110:	4b3a      	ldr	r3, [pc, #232]	; (80041fc <HAL_ETH_MspInit+0x134>)
 8004112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004114:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004118:	61fb      	str	r3, [r7, #28]
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	4b37      	ldr	r3, [pc, #220]	; (80041fc <HAL_ETH_MspInit+0x134>)
 800411e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004120:	4a36      	ldr	r2, [pc, #216]	; (80041fc <HAL_ETH_MspInit+0x134>)
 8004122:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004126:	6313      	str	r3, [r2, #48]	; 0x30
 8004128:	4b34      	ldr	r3, [pc, #208]	; (80041fc <HAL_ETH_MspInit+0x134>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004134:	4b31      	ldr	r3, [pc, #196]	; (80041fc <HAL_ETH_MspInit+0x134>)
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	4a30      	ldr	r2, [pc, #192]	; (80041fc <HAL_ETH_MspInit+0x134>)
 800413a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800413e:	6313      	str	r3, [r2, #48]	; 0x30
 8004140:	4b2e      	ldr	r3, [pc, #184]	; (80041fc <HAL_ETH_MspInit+0x134>)
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800414c:	4b2b      	ldr	r3, [pc, #172]	; (80041fc <HAL_ETH_MspInit+0x134>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	4a2a      	ldr	r2, [pc, #168]	; (80041fc <HAL_ETH_MspInit+0x134>)
 8004152:	f043 0304 	orr.w	r3, r3, #4
 8004156:	6313      	str	r3, [r2, #48]	; 0x30
 8004158:	4b28      	ldr	r3, [pc, #160]	; (80041fc <HAL_ETH_MspInit+0x134>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004164:	4b25      	ldr	r3, [pc, #148]	; (80041fc <HAL_ETH_MspInit+0x134>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	4a24      	ldr	r2, [pc, #144]	; (80041fc <HAL_ETH_MspInit+0x134>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6313      	str	r3, [r2, #48]	; 0x30
 8004170:	4b22      	ldr	r3, [pc, #136]	; (80041fc <HAL_ETH_MspInit+0x134>)
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 800417c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004182:	2302      	movs	r3, #2
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	2300      	movs	r3, #0
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418a:	2303      	movs	r3, #3
 800418c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800418e:	230b      	movs	r3, #11
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004196:	4619      	mov	r1, r3
 8004198:	4819      	ldr	r0, [pc, #100]	; (8004200 <HAL_ETH_MspInit+0x138>)
 800419a:	f7fe f915 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800419e:	2332      	movs	r3, #50	; 0x32
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a2:	2302      	movs	r3, #2
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041aa:	2303      	movs	r3, #3
 80041ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041ae:	230b      	movs	r3, #11
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041b6:	4619      	mov	r1, r3
 80041b8:	4812      	ldr	r0, [pc, #72]	; (8004204 <HAL_ETH_MspInit+0x13c>)
 80041ba:	f7fe f905 	bl	80023c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80041be:	2386      	movs	r3, #134	; 0x86
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c2:	2302      	movs	r3, #2
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ca:	2303      	movs	r3, #3
 80041cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041ce:	230b      	movs	r3, #11
 80041d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041d6:	4619      	mov	r1, r3
 80041d8:	480b      	ldr	r0, [pc, #44]	; (8004208 <HAL_ETH_MspInit+0x140>)
 80041da:	f7fe f8f5 	bl	80023c8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80041de:	2200      	movs	r2, #0
 80041e0:	2100      	movs	r1, #0
 80041e2:	203d      	movs	r0, #61	; 0x3d
 80041e4:	f7fc ff3a 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80041e8:	203d      	movs	r0, #61	; 0x3d
 80041ea:	f7fc ff53 	bl	8001094 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80041ee:	bf00      	nop
 80041f0:	3738      	adds	r7, #56	; 0x38
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40028000 	.word	0x40028000
 80041fc:	40023800 	.word	0x40023800
 8004200:	40021800 	.word	0x40021800
 8004204:	40020800 	.word	0x40020800
 8004208:	40020000 	.word	0x40020000

0800420c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004214:	2300      	movs	r3, #0
 8004216:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004218:	4b4d      	ldr	r3, [pc, #308]	; (8004350 <low_level_init+0x144>)
 800421a:	4a4e      	ldr	r2, [pc, #312]	; (8004354 <low_level_init+0x148>)
 800421c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800421e:	4b4c      	ldr	r3, [pc, #304]	; (8004350 <low_level_init+0x144>)
 8004220:	2201      	movs	r2, #1
 8004222:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004224:	4b4a      	ldr	r3, [pc, #296]	; (8004350 <low_level_init+0x144>)
 8004226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800422a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800422c:	4b48      	ldr	r3, [pc, #288]	; (8004350 <low_level_init+0x144>)
 800422e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004232:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004234:	4b46      	ldr	r3, [pc, #280]	; (8004350 <low_level_init+0x144>)
 8004236:	2200      	movs	r2, #0
 8004238:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800423a:	2300      	movs	r3, #0
 800423c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800423e:	2380      	movs	r3, #128	; 0x80
 8004240:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004242:	23e1      	movs	r3, #225	; 0xe1
 8004244:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x23;
 8004246:	2323      	movs	r3, #35	; 0x23
 8004248:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x45;
 800424a:	2345      	movs	r3, #69	; 0x45
 800424c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x67;
 800424e:	2367      	movs	r3, #103	; 0x67
 8004250:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004252:	4a3f      	ldr	r2, [pc, #252]	; (8004350 <low_level_init+0x144>)
 8004254:	f107 0308 	add.w	r3, r7, #8
 8004258:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800425a:	4b3d      	ldr	r3, [pc, #244]	; (8004350 <low_level_init+0x144>)
 800425c:	2200      	movs	r2, #0
 800425e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004260:	4b3b      	ldr	r3, [pc, #236]	; (8004350 <low_level_init+0x144>)
 8004262:	2200      	movs	r2, #0
 8004264:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004266:	4b3a      	ldr	r3, [pc, #232]	; (8004350 <low_level_init+0x144>)
 8004268:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800426c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800426e:	4838      	ldr	r0, [pc, #224]	; (8004350 <low_level_init+0x144>)
 8004270:	f7fc ff1e 	bl	80010b0 <HAL_ETH_Init>
 8004274:	4603      	mov	r3, r0
 8004276:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8004278:	7dfb      	ldrb	r3, [r7, #23]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d108      	bne.n	8004290 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004284:	f043 0304 	orr.w	r3, r3, #4
 8004288:	b2da      	uxtb	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004290:	2304      	movs	r3, #4
 8004292:	4a31      	ldr	r2, [pc, #196]	; (8004358 <low_level_init+0x14c>)
 8004294:	4931      	ldr	r1, [pc, #196]	; (800435c <low_level_init+0x150>)
 8004296:	482e      	ldr	r0, [pc, #184]	; (8004350 <low_level_init+0x144>)
 8004298:	f7fd f8a6 	bl	80013e8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800429c:	2304      	movs	r3, #4
 800429e:	4a30      	ldr	r2, [pc, #192]	; (8004360 <low_level_init+0x154>)
 80042a0:	4930      	ldr	r1, [pc, #192]	; (8004364 <low_level_init+0x158>)
 80042a2:	482b      	ldr	r0, [pc, #172]	; (8004350 <low_level_init+0x144>)
 80042a4:	f7fd f909 	bl	80014ba <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2206      	movs	r2, #6
 80042ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80042b0:	4b27      	ldr	r3, [pc, #156]	; (8004350 <low_level_init+0x144>)
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	781a      	ldrb	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80042bc:	4b24      	ldr	r3, [pc, #144]	; (8004350 <low_level_init+0x144>)
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	785a      	ldrb	r2, [r3, #1]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80042c8:	4b21      	ldr	r3, [pc, #132]	; (8004350 <low_level_init+0x144>)
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	789a      	ldrb	r2, [r3, #2]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80042d4:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <low_level_init+0x144>)
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	78da      	ldrb	r2, [r3, #3]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <low_level_init+0x144>)
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	791a      	ldrb	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80042ec:	4b18      	ldr	r3, [pc, #96]	; (8004350 <low_level_init+0x144>)
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	795a      	ldrb	r2, [r3, #5]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80042fe:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004306:	f043 030a 	orr.w	r3, r3, #10
 800430a:	b2da      	uxtb	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004312:	480f      	ldr	r0, [pc, #60]	; (8004350 <low_level_init+0x144>)
 8004314:	f7fd fbff 	bl	8001b16 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004318:	f107 0310 	add.w	r3, r7, #16
 800431c:	461a      	mov	r2, r3
 800431e:	211d      	movs	r1, #29
 8004320:	480b      	ldr	r0, [pc, #44]	; (8004350 <low_level_init+0x144>)
 8004322:	f7fd fb2a 	bl	800197a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	f043 030b 	orr.w	r3, r3, #11
 800432c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	461a      	mov	r2, r3
 8004332:	211d      	movs	r1, #29
 8004334:	4806      	ldr	r0, [pc, #24]	; (8004350 <low_level_init+0x144>)
 8004336:	f7fd fb88 	bl	8001a4a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800433a:	f107 0310 	add.w	r3, r7, #16
 800433e:	461a      	mov	r2, r3
 8004340:	211d      	movs	r1, #29
 8004342:	4803      	ldr	r0, [pc, #12]	; (8004350 <low_level_init+0x144>)
 8004344:	f7fd fb19 	bl	800197a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004348:	bf00      	nop
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	20001bd4 	.word	0x20001bd4
 8004354:	40028000 	.word	0x40028000
 8004358:	20001c1c 	.word	0x20001c1c
 800435c:	20000304 	.word	0x20000304
 8004360:	20000384 	.word	0x20000384
 8004364:	20001b54 	.word	0x20001b54

08004368 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	; 0x28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004372:	4b4b      	ldr	r3, [pc, #300]	; (80044a0 <low_level_output+0x138>)
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800437e:	2300      	movs	r3, #0
 8004380:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800438a:	4b45      	ldr	r3, [pc, #276]	; (80044a0 <low_level_output+0x138>)
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	623b      	str	r3, [r7, #32]
 8004398:	e05a      	b.n	8004450 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da03      	bge.n	80043aa <low_level_output+0x42>
      {
        errval = ERR_USE;
 80043a2:	23f8      	movs	r3, #248	; 0xf8
 80043a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80043a8:	e05c      	b.n	8004464 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	895b      	ldrh	r3, [r3, #10]
 80043ae:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80043b4:	e02f      	b.n	8004416 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	18d0      	adds	r0, r2, r3
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	18d1      	adds	r1, r2, r3
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	461a      	mov	r2, r3
 80043ce:	f00a f920 	bl	800e612 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	da03      	bge.n	80043e8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80043e0:	23f8      	movs	r3, #248	; 0xf8
 80043e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80043e6:	e03d      	b.n	8004464 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80043f8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004404:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004410:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4413      	add	r3, r2
 800441c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004420:	4293      	cmp	r3, r2
 8004422:	d8c8      	bhi.n	80043b6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004424:	69fa      	ldr	r2, [r7, #28]
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	18d0      	adds	r0, r2, r3
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4413      	add	r3, r2
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	4619      	mov	r1, r3
 8004436:	f00a f8ec 	bl	800e612 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	623b      	str	r3, [r7, #32]
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1a1      	bne.n	800439a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004456:	6979      	ldr	r1, [r7, #20]
 8004458:	4811      	ldr	r0, [pc, #68]	; (80044a0 <low_level_output+0x138>)
 800445a:	f7fd f89b 	bl	8001594 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004464:	4b0e      	ldr	r3, [pc, #56]	; (80044a0 <low_level_output+0x138>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	f241 0314 	movw	r3, #4116	; 0x1014
 800446c:	4413      	add	r3, r2
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00d      	beq.n	8004494 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <low_level_output+0x138>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	f241 0314 	movw	r3, #4116	; 0x1014
 8004480:	4413      	add	r3, r2
 8004482:	2220      	movs	r2, #32
 8004484:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <low_level_output+0x138>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	f241 0304 	movw	r3, #4100	; 0x1004
 800448e:	4413      	add	r3, r2
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004494:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004498:	4618      	mov	r0, r3
 800449a:	3728      	adds	r7, #40	; 0x28
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20001bd4 	.word	0x20001bd4

080044a4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08c      	sub	sp, #48	; 0x30
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80044c8:	484f      	ldr	r0, [pc, #316]	; (8004608 <low_level_input+0x164>)
 80044ca:	f7fd f94d 	bl	8001768 <HAL_ETH_GetReceivedFrame>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <low_level_input+0x34>

    return NULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	e092      	b.n	80045fe <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80044d8:	4b4b      	ldr	r3, [pc, #300]	; (8004608 <low_level_input+0x164>)
 80044da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044dc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80044de:	4b4a      	ldr	r3, [pc, #296]	; (8004608 <low_level_input+0x164>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80044e4:	89fb      	ldrh	r3, [r7, #14]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80044ea:	89fb      	ldrh	r3, [r7, #14]
 80044ec:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80044f0:	4619      	mov	r1, r3
 80044f2:	2000      	movs	r0, #0
 80044f4:	f001 f936 	bl	8005764 <pbuf_alloc>
 80044f8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d04b      	beq.n	8004598 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004500:	4b41      	ldr	r3, [pc, #260]	; (8004608 <low_level_input+0x164>)
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004506:	2300      	movs	r3, #0
 8004508:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800450a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
 800450e:	e040      	b.n	8004592 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004512:	895b      	ldrh	r3, [r3, #10]
 8004514:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800451a:	e021      	b.n	8004560 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	18d0      	adds	r0, r2, r3
 8004524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	18d1      	adds	r1, r2, r3
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	461a      	mov	r2, r3
 8004534:	f00a f86d 	bl	800e612 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	4413      	add	r3, r2
 800454a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800454e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800455a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800455c:	2300      	movs	r3, #0
 800455e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	4413      	add	r3, r2
 8004566:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800456a:	4293      	cmp	r3, r2
 800456c:	d8d6      	bhi.n	800451c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	18d0      	adds	r0, r2, r3
 8004576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	4413      	add	r3, r2
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4619      	mov	r1, r3
 8004580:	f00a f847 	bl	800e612 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	4413      	add	r3, r2
 800458a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800458c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
 8004592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1bb      	bne.n	8004510 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004598:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <low_level_input+0x164>)
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	e00b      	b.n	80045bc <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	3301      	adds	r3, #1
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	4b12      	ldr	r3, [pc, #72]	; (8004608 <low_level_input+0x164>)
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d3ee      	bcc.n	80045a4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80045c6:	4b10      	ldr	r3, [pc, #64]	; (8004608 <low_level_input+0x164>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <low_level_input+0x164>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	f241 0314 	movw	r3, #4116	; 0x1014
 80045d4:	4413      	add	r3, r2
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <low_level_input+0x164>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	f241 0314 	movw	r3, #4116	; 0x1014
 80045e8:	4413      	add	r3, r2
 80045ea:	2280      	movs	r2, #128	; 0x80
 80045ec:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80045ee:	4b06      	ldr	r3, [pc, #24]	; (8004608 <low_level_input+0x164>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	f241 0308 	movw	r3, #4104	; 0x1008
 80045f6:	4413      	add	r3, r2
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]
  }
  return p;
 80045fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3730      	adds	r7, #48	; 0x30
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20001bd4 	.word	0x20001bd4

0800460c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ff45 	bl	80044a4 <low_level_input>
 800461a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d010      	beq.n	8004644 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	4798      	blx	r3
 800462c:	4603      	mov	r3, r0
 800462e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8004630:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d006      	beq.n	8004646 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f001 fb73 	bl	8005d24 <pbuf_free>
    p = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	e000      	b.n	8004646 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004644:	bf00      	nop
  }
}
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <ethernetif_init+0x1c>
 800465a:	4b0e      	ldr	r3, [pc, #56]	; (8004694 <ethernetif_init+0x48>)
 800465c:	f240 220d 	movw	r2, #525	; 0x20d
 8004660:	490d      	ldr	r1, [pc, #52]	; (8004698 <ethernetif_init+0x4c>)
 8004662:	480e      	ldr	r0, [pc, #56]	; (800469c <ethernetif_init+0x50>)
 8004664:	f009 ffe8 	bl	800e638 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2273      	movs	r2, #115	; 0x73
 800466c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2274      	movs	r2, #116	; 0x74
 8004674:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <ethernetif_init+0x54>)
 800467c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <ethernetif_init+0x58>)
 8004682:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f7ff fdc1 	bl	800420c <low_level_init>

  return ERR_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	0800f490 	.word	0x0800f490
 8004698:	0800f4ac 	.word	0x0800f4ac
 800469c:	0800f4bc 	.word	0x0800f4bc
 80046a0:	0800c8d5 	.word	0x0800c8d5
 80046a4:	08004369 	.word	0x08004369

080046a8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80046ac:	f7fc fbf0 	bl	8000e90 <HAL_GetTick>
 80046b0:	4603      	mov	r3, r0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	bd80      	pop	{r7, pc}
	...

080046b8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80046ce:	089b      	lsrs	r3, r3, #2
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d05d      	beq.n	8004796 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80046da:	4b34      	ldr	r3, [pc, #208]	; (80047ac <ethernetif_update_config+0xf4>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d03f      	beq.n	8004762 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80046e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046e6:	2100      	movs	r1, #0
 80046e8:	4830      	ldr	r0, [pc, #192]	; (80047ac <ethernetif_update_config+0xf4>)
 80046ea:	f7fd f9ae 	bl	8001a4a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80046ee:	f7fc fbcf 	bl	8000e90 <HAL_GetTick>
 80046f2:	4603      	mov	r3, r0
 80046f4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80046f6:	f107 0308 	add.w	r3, r7, #8
 80046fa:	461a      	mov	r2, r3
 80046fc:	2101      	movs	r1, #1
 80046fe:	482b      	ldr	r0, [pc, #172]	; (80047ac <ethernetif_update_config+0xf4>)
 8004700:	f7fd f93b 	bl	800197a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004704:	f7fc fbc4 	bl	8000e90 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004712:	d828      	bhi.n	8004766 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0eb      	beq.n	80046f6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800471e:	f107 0308 	add.w	r3, r7, #8
 8004722:	461a      	mov	r2, r3
 8004724:	211f      	movs	r1, #31
 8004726:	4821      	ldr	r0, [pc, #132]	; (80047ac <ethernetif_update_config+0xf4>)
 8004728:	f7fd f927 	bl	800197a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 0310 	and.w	r3, r3, #16
 8004732:	2b00      	cmp	r3, #0
 8004734:	d004      	beq.n	8004740 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004736:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <ethernetif_update_config+0xf4>)
 8004738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800473c:	60da      	str	r2, [r3, #12]
 800473e:	e002      	b.n	8004746 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004740:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <ethernetif_update_config+0xf4>)
 8004742:	2200      	movs	r2, #0
 8004744:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004750:	4b16      	ldr	r3, [pc, #88]	; (80047ac <ethernetif_update_config+0xf4>)
 8004752:	2200      	movs	r2, #0
 8004754:	609a      	str	r2, [r3, #8]
 8004756:	e016      	b.n	8004786 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004758:	4b14      	ldr	r3, [pc, #80]	; (80047ac <ethernetif_update_config+0xf4>)
 800475a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800475e:	609a      	str	r2, [r3, #8]
 8004760:	e011      	b.n	8004786 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004762:	bf00      	nop
 8004764:	e000      	b.n	8004768 <ethernetif_update_config+0xb0>
          goto error;
 8004766:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004768:	4b10      	ldr	r3, [pc, #64]	; (80047ac <ethernetif_update_config+0xf4>)
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	08db      	lsrs	r3, r3, #3
 800476e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004770:	4b0e      	ldr	r3, [pc, #56]	; (80047ac <ethernetif_update_config+0xf4>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	085b      	lsrs	r3, r3, #1
 8004776:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004778:	4313      	orrs	r3, r2
 800477a:	b29b      	uxth	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	2100      	movs	r1, #0
 8004780:	480a      	ldr	r0, [pc, #40]	; (80047ac <ethernetif_update_config+0xf4>)
 8004782:	f7fd f962 	bl	8001a4a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004786:	2100      	movs	r1, #0
 8004788:	4808      	ldr	r0, [pc, #32]	; (80047ac <ethernetif_update_config+0xf4>)
 800478a:	f7fd fa23 	bl	8001bd4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800478e:	4807      	ldr	r0, [pc, #28]	; (80047ac <ethernetif_update_config+0xf4>)
 8004790:	f7fd f9c1 	bl	8001b16 <HAL_ETH_Start>
 8004794:	e002      	b.n	800479c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004796:	4805      	ldr	r0, [pc, #20]	; (80047ac <ethernetif_update_config+0xf4>)
 8004798:	f7fd f9ec 	bl	8001b74 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f807 	bl	80047b0 <ethernetif_notify_conn_changed>
}
 80047a2:	bf00      	nop
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20001bd4 	.word	0x20001bd4

080047b0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	021b      	lsls	r3, r3, #8
 80047d2:	b21a      	sxth	r2, r3
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	b29b      	uxth	r3, r3
 80047da:	b21b      	sxth	r3, r3
 80047dc:	4313      	orrs	r3, r2
 80047de:	b21b      	sxth	r3, r3
 80047e0:	b29b      	uxth	r3, r3
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	061a      	lsls	r2, r3, #24
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	0e1b      	lsrs	r3, r3, #24
 8004812:	4313      	orrs	r3, r2
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800482a:	f000 f8d5 	bl	80049d8 <mem_init>
  memp_init();
 800482e:	f000 fbdb 	bl	8004fe8 <memp_init>
  pbuf_init();
  netif_init();
 8004832:	f000 fc93 	bl	800515c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004836:	f007 fa47 	bl	800bcc8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800483a:	f001 fd01 	bl	8006240 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800483e:	f007 f9bb 	bl	800bbb8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <ptr_to_mem+0x20>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	4413      	add	r3, r2
}
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	2000009c 	.word	0x2000009c

08004870 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a05      	ldr	r2, [pc, #20]	; (8004890 <mem_to_ptr+0x20>)
 800487c:	6812      	ldr	r2, [r2, #0]
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	b29b      	uxth	r3, r3
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	2000009c 	.word	0x2000009c

08004894 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004894:	b590      	push	{r4, r7, lr}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800489c:	4b45      	ldr	r3, [pc, #276]	; (80049b4 <plug_holes+0x120>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d206      	bcs.n	80048b4 <plug_holes+0x20>
 80048a6:	4b44      	ldr	r3, [pc, #272]	; (80049b8 <plug_holes+0x124>)
 80048a8:	f240 12df 	movw	r2, #479	; 0x1df
 80048ac:	4943      	ldr	r1, [pc, #268]	; (80049bc <plug_holes+0x128>)
 80048ae:	4844      	ldr	r0, [pc, #272]	; (80049c0 <plug_holes+0x12c>)
 80048b0:	f009 fec2 	bl	800e638 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80048b4:	4b43      	ldr	r3, [pc, #268]	; (80049c4 <plug_holes+0x130>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d306      	bcc.n	80048cc <plug_holes+0x38>
 80048be:	4b3e      	ldr	r3, [pc, #248]	; (80049b8 <plug_holes+0x124>)
 80048c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80048c4:	4940      	ldr	r1, [pc, #256]	; (80049c8 <plug_holes+0x134>)
 80048c6:	483e      	ldr	r0, [pc, #248]	; (80049c0 <plug_holes+0x12c>)
 80048c8:	f009 feb6 	bl	800e638 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	791b      	ldrb	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d006      	beq.n	80048e2 <plug_holes+0x4e>
 80048d4:	4b38      	ldr	r3, [pc, #224]	; (80049b8 <plug_holes+0x124>)
 80048d6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80048da:	493c      	ldr	r1, [pc, #240]	; (80049cc <plug_holes+0x138>)
 80048dc:	4838      	ldr	r0, [pc, #224]	; (80049c0 <plug_holes+0x12c>)
 80048de:	f009 feab 	bl	800e638 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80048ea:	d906      	bls.n	80048fa <plug_holes+0x66>
 80048ec:	4b32      	ldr	r3, [pc, #200]	; (80049b8 <plug_holes+0x124>)
 80048ee:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80048f2:	4937      	ldr	r1, [pc, #220]	; (80049d0 <plug_holes+0x13c>)
 80048f4:	4832      	ldr	r0, [pc, #200]	; (80049c0 <plug_holes+0x12c>)
 80048f6:	f009 fe9f 	bl	800e638 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7ff ffa4 	bl	800484c <ptr_to_mem>
 8004904:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	429a      	cmp	r2, r3
 800490c:	d024      	beq.n	8004958 <plug_holes+0xc4>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	791b      	ldrb	r3, [r3, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d120      	bne.n	8004958 <plug_holes+0xc4>
 8004916:	4b2b      	ldr	r3, [pc, #172]	; (80049c4 <plug_holes+0x130>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	429a      	cmp	r2, r3
 800491e:	d01b      	beq.n	8004958 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004920:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <plug_holes+0x140>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	429a      	cmp	r2, r3
 8004928:	d102      	bne.n	8004930 <plug_holes+0x9c>
      lfree = mem;
 800492a:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <plug_holes+0x140>)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	881a      	ldrh	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004940:	d00a      	beq.n	8004958 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff ff80 	bl	800484c <ptr_to_mem>
 800494c:	4604      	mov	r4, r0
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff ff8e 	bl	8004870 <mem_to_ptr>
 8004954:	4603      	mov	r3, r0
 8004956:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	885b      	ldrh	r3, [r3, #2]
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff ff75 	bl	800484c <ptr_to_mem>
 8004962:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	d01f      	beq.n	80049ac <plug_holes+0x118>
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	791b      	ldrb	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d11b      	bne.n	80049ac <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004974:	4b17      	ldr	r3, [pc, #92]	; (80049d4 <plug_holes+0x140>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d102      	bne.n	8004984 <plug_holes+0xf0>
      lfree = pmem;
 800497e:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <plug_holes+0x140>)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	881a      	ldrh	r2, [r3, #0]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004994:	d00a      	beq.n	80049ac <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff ff56 	bl	800484c <ptr_to_mem>
 80049a0:	4604      	mov	r4, r0
 80049a2:	68b8      	ldr	r0, [r7, #8]
 80049a4:	f7ff ff64 	bl	8004870 <mem_to_ptr>
 80049a8:	4603      	mov	r3, r0
 80049aa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80049ac:	bf00      	nop
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd90      	pop	{r4, r7, pc}
 80049b4:	2000009c 	.word	0x2000009c
 80049b8:	0800f4e4 	.word	0x0800f4e4
 80049bc:	0800f514 	.word	0x0800f514
 80049c0:	0800f52c 	.word	0x0800f52c
 80049c4:	200000a0 	.word	0x200000a0
 80049c8:	0800f554 	.word	0x0800f554
 80049cc:	0800f570 	.word	0x0800f570
 80049d0:	0800f58c 	.word	0x0800f58c
 80049d4:	200000a4 	.word	0x200000a4

080049d8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80049de:	4b18      	ldr	r3, [pc, #96]	; (8004a40 <mem_init+0x68>)
 80049e0:	3303      	adds	r3, #3
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	461a      	mov	r2, r3
 80049e8:	4b16      	ldr	r3, [pc, #88]	; (8004a44 <mem_init+0x6c>)
 80049ea:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80049ec:	4b15      	ldr	r3, [pc, #84]	; (8004a44 <mem_init+0x6c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80049f8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004a06:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004a0a:	f7ff ff1f 	bl	800484c <ptr_to_mem>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <mem_init+0x70>)
 8004a12:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8004a14:	4b0c      	ldr	r3, [pc, #48]	; (8004a48 <mem_init+0x70>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004a1c:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <mem_init+0x70>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004a24:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004a26:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <mem_init+0x70>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004a2e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004a30:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <mem_init+0x6c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a05      	ldr	r2, [pc, #20]	; (8004a4c <mem_init+0x74>)
 8004a36:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	20003404 	.word	0x20003404
 8004a44:	2000009c 	.word	0x2000009c
 8004a48:	200000a0 	.word	0x200000a0
 8004a4c:	200000a4 	.word	0x200000a4

08004a50 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff ff09 	bl	8004870 <mem_to_ptr>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff fef0 	bl	800484c <ptr_to_mem>
 8004a6c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	885b      	ldrh	r3, [r3, #2]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff feea 	bl	800484c <ptr_to_mem>
 8004a78:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a82:	d818      	bhi.n	8004ab6 <mem_link_valid+0x66>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	885b      	ldrh	r3, [r3, #2]
 8004a88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a8c:	d813      	bhi.n	8004ab6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004a92:	8afa      	ldrh	r2, [r7, #22]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d004      	beq.n	8004aa2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	8afa      	ldrh	r2, [r7, #22]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d109      	bne.n	8004ab6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004aa2:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <mem_link_valid+0x74>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d006      	beq.n	8004aba <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	885b      	ldrh	r3, [r3, #2]
 8004ab0:	8afa      	ldrh	r2, [r7, #22]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d001      	beq.n	8004aba <mem_link_valid+0x6a>
    return 0;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e000      	b.n	8004abc <mem_link_valid+0x6c>
  }
  return 1;
 8004aba:	2301      	movs	r3, #1
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	200000a0 	.word	0x200000a0

08004ac8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d04c      	beq.n	8004b70 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d007      	beq.n	8004af0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004ae0:	4b25      	ldr	r3, [pc, #148]	; (8004b78 <mem_free+0xb0>)
 8004ae2:	f240 2273 	movw	r2, #627	; 0x273
 8004ae6:	4925      	ldr	r1, [pc, #148]	; (8004b7c <mem_free+0xb4>)
 8004ae8:	4825      	ldr	r0, [pc, #148]	; (8004b80 <mem_free+0xb8>)
 8004aea:	f009 fda5 	bl	800e638 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004aee:	e040      	b.n	8004b72 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	3b08      	subs	r3, #8
 8004af4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004af6:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <mem_free+0xbc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d306      	bcc.n	8004b0e <mem_free+0x46>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f103 020c 	add.w	r2, r3, #12
 8004b06:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <mem_free+0xc0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d907      	bls.n	8004b1e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004b0e:	4b1a      	ldr	r3, [pc, #104]	; (8004b78 <mem_free+0xb0>)
 8004b10:	f240 227f 	movw	r2, #639	; 0x27f
 8004b14:	491d      	ldr	r1, [pc, #116]	; (8004b8c <mem_free+0xc4>)
 8004b16:	481a      	ldr	r0, [pc, #104]	; (8004b80 <mem_free+0xb8>)
 8004b18:	f009 fd8e 	bl	800e638 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004b1c:	e029      	b.n	8004b72 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	791b      	ldrb	r3, [r3, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d107      	bne.n	8004b36 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004b26:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <mem_free+0xb0>)
 8004b28:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004b2c:	4918      	ldr	r1, [pc, #96]	; (8004b90 <mem_free+0xc8>)
 8004b2e:	4814      	ldr	r0, [pc, #80]	; (8004b80 <mem_free+0xb8>)
 8004b30:	f009 fd82 	bl	800e638 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004b34:	e01d      	b.n	8004b72 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7ff ff8a 	bl	8004a50 <mem_link_valid>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d107      	bne.n	8004b52 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004b42:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <mem_free+0xb0>)
 8004b44:	f240 2295 	movw	r2, #661	; 0x295
 8004b48:	4912      	ldr	r1, [pc, #72]	; (8004b94 <mem_free+0xcc>)
 8004b4a:	480d      	ldr	r0, [pc, #52]	; (8004b80 <mem_free+0xb8>)
 8004b4c:	f009 fd74 	bl	800e638 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004b50:	e00f      	b.n	8004b72 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004b58:	4b0f      	ldr	r3, [pc, #60]	; (8004b98 <mem_free+0xd0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d202      	bcs.n	8004b68 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004b62:	4a0d      	ldr	r2, [pc, #52]	; (8004b98 <mem_free+0xd0>)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f7ff fe93 	bl	8004894 <plug_holes>
 8004b6e:	e000      	b.n	8004b72 <mem_free+0xaa>
    return;
 8004b70:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	0800f4e4 	.word	0x0800f4e4
 8004b7c:	0800f5b8 	.word	0x0800f5b8
 8004b80:	0800f52c 	.word	0x0800f52c
 8004b84:	2000009c 	.word	0x2000009c
 8004b88:	200000a0 	.word	0x200000a0
 8004b8c:	0800f5dc 	.word	0x0800f5dc
 8004b90:	0800f5f8 	.word	0x0800f5f8
 8004b94:	0800f620 	.word	0x0800f620
 8004b98:	200000a4 	.word	0x200000a4

08004b9c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004ba8:	887b      	ldrh	r3, [r7, #2]
 8004baa:	3303      	adds	r3, #3
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f023 0303 	bic.w	r3, r3, #3
 8004bb2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004bb4:	8bfb      	ldrh	r3, [r7, #30]
 8004bb6:	2b0b      	cmp	r3, #11
 8004bb8:	d801      	bhi.n	8004bbe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004bba:	230c      	movs	r3, #12
 8004bbc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004bbe:	8bfb      	ldrh	r3, [r7, #30]
 8004bc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bc4:	d803      	bhi.n	8004bce <mem_trim+0x32>
 8004bc6:	8bfa      	ldrh	r2, [r7, #30]
 8004bc8:	887b      	ldrh	r3, [r7, #2]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d201      	bcs.n	8004bd2 <mem_trim+0x36>
    return NULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e0cc      	b.n	8004d6c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004bd2:	4b68      	ldr	r3, [pc, #416]	; (8004d74 <mem_trim+0x1d8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d304      	bcc.n	8004be6 <mem_trim+0x4a>
 8004bdc:	4b66      	ldr	r3, [pc, #408]	; (8004d78 <mem_trim+0x1dc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d306      	bcc.n	8004bf4 <mem_trim+0x58>
 8004be6:	4b65      	ldr	r3, [pc, #404]	; (8004d7c <mem_trim+0x1e0>)
 8004be8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8004bec:	4964      	ldr	r1, [pc, #400]	; (8004d80 <mem_trim+0x1e4>)
 8004bee:	4865      	ldr	r0, [pc, #404]	; (8004d84 <mem_trim+0x1e8>)
 8004bf0:	f009 fd22 	bl	800e638 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004bf4:	4b5f      	ldr	r3, [pc, #380]	; (8004d74 <mem_trim+0x1d8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d304      	bcc.n	8004c08 <mem_trim+0x6c>
 8004bfe:	4b5e      	ldr	r3, [pc, #376]	; (8004d78 <mem_trim+0x1dc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d301      	bcc.n	8004c0c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	e0af      	b.n	8004d6c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3b08      	subs	r3, #8
 8004c10:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004c12:	69b8      	ldr	r0, [r7, #24]
 8004c14:	f7ff fe2c 	bl	8004870 <mem_to_ptr>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	881a      	ldrh	r2, [r3, #0]
 8004c20:	8afb      	ldrh	r3, [r7, #22]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b08      	subs	r3, #8
 8004c28:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004c2a:	8bfa      	ldrh	r2, [r7, #30]
 8004c2c:	8abb      	ldrh	r3, [r7, #20]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d906      	bls.n	8004c40 <mem_trim+0xa4>
 8004c32:	4b52      	ldr	r3, [pc, #328]	; (8004d7c <mem_trim+0x1e0>)
 8004c34:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004c38:	4953      	ldr	r1, [pc, #332]	; (8004d88 <mem_trim+0x1ec>)
 8004c3a:	4852      	ldr	r0, [pc, #328]	; (8004d84 <mem_trim+0x1e8>)
 8004c3c:	f009 fcfc 	bl	800e638 <iprintf>
  if (newsize > size) {
 8004c40:	8bfa      	ldrh	r2, [r7, #30]
 8004c42:	8abb      	ldrh	r3, [r7, #20]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d901      	bls.n	8004c4c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e08f      	b.n	8004d6c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004c4c:	8bfa      	ldrh	r2, [r7, #30]
 8004c4e:	8abb      	ldrh	r3, [r7, #20]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d101      	bne.n	8004c58 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	e089      	b.n	8004d6c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fdf5 	bl	800484c <ptr_to_mem>
 8004c62:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	791b      	ldrb	r3, [r3, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d13f      	bne.n	8004cec <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c74:	d106      	bne.n	8004c84 <mem_trim+0xe8>
 8004c76:	4b41      	ldr	r3, [pc, #260]	; (8004d7c <mem_trim+0x1e0>)
 8004c78:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004c7c:	4943      	ldr	r1, [pc, #268]	; (8004d8c <mem_trim+0x1f0>)
 8004c7e:	4841      	ldr	r0, [pc, #260]	; (8004d84 <mem_trim+0x1e8>)
 8004c80:	f009 fcda 	bl	800e638 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004c8a:	8afa      	ldrh	r2, [r7, #22]
 8004c8c:	8bfb      	ldrh	r3, [r7, #30]
 8004c8e:	4413      	add	r3, r2
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3308      	adds	r3, #8
 8004c94:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004c96:	4b3e      	ldr	r3, [pc, #248]	; (8004d90 <mem_trim+0x1f4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d106      	bne.n	8004cae <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004ca0:	89fb      	ldrh	r3, [r7, #14]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff fdd2 	bl	800484c <ptr_to_mem>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	4b39      	ldr	r3, [pc, #228]	; (8004d90 <mem_trim+0x1f4>)
 8004cac:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004cae:	89fb      	ldrh	r3, [r7, #14]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff fdcb 	bl	800484c <ptr_to_mem>
 8004cb6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	89ba      	ldrh	r2, [r7, #12]
 8004cc2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	8afa      	ldrh	r2, [r7, #22]
 8004cc8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	89fa      	ldrh	r2, [r7, #14]
 8004cce:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	881b      	ldrh	r3, [r3, #0]
 8004cd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004cd8:	d047      	beq.n	8004d6a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff fdb4 	bl	800484c <ptr_to_mem>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	89fb      	ldrh	r3, [r7, #14]
 8004ce8:	8053      	strh	r3, [r2, #2]
 8004cea:	e03e      	b.n	8004d6a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004cec:	8bfb      	ldrh	r3, [r7, #30]
 8004cee:	f103 0214 	add.w	r2, r3, #20
 8004cf2:	8abb      	ldrh	r3, [r7, #20]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d838      	bhi.n	8004d6a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004cf8:	8afa      	ldrh	r2, [r7, #22]
 8004cfa:	8bfb      	ldrh	r3, [r7, #30]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3308      	adds	r3, #8
 8004d02:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d0c:	d106      	bne.n	8004d1c <mem_trim+0x180>
 8004d0e:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <mem_trim+0x1e0>)
 8004d10:	f240 3216 	movw	r2, #790	; 0x316
 8004d14:	491d      	ldr	r1, [pc, #116]	; (8004d8c <mem_trim+0x1f0>)
 8004d16:	481b      	ldr	r0, [pc, #108]	; (8004d84 <mem_trim+0x1e8>)
 8004d18:	f009 fc8e 	bl	800e638 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004d1c:	89fb      	ldrh	r3, [r7, #14]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff fd94 	bl	800484c <ptr_to_mem>
 8004d24:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004d26:	4b1a      	ldr	r3, [pc, #104]	; (8004d90 <mem_trim+0x1f4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d202      	bcs.n	8004d36 <mem_trim+0x19a>
      lfree = mem2;
 8004d30:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <mem_trim+0x1f4>)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	881a      	ldrh	r2, [r3, #0]
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	8afa      	ldrh	r2, [r7, #22]
 8004d48:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	89fa      	ldrh	r2, [r7, #14]
 8004d4e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d58:	d007      	beq.n	8004d6a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fd74 	bl	800484c <ptr_to_mem>
 8004d64:	4602      	mov	r2, r0
 8004d66:	89fb      	ldrh	r3, [r7, #14]
 8004d68:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004d6a:	687b      	ldr	r3, [r7, #4]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3720      	adds	r7, #32
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	2000009c 	.word	0x2000009c
 8004d78:	200000a0 	.word	0x200000a0
 8004d7c:	0800f4e4 	.word	0x0800f4e4
 8004d80:	0800f654 	.word	0x0800f654
 8004d84:	0800f52c 	.word	0x0800f52c
 8004d88:	0800f66c 	.word	0x0800f66c
 8004d8c:	0800f68c 	.word	0x0800f68c
 8004d90:	200000a4 	.word	0x200000a4

08004d94 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <mem_malloc+0x14>
    return NULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e0d9      	b.n	8004f5c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	3303      	adds	r3, #3
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004db4:	8bbb      	ldrh	r3, [r7, #28]
 8004db6:	2b0b      	cmp	r3, #11
 8004db8:	d801      	bhi.n	8004dbe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004dba:	230c      	movs	r3, #12
 8004dbc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004dbe:	8bbb      	ldrh	r3, [r7, #28]
 8004dc0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dc4:	d803      	bhi.n	8004dce <mem_malloc+0x3a>
 8004dc6:	8bba      	ldrh	r2, [r7, #28]
 8004dc8:	88fb      	ldrh	r3, [r7, #6]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d201      	bcs.n	8004dd2 <mem_malloc+0x3e>
    return NULL;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e0c4      	b.n	8004f5c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004dd2:	4b64      	ldr	r3, [pc, #400]	; (8004f64 <mem_malloc+0x1d0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fd4a 	bl	8004870 <mem_to_ptr>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	83fb      	strh	r3, [r7, #30]
 8004de0:	e0b4      	b.n	8004f4c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004de2:	8bfb      	ldrh	r3, [r7, #30]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff fd31 	bl	800484c <ptr_to_mem>
 8004dea:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	791b      	ldrb	r3, [r3, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f040 80a4 	bne.w	8004f3e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	8bfb      	ldrh	r3, [r7, #30]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f1a3 0208 	sub.w	r2, r3, #8
 8004e04:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004e06:	429a      	cmp	r2, r3
 8004e08:	f0c0 8099 	bcc.w	8004f3e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	461a      	mov	r2, r3
 8004e12:	8bfb      	ldrh	r3, [r7, #30]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	f1a3 0208 	sub.w	r2, r3, #8
 8004e1a:	8bbb      	ldrh	r3, [r7, #28]
 8004e1c:	3314      	adds	r3, #20
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d333      	bcc.n	8004e8a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004e22:	8bfa      	ldrh	r2, [r7, #30]
 8004e24:	8bbb      	ldrh	r3, [r7, #28]
 8004e26:	4413      	add	r3, r2
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004e2e:	8a7b      	ldrh	r3, [r7, #18]
 8004e30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e34:	d106      	bne.n	8004e44 <mem_malloc+0xb0>
 8004e36:	4b4c      	ldr	r3, [pc, #304]	; (8004f68 <mem_malloc+0x1d4>)
 8004e38:	f240 3287 	movw	r2, #903	; 0x387
 8004e3c:	494b      	ldr	r1, [pc, #300]	; (8004f6c <mem_malloc+0x1d8>)
 8004e3e:	484c      	ldr	r0, [pc, #304]	; (8004f70 <mem_malloc+0x1dc>)
 8004e40:	f009 fbfa 	bl	800e638 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004e44:	8a7b      	ldrh	r3, [r7, #18]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fd00 	bl	800484c <ptr_to_mem>
 8004e4c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	881a      	ldrh	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8bfa      	ldrh	r2, [r7, #30]
 8004e60:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	8a7a      	ldrh	r2, [r7, #18]
 8004e66:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e76:	d00b      	beq.n	8004e90 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff fce5 	bl	800484c <ptr_to_mem>
 8004e82:	4602      	mov	r2, r0
 8004e84:	8a7b      	ldrh	r3, [r7, #18]
 8004e86:	8053      	strh	r3, [r2, #2]
 8004e88:	e002      	b.n	8004e90 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004e90:	4b34      	ldr	r3, [pc, #208]	; (8004f64 <mem_malloc+0x1d0>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d127      	bne.n	8004eea <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004e9a:	4b32      	ldr	r3, [pc, #200]	; (8004f64 <mem_malloc+0x1d0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004ea0:	e005      	b.n	8004eae <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fcd0 	bl	800484c <ptr_to_mem>
 8004eac:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	791b      	ldrb	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d004      	beq.n	8004ec0 <mem_malloc+0x12c>
 8004eb6:	4b2f      	ldr	r3, [pc, #188]	; (8004f74 <mem_malloc+0x1e0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d1f0      	bne.n	8004ea2 <mem_malloc+0x10e>
          }
          lfree = cur;
 8004ec0:	4a28      	ldr	r2, [pc, #160]	; (8004f64 <mem_malloc+0x1d0>)
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004ec6:	4b27      	ldr	r3, [pc, #156]	; (8004f64 <mem_malloc+0x1d0>)
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	4b2a      	ldr	r3, [pc, #168]	; (8004f74 <mem_malloc+0x1e0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d00b      	beq.n	8004eea <mem_malloc+0x156>
 8004ed2:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <mem_malloc+0x1d0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	791b      	ldrb	r3, [r3, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d006      	beq.n	8004eea <mem_malloc+0x156>
 8004edc:	4b22      	ldr	r3, [pc, #136]	; (8004f68 <mem_malloc+0x1d4>)
 8004ede:	f240 32b5 	movw	r2, #949	; 0x3b5
 8004ee2:	4925      	ldr	r1, [pc, #148]	; (8004f78 <mem_malloc+0x1e4>)
 8004ee4:	4822      	ldr	r0, [pc, #136]	; (8004f70 <mem_malloc+0x1dc>)
 8004ee6:	f009 fba7 	bl	800e638 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004eea:	8bba      	ldrh	r2, [r7, #28]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	4413      	add	r3, r2
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	4a20      	ldr	r2, [pc, #128]	; (8004f74 <mem_malloc+0x1e0>)
 8004ef4:	6812      	ldr	r2, [r2, #0]
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d906      	bls.n	8004f08 <mem_malloc+0x174>
 8004efa:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <mem_malloc+0x1d4>)
 8004efc:	f240 32ba 	movw	r2, #954	; 0x3ba
 8004f00:	491e      	ldr	r1, [pc, #120]	; (8004f7c <mem_malloc+0x1e8>)
 8004f02:	481b      	ldr	r0, [pc, #108]	; (8004f70 <mem_malloc+0x1dc>)
 8004f04:	f009 fb98 	bl	800e638 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d006      	beq.n	8004f20 <mem_malloc+0x18c>
 8004f12:	4b15      	ldr	r3, [pc, #84]	; (8004f68 <mem_malloc+0x1d4>)
 8004f14:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8004f18:	4919      	ldr	r1, [pc, #100]	; (8004f80 <mem_malloc+0x1ec>)
 8004f1a:	4815      	ldr	r0, [pc, #84]	; (8004f70 <mem_malloc+0x1dc>)
 8004f1c:	f009 fb8c 	bl	800e638 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d006      	beq.n	8004f38 <mem_malloc+0x1a4>
 8004f2a:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <mem_malloc+0x1d4>)
 8004f2c:	f240 32be 	movw	r2, #958	; 0x3be
 8004f30:	4914      	ldr	r1, [pc, #80]	; (8004f84 <mem_malloc+0x1f0>)
 8004f32:	480f      	ldr	r0, [pc, #60]	; (8004f70 <mem_malloc+0x1dc>)
 8004f34:	f009 fb80 	bl	800e638 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	e00e      	b.n	8004f5c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004f3e:	8bfb      	ldrh	r3, [r7, #30]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fc83 	bl	800484c <ptr_to_mem>
 8004f46:	4603      	mov	r3, r0
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004f4c:	8bfa      	ldrh	r2, [r7, #30]
 8004f4e:	8bbb      	ldrh	r3, [r7, #28]
 8004f50:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004f54:	429a      	cmp	r2, r3
 8004f56:	f4ff af44 	bcc.w	8004de2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3720      	adds	r7, #32
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	200000a4 	.word	0x200000a4
 8004f68:	0800f4e4 	.word	0x0800f4e4
 8004f6c:	0800f68c 	.word	0x0800f68c
 8004f70:	0800f52c 	.word	0x0800f52c
 8004f74:	200000a0 	.word	0x200000a0
 8004f78:	0800f6a0 	.word	0x0800f6a0
 8004f7c:	0800f6bc 	.word	0x0800f6bc
 8004f80:	0800f6ec 	.word	0x0800f6ec
 8004f84:	0800f71c 	.word	0x0800f71c

08004f88 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	3303      	adds	r3, #3
 8004f9e:	f023 0303 	bic.w	r3, r3, #3
 8004fa2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	e011      	b.n	8004fce <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	881b      	ldrh	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	885b      	ldrh	r3, [r3, #2]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	dbe7      	blt.n	8004faa <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004fda:	bf00      	nop
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004fee:	2300      	movs	r3, #0
 8004ff0:	80fb      	strh	r3, [r7, #6]
 8004ff2:	e009      	b.n	8005008 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004ff4:	88fb      	ldrh	r3, [r7, #6]
 8004ff6:	4a08      	ldr	r2, [pc, #32]	; (8005018 <memp_init+0x30>)
 8004ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff ffc3 	bl	8004f88 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005002:	88fb      	ldrh	r3, [r7, #6]
 8005004:	3301      	adds	r3, #1
 8005006:	80fb      	strh	r3, [r7, #6]
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	2b08      	cmp	r3, #8
 800500c:	d9f2      	bls.n	8004ff4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	08011ef8 	.word	0x08011ef8

0800501c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d012      	beq.n	8005058 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	6812      	ldr	r2, [r2, #0]
 800503a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d006      	beq.n	8005054 <do_memp_malloc_pool+0x38>
 8005046:	4b07      	ldr	r3, [pc, #28]	; (8005064 <do_memp_malloc_pool+0x48>)
 8005048:	f240 1219 	movw	r2, #281	; 0x119
 800504c:	4906      	ldr	r1, [pc, #24]	; (8005068 <do_memp_malloc_pool+0x4c>)
 800504e:	4807      	ldr	r0, [pc, #28]	; (800506c <do_memp_malloc_pool+0x50>)
 8005050:	f009 faf2 	bl	800e638 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	e000      	b.n	800505a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	0800f740 	.word	0x0800f740
 8005068:	0800f770 	.word	0x0800f770
 800506c:	0800f794 	.word	0x0800f794

08005070 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	4603      	mov	r3, r0
 8005078:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d908      	bls.n	8005092 <memp_malloc+0x22>
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <memp_malloc+0x3c>)
 8005082:	f240 1257 	movw	r2, #343	; 0x157
 8005086:	490a      	ldr	r1, [pc, #40]	; (80050b0 <memp_malloc+0x40>)
 8005088:	480a      	ldr	r0, [pc, #40]	; (80050b4 <memp_malloc+0x44>)
 800508a:	f009 fad5 	bl	800e638 <iprintf>
 800508e:	2300      	movs	r3, #0
 8005090:	e008      	b.n	80050a4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	4a08      	ldr	r2, [pc, #32]	; (80050b8 <memp_malloc+0x48>)
 8005096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff ffbe 	bl	800501c <do_memp_malloc_pool>
 80050a0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80050a2:	68fb      	ldr	r3, [r7, #12]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	0800f740 	.word	0x0800f740
 80050b0:	0800f7d0 	.word	0x0800f7d0
 80050b4:	0800f794 	.word	0x0800f794
 80050b8:	08011ef8 	.word	0x08011ef8

080050bc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	f003 0303 	and.w	r3, r3, #3
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d006      	beq.n	80050de <do_memp_free_pool+0x22>
 80050d0:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <do_memp_free_pool+0x40>)
 80050d2:	f240 126d 	movw	r2, #365	; 0x16d
 80050d6:	490a      	ldr	r1, [pc, #40]	; (8005100 <do_memp_free_pool+0x44>)
 80050d8:	480a      	ldr	r0, [pc, #40]	; (8005104 <do_memp_free_pool+0x48>)
 80050da:	f009 faad 	bl	800e638 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80050f4:	bf00      	nop
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	0800f740 	.word	0x0800f740
 8005100:	0800f7f0 	.word	0x0800f7f0
 8005104:	0800f794 	.word	0x0800f794

08005108 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	6039      	str	r1, [r7, #0]
 8005112:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	2b08      	cmp	r3, #8
 8005118:	d907      	bls.n	800512a <memp_free+0x22>
 800511a:	4b0c      	ldr	r3, [pc, #48]	; (800514c <memp_free+0x44>)
 800511c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005120:	490b      	ldr	r1, [pc, #44]	; (8005150 <memp_free+0x48>)
 8005122:	480c      	ldr	r0, [pc, #48]	; (8005154 <memp_free+0x4c>)
 8005124:	f009 fa88 	bl	800e638 <iprintf>
 8005128:	e00c      	b.n	8005144 <memp_free+0x3c>

  if (mem == NULL) {
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d008      	beq.n	8005142 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	4a09      	ldr	r2, [pc, #36]	; (8005158 <memp_free+0x50>)
 8005134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff ffbe 	bl	80050bc <do_memp_free_pool>
 8005140:	e000      	b.n	8005144 <memp_free+0x3c>
    return;
 8005142:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	0800f740 	.word	0x0800f740
 8005150:	0800f810 	.word	0x0800f810
 8005154:	0800f794 	.word	0x0800f794
 8005158:	08011ef8 	.word	0x08011ef8

0800515c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005160:	bf00      	nop
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d108      	bne.n	8005192 <netif_add+0x26>
 8005180:	4b57      	ldr	r3, [pc, #348]	; (80052e0 <netif_add+0x174>)
 8005182:	f240 1227 	movw	r2, #295	; 0x127
 8005186:	4957      	ldr	r1, [pc, #348]	; (80052e4 <netif_add+0x178>)
 8005188:	4857      	ldr	r0, [pc, #348]	; (80052e8 <netif_add+0x17c>)
 800518a:	f009 fa55 	bl	800e638 <iprintf>
 800518e:	2300      	movs	r3, #0
 8005190:	e0a2      	b.n	80052d8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	2b00      	cmp	r3, #0
 8005196:	d108      	bne.n	80051aa <netif_add+0x3e>
 8005198:	4b51      	ldr	r3, [pc, #324]	; (80052e0 <netif_add+0x174>)
 800519a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800519e:	4953      	ldr	r1, [pc, #332]	; (80052ec <netif_add+0x180>)
 80051a0:	4851      	ldr	r0, [pc, #324]	; (80052e8 <netif_add+0x17c>)
 80051a2:	f009 fa49 	bl	800e638 <iprintf>
 80051a6:	2300      	movs	r3, #0
 80051a8:	e096      	b.n	80052d8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80051b0:	4b4f      	ldr	r3, [pc, #316]	; (80052f0 <netif_add+0x184>)
 80051b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80051ba:	4b4d      	ldr	r3, [pc, #308]	; (80052f0 <netif_add+0x184>)
 80051bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80051c4:	4b4a      	ldr	r3, [pc, #296]	; (80052f0 <netif_add+0x184>)
 80051c6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4a45      	ldr	r2, [pc, #276]	; (80052f4 <netif_add+0x188>)
 80051de:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a3a      	ldr	r2, [r7, #32]
 80051f8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80051fa:	4b3f      	ldr	r3, [pc, #252]	; (80052f8 <netif_add+0x18c>)
 80051fc:	781a      	ldrb	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005208:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f913 	bl	800543c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	4798      	blx	r3
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <netif_add+0xba>
    return NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	e058      	b.n	80052d8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800522c:	2bff      	cmp	r3, #255	; 0xff
 800522e:	d103      	bne.n	8005238 <netif_add+0xcc>
        netif->num = 0;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005238:	2300      	movs	r3, #0
 800523a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800523c:	4b2f      	ldr	r3, [pc, #188]	; (80052fc <netif_add+0x190>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	617b      	str	r3, [r7, #20]
 8005242:	e02b      	b.n	800529c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	429a      	cmp	r2, r3
 800524a:	d106      	bne.n	800525a <netif_add+0xee>
 800524c:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <netif_add+0x174>)
 800524e:	f240 128b 	movw	r2, #395	; 0x18b
 8005252:	492b      	ldr	r1, [pc, #172]	; (8005300 <netif_add+0x194>)
 8005254:	4824      	ldr	r0, [pc, #144]	; (80052e8 <netif_add+0x17c>)
 8005256:	f009 f9ef 	bl	800e638 <iprintf>
        num_netifs++;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	3301      	adds	r3, #1
 800525e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2bff      	cmp	r3, #255	; 0xff
 8005264:	dd06      	ble.n	8005274 <netif_add+0x108>
 8005266:	4b1e      	ldr	r3, [pc, #120]	; (80052e0 <netif_add+0x174>)
 8005268:	f240 128d 	movw	r2, #397	; 0x18d
 800526c:	4925      	ldr	r1, [pc, #148]	; (8005304 <netif_add+0x198>)
 800526e:	481e      	ldr	r0, [pc, #120]	; (80052e8 <netif_add+0x17c>)
 8005270:	f009 f9e2 	bl	800e638 <iprintf>
        if (netif2->num == netif->num) {
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005280:	429a      	cmp	r2, r3
 8005282:	d108      	bne.n	8005296 <netif_add+0x12a>
          netif->num++;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800528a:	3301      	adds	r3, #1
 800528c:	b2da      	uxtb	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005294:	e005      	b.n	80052a2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1d0      	bne.n	8005244 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1be      	bne.n	8005226 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052ae:	2bfe      	cmp	r3, #254	; 0xfe
 80052b0:	d103      	bne.n	80052ba <netif_add+0x14e>
    netif_num = 0;
 80052b2:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <netif_add+0x18c>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	e006      	b.n	80052c8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052c0:	3301      	adds	r3, #1
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <netif_add+0x18c>)
 80052c6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80052c8:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <netif_add+0x190>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80052d0:	4a0a      	ldr	r2, [pc, #40]	; (80052fc <netif_add+0x190>)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80052d6:	68fb      	ldr	r3, [r7, #12]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	0800f82c 	.word	0x0800f82c
 80052e4:	0800f8c0 	.word	0x0800f8c0
 80052e8:	0800f87c 	.word	0x0800f87c
 80052ec:	0800f8dc 	.word	0x0800f8dc
 80052f0:	08011f5c 	.word	0x08011f5c
 80052f4:	0800564f 	.word	0x0800564f
 80052f8:	200000cc 	.word	0x200000cc
 80052fc:	20006920 	.word	0x20006920
 8005300:	0800f900 	.word	0x0800f900
 8005304:	0800f914 	.word	0x0800f914

08005308 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f002 fd6f 	bl	8007df8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800531a:	6839      	ldr	r1, [r7, #0]
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f006 fe5d 	bl	800bfdc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <netif_do_set_ipaddr+0x20>
 800533e:	4b1d      	ldr	r3, [pc, #116]	; (80053b4 <netif_do_set_ipaddr+0x88>)
 8005340:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005344:	491c      	ldr	r1, [pc, #112]	; (80053b8 <netif_do_set_ipaddr+0x8c>)
 8005346:	481d      	ldr	r0, [pc, #116]	; (80053bc <netif_do_set_ipaddr+0x90>)
 8005348:	f009 f976 	bl	800e638 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <netif_do_set_ipaddr+0x34>
 8005352:	4b18      	ldr	r3, [pc, #96]	; (80053b4 <netif_do_set_ipaddr+0x88>)
 8005354:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005358:	4917      	ldr	r1, [pc, #92]	; (80053b8 <netif_do_set_ipaddr+0x8c>)
 800535a:	4818      	ldr	r0, [pc, #96]	; (80053bc <netif_do_set_ipaddr+0x90>)
 800535c:	f009 f96c 	bl	800e638 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3304      	adds	r3, #4
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d01c      	beq.n	80053a8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3304      	adds	r3, #4
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800537e:	f107 0314 	add.w	r3, r7, #20
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7ff ffbf 	bl	8005308 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d002      	beq.n	8005396 <netif_do_set_ipaddr+0x6a>
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	e000      	b.n	8005398 <netif_do_set_ipaddr+0x6c>
 8005396:	2300      	movs	r3, #0
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800539c:	2101      	movs	r1, #1
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f8d2 	bl	8005548 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	0800f82c 	.word	0x0800f82c
 80053b8:	0800f944 	.word	0x0800f944
 80053bc:	0800f87c 	.word	0x0800f87c

080053c0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3308      	adds	r3, #8
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d00a      	beq.n	80053f0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <netif_do_set_netmask+0x26>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	e000      	b.n	80053e8 <netif_do_set_netmask+0x28>
 80053e6:	2300      	movs	r3, #0
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80053fe:	b480      	push	{r7}
 8005400:	b085      	sub	sp, #20
 8005402:	af00      	add	r7, sp, #0
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	330c      	adds	r3, #12
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	429a      	cmp	r2, r3
 8005416:	d00a      	beq.n	800542e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <netif_do_set_gw+0x26>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	e000      	b.n	8005426 <netif_do_set_gw+0x28>
 8005424:	2300      	movs	r3, #0
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800542a:	2301      	movs	r3, #1
 800542c:	e000      	b.n	8005430 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
 8005448:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800544e:	2300      	movs	r3, #0
 8005450:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005458:	4b1c      	ldr	r3, [pc, #112]	; (80054cc <netif_set_addr+0x90>)
 800545a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005462:	4b1a      	ldr	r3, [pc, #104]	; (80054cc <netif_set_addr+0x90>)
 8005464:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800546c:	4b17      	ldr	r3, [pc, #92]	; (80054cc <netif_set_addr+0x90>)
 800546e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <netif_set_addr+0x42>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <netif_set_addr+0x46>
 800547e:	2301      	movs	r3, #1
 8005480:	e000      	b.n	8005484 <netif_set_addr+0x48>
 8005482:	2300      	movs	r3, #0
 8005484:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d006      	beq.n	800549a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800548c:	f107 0310 	add.w	r3, r7, #16
 8005490:	461a      	mov	r2, r3
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f7ff ff49 	bl	800532c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800549a:	69fa      	ldr	r2, [r7, #28]
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff ff8e 	bl	80053c0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	6839      	ldr	r1, [r7, #0]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff ffa8 	bl	80053fe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d106      	bne.n	80054c2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80054b4:	f107 0310 	add.w	r3, r7, #16
 80054b8:	461a      	mov	r2, r3
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f7ff ff35 	bl	800532c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80054c2:	bf00      	nop
 80054c4:	3720      	adds	r7, #32
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	08011f5c 	.word	0x08011f5c

080054d0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80054d8:	4a04      	ldr	r2, [pc, #16]	; (80054ec <netif_set_default+0x1c>)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	20006924 	.word	0x20006924

080054f0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d107      	bne.n	800550e <netif_set_up+0x1e>
 80054fe:	4b0f      	ldr	r3, [pc, #60]	; (800553c <netif_set_up+0x4c>)
 8005500:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005504:	490e      	ldr	r1, [pc, #56]	; (8005540 <netif_set_up+0x50>)
 8005506:	480f      	ldr	r0, [pc, #60]	; (8005544 <netif_set_up+0x54>)
 8005508:	f009 f896 	bl	800e638 <iprintf>
 800550c:	e013      	b.n	8005536 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10c      	bne.n	8005536 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	b2da      	uxtb	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800552e:	2103      	movs	r1, #3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f809 	bl	8005548 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	0800f82c 	.word	0x0800f82c
 8005540:	0800f9b4 	.word	0x0800f9b4
 8005544:	0800f87c 	.word	0x0800f87c

08005548 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <netif_issue_reports+0x20>
 800555a:	4b18      	ldr	r3, [pc, #96]	; (80055bc <netif_issue_reports+0x74>)
 800555c:	f240 326d 	movw	r2, #877	; 0x36d
 8005560:	4917      	ldr	r1, [pc, #92]	; (80055c0 <netif_issue_reports+0x78>)
 8005562:	4818      	ldr	r0, [pc, #96]	; (80055c4 <netif_issue_reports+0x7c>)
 8005564:	f009 f868 	bl	800e638 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	d01e      	beq.n	80055b4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800557c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005580:	2b00      	cmp	r3, #0
 8005582:	d017      	beq.n	80055b4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b00      	cmp	r3, #0
 800558c:	d013      	beq.n	80055b6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3304      	adds	r3, #4
 8005592:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00e      	beq.n	80055b6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3304      	adds	r3, #4
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f007 fc7f 	bl	800ceb0 <etharp_request>
 80055b2:	e000      	b.n	80055b6 <netif_issue_reports+0x6e>
    return;
 80055b4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	0800f82c 	.word	0x0800f82c
 80055c0:	0800f9d0 	.word	0x0800f9d0
 80055c4:	0800f87c 	.word	0x0800f87c

080055c8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d107      	bne.n	80055e6 <netif_set_down+0x1e>
 80055d6:	4b12      	ldr	r3, [pc, #72]	; (8005620 <netif_set_down+0x58>)
 80055d8:	f240 329b 	movw	r2, #923	; 0x39b
 80055dc:	4911      	ldr	r1, [pc, #68]	; (8005624 <netif_set_down+0x5c>)
 80055de:	4812      	ldr	r0, [pc, #72]	; (8005628 <netif_set_down+0x60>)
 80055e0:	f009 f82a 	bl	800e638 <iprintf>
 80055e4:	e019      	b.n	800561a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d012      	beq.n	800561a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f007 f809 	bl	800c62c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	0800f82c 	.word	0x0800f82c
 8005624:	0800f9f4 	.word	0x0800f9f4
 8005628:	0800f87c 	.word	0x0800f87c

0800562c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	61da      	str	r2, [r3, #28]
  }
}
 8005642:	bf00      	nop
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800564e:	b480      	push	{r7}
 8005650:	b085      	sub	sp, #20
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800565a:	f06f 030b 	mvn.w	r3, #11
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	4603      	mov	r3, r0
 8005674:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d013      	beq.n	80056a4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800567c:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <netif_get_by_index+0x48>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e00c      	b.n	800569e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800568a:	3301      	adds	r3, #1
 800568c:	b2db      	uxtb	r3, r3
 800568e:	79fa      	ldrb	r2, [r7, #7]
 8005690:	429a      	cmp	r2, r3
 8005692:	d101      	bne.n	8005698 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	e006      	b.n	80056a6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1ef      	bne.n	8005684 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	20006920 	.word	0x20006920

080056b8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80056be:	4b0c      	ldr	r3, [pc, #48]	; (80056f0 <pbuf_free_ooseq+0x38>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80056c4:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <pbuf_free_ooseq+0x3c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	607b      	str	r3, [r7, #4]
 80056ca:	e00a      	b.n	80056e2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f002 fbcd 	bl	8007e74 <tcp_free_ooseq>
      return;
 80056da:	e005      	b.n	80056e8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	607b      	str	r3, [r7, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f1      	bne.n	80056cc <pbuf_free_ooseq+0x14>
    }
  }
}
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20006928 	.word	0x20006928
 80056f4:	20006930 	.word	0x20006930

080056f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80056fc:	4b03      	ldr	r3, [pc, #12]	; (800570c <pbuf_pool_is_empty+0x14>)
 80056fe:	2201      	movs	r2, #1
 8005700:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005702:	bf00      	nop
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	20006928 	.word	0x20006928

08005710 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	4611      	mov	r1, r2
 800571c:	461a      	mov	r2, r3
 800571e:	460b      	mov	r3, r1
 8005720:	80fb      	strh	r3, [r7, #6]
 8005722:	4613      	mov	r3, r2
 8005724:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	88fa      	ldrh	r2, [r7, #6]
 8005736:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	88ba      	ldrh	r2, [r7, #4]
 800573c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800573e:	8b3b      	ldrh	r3, [r7, #24]
 8005740:	b2da      	uxtb	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	7f3a      	ldrb	r2, [r7, #28]
 800574a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	73da      	strb	r2, [r3, #15]
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08c      	sub	sp, #48	; 0x30
 8005768:	af02      	add	r7, sp, #8
 800576a:	4603      	mov	r3, r0
 800576c:	71fb      	strb	r3, [r7, #7]
 800576e:	460b      	mov	r3, r1
 8005770:	80bb      	strh	r3, [r7, #4]
 8005772:	4613      	mov	r3, r2
 8005774:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800577a:	887b      	ldrh	r3, [r7, #2]
 800577c:	2b41      	cmp	r3, #65	; 0x41
 800577e:	d00b      	beq.n	8005798 <pbuf_alloc+0x34>
 8005780:	2b41      	cmp	r3, #65	; 0x41
 8005782:	dc02      	bgt.n	800578a <pbuf_alloc+0x26>
 8005784:	2b01      	cmp	r3, #1
 8005786:	d007      	beq.n	8005798 <pbuf_alloc+0x34>
 8005788:	e0c2      	b.n	8005910 <pbuf_alloc+0x1ac>
 800578a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800578e:	d00b      	beq.n	80057a8 <pbuf_alloc+0x44>
 8005790:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005794:	d070      	beq.n	8005878 <pbuf_alloc+0x114>
 8005796:	e0bb      	b.n	8005910 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005798:	887a      	ldrh	r2, [r7, #2]
 800579a:	88bb      	ldrh	r3, [r7, #4]
 800579c:	4619      	mov	r1, r3
 800579e:	2000      	movs	r0, #0
 80057a0:	f000 f8d2 	bl	8005948 <pbuf_alloc_reference>
 80057a4:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80057a6:	e0bd      	b.n	8005924 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80057a8:	2300      	movs	r3, #0
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80057b0:	88bb      	ldrh	r3, [r7, #4]
 80057b2:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80057b4:	2008      	movs	r0, #8
 80057b6:	f7ff fc5b 	bl	8005070 <memp_malloc>
 80057ba:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d109      	bne.n	80057d6 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80057c2:	f7ff ff99 	bl	80056f8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <pbuf_alloc+0x6e>
            pbuf_free(p);
 80057cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057ce:	f000 faa9 	bl	8005d24 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e0a7      	b.n	8005926 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80057d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057d8:	3303      	adds	r3, #3
 80057da:	b29b      	uxth	r3, r3
 80057dc:	f023 0303 	bic.w	r3, r3, #3
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	8b7a      	ldrh	r2, [r7, #26]
 80057ea:	4293      	cmp	r3, r2
 80057ec:	bf28      	it	cs
 80057ee:	4613      	movcs	r3, r2
 80057f0:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80057f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057f4:	3310      	adds	r3, #16
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4413      	add	r3, r2
 80057fa:	3303      	adds	r3, #3
 80057fc:	f023 0303 	bic.w	r3, r3, #3
 8005800:	4618      	mov	r0, r3
 8005802:	89f9      	ldrh	r1, [r7, #14]
 8005804:	8b7a      	ldrh	r2, [r7, #26]
 8005806:	2300      	movs	r3, #0
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	887b      	ldrh	r3, [r7, #2]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	460b      	mov	r3, r1
 8005810:	4601      	mov	r1, r0
 8005812:	6938      	ldr	r0, [r7, #16]
 8005814:	f7ff ff7c 	bl	8005710 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d006      	beq.n	8005832 <pbuf_alloc+0xce>
 8005824:	4b42      	ldr	r3, [pc, #264]	; (8005930 <pbuf_alloc+0x1cc>)
 8005826:	f240 1201 	movw	r2, #257	; 0x101
 800582a:	4942      	ldr	r1, [pc, #264]	; (8005934 <pbuf_alloc+0x1d0>)
 800582c:	4842      	ldr	r0, [pc, #264]	; (8005938 <pbuf_alloc+0x1d4>)
 800582e:	f008 ff03 	bl	800e638 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005834:	3303      	adds	r3, #3
 8005836:	f023 0303 	bic.w	r3, r3, #3
 800583a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800583e:	d106      	bne.n	800584e <pbuf_alloc+0xea>
 8005840:	4b3b      	ldr	r3, [pc, #236]	; (8005930 <pbuf_alloc+0x1cc>)
 8005842:	f240 1203 	movw	r2, #259	; 0x103
 8005846:	493d      	ldr	r1, [pc, #244]	; (800593c <pbuf_alloc+0x1d8>)
 8005848:	483b      	ldr	r0, [pc, #236]	; (8005938 <pbuf_alloc+0x1d4>)
 800584a:	f008 fef5 	bl	800e638 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	2b00      	cmp	r3, #0
 8005852:	d102      	bne.n	800585a <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
 8005858:	e002      	b.n	8005860 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005864:	8b7a      	ldrh	r2, [r7, #26]
 8005866:	89fb      	ldrh	r3, [r7, #14]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005870:	8b7b      	ldrh	r3, [r7, #26]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d19e      	bne.n	80057b4 <pbuf_alloc+0x50>
      break;
 8005876:	e055      	b.n	8005924 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005878:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800587a:	3303      	adds	r3, #3
 800587c:	b29b      	uxth	r3, r3
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	b29a      	uxth	r2, r3
 8005884:	88bb      	ldrh	r3, [r7, #4]
 8005886:	3303      	adds	r3, #3
 8005888:	b29b      	uxth	r3, r3
 800588a:	f023 0303 	bic.w	r3, r3, #3
 800588e:	b29b      	uxth	r3, r3
 8005890:	4413      	add	r3, r2
 8005892:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005894:	8b3b      	ldrh	r3, [r7, #24]
 8005896:	3310      	adds	r3, #16
 8005898:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800589a:	8b3a      	ldrh	r2, [r7, #24]
 800589c:	88bb      	ldrh	r3, [r7, #4]
 800589e:	3303      	adds	r3, #3
 80058a0:	f023 0303 	bic.w	r3, r3, #3
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d306      	bcc.n	80058b6 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80058a8:	8afa      	ldrh	r2, [r7, #22]
 80058aa:	88bb      	ldrh	r3, [r7, #4]
 80058ac:	3303      	adds	r3, #3
 80058ae:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d201      	bcs.n	80058ba <pbuf_alloc+0x156>
        return NULL;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e035      	b.n	8005926 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80058ba:	8afb      	ldrh	r3, [r7, #22]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff fa69 	bl	8004d94 <mem_malloc>
 80058c2:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <pbuf_alloc+0x16a>
        return NULL;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e02b      	b.n	8005926 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80058ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80058d0:	3310      	adds	r3, #16
 80058d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d4:	4413      	add	r3, r2
 80058d6:	3303      	adds	r3, #3
 80058d8:	f023 0303 	bic.w	r3, r3, #3
 80058dc:	4618      	mov	r0, r3
 80058de:	88b9      	ldrh	r1, [r7, #4]
 80058e0:	88ba      	ldrh	r2, [r7, #4]
 80058e2:	2300      	movs	r3, #0
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	887b      	ldrh	r3, [r7, #2]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	460b      	mov	r3, r1
 80058ec:	4601      	mov	r1, r0
 80058ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058f0:	f7ff ff0e 	bl	8005710 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d010      	beq.n	8005922 <pbuf_alloc+0x1be>
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <pbuf_alloc+0x1cc>)
 8005902:	f240 1223 	movw	r2, #291	; 0x123
 8005906:	490e      	ldr	r1, [pc, #56]	; (8005940 <pbuf_alloc+0x1dc>)
 8005908:	480b      	ldr	r0, [pc, #44]	; (8005938 <pbuf_alloc+0x1d4>)
 800590a:	f008 fe95 	bl	800e638 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800590e:	e008      	b.n	8005922 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <pbuf_alloc+0x1cc>)
 8005912:	f240 1227 	movw	r2, #295	; 0x127
 8005916:	490b      	ldr	r1, [pc, #44]	; (8005944 <pbuf_alloc+0x1e0>)
 8005918:	4807      	ldr	r0, [pc, #28]	; (8005938 <pbuf_alloc+0x1d4>)
 800591a:	f008 fe8d 	bl	800e638 <iprintf>
      return NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	e001      	b.n	8005926 <pbuf_alloc+0x1c2>
      break;
 8005922:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005926:	4618      	mov	r0, r3
 8005928:	3728      	adds	r7, #40	; 0x28
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	0800fa5c 	.word	0x0800fa5c
 8005934:	0800fa8c 	.word	0x0800fa8c
 8005938:	0800fabc 	.word	0x0800fabc
 800593c:	0800fae4 	.word	0x0800fae4
 8005940:	0800fb18 	.word	0x0800fb18
 8005944:	0800fb44 	.word	0x0800fb44

08005948 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af02      	add	r7, sp, #8
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	807b      	strh	r3, [r7, #2]
 8005954:	4613      	mov	r3, r2
 8005956:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005958:	883b      	ldrh	r3, [r7, #0]
 800595a:	2b41      	cmp	r3, #65	; 0x41
 800595c:	d009      	beq.n	8005972 <pbuf_alloc_reference+0x2a>
 800595e:	883b      	ldrh	r3, [r7, #0]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d006      	beq.n	8005972 <pbuf_alloc_reference+0x2a>
 8005964:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <pbuf_alloc_reference+0x5c>)
 8005966:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800596a:	490f      	ldr	r1, [pc, #60]	; (80059a8 <pbuf_alloc_reference+0x60>)
 800596c:	480f      	ldr	r0, [pc, #60]	; (80059ac <pbuf_alloc_reference+0x64>)
 800596e:	f008 fe63 	bl	800e638 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005972:	2007      	movs	r0, #7
 8005974:	f7ff fb7c 	bl	8005070 <memp_malloc>
 8005978:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	e00b      	b.n	800599c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005984:	8879      	ldrh	r1, [r7, #2]
 8005986:	887a      	ldrh	r2, [r7, #2]
 8005988:	2300      	movs	r3, #0
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	883b      	ldrh	r3, [r7, #0]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	460b      	mov	r3, r1
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f7ff febb 	bl	8005710 <pbuf_init_alloced_pbuf>
  return p;
 800599a:	68fb      	ldr	r3, [r7, #12]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	0800fa5c 	.word	0x0800fa5c
 80059a8:	0800fb60 	.word	0x0800fb60
 80059ac:	0800fabc 	.word	0x0800fabc

080059b0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	607b      	str	r3, [r7, #4]
 80059b8:	4603      	mov	r3, r0
 80059ba:	73fb      	strb	r3, [r7, #15]
 80059bc:	460b      	mov	r3, r1
 80059be:	81bb      	strh	r3, [r7, #12]
 80059c0:	4613      	mov	r3, r2
 80059c2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80059c8:	8a7b      	ldrh	r3, [r7, #18]
 80059ca:	3303      	adds	r3, #3
 80059cc:	f023 0203 	bic.w	r2, r3, #3
 80059d0:	89bb      	ldrh	r3, [r7, #12]
 80059d2:	441a      	add	r2, r3
 80059d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d901      	bls.n	80059de <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80059da:	2300      	movs	r3, #0
 80059dc:	e018      	b.n	8005a10 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d007      	beq.n	80059f4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80059e4:	8a7b      	ldrh	r3, [r7, #18]
 80059e6:	3303      	adds	r3, #3
 80059e8:	f023 0303 	bic.w	r3, r3, #3
 80059ec:	6a3a      	ldr	r2, [r7, #32]
 80059ee:	4413      	add	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	e001      	b.n	80059f8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	89b9      	ldrh	r1, [r7, #12]
 80059fc:	89ba      	ldrh	r2, [r7, #12]
 80059fe:	2302      	movs	r3, #2
 8005a00:	9301      	str	r3, [sp, #4]
 8005a02:	897b      	ldrh	r3, [r7, #10]
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	460b      	mov	r3, r1
 8005a08:	6979      	ldr	r1, [r7, #20]
 8005a0a:	f7ff fe81 	bl	8005710 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005a0e:	687b      	ldr	r3, [r7, #4]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <pbuf_realloc+0x20>
 8005a2a:	4b3a      	ldr	r3, [pc, #232]	; (8005b14 <pbuf_realloc+0xfc>)
 8005a2c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005a30:	4939      	ldr	r1, [pc, #228]	; (8005b18 <pbuf_realloc+0x100>)
 8005a32:	483a      	ldr	r0, [pc, #232]	; (8005b1c <pbuf_realloc+0x104>)
 8005a34:	f008 fe00 	bl	800e638 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	891b      	ldrh	r3, [r3, #8]
 8005a3c:	887a      	ldrh	r2, [r7, #2]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d264      	bcs.n	8005b0c <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	891a      	ldrh	r2, [r3, #8]
 8005a46:	887b      	ldrh	r3, [r7, #2]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005a4c:	887b      	ldrh	r3, [r7, #2]
 8005a4e:	817b      	strh	r3, [r7, #10]
  q = p;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005a54:	e018      	b.n	8005a88 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	895b      	ldrh	r3, [r3, #10]
 8005a5a:	897a      	ldrh	r2, [r7, #10]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	891a      	ldrh	r2, [r3, #8]
 8005a64:	893b      	ldrh	r3, [r7, #8]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <pbuf_realloc+0x70>
 8005a7a:	4b26      	ldr	r3, [pc, #152]	; (8005b14 <pbuf_realloc+0xfc>)
 8005a7c:	f240 12af 	movw	r2, #431	; 0x1af
 8005a80:	4927      	ldr	r1, [pc, #156]	; (8005b20 <pbuf_realloc+0x108>)
 8005a82:	4826      	ldr	r0, [pc, #152]	; (8005b1c <pbuf_realloc+0x104>)
 8005a84:	f008 fdd8 	bl	800e638 <iprintf>
  while (rem_len > q->len) {
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	895b      	ldrh	r3, [r3, #10]
 8005a8c:	897a      	ldrh	r2, [r7, #10]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d8e1      	bhi.n	8005a56 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	7b1b      	ldrb	r3, [r3, #12]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d122      	bne.n	8005ae4 <pbuf_realloc+0xcc>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	895b      	ldrh	r3, [r3, #10]
 8005aa2:	897a      	ldrh	r2, [r7, #10]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d01d      	beq.n	8005ae4 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	7b5b      	ldrb	r3, [r3, #13]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d117      	bne.n	8005ae4 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	897b      	ldrh	r3, [r7, #10]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f7ff f867 	bl	8004b9c <mem_trim>
 8005ace:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <pbuf_realloc+0xcc>
 8005ad6:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <pbuf_realloc+0xfc>)
 8005ad8:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005adc:	4911      	ldr	r1, [pc, #68]	; (8005b24 <pbuf_realloc+0x10c>)
 8005ade:	480f      	ldr	r0, [pc, #60]	; (8005b1c <pbuf_realloc+0x104>)
 8005ae0:	f008 fdaa 	bl	800e638 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	897a      	ldrh	r2, [r7, #10]
 8005ae8:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	895a      	ldrh	r2, [r3, #10]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d004      	beq.n	8005b04 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 f910 	bl	8005d24 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	e000      	b.n	8005b0e <pbuf_realloc+0xf6>
    return;
 8005b0c:	bf00      	nop

}
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	0800fa5c 	.word	0x0800fa5c
 8005b18:	0800fb74 	.word	0x0800fb74
 8005b1c:	0800fabc 	.word	0x0800fabc
 8005b20:	0800fb8c 	.word	0x0800fb8c
 8005b24:	0800fba4 	.word	0x0800fba4

08005b28 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	4613      	mov	r3, r2
 8005b34:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <pbuf_add_header_impl+0x22>
 8005b3c:	4b2b      	ldr	r3, [pc, #172]	; (8005bec <pbuf_add_header_impl+0xc4>)
 8005b3e:	f240 12df 	movw	r2, #479	; 0x1df
 8005b42:	492b      	ldr	r1, [pc, #172]	; (8005bf0 <pbuf_add_header_impl+0xc8>)
 8005b44:	482b      	ldr	r0, [pc, #172]	; (8005bf4 <pbuf_add_header_impl+0xcc>)
 8005b46:	f008 fd77 	bl	800e638 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <pbuf_add_header_impl+0x30>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b56:	d301      	bcc.n	8005b5c <pbuf_add_header_impl+0x34>
    return 1;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e043      	b.n	8005be4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <pbuf_add_header_impl+0x3e>
    return 0;
 8005b62:	2300      	movs	r3, #0
 8005b64:	e03e      	b.n	8005be4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	891a      	ldrh	r2, [r3, #8]
 8005b6e:	8a7b      	ldrh	r3, [r7, #18]
 8005b70:	4413      	add	r3, r2
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	8a7a      	ldrh	r2, [r7, #18]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d901      	bls.n	8005b7e <pbuf_add_header_impl+0x56>
    return 1;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e032      	b.n	8005be4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	7b1b      	ldrb	r3, [r3, #12]
 8005b82:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005b84:	8a3b      	ldrh	r3, [r7, #16]
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00c      	beq.n	8005ba8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	425b      	negs	r3, r3
 8005b96:	4413      	add	r3, r2
 8005b98:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3310      	adds	r3, #16
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d20d      	bcs.n	8005bc0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e01d      	b.n	8005be4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d006      	beq.n	8005bbc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	425b      	negs	r3, r3
 8005bb6:	4413      	add	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	e001      	b.n	8005bc0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e011      	b.n	8005be4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	895a      	ldrh	r2, [r3, #10]
 8005bca:	8a7b      	ldrh	r3, [r7, #18]
 8005bcc:	4413      	add	r3, r2
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	891a      	ldrh	r2, [r3, #8]
 8005bd8:	8a7b      	ldrh	r3, [r7, #18]
 8005bda:	4413      	add	r3, r2
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	811a      	strh	r2, [r3, #8]


  return 0;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	0800fa5c 	.word	0x0800fa5c
 8005bf0:	0800fbc0 	.word	0x0800fbc0
 8005bf4:	0800fabc 	.word	0x0800fabc

08005bf8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005c02:	2200      	movs	r2, #0
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff ff8e 	bl	8005b28 <pbuf_add_header_impl>
 8005c0c:	4603      	mov	r3, r0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d106      	bne.n	8005c36 <pbuf_remove_header+0x1e>
 8005c28:	4b20      	ldr	r3, [pc, #128]	; (8005cac <pbuf_remove_header+0x94>)
 8005c2a:	f240 224b 	movw	r2, #587	; 0x24b
 8005c2e:	4920      	ldr	r1, [pc, #128]	; (8005cb0 <pbuf_remove_header+0x98>)
 8005c30:	4820      	ldr	r0, [pc, #128]	; (8005cb4 <pbuf_remove_header+0x9c>)
 8005c32:	f008 fd01 	bl	800e638 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d003      	beq.n	8005c44 <pbuf_remove_header+0x2c>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c42:	d301      	bcc.n	8005c48 <pbuf_remove_header+0x30>
    return 1;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e02c      	b.n	8005ca2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <pbuf_remove_header+0x3a>
    return 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e027      	b.n	8005ca2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	895b      	ldrh	r3, [r3, #10]
 8005c5a:	89fa      	ldrh	r2, [r7, #14]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d908      	bls.n	8005c72 <pbuf_remove_header+0x5a>
 8005c60:	4b12      	ldr	r3, [pc, #72]	; (8005cac <pbuf_remove_header+0x94>)
 8005c62:	f240 2255 	movw	r2, #597	; 0x255
 8005c66:	4914      	ldr	r1, [pc, #80]	; (8005cb8 <pbuf_remove_header+0xa0>)
 8005c68:	4812      	ldr	r0, [pc, #72]	; (8005cb4 <pbuf_remove_header+0x9c>)
 8005c6a:	f008 fce5 	bl	800e638 <iprintf>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e017      	b.n	8005ca2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	441a      	add	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	895a      	ldrh	r2, [r3, #10]
 8005c88:	89fb      	ldrh	r3, [r7, #14]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	891a      	ldrh	r2, [r3, #8]
 8005c96:	89fb      	ldrh	r3, [r7, #14]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	0800fa5c 	.word	0x0800fa5c
 8005cb0:	0800fbc0 	.word	0x0800fbc0
 8005cb4:	0800fabc 	.word	0x0800fabc
 8005cb8:	0800fbcc 	.word	0x0800fbcc

08005cbc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	807b      	strh	r3, [r7, #2]
 8005cc8:	4613      	mov	r3, r2
 8005cca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005ccc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	da08      	bge.n	8005ce6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005cd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cd8:	425b      	negs	r3, r3
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff ff9b 	bl	8005c18 <pbuf_remove_header>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	e007      	b.n	8005cf6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005ce6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005cea:	787a      	ldrb	r2, [r7, #1]
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff ff1a 	bl	8005b28 <pbuf_add_header_impl>
 8005cf4:	4603      	mov	r3, r0
  }
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005d0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff ffd2 	bl	8005cbc <pbuf_header_impl>
 8005d18:	4603      	mov	r3, r0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10b      	bne.n	8005d4a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d106      	bne.n	8005d46 <pbuf_free+0x22>
 8005d38:	4b38      	ldr	r3, [pc, #224]	; (8005e1c <pbuf_free+0xf8>)
 8005d3a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005d3e:	4938      	ldr	r1, [pc, #224]	; (8005e20 <pbuf_free+0xfc>)
 8005d40:	4838      	ldr	r0, [pc, #224]	; (8005e24 <pbuf_free+0x100>)
 8005d42:	f008 fc79 	bl	800e638 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005d46:	2300      	movs	r3, #0
 8005d48:	e063      	b.n	8005e12 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005d4e:	e05c      	b.n	8005e0a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	7b9b      	ldrb	r3, [r3, #14]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d106      	bne.n	8005d66 <pbuf_free+0x42>
 8005d58:	4b30      	ldr	r3, [pc, #192]	; (8005e1c <pbuf_free+0xf8>)
 8005d5a:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005d5e:	4932      	ldr	r1, [pc, #200]	; (8005e28 <pbuf_free+0x104>)
 8005d60:	4830      	ldr	r0, [pc, #192]	; (8005e24 <pbuf_free+0x100>)
 8005d62:	f008 fc69 	bl	800e638 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	7b9b      	ldrb	r3, [r3, #14]
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	739a      	strb	r2, [r3, #14]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	7b9b      	ldrb	r3, [r3, #14]
 8005d76:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005d78:	7dbb      	ldrb	r3, [r7, #22]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d143      	bne.n	8005e06 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	7b1b      	ldrb	r3, [r3, #12]
 8005d88:	f003 030f 	and.w	r3, r3, #15
 8005d8c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	7b5b      	ldrb	r3, [r3, #13]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d011      	beq.n	8005dbe <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d106      	bne.n	8005db4 <pbuf_free+0x90>
 8005da6:	4b1d      	ldr	r3, [pc, #116]	; (8005e1c <pbuf_free+0xf8>)
 8005da8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005dac:	491f      	ldr	r1, [pc, #124]	; (8005e2c <pbuf_free+0x108>)
 8005dae:	481d      	ldr	r0, [pc, #116]	; (8005e24 <pbuf_free+0x100>)
 8005db0:	f008 fc42 	bl	800e638 <iprintf>
        pc->custom_free_function(p);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	4798      	blx	r3
 8005dbc:	e01d      	b.n	8005dfa <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d104      	bne.n	8005dce <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	2008      	movs	r0, #8
 8005dc8:	f7ff f99e 	bl	8005108 <memp_free>
 8005dcc:	e015      	b.n	8005dfa <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d104      	bne.n	8005dde <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	2007      	movs	r0, #7
 8005dd8:	f7ff f996 	bl	8005108 <memp_free>
 8005ddc:	e00d      	b.n	8005dfa <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d103      	bne.n	8005dec <pbuf_free+0xc8>
          mem_free(p);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7fe fe6f 	bl	8004ac8 <mem_free>
 8005dea:	e006      	b.n	8005dfa <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005dec:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <pbuf_free+0xf8>)
 8005dee:	f240 320f 	movw	r2, #783	; 0x30f
 8005df2:	490f      	ldr	r1, [pc, #60]	; (8005e30 <pbuf_free+0x10c>)
 8005df4:	480b      	ldr	r0, [pc, #44]	; (8005e24 <pbuf_free+0x100>)
 8005df6:	f008 fc1f 	bl	800e638 <iprintf>
        }
      }
      count++;
 8005dfa:	7dfb      	ldrb	r3, [r7, #23]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	607b      	str	r3, [r7, #4]
 8005e04:	e001      	b.n	8005e0a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005e06:	2300      	movs	r3, #0
 8005e08:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d19f      	bne.n	8005d50 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	0800fa5c 	.word	0x0800fa5c
 8005e20:	0800fbc0 	.word	0x0800fbc0
 8005e24:	0800fabc 	.word	0x0800fabc
 8005e28:	0800fbec 	.word	0x0800fbec
 8005e2c:	0800fc04 	.word	0x0800fc04
 8005e30:	0800fc28 	.word	0x0800fc28

08005e34 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005e40:	e005      	b.n	8005e4e <pbuf_clen+0x1a>
    ++len;
 8005e42:	89fb      	ldrh	r3, [r7, #14]
 8005e44:	3301      	adds	r3, #1
 8005e46:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1f6      	bne.n	8005e42 <pbuf_clen+0xe>
  }
  return len;
 8005e54:	89fb      	ldrh	r3, [r7, #14]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
	...

08005e64 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d010      	beq.n	8005e94 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7b9b      	ldrb	r3, [r3, #14]
 8005e76:	3301      	adds	r3, #1
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	7b9b      	ldrb	r3, [r3, #14]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <pbuf_ref+0x30>
 8005e86:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <pbuf_ref+0x38>)
 8005e88:	f240 3242 	movw	r2, #834	; 0x342
 8005e8c:	4904      	ldr	r1, [pc, #16]	; (8005ea0 <pbuf_ref+0x3c>)
 8005e8e:	4805      	ldr	r0, [pc, #20]	; (8005ea4 <pbuf_ref+0x40>)
 8005e90:	f008 fbd2 	bl	800e638 <iprintf>
  }
}
 8005e94:	bf00      	nop
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	0800fa5c 	.word	0x0800fa5c
 8005ea0:	0800fc3c 	.word	0x0800fc3c
 8005ea4:	0800fabc 	.word	0x0800fabc

08005ea8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <pbuf_cat+0x16>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d107      	bne.n	8005ece <pbuf_cat+0x26>
 8005ebe:	4b20      	ldr	r3, [pc, #128]	; (8005f40 <pbuf_cat+0x98>)
 8005ec0:	f240 325a 	movw	r2, #858	; 0x35a
 8005ec4:	491f      	ldr	r1, [pc, #124]	; (8005f44 <pbuf_cat+0x9c>)
 8005ec6:	4820      	ldr	r0, [pc, #128]	; (8005f48 <pbuf_cat+0xa0>)
 8005ec8:	f008 fbb6 	bl	800e638 <iprintf>
 8005ecc:	e034      	b.n	8005f38 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	e00a      	b.n	8005eea <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	891a      	ldrh	r2, [r3, #8]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	891b      	ldrh	r3, [r3, #8]
 8005edc:	4413      	add	r3, r2
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f0      	bne.n	8005ed4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	891a      	ldrh	r2, [r3, #8]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	895b      	ldrh	r3, [r3, #10]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d006      	beq.n	8005f0c <pbuf_cat+0x64>
 8005efe:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <pbuf_cat+0x98>)
 8005f00:	f240 3262 	movw	r2, #866	; 0x362
 8005f04:	4911      	ldr	r1, [pc, #68]	; (8005f4c <pbuf_cat+0xa4>)
 8005f06:	4810      	ldr	r0, [pc, #64]	; (8005f48 <pbuf_cat+0xa0>)
 8005f08:	f008 fb96 	bl	800e638 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d006      	beq.n	8005f22 <pbuf_cat+0x7a>
 8005f14:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <pbuf_cat+0x98>)
 8005f16:	f240 3263 	movw	r2, #867	; 0x363
 8005f1a:	490d      	ldr	r1, [pc, #52]	; (8005f50 <pbuf_cat+0xa8>)
 8005f1c:	480a      	ldr	r0, [pc, #40]	; (8005f48 <pbuf_cat+0xa0>)
 8005f1e:	f008 fb8b 	bl	800e638 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	891a      	ldrh	r2, [r3, #8]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	891b      	ldrh	r3, [r3, #8]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	0800fa5c 	.word	0x0800fa5c
 8005f44:	0800fc50 	.word	0x0800fc50
 8005f48:	0800fabc 	.word	0x0800fabc
 8005f4c:	0800fc88 	.word	0x0800fc88
 8005f50:	0800fcb8 	.word	0x0800fcb8

08005f54 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	2300      	movs	r3, #0
 8005f64:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <pbuf_copy+0x2a>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d005      	beq.n	8005f7e <pbuf_copy+0x2a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	891a      	ldrh	r2, [r3, #8]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	891b      	ldrh	r3, [r3, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d209      	bcs.n	8005f92 <pbuf_copy+0x3e>
 8005f7e:	4b57      	ldr	r3, [pc, #348]	; (80060dc <pbuf_copy+0x188>)
 8005f80:	f240 32ca 	movw	r2, #970	; 0x3ca
 8005f84:	4956      	ldr	r1, [pc, #344]	; (80060e0 <pbuf_copy+0x18c>)
 8005f86:	4857      	ldr	r0, [pc, #348]	; (80060e4 <pbuf_copy+0x190>)
 8005f88:	f008 fb56 	bl	800e638 <iprintf>
 8005f8c:	f06f 030f 	mvn.w	r3, #15
 8005f90:	e09f      	b.n	80060d2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	895b      	ldrh	r3, [r3, #10]
 8005f96:	461a      	mov	r2, r3
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	1ad2      	subs	r2, r2, r3
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	895b      	ldrh	r3, [r3, #10]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1acb      	subs	r3, r1, r3
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d306      	bcc.n	8005fb8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	895b      	ldrh	r3, [r3, #10]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	60fb      	str	r3, [r7, #12]
 8005fb6:	e005      	b.n	8005fc4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	895b      	ldrh	r3, [r3, #10]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	18d0      	adds	r0, r2, r3
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	f008 fb1b 	bl	800e612 <memcpy>
    offset_to += len;
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4413      	add	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	895b      	ldrh	r3, [r3, #10]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d906      	bls.n	8006006 <pbuf_copy+0xb2>
 8005ff8:	4b38      	ldr	r3, [pc, #224]	; (80060dc <pbuf_copy+0x188>)
 8005ffa:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005ffe:	493a      	ldr	r1, [pc, #232]	; (80060e8 <pbuf_copy+0x194>)
 8006000:	4838      	ldr	r0, [pc, #224]	; (80060e4 <pbuf_copy+0x190>)
 8006002:	f008 fb19 	bl	800e638 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	895b      	ldrh	r3, [r3, #10]
 800600a:	461a      	mov	r2, r3
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	4293      	cmp	r3, r2
 8006010:	d906      	bls.n	8006020 <pbuf_copy+0xcc>
 8006012:	4b32      	ldr	r3, [pc, #200]	; (80060dc <pbuf_copy+0x188>)
 8006014:	f240 32da 	movw	r2, #986	; 0x3da
 8006018:	4934      	ldr	r1, [pc, #208]	; (80060ec <pbuf_copy+0x198>)
 800601a:	4832      	ldr	r0, [pc, #200]	; (80060e4 <pbuf_copy+0x190>)
 800601c:	f008 fb0c 	bl	800e638 <iprintf>
    if (offset_from >= p_from->len) {
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	895b      	ldrh	r3, [r3, #10]
 8006024:	461a      	mov	r2, r3
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	4293      	cmp	r3, r2
 800602a:	d304      	bcc.n	8006036 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800602c:	2300      	movs	r3, #0
 800602e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	895b      	ldrh	r3, [r3, #10]
 800603a:	461a      	mov	r2, r3
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	4293      	cmp	r3, r2
 8006040:	d114      	bne.n	800606c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10c      	bne.n	800606c <pbuf_copy+0x118>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d009      	beq.n	800606c <pbuf_copy+0x118>
 8006058:	4b20      	ldr	r3, [pc, #128]	; (80060dc <pbuf_copy+0x188>)
 800605a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800605e:	4924      	ldr	r1, [pc, #144]	; (80060f0 <pbuf_copy+0x19c>)
 8006060:	4820      	ldr	r0, [pc, #128]	; (80060e4 <pbuf_copy+0x190>)
 8006062:	f008 fae9 	bl	800e638 <iprintf>
 8006066:	f06f 030f 	mvn.w	r3, #15
 800606a:	e032      	b.n	80060d2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d013      	beq.n	800609a <pbuf_copy+0x146>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	895a      	ldrh	r2, [r3, #10]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	891b      	ldrh	r3, [r3, #8]
 800607a:	429a      	cmp	r2, r3
 800607c:	d10d      	bne.n	800609a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d009      	beq.n	800609a <pbuf_copy+0x146>
 8006086:	4b15      	ldr	r3, [pc, #84]	; (80060dc <pbuf_copy+0x188>)
 8006088:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800608c:	4919      	ldr	r1, [pc, #100]	; (80060f4 <pbuf_copy+0x1a0>)
 800608e:	4815      	ldr	r0, [pc, #84]	; (80060e4 <pbuf_copy+0x190>)
 8006090:	f008 fad2 	bl	800e638 <iprintf>
 8006094:	f06f 0305 	mvn.w	r3, #5
 8006098:	e01b      	b.n	80060d2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d013      	beq.n	80060c8 <pbuf_copy+0x174>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	895a      	ldrh	r2, [r3, #10]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	891b      	ldrh	r3, [r3, #8]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d10d      	bne.n	80060c8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d009      	beq.n	80060c8 <pbuf_copy+0x174>
 80060b4:	4b09      	ldr	r3, [pc, #36]	; (80060dc <pbuf_copy+0x188>)
 80060b6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80060ba:	490e      	ldr	r1, [pc, #56]	; (80060f4 <pbuf_copy+0x1a0>)
 80060bc:	4809      	ldr	r0, [pc, #36]	; (80060e4 <pbuf_copy+0x190>)
 80060be:	f008 fabb 	bl	800e638 <iprintf>
 80060c2:	f06f 0305 	mvn.w	r3, #5
 80060c6:	e004      	b.n	80060d2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f47f af61 	bne.w	8005f92 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	0800fa5c 	.word	0x0800fa5c
 80060e0:	0800fd04 	.word	0x0800fd04
 80060e4:	0800fabc 	.word	0x0800fabc
 80060e8:	0800fd34 	.word	0x0800fd34
 80060ec:	0800fd4c 	.word	0x0800fd4c
 80060f0:	0800fd68 	.word	0x0800fd68
 80060f4:	0800fd78 	.word	0x0800fd78

080060f8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	4611      	mov	r1, r2
 8006104:	461a      	mov	r2, r3
 8006106:	460b      	mov	r3, r1
 8006108:	80fb      	strh	r3, [r7, #6]
 800610a:	4613      	mov	r3, r2
 800610c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d108      	bne.n	800612e <pbuf_copy_partial+0x36>
 800611c:	4b2b      	ldr	r3, [pc, #172]	; (80061cc <pbuf_copy_partial+0xd4>)
 800611e:	f240 420a 	movw	r2, #1034	; 0x40a
 8006122:	492b      	ldr	r1, [pc, #172]	; (80061d0 <pbuf_copy_partial+0xd8>)
 8006124:	482b      	ldr	r0, [pc, #172]	; (80061d4 <pbuf_copy_partial+0xdc>)
 8006126:	f008 fa87 	bl	800e638 <iprintf>
 800612a:	2300      	movs	r3, #0
 800612c:	e04a      	b.n	80061c4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d108      	bne.n	8006146 <pbuf_copy_partial+0x4e>
 8006134:	4b25      	ldr	r3, [pc, #148]	; (80061cc <pbuf_copy_partial+0xd4>)
 8006136:	f240 420b 	movw	r2, #1035	; 0x40b
 800613a:	4927      	ldr	r1, [pc, #156]	; (80061d8 <pbuf_copy_partial+0xe0>)
 800613c:	4825      	ldr	r0, [pc, #148]	; (80061d4 <pbuf_copy_partial+0xdc>)
 800613e:	f008 fa7b 	bl	800e638 <iprintf>
 8006142:	2300      	movs	r3, #0
 8006144:	e03e      	b.n	80061c4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	e034      	b.n	80061b6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800614c:	88bb      	ldrh	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <pbuf_copy_partial+0x70>
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	895b      	ldrh	r3, [r3, #10]
 8006156:	88ba      	ldrh	r2, [r7, #4]
 8006158:	429a      	cmp	r2, r3
 800615a:	d305      	bcc.n	8006168 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	895b      	ldrh	r3, [r3, #10]
 8006160:	88ba      	ldrh	r2, [r7, #4]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	80bb      	strh	r3, [r7, #4]
 8006166:	e023      	b.n	80061b0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	895a      	ldrh	r2, [r3, #10]
 800616c:	88bb      	ldrh	r3, [r7, #4]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006172:	8b3a      	ldrh	r2, [r7, #24]
 8006174:	88fb      	ldrh	r3, [r7, #6]
 8006176:	429a      	cmp	r2, r3
 8006178:	d901      	bls.n	800617e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800617a:	88fb      	ldrh	r3, [r7, #6]
 800617c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800617e:	8b7b      	ldrh	r3, [r7, #26]
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	18d0      	adds	r0, r2, r3
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	88bb      	ldrh	r3, [r7, #4]
 800618a:	4413      	add	r3, r2
 800618c:	8b3a      	ldrh	r2, [r7, #24]
 800618e:	4619      	mov	r1, r3
 8006190:	f008 fa3f 	bl	800e612 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006194:	8afa      	ldrh	r2, [r7, #22]
 8006196:	8b3b      	ldrh	r3, [r7, #24]
 8006198:	4413      	add	r3, r2
 800619a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800619c:	8b7a      	ldrh	r2, [r7, #26]
 800619e:	8b3b      	ldrh	r3, [r7, #24]
 80061a0:	4413      	add	r3, r2
 80061a2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80061a4:	88fa      	ldrh	r2, [r7, #6]
 80061a6:	8b3b      	ldrh	r3, [r7, #24]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	61fb      	str	r3, [r7, #28]
 80061b6:	88fb      	ldrh	r3, [r7, #6]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <pbuf_copy_partial+0xca>
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1c4      	bne.n	800614c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80061c2:	8afb      	ldrh	r3, [r7, #22]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3720      	adds	r7, #32
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	0800fa5c 	.word	0x0800fa5c
 80061d0:	0800fda4 	.word	0x0800fda4
 80061d4:	0800fabc 	.word	0x0800fabc
 80061d8:	0800fdc4 	.word	0x0800fdc4

080061dc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	603a      	str	r2, [r7, #0]
 80061e6:	71fb      	strb	r3, [r7, #7]
 80061e8:	460b      	mov	r3, r1
 80061ea:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	8919      	ldrh	r1, [r3, #8]
 80061f0:	88ba      	ldrh	r2, [r7, #4]
 80061f2:	79fb      	ldrb	r3, [r7, #7]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff fab5 	bl	8005764 <pbuf_alloc>
 80061fa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <pbuf_clone+0x2a>
    return NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	e011      	b.n	800622a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006206:	6839      	ldr	r1, [r7, #0]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f7ff fea3 	bl	8005f54 <pbuf_copy>
 800620e:	4603      	mov	r3, r0
 8006210:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006212:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d006      	beq.n	8006228 <pbuf_clone+0x4c>
 800621a:	4b06      	ldr	r3, [pc, #24]	; (8006234 <pbuf_clone+0x58>)
 800621c:	f240 5224 	movw	r2, #1316	; 0x524
 8006220:	4905      	ldr	r1, [pc, #20]	; (8006238 <pbuf_clone+0x5c>)
 8006222:	4806      	ldr	r0, [pc, #24]	; (800623c <pbuf_clone+0x60>)
 8006224:	f008 fa08 	bl	800e638 <iprintf>
  return q;
 8006228:	68fb      	ldr	r3, [r7, #12]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	0800fa5c 	.word	0x0800fa5c
 8006238:	0800fed0 	.word	0x0800fed0
 800623c:	0800fabc 	.word	0x0800fabc

08006240 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006244:	f008 fa10 	bl	800e668 <rand>
 8006248:	4603      	mov	r3, r0
 800624a:	b29b      	uxth	r3, r3
 800624c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006250:	b29b      	uxth	r3, r3
 8006252:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006256:	b29a      	uxth	r2, r3
 8006258:	4b01      	ldr	r3, [pc, #4]	; (8006260 <tcp_init+0x20>)
 800625a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800625c:	bf00      	nop
 800625e:	bd80      	pop	{r7, pc}
 8006260:	2000000a 	.word	0x2000000a

08006264 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	7d1b      	ldrb	r3, [r3, #20]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d105      	bne.n	8006280 <tcp_free+0x1c>
 8006274:	4b06      	ldr	r3, [pc, #24]	; (8006290 <tcp_free+0x2c>)
 8006276:	22d4      	movs	r2, #212	; 0xd4
 8006278:	4906      	ldr	r1, [pc, #24]	; (8006294 <tcp_free+0x30>)
 800627a:	4807      	ldr	r0, [pc, #28]	; (8006298 <tcp_free+0x34>)
 800627c:	f008 f9dc 	bl	800e638 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	2001      	movs	r0, #1
 8006284:	f7fe ff40 	bl	8005108 <memp_free>
}
 8006288:	bf00      	nop
 800628a:	3708      	adds	r7, #8
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	0800ff5c 	.word	0x0800ff5c
 8006294:	0800ff8c 	.word	0x0800ff8c
 8006298:	0800ffa0 	.word	0x0800ffa0

0800629c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	7d1b      	ldrb	r3, [r3, #20]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d105      	bne.n	80062b8 <tcp_free_listen+0x1c>
 80062ac:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <tcp_free_listen+0x2c>)
 80062ae:	22df      	movs	r2, #223	; 0xdf
 80062b0:	4906      	ldr	r1, [pc, #24]	; (80062cc <tcp_free_listen+0x30>)
 80062b2:	4807      	ldr	r0, [pc, #28]	; (80062d0 <tcp_free_listen+0x34>)
 80062b4:	f008 f9c0 	bl	800e638 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	2002      	movs	r0, #2
 80062bc:	f7fe ff24 	bl	8005108 <memp_free>
}
 80062c0:	bf00      	nop
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	0800ff5c 	.word	0x0800ff5c
 80062cc:	0800ffc8 	.word	0x0800ffc8
 80062d0:	0800ffa0 	.word	0x0800ffa0

080062d4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80062d8:	f001 f852 	bl	8007380 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80062dc:	4b07      	ldr	r3, [pc, #28]	; (80062fc <tcp_tmr+0x28>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	3301      	adds	r3, #1
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	4b05      	ldr	r3, [pc, #20]	; (80062fc <tcp_tmr+0x28>)
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	4b04      	ldr	r3, [pc, #16]	; (80062fc <tcp_tmr+0x28>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80062f4:	f000 fd06 	bl	8006d04 <tcp_slowtmr>
  }
}
 80062f8:	bf00      	nop
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	200000cd 	.word	0x200000cd

08006300 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d105      	bne.n	800631c <tcp_remove_listener+0x1c>
 8006310:	4b0d      	ldr	r3, [pc, #52]	; (8006348 <tcp_remove_listener+0x48>)
 8006312:	22ff      	movs	r2, #255	; 0xff
 8006314:	490d      	ldr	r1, [pc, #52]	; (800634c <tcp_remove_listener+0x4c>)
 8006316:	480e      	ldr	r0, [pc, #56]	; (8006350 <tcp_remove_listener+0x50>)
 8006318:	f008 f98e 	bl	800e638 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	e00a      	b.n	8006338 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d102      	bne.n	8006332 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f1      	bne.n	8006322 <tcp_remove_listener+0x22>
    }
  }
}
 800633e:	bf00      	nop
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	0800ff5c 	.word	0x0800ff5c
 800634c:	0800ffe4 	.word	0x0800ffe4
 8006350:	0800ffa0 	.word	0x0800ffa0

08006354 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <tcp_listen_closed+0x1c>
 8006362:	4b14      	ldr	r3, [pc, #80]	; (80063b4 <tcp_listen_closed+0x60>)
 8006364:	f240 1211 	movw	r2, #273	; 0x111
 8006368:	4913      	ldr	r1, [pc, #76]	; (80063b8 <tcp_listen_closed+0x64>)
 800636a:	4814      	ldr	r0, [pc, #80]	; (80063bc <tcp_listen_closed+0x68>)
 800636c:	f008 f964 	bl	800e638 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	7d1b      	ldrb	r3, [r3, #20]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d006      	beq.n	8006386 <tcp_listen_closed+0x32>
 8006378:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <tcp_listen_closed+0x60>)
 800637a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800637e:	4910      	ldr	r1, [pc, #64]	; (80063c0 <tcp_listen_closed+0x6c>)
 8006380:	480e      	ldr	r0, [pc, #56]	; (80063bc <tcp_listen_closed+0x68>)
 8006382:	f008 f959 	bl	800e638 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006386:	2301      	movs	r3, #1
 8006388:	60fb      	str	r3, [r7, #12]
 800638a:	e00b      	b.n	80063a4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800638c:	4a0d      	ldr	r2, [pc, #52]	; (80063c4 <tcp_listen_closed+0x70>)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff ffb1 	bl	8006300 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3301      	adds	r3, #1
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d9f0      	bls.n	800638c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80063aa:	bf00      	nop
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	0800ff5c 	.word	0x0800ff5c
 80063b8:	0801000c 	.word	0x0801000c
 80063bc:	0800ffa0 	.word	0x0800ffa0
 80063c0:	08010018 	.word	0x08010018
 80063c4:	08011f34 	.word	0x08011f34

080063c8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80063c8:	b5b0      	push	{r4, r5, r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af04      	add	r7, sp, #16
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	460b      	mov	r3, r1
 80063d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <tcp_close_shutdown+0x20>
 80063da:	4b61      	ldr	r3, [pc, #388]	; (8006560 <tcp_close_shutdown+0x198>)
 80063dc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80063e0:	4960      	ldr	r1, [pc, #384]	; (8006564 <tcp_close_shutdown+0x19c>)
 80063e2:	4861      	ldr	r0, [pc, #388]	; (8006568 <tcp_close_shutdown+0x1a0>)
 80063e4:	f008 f928 	bl	800e638 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d066      	beq.n	80064bc <tcp_close_shutdown+0xf4>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	7d1b      	ldrb	r3, [r3, #20]
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d003      	beq.n	80063fe <tcp_close_shutdown+0x36>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	7d1b      	ldrb	r3, [r3, #20]
 80063fa:	2b07      	cmp	r3, #7
 80063fc:	d15e      	bne.n	80064bc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006402:	2b00      	cmp	r3, #0
 8006404:	d104      	bne.n	8006410 <tcp_close_shutdown+0x48>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800640a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800640e:	d055      	beq.n	80064bc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8b5b      	ldrh	r3, [r3, #26]
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	2b00      	cmp	r3, #0
 800641a:	d106      	bne.n	800642a <tcp_close_shutdown+0x62>
 800641c:	4b50      	ldr	r3, [pc, #320]	; (8006560 <tcp_close_shutdown+0x198>)
 800641e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006422:	4952      	ldr	r1, [pc, #328]	; (800656c <tcp_close_shutdown+0x1a4>)
 8006424:	4850      	ldr	r0, [pc, #320]	; (8006568 <tcp_close_shutdown+0x1a0>)
 8006426:	f008 f907 	bl	800e638 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006432:	687d      	ldr	r5, [r7, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	8ad2      	ldrh	r2, [r2, #22]
 800643c:	6879      	ldr	r1, [r7, #4]
 800643e:	8b09      	ldrh	r1, [r1, #24]
 8006440:	9102      	str	r1, [sp, #8]
 8006442:	9201      	str	r2, [sp, #4]
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	462b      	mov	r3, r5
 8006448:	4622      	mov	r2, r4
 800644a:	4601      	mov	r1, r0
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f005 f931 	bl	800b6b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fb5a 	bl	8007b0c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006458:	4b45      	ldr	r3, [pc, #276]	; (8006570 <tcp_close_shutdown+0x1a8>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	429a      	cmp	r2, r3
 8006460:	d105      	bne.n	800646e <tcp_close_shutdown+0xa6>
 8006462:	4b43      	ldr	r3, [pc, #268]	; (8006570 <tcp_close_shutdown+0x1a8>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	4a41      	ldr	r2, [pc, #260]	; (8006570 <tcp_close_shutdown+0x1a8>)
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	e013      	b.n	8006496 <tcp_close_shutdown+0xce>
 800646e:	4b40      	ldr	r3, [pc, #256]	; (8006570 <tcp_close_shutdown+0x1a8>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	e00c      	b.n	8006490 <tcp_close_shutdown+0xc8>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	429a      	cmp	r2, r3
 800647e:	d104      	bne.n	800648a <tcp_close_shutdown+0xc2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	60da      	str	r2, [r3, #12]
 8006488:	e005      	b.n	8006496 <tcp_close_shutdown+0xce>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1ef      	bne.n	8006476 <tcp_close_shutdown+0xae>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	60da      	str	r2, [r3, #12]
 800649c:	4b35      	ldr	r3, [pc, #212]	; (8006574 <tcp_close_shutdown+0x1ac>)
 800649e:	2201      	movs	r2, #1
 80064a0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80064a2:	4b35      	ldr	r3, [pc, #212]	; (8006578 <tcp_close_shutdown+0x1b0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d102      	bne.n	80064b2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80064ac:	f003 ffec 	bl	800a488 <tcp_trigger_input_pcb_close>
 80064b0:	e002      	b.n	80064b8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff fed6 	bl	8006264 <tcp_free>
      }
      return ERR_OK;
 80064b8:	2300      	movs	r3, #0
 80064ba:	e04d      	b.n	8006558 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	7d1b      	ldrb	r3, [r3, #20]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d02d      	beq.n	8006520 <tcp_close_shutdown+0x158>
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d036      	beq.n	8006536 <tcp_close_shutdown+0x16e>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d13f      	bne.n	800654c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	8adb      	ldrh	r3, [r3, #22]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d021      	beq.n	8006518 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80064d4:	4b29      	ldr	r3, [pc, #164]	; (800657c <tcp_close_shutdown+0x1b4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d105      	bne.n	80064ea <tcp_close_shutdown+0x122>
 80064de:	4b27      	ldr	r3, [pc, #156]	; (800657c <tcp_close_shutdown+0x1b4>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	4a25      	ldr	r2, [pc, #148]	; (800657c <tcp_close_shutdown+0x1b4>)
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	e013      	b.n	8006512 <tcp_close_shutdown+0x14a>
 80064ea:	4b24      	ldr	r3, [pc, #144]	; (800657c <tcp_close_shutdown+0x1b4>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	60bb      	str	r3, [r7, #8]
 80064f0:	e00c      	b.n	800650c <tcp_close_shutdown+0x144>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d104      	bne.n	8006506 <tcp_close_shutdown+0x13e>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	60da      	str	r2, [r3, #12]
 8006504:	e005      	b.n	8006512 <tcp_close_shutdown+0x14a>
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	60bb      	str	r3, [r7, #8]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1ef      	bne.n	80064f2 <tcp_close_shutdown+0x12a>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7ff fea3 	bl	8006264 <tcp_free>
      break;
 800651e:	e01a      	b.n	8006556 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f7ff ff17 	bl	8006354 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006526:	6879      	ldr	r1, [r7, #4]
 8006528:	4815      	ldr	r0, [pc, #84]	; (8006580 <tcp_close_shutdown+0x1b8>)
 800652a:	f001 fb3f 	bl	8007bac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff feb4 	bl	800629c <tcp_free_listen>
      break;
 8006534:	e00f      	b.n	8006556 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	480d      	ldr	r0, [pc, #52]	; (8006570 <tcp_close_shutdown+0x1a8>)
 800653a:	f001 fb37 	bl	8007bac <tcp_pcb_remove>
 800653e:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <tcp_close_shutdown+0x1ac>)
 8006540:	2201      	movs	r2, #1
 8006542:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff fe8d 	bl	8006264 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800654a:	e004      	b.n	8006556 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f819 	bl	8006584 <tcp_close_shutdown_fin>
 8006552:	4603      	mov	r3, r0
 8006554:	e000      	b.n	8006558 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bdb0      	pop	{r4, r5, r7, pc}
 8006560:	0800ff5c 	.word	0x0800ff5c
 8006564:	08010030 	.word	0x08010030
 8006568:	0800ffa0 	.word	0x0800ffa0
 800656c:	08010050 	.word	0x08010050
 8006570:	20006930 	.word	0x20006930
 8006574:	2000692c 	.word	0x2000692c
 8006578:	20006944 	.word	0x20006944
 800657c:	2000693c 	.word	0x2000693c
 8006580:	20006938 	.word	0x20006938

08006584 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <tcp_close_shutdown_fin+0x1c>
 8006592:	4b2c      	ldr	r3, [pc, #176]	; (8006644 <tcp_close_shutdown_fin+0xc0>)
 8006594:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006598:	492b      	ldr	r1, [pc, #172]	; (8006648 <tcp_close_shutdown_fin+0xc4>)
 800659a:	482c      	ldr	r0, [pc, #176]	; (800664c <tcp_close_shutdown_fin+0xc8>)
 800659c:	f008 f84c 	bl	800e638 <iprintf>

  switch (pcb->state) {
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	7d1b      	ldrb	r3, [r3, #20]
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d010      	beq.n	80065ca <tcp_close_shutdown_fin+0x46>
 80065a8:	2b07      	cmp	r3, #7
 80065aa:	d01b      	beq.n	80065e4 <tcp_close_shutdown_fin+0x60>
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d126      	bne.n	80065fe <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f004 f97b 	bl	800a8ac <tcp_send_fin>
 80065b6:	4603      	mov	r3, r0
 80065b8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80065ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d11f      	bne.n	8006602 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2205      	movs	r2, #5
 80065c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80065c8:	e01b      	b.n	8006602 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f004 f96e 	bl	800a8ac <tcp_send_fin>
 80065d0:	4603      	mov	r3, r0
 80065d2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80065d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d114      	bne.n	8006606 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2205      	movs	r2, #5
 80065e0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80065e2:	e010      	b.n	8006606 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f004 f961 	bl	800a8ac <tcp_send_fin>
 80065ea:	4603      	mov	r3, r0
 80065ec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80065ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2209      	movs	r2, #9
 80065fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80065fc:	e005      	b.n	800660a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	e01c      	b.n	800663c <tcp_close_shutdown_fin+0xb8>
      break;
 8006602:	bf00      	nop
 8006604:	e002      	b.n	800660c <tcp_close_shutdown_fin+0x88>
      break;
 8006606:	bf00      	nop
 8006608:	e000      	b.n	800660c <tcp_close_shutdown_fin+0x88>
      break;
 800660a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800660c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d103      	bne.n	800661c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f004 fa87 	bl	800ab28 <tcp_output>
 800661a:	e00d      	b.n	8006638 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800661c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006624:	d108      	bne.n	8006638 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	8b5b      	ldrh	r3, [r3, #26]
 800662a:	f043 0308 	orr.w	r3, r3, #8
 800662e:	b29a      	uxth	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	e001      	b.n	800663c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8006638:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	0800ff5c 	.word	0x0800ff5c
 8006648:	0801000c 	.word	0x0801000c
 800664c:	0800ffa0 	.word	0x0800ffa0

08006650 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d109      	bne.n	8006672 <tcp_close+0x22>
 800665e:	4b0f      	ldr	r3, [pc, #60]	; (800669c <tcp_close+0x4c>)
 8006660:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006664:	490e      	ldr	r1, [pc, #56]	; (80066a0 <tcp_close+0x50>)
 8006666:	480f      	ldr	r0, [pc, #60]	; (80066a4 <tcp_close+0x54>)
 8006668:	f007 ffe6 	bl	800e638 <iprintf>
 800666c:	f06f 030f 	mvn.w	r3, #15
 8006670:	e00f      	b.n	8006692 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	7d1b      	ldrb	r3, [r3, #20]
 8006676:	2b01      	cmp	r3, #1
 8006678:	d006      	beq.n	8006688 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	8b5b      	ldrh	r3, [r3, #26]
 800667e:	f043 0310 	orr.w	r3, r3, #16
 8006682:	b29a      	uxth	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006688:	2101      	movs	r1, #1
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff fe9c 	bl	80063c8 <tcp_close_shutdown>
 8006690:	4603      	mov	r3, r0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	0800ff5c 	.word	0x0800ff5c
 80066a0:	0801006c 	.word	0x0801006c
 80066a4:	0800ffa0 	.word	0x0800ffa0

080066a8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08e      	sub	sp, #56	; 0x38
 80066ac:	af04      	add	r7, sp, #16
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d107      	bne.n	80066c8 <tcp_abandon+0x20>
 80066b8:	4b52      	ldr	r3, [pc, #328]	; (8006804 <tcp_abandon+0x15c>)
 80066ba:	f240 223d 	movw	r2, #573	; 0x23d
 80066be:	4952      	ldr	r1, [pc, #328]	; (8006808 <tcp_abandon+0x160>)
 80066c0:	4852      	ldr	r0, [pc, #328]	; (800680c <tcp_abandon+0x164>)
 80066c2:	f007 ffb9 	bl	800e638 <iprintf>
 80066c6:	e099      	b.n	80067fc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	7d1b      	ldrb	r3, [r3, #20]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d106      	bne.n	80066de <tcp_abandon+0x36>
 80066d0:	4b4c      	ldr	r3, [pc, #304]	; (8006804 <tcp_abandon+0x15c>)
 80066d2:	f240 2241 	movw	r2, #577	; 0x241
 80066d6:	494e      	ldr	r1, [pc, #312]	; (8006810 <tcp_abandon+0x168>)
 80066d8:	484c      	ldr	r0, [pc, #304]	; (800680c <tcp_abandon+0x164>)
 80066da:	f007 ffad 	bl	800e638 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7d1b      	ldrb	r3, [r3, #20]
 80066e2:	2b0a      	cmp	r3, #10
 80066e4:	d107      	bne.n	80066f6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	484a      	ldr	r0, [pc, #296]	; (8006814 <tcp_abandon+0x16c>)
 80066ea:	f001 fa5f 	bl	8007bac <tcp_pcb_remove>
    tcp_free(pcb);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff fdb8 	bl	8006264 <tcp_free>
 80066f4:	e082      	b.n	80067fc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006702:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006710:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	7d1b      	ldrb	r3, [r3, #20]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d126      	bne.n	800676e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	8adb      	ldrh	r3, [r3, #22]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d02e      	beq.n	8006786 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006728:	4b3b      	ldr	r3, [pc, #236]	; (8006818 <tcp_abandon+0x170>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	429a      	cmp	r2, r3
 8006730:	d105      	bne.n	800673e <tcp_abandon+0x96>
 8006732:	4b39      	ldr	r3, [pc, #228]	; (8006818 <tcp_abandon+0x170>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	4a37      	ldr	r2, [pc, #220]	; (8006818 <tcp_abandon+0x170>)
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	e013      	b.n	8006766 <tcp_abandon+0xbe>
 800673e:	4b36      	ldr	r3, [pc, #216]	; (8006818 <tcp_abandon+0x170>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	e00c      	b.n	8006760 <tcp_abandon+0xb8>
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	429a      	cmp	r2, r3
 800674e:	d104      	bne.n	800675a <tcp_abandon+0xb2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	60da      	str	r2, [r3, #12]
 8006758:	e005      	b.n	8006766 <tcp_abandon+0xbe>
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1ef      	bne.n	8006746 <tcp_abandon+0x9e>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	60da      	str	r2, [r3, #12]
 800676c:	e00b      	b.n	8006786 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	8adb      	ldrh	r3, [r3, #22]
 8006776:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4828      	ldr	r0, [pc, #160]	; (800681c <tcp_abandon+0x174>)
 800677c:	f001 fa16 	bl	8007bac <tcp_pcb_remove>
 8006780:	4b27      	ldr	r3, [pc, #156]	; (8006820 <tcp_abandon+0x178>)
 8006782:	2201      	movs	r2, #1
 8006784:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800678a:	2b00      	cmp	r3, #0
 800678c:	d004      	beq.n	8006798 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fed4 	bl	8007540 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800679c:	2b00      	cmp	r3, #0
 800679e:	d004      	beq.n	80067aa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fecb 	bl	8007540 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d004      	beq.n	80067bc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fec2 	bl	8007540 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00e      	beq.n	80067e0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80067c2:	6879      	ldr	r1, [r7, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3304      	adds	r3, #4
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	8b12      	ldrh	r2, [r2, #24]
 80067cc:	9202      	str	r2, [sp, #8]
 80067ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80067d0:	9201      	str	r2, [sp, #4]
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	460b      	mov	r3, r1
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	69b9      	ldr	r1, [r7, #24]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f004 ff6a 	bl	800b6b4 <tcp_rst>
    }
    last_state = pcb->state;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	7d1b      	ldrb	r3, [r3, #20]
 80067e4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff fd3c 	bl	8006264 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d004      	beq.n	80067fc <tcp_abandon+0x154>
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f06f 010c 	mvn.w	r1, #12
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	4798      	blx	r3
  }
}
 80067fc:	3728      	adds	r7, #40	; 0x28
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	0800ff5c 	.word	0x0800ff5c
 8006808:	080100a0 	.word	0x080100a0
 800680c:	0800ffa0 	.word	0x0800ffa0
 8006810:	080100bc 	.word	0x080100bc
 8006814:	20006940 	.word	0x20006940
 8006818:	2000693c 	.word	0x2000693c
 800681c:	20006930 	.word	0x20006930
 8006820:	2000692c 	.word	0x2000692c

08006824 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800682c:	2101      	movs	r1, #1
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7ff ff3a 	bl	80066a8 <tcp_abandon>
}
 8006834:	bf00      	nop
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b088      	sub	sp, #32
 8006840:	af00      	add	r7, sp, #0
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800684a:	2304      	movs	r3, #4
 800684c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006854:	4b3e      	ldr	r3, [pc, #248]	; (8006950 <tcp_bind+0x114>)
 8006856:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <tcp_bind+0x36>
 800685e:	4b3d      	ldr	r3, [pc, #244]	; (8006954 <tcp_bind+0x118>)
 8006860:	f240 22a9 	movw	r2, #681	; 0x2a9
 8006864:	493c      	ldr	r1, [pc, #240]	; (8006958 <tcp_bind+0x11c>)
 8006866:	483d      	ldr	r0, [pc, #244]	; (800695c <tcp_bind+0x120>)
 8006868:	f007 fee6 	bl	800e638 <iprintf>
 800686c:	f06f 030f 	mvn.w	r3, #15
 8006870:	e06a      	b.n	8006948 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	7d1b      	ldrb	r3, [r3, #20]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d009      	beq.n	800688e <tcp_bind+0x52>
 800687a:	4b36      	ldr	r3, [pc, #216]	; (8006954 <tcp_bind+0x118>)
 800687c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006880:	4937      	ldr	r1, [pc, #220]	; (8006960 <tcp_bind+0x124>)
 8006882:	4836      	ldr	r0, [pc, #216]	; (800695c <tcp_bind+0x120>)
 8006884:	f007 fed8 	bl	800e638 <iprintf>
 8006888:	f06f 0305 	mvn.w	r3, #5
 800688c:	e05c      	b.n	8006948 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800688e:	88fb      	ldrh	r3, [r7, #6]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <tcp_bind+0x6c>
    port = tcp_new_port();
 8006894:	f000 f9f0 	bl	8006c78 <tcp_new_port>
 8006898:	4603      	mov	r3, r0
 800689a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800689c:	88fb      	ldrh	r3, [r7, #6]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d135      	bne.n	800690e <tcp_bind+0xd2>
      return ERR_BUF;
 80068a2:	f06f 0301 	mvn.w	r3, #1
 80068a6:	e04f      	b.n	8006948 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80068a8:	2300      	movs	r3, #0
 80068aa:	61fb      	str	r3, [r7, #28]
 80068ac:	e02b      	b.n	8006906 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80068ae:	4a2d      	ldr	r2, [pc, #180]	; (8006964 <tcp_bind+0x128>)
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	61bb      	str	r3, [r7, #24]
 80068ba:	e01e      	b.n	80068fa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	8adb      	ldrh	r3, [r3, #22]
 80068c0:	88fa      	ldrh	r2, [r7, #6]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d116      	bne.n	80068f4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80068c6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d010      	beq.n	80068ee <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00c      	beq.n	80068ee <tcp_bind+0xb2>
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d009      	beq.n	80068ee <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d005      	beq.n	80068ee <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d102      	bne.n	80068f4 <tcp_bind+0xb8>
              return ERR_USE;
 80068ee:	f06f 0307 	mvn.w	r3, #7
 80068f2:	e029      	b.n	8006948 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	61bb      	str	r3, [r7, #24]
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1dd      	bne.n	80068bc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	3301      	adds	r3, #1
 8006904:	61fb      	str	r3, [r7, #28]
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	429a      	cmp	r2, r3
 800690c:	dbcf      	blt.n	80068ae <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00c      	beq.n	800692e <tcp_bind+0xf2>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <tcp_bind+0xec>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	e000      	b.n	800692a <tcp_bind+0xee>
 8006928:	2300      	movs	r3, #0
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	88fa      	ldrh	r2, [r7, #6]
 8006932:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006934:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <tcp_bind+0x12c>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	60da      	str	r2, [r3, #12]
 800693c:	4a0a      	ldr	r2, [pc, #40]	; (8006968 <tcp_bind+0x12c>)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	f005 f879 	bl	800ba38 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3720      	adds	r7, #32
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	08011f5c 	.word	0x08011f5c
 8006954:	0800ff5c 	.word	0x0800ff5c
 8006958:	080100f0 	.word	0x080100f0
 800695c:	0800ffa0 	.word	0x0800ffa0
 8006960:	08010108 	.word	0x08010108
 8006964:	08011f34 	.word	0x08011f34
 8006968:	2000693c 	.word	0x2000693c

0800696c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d106      	bne.n	800698e <tcp_accept_null+0x22>
 8006980:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <tcp_accept_null+0x34>)
 8006982:	f240 320f 	movw	r2, #783	; 0x30f
 8006986:	4907      	ldr	r1, [pc, #28]	; (80069a4 <tcp_accept_null+0x38>)
 8006988:	4807      	ldr	r0, [pc, #28]	; (80069a8 <tcp_accept_null+0x3c>)
 800698a:	f007 fe55 	bl	800e638 <iprintf>

  tcp_abort(pcb);
 800698e:	68b8      	ldr	r0, [r7, #8]
 8006990:	f7ff ff48 	bl	8006824 <tcp_abort>

  return ERR_ABRT;
 8006994:	f06f 030c 	mvn.w	r3, #12
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	0800ff5c 	.word	0x0800ff5c
 80069a4:	08010130 	.word	0x08010130
 80069a8:	0800ffa0 	.word	0x0800ffa0

080069ac <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80069b8:	78fb      	ldrb	r3, [r7, #3]
 80069ba:	2200      	movs	r2, #0
 80069bc:	4619      	mov	r1, r3
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f806 	bl	80069d0 <tcp_listen_with_backlog_and_err>
 80069c4:	4603      	mov	r3, r0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	460b      	mov	r3, r1
 80069da:	607a      	str	r2, [r7, #4]
 80069dc:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <tcp_listen_with_backlog_and_err+0x2c>
 80069e8:	4b47      	ldr	r3, [pc, #284]	; (8006b08 <tcp_listen_with_backlog_and_err+0x138>)
 80069ea:	f240 3259 	movw	r2, #857	; 0x359
 80069ee:	4947      	ldr	r1, [pc, #284]	; (8006b0c <tcp_listen_with_backlog_and_err+0x13c>)
 80069f0:	4847      	ldr	r0, [pc, #284]	; (8006b10 <tcp_listen_with_backlog_and_err+0x140>)
 80069f2:	f007 fe21 	bl	800e638 <iprintf>
 80069f6:	23f0      	movs	r3, #240	; 0xf0
 80069f8:	76fb      	strb	r3, [r7, #27]
 80069fa:	e079      	b.n	8006af0 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	7d1b      	ldrb	r3, [r3, #20]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d009      	beq.n	8006a18 <tcp_listen_with_backlog_and_err+0x48>
 8006a04:	4b40      	ldr	r3, [pc, #256]	; (8006b08 <tcp_listen_with_backlog_and_err+0x138>)
 8006a06:	f240 325a 	movw	r2, #858	; 0x35a
 8006a0a:	4942      	ldr	r1, [pc, #264]	; (8006b14 <tcp_listen_with_backlog_and_err+0x144>)
 8006a0c:	4840      	ldr	r0, [pc, #256]	; (8006b10 <tcp_listen_with_backlog_and_err+0x140>)
 8006a0e:	f007 fe13 	bl	800e638 <iprintf>
 8006a12:	23f1      	movs	r3, #241	; 0xf1
 8006a14:	76fb      	strb	r3, [r7, #27]
 8006a16:	e06b      	b.n	8006af0 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	7d1b      	ldrb	r3, [r3, #20]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d104      	bne.n	8006a2a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8006a24:	23f7      	movs	r3, #247	; 0xf7
 8006a26:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006a28:	e062      	b.n	8006af0 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8006a2a:	2002      	movs	r0, #2
 8006a2c:	f7fe fb20 	bl	8005070 <memp_malloc>
 8006a30:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8006a38:	23ff      	movs	r3, #255	; 0xff
 8006a3a:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006a3c:	e058      	b.n	8006af0 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8ada      	ldrh	r2, [r3, #22]
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	2201      	movs	r2, #1
 8006a52:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	7d5a      	ldrb	r2, [r3, #21]
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	7a5a      	ldrb	r2, [r3, #9]
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	2200      	movs	r2, #0
 8006a68:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	7ada      	ldrb	r2, [r3, #11]
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	7a9a      	ldrb	r2, [r3, #10]
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8adb      	ldrh	r3, [r3, #22]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d021      	beq.n	8006ace <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006a8a:	4b23      	ldr	r3, [pc, #140]	; (8006b18 <tcp_listen_with_backlog_and_err+0x148>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d105      	bne.n	8006aa0 <tcp_listen_with_backlog_and_err+0xd0>
 8006a94:	4b20      	ldr	r3, [pc, #128]	; (8006b18 <tcp_listen_with_backlog_and_err+0x148>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	4a1f      	ldr	r2, [pc, #124]	; (8006b18 <tcp_listen_with_backlog_and_err+0x148>)
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	e013      	b.n	8006ac8 <tcp_listen_with_backlog_and_err+0xf8>
 8006aa0:	4b1d      	ldr	r3, [pc, #116]	; (8006b18 <tcp_listen_with_backlog_and_err+0x148>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	e00c      	b.n	8006ac2 <tcp_listen_with_backlog_and_err+0xf2>
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d104      	bne.n	8006abc <tcp_listen_with_backlog_and_err+0xec>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	60da      	str	r2, [r3, #12]
 8006aba:	e005      	b.n	8006ac8 <tcp_listen_with_backlog_and_err+0xf8>
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1ef      	bne.n	8006aa8 <tcp_listen_with_backlog_and_err+0xd8>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f7ff fbc8 	bl	8006264 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	4a11      	ldr	r2, [pc, #68]	; (8006b1c <tcp_listen_with_backlog_and_err+0x14c>)
 8006ad8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006ada:	4b11      	ldr	r3, [pc, #68]	; (8006b20 <tcp_listen_with_backlog_and_err+0x150>)
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	60da      	str	r2, [r3, #12]
 8006ae2:	4a0f      	ldr	r2, [pc, #60]	; (8006b20 <tcp_listen_with_backlog_and_err+0x150>)
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	f004 ffa6 	bl	800ba38 <tcp_timer_needed>
  res = ERR_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d002      	beq.n	8006afc <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	7efa      	ldrb	r2, [r7, #27]
 8006afa:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8006afc:	69fb      	ldr	r3, [r7, #28]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3720      	adds	r7, #32
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	0800ff5c 	.word	0x0800ff5c
 8006b0c:	08010150 	.word	0x08010150
 8006b10:	0800ffa0 	.word	0x0800ffa0
 8006b14:	08010180 	.word	0x08010180
 8006b18:	2000693c 	.word	0x2000693c
 8006b1c:	0800696d 	.word	0x0800696d
 8006b20:	20006938 	.word	0x20006938

08006b24 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <tcp_update_rcv_ann_wnd+0x1c>
 8006b32:	4b25      	ldr	r3, [pc, #148]	; (8006bc8 <tcp_update_rcv_ann_wnd+0xa4>)
 8006b34:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006b38:	4924      	ldr	r1, [pc, #144]	; (8006bcc <tcp_update_rcv_ann_wnd+0xa8>)
 8006b3a:	4825      	ldr	r0, [pc, #148]	; (8006bd0 <tcp_update_rcv_ann_wnd+0xac>)
 8006b3c:	f007 fd7c 	bl	800e638 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006b48:	4413      	add	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006b54:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006b58:	bf28      	it	cs
 8006b5a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006b5e:	b292      	uxth	r2, r2
 8006b60:	4413      	add	r3, r2
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	db08      	blt.n	8006b7c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	e020      	b.n	8006bbe <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	dd03      	ble.n	8006b92 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b90:	e014      	b.n	8006bbc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba4:	d306      	bcc.n	8006bb4 <tcp_update_rcv_ann_wnd+0x90>
 8006ba6:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <tcp_update_rcv_ann_wnd+0xa4>)
 8006ba8:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006bac:	4909      	ldr	r1, [pc, #36]	; (8006bd4 <tcp_update_rcv_ann_wnd+0xb0>)
 8006bae:	4808      	ldr	r0, [pc, #32]	; (8006bd0 <tcp_update_rcv_ann_wnd+0xac>)
 8006bb0:	f007 fd42 	bl	800e638 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006bbc:	2300      	movs	r3, #0
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	0800ff5c 	.word	0x0800ff5c
 8006bcc:	080101b8 	.word	0x080101b8
 8006bd0:	0800ffa0 	.word	0x0800ffa0
 8006bd4:	080101dc 	.word	0x080101dc

08006bd8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d107      	bne.n	8006bfa <tcp_recved+0x22>
 8006bea:	4b1f      	ldr	r3, [pc, #124]	; (8006c68 <tcp_recved+0x90>)
 8006bec:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006bf0:	491e      	ldr	r1, [pc, #120]	; (8006c6c <tcp_recved+0x94>)
 8006bf2:	481f      	ldr	r0, [pc, #124]	; (8006c70 <tcp_recved+0x98>)
 8006bf4:	f007 fd20 	bl	800e638 <iprintf>
 8006bf8:	e032      	b.n	8006c60 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	7d1b      	ldrb	r3, [r3, #20]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d106      	bne.n	8006c10 <tcp_recved+0x38>
 8006c02:	4b19      	ldr	r3, [pc, #100]	; (8006c68 <tcp_recved+0x90>)
 8006c04:	f240 32d3 	movw	r2, #979	; 0x3d3
 8006c08:	491a      	ldr	r1, [pc, #104]	; (8006c74 <tcp_recved+0x9c>)
 8006c0a:	4819      	ldr	r0, [pc, #100]	; (8006c70 <tcp_recved+0x98>)
 8006c0c:	f007 fd14 	bl	800e638 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006c14:	887b      	ldrh	r3, [r7, #2]
 8006c16:	4413      	add	r3, r2
 8006c18:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006c1a:	89fb      	ldrh	r3, [r7, #14]
 8006c1c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006c20:	d804      	bhi.n	8006c2c <tcp_recved+0x54>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c26:	89fa      	ldrh	r2, [r7, #14]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d204      	bcs.n	8006c36 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006c32:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c34:	e002      	b.n	8006c3c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	89fa      	ldrh	r2, [r7, #14]
 8006c3a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff ff71 	bl	8006b24 <tcp_update_rcv_ann_wnd>
 8006c42:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006c4a:	d309      	bcc.n	8006c60 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	8b5b      	ldrh	r3, [r3, #26]
 8006c50:	f043 0302 	orr.w	r3, r3, #2
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f003 ff64 	bl	800ab28 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	0800ff5c 	.word	0x0800ff5c
 8006c6c:	080101f8 	.word	0x080101f8
 8006c70:	0800ffa0 	.word	0x0800ffa0
 8006c74:	08010210 	.word	0x08010210

08006c78 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8006c82:	4b1e      	ldr	r3, [pc, #120]	; (8006cfc <tcp_new_port+0x84>)
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	3301      	adds	r3, #1
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	4b1c      	ldr	r3, [pc, #112]	; (8006cfc <tcp_new_port+0x84>)
 8006c8c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006c8e:	4b1b      	ldr	r3, [pc, #108]	; (8006cfc <tcp_new_port+0x84>)
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d103      	bne.n	8006ca2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006c9a:	4b18      	ldr	r3, [pc, #96]	; (8006cfc <tcp_new_port+0x84>)
 8006c9c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006ca0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	71fb      	strb	r3, [r7, #7]
 8006ca6:	e01e      	b.n	8006ce6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
 8006caa:	4a15      	ldr	r2, [pc, #84]	; (8006d00 <tcp_new_port+0x88>)
 8006cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	603b      	str	r3, [r7, #0]
 8006cb4:	e011      	b.n	8006cda <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	8ada      	ldrh	r2, [r3, #22]
 8006cba:	4b10      	ldr	r3, [pc, #64]	; (8006cfc <tcp_new_port+0x84>)
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d108      	bne.n	8006cd4 <tcp_new_port+0x5c>
        n++;
 8006cc2:	88bb      	ldrh	r3, [r7, #4]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006cc8:	88bb      	ldrh	r3, [r7, #4]
 8006cca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cce:	d3d8      	bcc.n	8006c82 <tcp_new_port+0xa>
          return 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e00d      	b.n	8006cf0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1ea      	bne.n	8006cb6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	71fb      	strb	r3, [r7, #7]
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d9dd      	bls.n	8006ca8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006cec:	4b03      	ldr	r3, [pc, #12]	; (8006cfc <tcp_new_port+0x84>)
 8006cee:	881b      	ldrh	r3, [r3, #0]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr
 8006cfc:	2000000a 	.word	0x2000000a
 8006d00:	08011f34 	.word	0x08011f34

08006d04 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006d04:	b5b0      	push	{r4, r5, r7, lr}
 8006d06:	b090      	sub	sp, #64	; 0x40
 8006d08:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006d10:	4b94      	ldr	r3, [pc, #592]	; (8006f64 <tcp_slowtmr+0x260>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	4a93      	ldr	r2, [pc, #588]	; (8006f64 <tcp_slowtmr+0x260>)
 8006d18:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006d1a:	4b93      	ldr	r3, [pc, #588]	; (8006f68 <tcp_slowtmr+0x264>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	4b91      	ldr	r3, [pc, #580]	; (8006f68 <tcp_slowtmr+0x264>)
 8006d24:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006d2a:	4b90      	ldr	r3, [pc, #576]	; (8006f6c <tcp_slowtmr+0x268>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006d30:	e29d      	b.n	800726e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d34:	7d1b      	ldrb	r3, [r3, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <tcp_slowtmr+0x44>
 8006d3a:	4b8d      	ldr	r3, [pc, #564]	; (8006f70 <tcp_slowtmr+0x26c>)
 8006d3c:	f240 42be 	movw	r2, #1214	; 0x4be
 8006d40:	498c      	ldr	r1, [pc, #560]	; (8006f74 <tcp_slowtmr+0x270>)
 8006d42:	488d      	ldr	r0, [pc, #564]	; (8006f78 <tcp_slowtmr+0x274>)
 8006d44:	f007 fc78 	bl	800e638 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4a:	7d1b      	ldrb	r3, [r3, #20]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d106      	bne.n	8006d5e <tcp_slowtmr+0x5a>
 8006d50:	4b87      	ldr	r3, [pc, #540]	; (8006f70 <tcp_slowtmr+0x26c>)
 8006d52:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006d56:	4989      	ldr	r1, [pc, #548]	; (8006f7c <tcp_slowtmr+0x278>)
 8006d58:	4887      	ldr	r0, [pc, #540]	; (8006f78 <tcp_slowtmr+0x274>)
 8006d5a:	f007 fc6d 	bl	800e638 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	7d1b      	ldrb	r3, [r3, #20]
 8006d62:	2b0a      	cmp	r3, #10
 8006d64:	d106      	bne.n	8006d74 <tcp_slowtmr+0x70>
 8006d66:	4b82      	ldr	r3, [pc, #520]	; (8006f70 <tcp_slowtmr+0x26c>)
 8006d68:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006d6c:	4984      	ldr	r1, [pc, #528]	; (8006f80 <tcp_slowtmr+0x27c>)
 8006d6e:	4882      	ldr	r0, [pc, #520]	; (8006f78 <tcp_slowtmr+0x274>)
 8006d70:	f007 fc62 	bl	800e638 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d76:	7f9a      	ldrb	r2, [r3, #30]
 8006d78:	4b7b      	ldr	r3, [pc, #492]	; (8006f68 <tcp_slowtmr+0x264>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d105      	bne.n	8006d8c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006d8a:	e270      	b.n	800726e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006d8c:	4b76      	ldr	r3, [pc, #472]	; (8006f68 <tcp_slowtmr+0x264>)
 8006d8e:	781a      	ldrb	r2, [r3, #0]
 8006d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d92:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	7d1b      	ldrb	r3, [r3, #20]
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	d10a      	bne.n	8006dbe <tcp_slowtmr+0xba>
 8006da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006daa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dae:	2b05      	cmp	r3, #5
 8006db0:	d905      	bls.n	8006dbe <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006db6:	3301      	adds	r3, #1
 8006db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006dbc:	e11e      	b.n	8006ffc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dc4:	2b0b      	cmp	r3, #11
 8006dc6:	d905      	bls.n	8006dd4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dcc:	3301      	adds	r3, #1
 8006dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006dd2:	e113      	b.n	8006ffc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d075      	beq.n	8006eca <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d006      	beq.n	8006df4 <tcp_slowtmr+0xf0>
 8006de6:	4b62      	ldr	r3, [pc, #392]	; (8006f70 <tcp_slowtmr+0x26c>)
 8006de8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006dec:	4965      	ldr	r1, [pc, #404]	; (8006f84 <tcp_slowtmr+0x280>)
 8006dee:	4862      	ldr	r0, [pc, #392]	; (8006f78 <tcp_slowtmr+0x274>)
 8006df0:	f007 fc22 	bl	800e638 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d106      	bne.n	8006e0a <tcp_slowtmr+0x106>
 8006dfc:	4b5c      	ldr	r3, [pc, #368]	; (8006f70 <tcp_slowtmr+0x26c>)
 8006dfe:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006e02:	4961      	ldr	r1, [pc, #388]	; (8006f88 <tcp_slowtmr+0x284>)
 8006e04:	485c      	ldr	r0, [pc, #368]	; (8006f78 <tcp_slowtmr+0x274>)
 8006e06:	f007 fc17 	bl	800e638 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006e10:	2b0b      	cmp	r3, #11
 8006e12:	d905      	bls.n	8006e20 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e18:	3301      	adds	r3, #1
 8006e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e1e:	e0ed      	b.n	8006ffc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e22:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006e26:	3b01      	subs	r3, #1
 8006e28:	4a58      	ldr	r2, [pc, #352]	; (8006f8c <tcp_slowtmr+0x288>)
 8006e2a:	5cd3      	ldrb	r3, [r2, r3]
 8006e2c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e34:	7c7a      	ldrb	r2, [r7, #17]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d907      	bls.n	8006e4a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e40:	3301      	adds	r3, #1
 8006e42:	b2da      	uxtb	r2, r3
 8006e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e46:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e50:	7c7a      	ldrb	r2, [r7, #17]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	f200 80d2 	bhi.w	8006ffc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006e58:	2301      	movs	r3, #1
 8006e5a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d108      	bne.n	8006e78 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006e66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e68:	f004 fd18 	bl	800b89c <tcp_zero_window_probe>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d014      	beq.n	8006e9c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006e72:	2300      	movs	r3, #0
 8006e74:	623b      	str	r3, [r7, #32]
 8006e76:	e011      	b.n	8006e9c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e82:	f003 fbcb 	bl	800a61c <tcp_split_unsent_seg>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d107      	bne.n	8006e9c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006e8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e8e:	f003 fe4b 	bl	800ab28 <tcp_output>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 80ac 	beq.w	8006ffc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006eb2:	2b06      	cmp	r3, #6
 8006eb4:	f200 80a2 	bhi.w	8006ffc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006ec8:	e098      	b.n	8006ffc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ecc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	db0f      	blt.n	8006ef4 <tcp_slowtmr+0x1f0>
 8006ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006eda:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d008      	beq.n	8006ef4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	3301      	adds	r3, #1
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	b21a      	sxth	r2, r3
 8006ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006f00:	429a      	cmp	r2, r3
 8006f02:	db7b      	blt.n	8006ffc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006f04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f06:	f004 f907 	bl	800b118 <tcp_rexmit_rto_prepare>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d007      	beq.n	8006f20 <tcp_slowtmr+0x21c>
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d171      	bne.n	8006ffc <tcp_slowtmr+0x2f8>
 8006f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d06d      	beq.n	8006ffc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f22:	7d1b      	ldrb	r3, [r3, #20]
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d03a      	beq.n	8006f9e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f2e:	2b0c      	cmp	r3, #12
 8006f30:	bf28      	it	cs
 8006f32:	230c      	movcs	r3, #12
 8006f34:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006f3c:	10db      	asrs	r3, r3, #3
 8006f3e:	b21b      	sxth	r3, r3
 8006f40:	461a      	mov	r2, r3
 8006f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006f48:	4413      	add	r3, r2
 8006f4a:	7efa      	ldrb	r2, [r7, #27]
 8006f4c:	4910      	ldr	r1, [pc, #64]	; (8006f90 <tcp_slowtmr+0x28c>)
 8006f4e:	5c8a      	ldrb	r2, [r1, r2]
 8006f50:	4093      	lsls	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	dc1a      	bgt.n	8006f94 <tcp_slowtmr+0x290>
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	b21a      	sxth	r2, r3
 8006f62:	e019      	b.n	8006f98 <tcp_slowtmr+0x294>
 8006f64:	20006934 	.word	0x20006934
 8006f68:	200000ce 	.word	0x200000ce
 8006f6c:	20006930 	.word	0x20006930
 8006f70:	0800ff5c 	.word	0x0800ff5c
 8006f74:	080102a0 	.word	0x080102a0
 8006f78:	0800ffa0 	.word	0x0800ffa0
 8006f7c:	080102cc 	.word	0x080102cc
 8006f80:	080102f8 	.word	0x080102f8
 8006f84:	08010328 	.word	0x08010328
 8006f88:	0801035c 	.word	0x0801035c
 8006f8c:	08011f2c 	.word	0x08011f2c
 8006f90:	08011f1c 	.word	0x08011f1c
 8006f94:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	bf28      	it	cs
 8006fb4:	4613      	movcs	r3, r2
 8006fb6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006fb8:	8a7b      	ldrh	r3, [r7, #18]
 8006fba:	085b      	lsrs	r3, r3, #1
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d206      	bcs.n	8006fe4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006ff6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ff8:	f004 f8fe 	bl	800b1f8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffe:	7d1b      	ldrb	r3, [r3, #20]
 8007000:	2b06      	cmp	r3, #6
 8007002:	d111      	bne.n	8007028 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	8b5b      	ldrh	r3, [r3, #26]
 8007008:	f003 0310 	and.w	r3, r3, #16
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00b      	beq.n	8007028 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007010:	4b9c      	ldr	r3, [pc, #624]	; (8007284 <tcp_slowtmr+0x580>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b28      	cmp	r3, #40	; 0x28
 800701c:	d904      	bls.n	8007028 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800701e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007022:	3301      	adds	r3, #1
 8007024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	7a5b      	ldrb	r3, [r3, #9]
 800702c:	f003 0308 	and.w	r3, r3, #8
 8007030:	2b00      	cmp	r3, #0
 8007032:	d04a      	beq.n	80070ca <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007038:	2b04      	cmp	r3, #4
 800703a:	d003      	beq.n	8007044 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007040:	2b07      	cmp	r3, #7
 8007042:	d142      	bne.n	80070ca <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007044:	4b8f      	ldr	r3, [pc, #572]	; (8007284 <tcp_slowtmr+0x580>)
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007054:	4b8c      	ldr	r3, [pc, #560]	; (8007288 <tcp_slowtmr+0x584>)
 8007056:	440b      	add	r3, r1
 8007058:	498c      	ldr	r1, [pc, #560]	; (800728c <tcp_slowtmr+0x588>)
 800705a:	fba1 1303 	umull	r1, r3, r1, r3
 800705e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007060:	429a      	cmp	r2, r3
 8007062:	d90a      	bls.n	800707a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007068:	3301      	adds	r3, #1
 800706a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800706e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007072:	3301      	adds	r3, #1
 8007074:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007078:	e027      	b.n	80070ca <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800707a:	4b82      	ldr	r3, [pc, #520]	; (8007284 <tcp_slowtmr+0x580>)
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007086:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800708a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007090:	4618      	mov	r0, r3
 8007092:	4b7f      	ldr	r3, [pc, #508]	; (8007290 <tcp_slowtmr+0x58c>)
 8007094:	fb03 f300 	mul.w	r3, r3, r0
 8007098:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800709a:	497c      	ldr	r1, [pc, #496]	; (800728c <tcp_slowtmr+0x588>)
 800709c:	fba1 1303 	umull	r1, r3, r1, r3
 80070a0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d911      	bls.n	80070ca <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80070a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a8:	f004 fbb8 	bl	800b81c <tcp_keepalive>
 80070ac:	4603      	mov	r3, r0
 80070ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80070b2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d107      	bne.n	80070ca <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80070c0:	3301      	adds	r3, #1
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80070ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d011      	beq.n	80070f6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80070d2:	4b6c      	ldr	r3, [pc, #432]	; (8007284 <tcp_slowtmr+0x580>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	1ad2      	subs	r2, r2, r3
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80070e2:	4619      	mov	r1, r3
 80070e4:	460b      	mov	r3, r1
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	440b      	add	r3, r1
 80070ea:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d302      	bcc.n	80070f6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80070f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070f2:	f000 febf 	bl	8007e74 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80070f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f8:	7d1b      	ldrb	r3, [r3, #20]
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d10b      	bne.n	8007116 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80070fe:	4b61      	ldr	r3, [pc, #388]	; (8007284 <tcp_slowtmr+0x580>)
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b28      	cmp	r3, #40	; 0x28
 800710a:	d904      	bls.n	8007116 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800710c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007110:	3301      	adds	r3, #1
 8007112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	7d1b      	ldrb	r3, [r3, #20]
 800711a:	2b09      	cmp	r3, #9
 800711c:	d10b      	bne.n	8007136 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800711e:	4b59      	ldr	r3, [pc, #356]	; (8007284 <tcp_slowtmr+0x580>)
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2bf0      	cmp	r3, #240	; 0xf0
 800712a:	d904      	bls.n	8007136 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800712c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007130:	3301      	adds	r3, #1
 8007132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800713a:	2b00      	cmp	r3, #0
 800713c:	d060      	beq.n	8007200 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007144:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007148:	f000 fce0 	bl	8007b0c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	2b00      	cmp	r3, #0
 8007150:	d010      	beq.n	8007174 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007152:	4b50      	ldr	r3, [pc, #320]	; (8007294 <tcp_slowtmr+0x590>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007158:	429a      	cmp	r2, r3
 800715a:	d106      	bne.n	800716a <tcp_slowtmr+0x466>
 800715c:	4b4e      	ldr	r3, [pc, #312]	; (8007298 <tcp_slowtmr+0x594>)
 800715e:	f240 526d 	movw	r2, #1389	; 0x56d
 8007162:	494e      	ldr	r1, [pc, #312]	; (800729c <tcp_slowtmr+0x598>)
 8007164:	484e      	ldr	r0, [pc, #312]	; (80072a0 <tcp_slowtmr+0x59c>)
 8007166:	f007 fa67 	bl	800e638 <iprintf>
        prev->next = pcb->next;
 800716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716c:	68da      	ldr	r2, [r3, #12]
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	60da      	str	r2, [r3, #12]
 8007172:	e00f      	b.n	8007194 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007174:	4b47      	ldr	r3, [pc, #284]	; (8007294 <tcp_slowtmr+0x590>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800717a:	429a      	cmp	r2, r3
 800717c:	d006      	beq.n	800718c <tcp_slowtmr+0x488>
 800717e:	4b46      	ldr	r3, [pc, #280]	; (8007298 <tcp_slowtmr+0x594>)
 8007180:	f240 5271 	movw	r2, #1393	; 0x571
 8007184:	4947      	ldr	r1, [pc, #284]	; (80072a4 <tcp_slowtmr+0x5a0>)
 8007186:	4846      	ldr	r0, [pc, #280]	; (80072a0 <tcp_slowtmr+0x59c>)
 8007188:	f007 fa56 	bl	800e638 <iprintf>
        tcp_active_pcbs = pcb->next;
 800718c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	4a40      	ldr	r2, [pc, #256]	; (8007294 <tcp_slowtmr+0x590>)
 8007192:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007194:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007198:	2b00      	cmp	r3, #0
 800719a:	d013      	beq.n	80071c4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800719c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80071a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80071a4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80071a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a8:	3304      	adds	r3, #4
 80071aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ac:	8ad2      	ldrh	r2, [r2, #22]
 80071ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071b0:	8b09      	ldrh	r1, [r1, #24]
 80071b2:	9102      	str	r1, [sp, #8]
 80071b4:	9201      	str	r2, [sp, #4]
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	462b      	mov	r3, r5
 80071ba:	4622      	mov	r2, r4
 80071bc:	4601      	mov	r1, r0
 80071be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071c0:	f004 fa78 	bl	800b6b4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071cc:	7d1b      	ldrb	r3, [r3, #20]
 80071ce:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80071d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80071da:	6838      	ldr	r0, [r7, #0]
 80071dc:	f7ff f842 	bl	8006264 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80071e0:	4b31      	ldr	r3, [pc, #196]	; (80072a8 <tcp_slowtmr+0x5a4>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d004      	beq.n	80071f6 <tcp_slowtmr+0x4f2>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f06f 010c 	mvn.w	r1, #12
 80071f2:	68b8      	ldr	r0, [r7, #8]
 80071f4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80071f6:	4b2c      	ldr	r3, [pc, #176]	; (80072a8 <tcp_slowtmr+0x5a4>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d037      	beq.n	800726e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80071fe:	e592      	b.n	8006d26 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007202:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	7f1b      	ldrb	r3, [r3, #28]
 800720e:	3301      	adds	r3, #1
 8007210:	b2da      	uxtb	r2, r3
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007218:	7f1a      	ldrb	r2, [r3, #28]
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	7f5b      	ldrb	r3, [r3, #29]
 800721e:	429a      	cmp	r2, r3
 8007220:	d325      	bcc.n	800726e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	2200      	movs	r2, #0
 8007226:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007228:	4b1f      	ldr	r3, [pc, #124]	; (80072a8 <tcp_slowtmr+0x5a4>)
 800722a:	2200      	movs	r2, #0
 800722c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00b      	beq.n	8007250 <tcp_slowtmr+0x54c>
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800723e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007240:	6912      	ldr	r2, [r2, #16]
 8007242:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007244:	4610      	mov	r0, r2
 8007246:	4798      	blx	r3
 8007248:	4603      	mov	r3, r0
 800724a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800724e:	e002      	b.n	8007256 <tcp_slowtmr+0x552>
 8007250:	2300      	movs	r3, #0
 8007252:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007256:	4b14      	ldr	r3, [pc, #80]	; (80072a8 <tcp_slowtmr+0x5a4>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d000      	beq.n	8007260 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800725e:	e562      	b.n	8006d26 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007260:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007264:	2b00      	cmp	r3, #0
 8007266:	d102      	bne.n	800726e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800726a:	f003 fc5d 	bl	800ab28 <tcp_output>
  while (pcb != NULL) {
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	2b00      	cmp	r3, #0
 8007272:	f47f ad5e 	bne.w	8006d32 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007276:	2300      	movs	r3, #0
 8007278:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800727a:	4b0c      	ldr	r3, [pc, #48]	; (80072ac <tcp_slowtmr+0x5a8>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007280:	e069      	b.n	8007356 <tcp_slowtmr+0x652>
 8007282:	bf00      	nop
 8007284:	20006934 	.word	0x20006934
 8007288:	000a4cb8 	.word	0x000a4cb8
 800728c:	10624dd3 	.word	0x10624dd3
 8007290:	000124f8 	.word	0x000124f8
 8007294:	20006930 	.word	0x20006930
 8007298:	0800ff5c 	.word	0x0800ff5c
 800729c:	08010394 	.word	0x08010394
 80072a0:	0800ffa0 	.word	0x0800ffa0
 80072a4:	080103c0 	.word	0x080103c0
 80072a8:	2000692c 	.word	0x2000692c
 80072ac:	20006940 	.word	0x20006940
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	7d1b      	ldrb	r3, [r3, #20]
 80072b4:	2b0a      	cmp	r3, #10
 80072b6:	d006      	beq.n	80072c6 <tcp_slowtmr+0x5c2>
 80072b8:	4b2a      	ldr	r3, [pc, #168]	; (8007364 <tcp_slowtmr+0x660>)
 80072ba:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80072be:	492a      	ldr	r1, [pc, #168]	; (8007368 <tcp_slowtmr+0x664>)
 80072c0:	482a      	ldr	r0, [pc, #168]	; (800736c <tcp_slowtmr+0x668>)
 80072c2:	f007 f9b9 	bl	800e638 <iprintf>
    pcb_remove = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80072cc:	4b28      	ldr	r3, [pc, #160]	; (8007370 <tcp_slowtmr+0x66c>)
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2bf0      	cmp	r3, #240	; 0xf0
 80072d8:	d904      	bls.n	80072e4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80072da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072de:	3301      	adds	r3, #1
 80072e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80072e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d02f      	beq.n	800734c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80072ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072ee:	f000 fc0d 	bl	8007b0c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d010      	beq.n	800731a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80072f8:	4b1e      	ldr	r3, [pc, #120]	; (8007374 <tcp_slowtmr+0x670>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072fe:	429a      	cmp	r2, r3
 8007300:	d106      	bne.n	8007310 <tcp_slowtmr+0x60c>
 8007302:	4b18      	ldr	r3, [pc, #96]	; (8007364 <tcp_slowtmr+0x660>)
 8007304:	f240 52af 	movw	r2, #1455	; 0x5af
 8007308:	491b      	ldr	r1, [pc, #108]	; (8007378 <tcp_slowtmr+0x674>)
 800730a:	4818      	ldr	r0, [pc, #96]	; (800736c <tcp_slowtmr+0x668>)
 800730c:	f007 f994 	bl	800e638 <iprintf>
        prev->next = pcb->next;
 8007310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	60da      	str	r2, [r3, #12]
 8007318:	e00f      	b.n	800733a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800731a:	4b16      	ldr	r3, [pc, #88]	; (8007374 <tcp_slowtmr+0x670>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007320:	429a      	cmp	r2, r3
 8007322:	d006      	beq.n	8007332 <tcp_slowtmr+0x62e>
 8007324:	4b0f      	ldr	r3, [pc, #60]	; (8007364 <tcp_slowtmr+0x660>)
 8007326:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800732a:	4914      	ldr	r1, [pc, #80]	; (800737c <tcp_slowtmr+0x678>)
 800732c:	480f      	ldr	r0, [pc, #60]	; (800736c <tcp_slowtmr+0x668>)
 800732e:	f007 f983 	bl	800e638 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	4a0f      	ldr	r2, [pc, #60]	; (8007374 <tcp_slowtmr+0x670>)
 8007338:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007344:	69f8      	ldr	r0, [r7, #28]
 8007346:	f7fe ff8d 	bl	8006264 <tcp_free>
 800734a:	e004      	b.n	8007356 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1a9      	bne.n	80072b0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800735c:	bf00      	nop
 800735e:	3730      	adds	r7, #48	; 0x30
 8007360:	46bd      	mov	sp, r7
 8007362:	bdb0      	pop	{r4, r5, r7, pc}
 8007364:	0800ff5c 	.word	0x0800ff5c
 8007368:	080103ec 	.word	0x080103ec
 800736c:	0800ffa0 	.word	0x0800ffa0
 8007370:	20006934 	.word	0x20006934
 8007374:	20006940 	.word	0x20006940
 8007378:	0801041c 	.word	0x0801041c
 800737c:	08010444 	.word	0x08010444

08007380 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007386:	4b2d      	ldr	r3, [pc, #180]	; (800743c <tcp_fasttmr+0xbc>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	3301      	adds	r3, #1
 800738c:	b2da      	uxtb	r2, r3
 800738e:	4b2b      	ldr	r3, [pc, #172]	; (800743c <tcp_fasttmr+0xbc>)
 8007390:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007392:	4b2b      	ldr	r3, [pc, #172]	; (8007440 <tcp_fasttmr+0xc0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007398:	e048      	b.n	800742c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	7f9a      	ldrb	r2, [r3, #30]
 800739e:	4b27      	ldr	r3, [pc, #156]	; (800743c <tcp_fasttmr+0xbc>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d03f      	beq.n	8007426 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80073a6:	4b25      	ldr	r3, [pc, #148]	; (800743c <tcp_fasttmr+0xbc>)
 80073a8:	781a      	ldrb	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	8b5b      	ldrh	r3, [r3, #26]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d010      	beq.n	80073dc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8b5b      	ldrh	r3, [r3, #26]
 80073be:	f043 0302 	orr.w	r3, r3, #2
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f003 fbad 	bl	800ab28 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	8b5b      	ldrh	r3, [r3, #26]
 80073d2:	f023 0303 	bic.w	r3, r3, #3
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	8b5b      	ldrh	r3, [r3, #26]
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d009      	beq.n	80073fc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	8b5b      	ldrh	r3, [r3, #26]
 80073ec:	f023 0308 	bic.w	r3, r3, #8
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7ff f8c4 	bl	8006584 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00a      	beq.n	8007420 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800740a:	4b0e      	ldr	r3, [pc, #56]	; (8007444 <tcp_fasttmr+0xc4>)
 800740c:	2200      	movs	r2, #0
 800740e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f819 	bl	8007448 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007416:	4b0b      	ldr	r3, [pc, #44]	; (8007444 <tcp_fasttmr+0xc4>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d000      	beq.n	8007420 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800741e:	e7b8      	b.n	8007392 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	607b      	str	r3, [r7, #4]
 8007424:	e002      	b.n	800742c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1b3      	bne.n	800739a <tcp_fasttmr+0x1a>
    }
  }
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	200000ce 	.word	0x200000ce
 8007440:	20006930 	.word	0x20006930
 8007444:	2000692c 	.word	0x2000692c

08007448 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007448:	b590      	push	{r4, r7, lr}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <tcp_process_refused_data+0x22>
 8007456:	4b37      	ldr	r3, [pc, #220]	; (8007534 <tcp_process_refused_data+0xec>)
 8007458:	f240 6209 	movw	r2, #1545	; 0x609
 800745c:	4936      	ldr	r1, [pc, #216]	; (8007538 <tcp_process_refused_data+0xf0>)
 800745e:	4837      	ldr	r0, [pc, #220]	; (800753c <tcp_process_refused_data+0xf4>)
 8007460:	f007 f8ea 	bl	800e638 <iprintf>
 8007464:	f06f 030f 	mvn.w	r3, #15
 8007468:	e060      	b.n	800752c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800746e:	7b5b      	ldrb	r3, [r3, #13]
 8007470:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007476:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00b      	beq.n	80074a0 <tcp_process_refused_data+0x58>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6918      	ldr	r0, [r3, #16]
 8007492:	2300      	movs	r3, #0
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	47a0      	blx	r4
 800749a:	4603      	mov	r3, r0
 800749c:	73fb      	strb	r3, [r7, #15]
 800749e:	e007      	b.n	80074b0 <tcp_process_refused_data+0x68>
 80074a0:	2300      	movs	r3, #0
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	6879      	ldr	r1, [r7, #4]
 80074a6:	2000      	movs	r0, #0
 80074a8:	f000 f8c0 	bl	800762c <tcp_recv_null>
 80074ac:	4603      	mov	r3, r0
 80074ae:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80074b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d12a      	bne.n	800750e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
 80074ba:	f003 0320 	and.w	r3, r3, #32
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d033      	beq.n	800752a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80074ca:	d005      	beq.n	80074d8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d0:	3301      	adds	r3, #1
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00b      	beq.n	80074fa <tcp_process_refused_data+0xb2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6918      	ldr	r0, [r3, #16]
 80074ec:	2300      	movs	r3, #0
 80074ee:	2200      	movs	r2, #0
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	47a0      	blx	r4
 80074f4:	4603      	mov	r3, r0
 80074f6:	73fb      	strb	r3, [r7, #15]
 80074f8:	e001      	b.n	80074fe <tcp_process_refused_data+0xb6>
 80074fa:	2300      	movs	r3, #0
 80074fc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80074fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007502:	f113 0f0d 	cmn.w	r3, #13
 8007506:	d110      	bne.n	800752a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007508:	f06f 030c 	mvn.w	r3, #12
 800750c:	e00e      	b.n	800752c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800750e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007512:	f113 0f0d 	cmn.w	r3, #13
 8007516:	d102      	bne.n	800751e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007518:	f06f 030c 	mvn.w	r3, #12
 800751c:	e006      	b.n	800752c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007524:	f06f 0304 	mvn.w	r3, #4
 8007528:	e000      	b.n	800752c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	bd90      	pop	{r4, r7, pc}
 8007534:	0800ff5c 	.word	0x0800ff5c
 8007538:	0801046c 	.word	0x0801046c
 800753c:	0800ffa0 	.word	0x0800ffa0

08007540 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007548:	e007      	b.n	800755a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f809 	bl	8007568 <tcp_seg_free>
    seg = next;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1f4      	bne.n	800754a <tcp_segs_free+0xa>
  }
}
 8007560:	bf00      	nop
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00c      	beq.n	8007590 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d004      	beq.n	8007588 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fbce 	bl	8005d24 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007588:	6879      	ldr	r1, [r7, #4]
 800758a:	2003      	movs	r0, #3
 800758c:	f7fd fdbc 	bl	8005108 <memp_free>
  }
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d107      	bne.n	80075ba <tcp_setprio+0x22>
 80075aa:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <tcp_setprio+0x30>)
 80075ac:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80075b0:	4906      	ldr	r1, [pc, #24]	; (80075cc <tcp_setprio+0x34>)
 80075b2:	4807      	ldr	r0, [pc, #28]	; (80075d0 <tcp_setprio+0x38>)
 80075b4:	f007 f840 	bl	800e638 <iprintf>
 80075b8:	e002      	b.n	80075c0 <tcp_setprio+0x28>

  pcb->prio = prio;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	78fa      	ldrb	r2, [r7, #3]
 80075be:	755a      	strb	r2, [r3, #21]
}
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	0800ff5c 	.word	0x0800ff5c
 80075cc:	08010494 	.word	0x08010494
 80075d0:	0800ffa0 	.word	0x0800ffa0

080075d4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d106      	bne.n	80075f0 <tcp_seg_copy+0x1c>
 80075e2:	4b0f      	ldr	r3, [pc, #60]	; (8007620 <tcp_seg_copy+0x4c>)
 80075e4:	f240 6282 	movw	r2, #1666	; 0x682
 80075e8:	490e      	ldr	r1, [pc, #56]	; (8007624 <tcp_seg_copy+0x50>)
 80075ea:	480f      	ldr	r0, [pc, #60]	; (8007628 <tcp_seg_copy+0x54>)
 80075ec:	f007 f824 	bl	800e638 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80075f0:	2003      	movs	r0, #3
 80075f2:	f7fd fd3d 	bl	8005070 <memp_malloc>
 80075f6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <tcp_seg_copy+0x2e>
    return NULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	e00a      	b.n	8007618 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007602:	2210      	movs	r2, #16
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f007 f803 	bl	800e612 <memcpy>
  pbuf_ref(cseg->p);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe fc27 	bl	8005e64 <pbuf_ref>
  return cseg;
 8007616:	68fb      	ldr	r3, [r7, #12]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	0800ff5c 	.word	0x0800ff5c
 8007624:	080104b0 	.word	0x080104b0
 8007628:	0800ffa0 	.word	0x0800ffa0

0800762c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d109      	bne.n	8007654 <tcp_recv_null+0x28>
 8007640:	4b12      	ldr	r3, [pc, #72]	; (800768c <tcp_recv_null+0x60>)
 8007642:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007646:	4912      	ldr	r1, [pc, #72]	; (8007690 <tcp_recv_null+0x64>)
 8007648:	4812      	ldr	r0, [pc, #72]	; (8007694 <tcp_recv_null+0x68>)
 800764a:	f006 fff5 	bl	800e638 <iprintf>
 800764e:	f06f 030f 	mvn.w	r3, #15
 8007652:	e016      	b.n	8007682 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	891b      	ldrh	r3, [r3, #8]
 800765e:	4619      	mov	r1, r3
 8007660:	68b8      	ldr	r0, [r7, #8]
 8007662:	f7ff fab9 	bl	8006bd8 <tcp_recved>
    pbuf_free(p);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7fe fb5c 	bl	8005d24 <pbuf_free>
 800766c:	e008      	b.n	8007680 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800766e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d104      	bne.n	8007680 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007676:	68b8      	ldr	r0, [r7, #8]
 8007678:	f7fe ffea 	bl	8006650 <tcp_close>
 800767c:	4603      	mov	r3, r0
 800767e:	e000      	b.n	8007682 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	0800ff5c 	.word	0x0800ff5c
 8007690:	080104cc 	.word	0x080104cc
 8007694:	0800ffa0 	.word	0x0800ffa0

08007698 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80076a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	db01      	blt.n	80076ae <tcp_kill_prio+0x16>
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	e000      	b.n	80076b0 <tcp_kill_prio+0x18>
 80076ae:	237f      	movs	r3, #127	; 0x7f
 80076b0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80076b2:	7afb      	ldrb	r3, [r7, #11]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d034      	beq.n	8007722 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80076b8:	7afb      	ldrb	r3, [r7, #11]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80076c6:	4b19      	ldr	r3, [pc, #100]	; (800772c <tcp_kill_prio+0x94>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	e01f      	b.n	800770e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	7d5b      	ldrb	r3, [r3, #21]
 80076d2:	7afa      	ldrb	r2, [r7, #11]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d80c      	bhi.n	80076f2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80076dc:	7afa      	ldrb	r2, [r7, #11]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d112      	bne.n	8007708 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80076e2:	4b13      	ldr	r3, [pc, #76]	; (8007730 <tcp_kill_prio+0x98>)
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d80a      	bhi.n	8007708 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80076f2:	4b0f      	ldr	r3, [pc, #60]	; (8007730 <tcp_kill_prio+0x98>)
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	7d5b      	ldrb	r3, [r3, #21]
 8007706:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1dc      	bne.n	80076ce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d004      	beq.n	8007724 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800771a:	6938      	ldr	r0, [r7, #16]
 800771c:	f7ff f882 	bl	8006824 <tcp_abort>
 8007720:	e000      	b.n	8007724 <tcp_kill_prio+0x8c>
    return;
 8007722:	bf00      	nop
  }
}
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20006930 	.word	0x20006930
 8007730:	20006934 	.word	0x20006934

08007734 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	2b08      	cmp	r3, #8
 8007742:	d009      	beq.n	8007758 <tcp_kill_state+0x24>
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	2b09      	cmp	r3, #9
 8007748:	d006      	beq.n	8007758 <tcp_kill_state+0x24>
 800774a:	4b1a      	ldr	r3, [pc, #104]	; (80077b4 <tcp_kill_state+0x80>)
 800774c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007750:	4919      	ldr	r1, [pc, #100]	; (80077b8 <tcp_kill_state+0x84>)
 8007752:	481a      	ldr	r0, [pc, #104]	; (80077bc <tcp_kill_state+0x88>)
 8007754:	f006 ff70 	bl	800e638 <iprintf>

  inactivity = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800775c:	2300      	movs	r3, #0
 800775e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007760:	4b17      	ldr	r3, [pc, #92]	; (80077c0 <tcp_kill_state+0x8c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	e017      	b.n	8007798 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	7d1b      	ldrb	r3, [r3, #20]
 800776c:	79fa      	ldrb	r2, [r7, #7]
 800776e:	429a      	cmp	r2, r3
 8007770:	d10f      	bne.n	8007792 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007772:	4b14      	ldr	r3, [pc, #80]	; (80077c4 <tcp_kill_state+0x90>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	429a      	cmp	r2, r3
 8007780:	d807      	bhi.n	8007792 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007782:	4b10      	ldr	r3, [pc, #64]	; (80077c4 <tcp_kill_state+0x90>)
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	617b      	str	r3, [r7, #20]
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1e4      	bne.n	8007768 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d003      	beq.n	80077ac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80077a4:	2100      	movs	r1, #0
 80077a6:	6938      	ldr	r0, [r7, #16]
 80077a8:	f7fe ff7e 	bl	80066a8 <tcp_abandon>
  }
}
 80077ac:	bf00      	nop
 80077ae:	3718      	adds	r7, #24
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	0800ff5c 	.word	0x0800ff5c
 80077b8:	080104e8 	.word	0x080104e8
 80077bc:	0800ffa0 	.word	0x0800ffa0
 80077c0:	20006930 	.word	0x20006930
 80077c4:	20006934 	.word	0x20006934

080077c8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80077ce:	2300      	movs	r3, #0
 80077d0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80077d6:	4b12      	ldr	r3, [pc, #72]	; (8007820 <tcp_kill_timewait+0x58>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	e012      	b.n	8007804 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80077de:	4b11      	ldr	r3, [pc, #68]	; (8007824 <tcp_kill_timewait+0x5c>)
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d807      	bhi.n	80077fe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80077ee:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <tcp_kill_timewait+0x5c>)
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	1ad3      	subs	r3, r2, r3
 80077f8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	60fb      	str	r3, [r7, #12]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d1e9      	bne.n	80077de <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007810:	68b8      	ldr	r0, [r7, #8]
 8007812:	f7ff f807 	bl	8006824 <tcp_abort>
  }
}
 8007816:	bf00      	nop
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20006940 	.word	0x20006940
 8007824:	20006934 	.word	0x20006934

08007828 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800782e:	4b10      	ldr	r3, [pc, #64]	; (8007870 <tcp_handle_closepend+0x48>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007834:	e014      	b.n	8007860 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	8b5b      	ldrh	r3, [r3, #26]
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d009      	beq.n	800785c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	8b5b      	ldrh	r3, [r3, #26]
 800784c:	f023 0308 	bic.w	r3, r3, #8
 8007850:	b29a      	uxth	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fe fe94 	bl	8006584 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1e7      	bne.n	8007836 <tcp_handle_closepend+0xe>
  }
}
 8007866:	bf00      	nop
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	20006930 	.word	0x20006930

08007874 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800787e:	2001      	movs	r0, #1
 8007880:	f7fd fbf6 	bl	8005070 <memp_malloc>
 8007884:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d126      	bne.n	80078da <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800788c:	f7ff ffcc 	bl	8007828 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007890:	f7ff ff9a 	bl	80077c8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007894:	2001      	movs	r0, #1
 8007896:	f7fd fbeb 	bl	8005070 <memp_malloc>
 800789a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d11b      	bne.n	80078da <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80078a2:	2009      	movs	r0, #9
 80078a4:	f7ff ff46 	bl	8007734 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80078a8:	2001      	movs	r0, #1
 80078aa:	f7fd fbe1 	bl	8005070 <memp_malloc>
 80078ae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d111      	bne.n	80078da <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80078b6:	2008      	movs	r0, #8
 80078b8:	f7ff ff3c 	bl	8007734 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80078bc:	2001      	movs	r0, #1
 80078be:	f7fd fbd7 	bl	8005070 <memp_malloc>
 80078c2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d107      	bne.n	80078da <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80078ca:	79fb      	ldrb	r3, [r7, #7]
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff fee3 	bl	8007698 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80078d2:	2001      	movs	r0, #1
 80078d4:	f7fd fbcc 	bl	8005070 <memp_malloc>
 80078d8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d03f      	beq.n	8007960 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80078e0:	229c      	movs	r2, #156	; 0x9c
 80078e2:	2100      	movs	r1, #0
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f006 fe9f 	bl	800e628 <memset>
    pcb->prio = prio;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	79fa      	ldrb	r2, [r7, #7]
 80078ee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80078f6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007900:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	22ff      	movs	r2, #255	; 0xff
 800790e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007916:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2206      	movs	r2, #6
 800791c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2206      	movs	r2, #6
 8007924:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800792c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2201      	movs	r2, #1
 8007932:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007936:	4b0d      	ldr	r3, [pc, #52]	; (800796c <tcp_alloc+0xf8>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800793e:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <tcp_alloc+0xfc>)
 8007940:	781a      	ldrb	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800794c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4a08      	ldr	r2, [pc, #32]	; (8007974 <tcp_alloc+0x100>)
 8007954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	4a07      	ldr	r2, [pc, #28]	; (8007978 <tcp_alloc+0x104>)
 800795c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007960:	68fb      	ldr	r3, [r7, #12]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20006934 	.word	0x20006934
 8007970:	200000ce 	.word	0x200000ce
 8007974:	0800762d 	.word	0x0800762d
 8007978:	006ddd00 	.word	0x006ddd00

0800797c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8007980:	2040      	movs	r0, #64	; 0x40
 8007982:	f7ff ff77 	bl	8007874 <tcp_alloc>
 8007986:	4603      	mov	r3, r0
}
 8007988:	4618      	mov	r0, r3
 800798a:	bd80      	pop	{r7, pc}

0800798c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	611a      	str	r2, [r3, #16]
  }
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
	...

080079b0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00e      	beq.n	80079de <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	7d1b      	ldrb	r3, [r3, #20]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d106      	bne.n	80079d6 <tcp_recv+0x26>
 80079c8:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <tcp_recv+0x38>)
 80079ca:	f240 72df 	movw	r2, #2015	; 0x7df
 80079ce:	4907      	ldr	r1, [pc, #28]	; (80079ec <tcp_recv+0x3c>)
 80079d0:	4807      	ldr	r0, [pc, #28]	; (80079f0 <tcp_recv+0x40>)
 80079d2:	f006 fe31 	bl	800e638 <iprintf>
    pcb->recv = recv;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	0800ff5c 	.word	0x0800ff5c
 80079ec:	080104f8 	.word	0x080104f8
 80079f0:	0800ffa0 	.word	0x0800ffa0

080079f4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00e      	beq.n	8007a22 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	7d1b      	ldrb	r3, [r3, #20]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d106      	bne.n	8007a1a <tcp_sent+0x26>
 8007a0c:	4b07      	ldr	r3, [pc, #28]	; (8007a2c <tcp_sent+0x38>)
 8007a0e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8007a12:	4907      	ldr	r1, [pc, #28]	; (8007a30 <tcp_sent+0x3c>)
 8007a14:	4807      	ldr	r0, [pc, #28]	; (8007a34 <tcp_sent+0x40>)
 8007a16:	f006 fe0f 	bl	800e638 <iprintf>
    pcb->sent = sent;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8007a22:	bf00      	nop
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	0800ff5c 	.word	0x0800ff5c
 8007a30:	08010520 	.word	0x08010520
 8007a34:	0800ffa0 	.word	0x0800ffa0

08007a38 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00e      	beq.n	8007a66 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	7d1b      	ldrb	r3, [r3, #20]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d106      	bne.n	8007a5e <tcp_err+0x26>
 8007a50:	4b07      	ldr	r3, [pc, #28]	; (8007a70 <tcp_err+0x38>)
 8007a52:	f640 020d 	movw	r2, #2061	; 0x80d
 8007a56:	4907      	ldr	r1, [pc, #28]	; (8007a74 <tcp_err+0x3c>)
 8007a58:	4807      	ldr	r0, [pc, #28]	; (8007a78 <tcp_err+0x40>)
 8007a5a:	f006 fded 	bl	800e638 <iprintf>
    pcb->errf = err;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	0800ff5c 	.word	0x0800ff5c
 8007a74:	08010548 	.word	0x08010548
 8007a78:	0800ffa0 	.word	0x0800ffa0

08007a7c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <tcp_accept+0x22>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	7d1b      	ldrb	r3, [r3, #20]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d104      	bne.n	8007a9e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	619a      	str	r2, [r3, #24]
  }
}
 8007a9e:	bf00      	nop
 8007aa0:	3714      	adds	r7, #20
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
	...

08007aac <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d107      	bne.n	8007ad0 <tcp_poll+0x24>
 8007ac0:	4b0e      	ldr	r3, [pc, #56]	; (8007afc <tcp_poll+0x50>)
 8007ac2:	f640 023d 	movw	r2, #2109	; 0x83d
 8007ac6:	490e      	ldr	r1, [pc, #56]	; (8007b00 <tcp_poll+0x54>)
 8007ac8:	480e      	ldr	r0, [pc, #56]	; (8007b04 <tcp_poll+0x58>)
 8007aca:	f006 fdb5 	bl	800e638 <iprintf>
 8007ace:	e011      	b.n	8007af4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	7d1b      	ldrb	r3, [r3, #20]
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d106      	bne.n	8007ae6 <tcp_poll+0x3a>
 8007ad8:	4b08      	ldr	r3, [pc, #32]	; (8007afc <tcp_poll+0x50>)
 8007ada:	f640 023e 	movw	r2, #2110	; 0x83e
 8007ade:	490a      	ldr	r1, [pc, #40]	; (8007b08 <tcp_poll+0x5c>)
 8007ae0:	4808      	ldr	r0, [pc, #32]	; (8007b04 <tcp_poll+0x58>)
 8007ae2:	f006 fda9 	bl	800e638 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	79fa      	ldrb	r2, [r7, #7]
 8007af2:	775a      	strb	r2, [r3, #29]
}
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	0800ff5c 	.word	0x0800ff5c
 8007b00:	08010570 	.word	0x08010570
 8007b04:	0800ffa0 	.word	0x0800ffa0
 8007b08:	08010588 	.word	0x08010588

08007b0c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d107      	bne.n	8007b2a <tcp_pcb_purge+0x1e>
 8007b1a:	4b21      	ldr	r3, [pc, #132]	; (8007ba0 <tcp_pcb_purge+0x94>)
 8007b1c:	f640 0251 	movw	r2, #2129	; 0x851
 8007b20:	4920      	ldr	r1, [pc, #128]	; (8007ba4 <tcp_pcb_purge+0x98>)
 8007b22:	4821      	ldr	r0, [pc, #132]	; (8007ba8 <tcp_pcb_purge+0x9c>)
 8007b24:	f006 fd88 	bl	800e638 <iprintf>
 8007b28:	e037      	b.n	8007b9a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	7d1b      	ldrb	r3, [r3, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d033      	beq.n	8007b9a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007b36:	2b0a      	cmp	r3, #10
 8007b38:	d02f      	beq.n	8007b9a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d02b      	beq.n	8007b9a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d007      	beq.n	8007b5a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fe f8e8 	bl	8005d24 <pbuf_free>
      pcb->refused_data = NULL;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f986 	bl	8007e74 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b6e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7ff fce3 	bl	8007540 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7ff fcde 	bl	8007540 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2200      	movs	r2, #0
 8007b88:	66da      	str	r2, [r3, #108]	; 0x6c
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	0800ff5c 	.word	0x0800ff5c
 8007ba4:	080105a8 	.word	0x080105a8
 8007ba8:	0800ffa0 	.word	0x0800ffa0

08007bac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d106      	bne.n	8007bca <tcp_pcb_remove+0x1e>
 8007bbc:	4b3e      	ldr	r3, [pc, #248]	; (8007cb8 <tcp_pcb_remove+0x10c>)
 8007bbe:	f640 0283 	movw	r2, #2179	; 0x883
 8007bc2:	493e      	ldr	r1, [pc, #248]	; (8007cbc <tcp_pcb_remove+0x110>)
 8007bc4:	483e      	ldr	r0, [pc, #248]	; (8007cc0 <tcp_pcb_remove+0x114>)
 8007bc6:	f006 fd37 	bl	800e638 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d106      	bne.n	8007bde <tcp_pcb_remove+0x32>
 8007bd0:	4b39      	ldr	r3, [pc, #228]	; (8007cb8 <tcp_pcb_remove+0x10c>)
 8007bd2:	f640 0284 	movw	r2, #2180	; 0x884
 8007bd6:	493b      	ldr	r1, [pc, #236]	; (8007cc4 <tcp_pcb_remove+0x118>)
 8007bd8:	4839      	ldr	r0, [pc, #228]	; (8007cc0 <tcp_pcb_remove+0x114>)
 8007bda:	f006 fd2d 	bl	800e638 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d105      	bne.n	8007bf4 <tcp_pcb_remove+0x48>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	e013      	b.n	8007c1c <tcp_pcb_remove+0x70>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	e00c      	b.n	8007c16 <tcp_pcb_remove+0x6a>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d104      	bne.n	8007c10 <tcp_pcb_remove+0x64>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	60da      	str	r2, [r3, #12]
 8007c0e:	e005      	b.n	8007c1c <tcp_pcb_remove+0x70>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1ef      	bne.n	8007bfc <tcp_pcb_remove+0x50>
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007c22:	6838      	ldr	r0, [r7, #0]
 8007c24:	f7ff ff72 	bl	8007b0c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	7d1b      	ldrb	r3, [r3, #20]
 8007c2c:	2b0a      	cmp	r3, #10
 8007c2e:	d013      	beq.n	8007c58 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d00f      	beq.n	8007c58 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	8b5b      	ldrh	r3, [r3, #26]
 8007c3c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d009      	beq.n	8007c58 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	8b5b      	ldrh	r3, [r3, #26]
 8007c48:	f043 0302 	orr.w	r3, r3, #2
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007c52:	6838      	ldr	r0, [r7, #0]
 8007c54:	f002 ff68 	bl	800ab28 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	7d1b      	ldrb	r3, [r3, #20]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d020      	beq.n	8007ca2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d006      	beq.n	8007c76 <tcp_pcb_remove+0xca>
 8007c68:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <tcp_pcb_remove+0x10c>)
 8007c6a:	f640 0293 	movw	r2, #2195	; 0x893
 8007c6e:	4916      	ldr	r1, [pc, #88]	; (8007cc8 <tcp_pcb_remove+0x11c>)
 8007c70:	4813      	ldr	r0, [pc, #76]	; (8007cc0 <tcp_pcb_remove+0x114>)
 8007c72:	f006 fce1 	bl	800e638 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d006      	beq.n	8007c8c <tcp_pcb_remove+0xe0>
 8007c7e:	4b0e      	ldr	r3, [pc, #56]	; (8007cb8 <tcp_pcb_remove+0x10c>)
 8007c80:	f640 0294 	movw	r2, #2196	; 0x894
 8007c84:	4911      	ldr	r1, [pc, #68]	; (8007ccc <tcp_pcb_remove+0x120>)
 8007c86:	480e      	ldr	r0, [pc, #56]	; (8007cc0 <tcp_pcb_remove+0x114>)
 8007c88:	f006 fcd6 	bl	800e638 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d006      	beq.n	8007ca2 <tcp_pcb_remove+0xf6>
 8007c94:	4b08      	ldr	r3, [pc, #32]	; (8007cb8 <tcp_pcb_remove+0x10c>)
 8007c96:	f640 0296 	movw	r2, #2198	; 0x896
 8007c9a:	490d      	ldr	r1, [pc, #52]	; (8007cd0 <tcp_pcb_remove+0x124>)
 8007c9c:	4808      	ldr	r0, [pc, #32]	; (8007cc0 <tcp_pcb_remove+0x114>)
 8007c9e:	f006 fccb 	bl	800e638 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2200      	movs	r2, #0
 8007cac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	0800ff5c 	.word	0x0800ff5c
 8007cbc:	080105c4 	.word	0x080105c4
 8007cc0:	0800ffa0 	.word	0x0800ffa0
 8007cc4:	080105e0 	.word	0x080105e0
 8007cc8:	08010600 	.word	0x08010600
 8007ccc:	08010618 	.word	0x08010618
 8007cd0:	08010634 	.word	0x08010634

08007cd4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <tcp_next_iss+0x1c>
 8007ce2:	4b0a      	ldr	r3, [pc, #40]	; (8007d0c <tcp_next_iss+0x38>)
 8007ce4:	f640 02af 	movw	r2, #2223	; 0x8af
 8007ce8:	4909      	ldr	r1, [pc, #36]	; (8007d10 <tcp_next_iss+0x3c>)
 8007cea:	480a      	ldr	r0, [pc, #40]	; (8007d14 <tcp_next_iss+0x40>)
 8007cec:	f006 fca4 	bl	800e638 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007cf0:	4b09      	ldr	r3, [pc, #36]	; (8007d18 <tcp_next_iss+0x44>)
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	4b09      	ldr	r3, [pc, #36]	; (8007d1c <tcp_next_iss+0x48>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	4a07      	ldr	r2, [pc, #28]	; (8007d18 <tcp_next_iss+0x44>)
 8007cfc:	6013      	str	r3, [r2, #0]
  return iss;
 8007cfe:	4b06      	ldr	r3, [pc, #24]	; (8007d18 <tcp_next_iss+0x44>)
 8007d00:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	0800ff5c 	.word	0x0800ff5c
 8007d10:	0801064c 	.word	0x0801064c
 8007d14:	0800ffa0 	.word	0x0800ffa0
 8007d18:	2000000c 	.word	0x2000000c
 8007d1c:	20006934 	.word	0x20006934

08007d20 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
 8007d2c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d106      	bne.n	8007d42 <tcp_eff_send_mss_netif+0x22>
 8007d34:	4b14      	ldr	r3, [pc, #80]	; (8007d88 <tcp_eff_send_mss_netif+0x68>)
 8007d36:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007d3a:	4914      	ldr	r1, [pc, #80]	; (8007d8c <tcp_eff_send_mss_netif+0x6c>)
 8007d3c:	4814      	ldr	r0, [pc, #80]	; (8007d90 <tcp_eff_send_mss_netif+0x70>)
 8007d3e:	f006 fc7b 	bl	800e638 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d101      	bne.n	8007d4c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007d48:	89fb      	ldrh	r3, [r7, #14]
 8007d4a:	e019      	b.n	8007d80 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007d50:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007d52:	8afb      	ldrh	r3, [r7, #22]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d012      	beq.n	8007d7e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007d58:	2328      	movs	r3, #40	; 0x28
 8007d5a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007d5c:	8afa      	ldrh	r2, [r7, #22]
 8007d5e:	8abb      	ldrh	r3, [r7, #20]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d904      	bls.n	8007d6e <tcp_eff_send_mss_netif+0x4e>
 8007d64:	8afa      	ldrh	r2, [r7, #22]
 8007d66:	8abb      	ldrh	r3, [r7, #20]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	e000      	b.n	8007d70 <tcp_eff_send_mss_netif+0x50>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007d72:	8a7a      	ldrh	r2, [r7, #18]
 8007d74:	89fb      	ldrh	r3, [r7, #14]
 8007d76:	4293      	cmp	r3, r2
 8007d78:	bf28      	it	cs
 8007d7a:	4613      	movcs	r3, r2
 8007d7c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	0800ff5c 	.word	0x0800ff5c
 8007d8c:	08010668 	.word	0x08010668
 8007d90:	0800ffa0 	.word	0x0800ffa0

08007d94 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d119      	bne.n	8007ddc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007da8:	4b10      	ldr	r3, [pc, #64]	; (8007dec <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007daa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007dae:	4910      	ldr	r1, [pc, #64]	; (8007df0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007db0:	4810      	ldr	r0, [pc, #64]	; (8007df4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007db2:	f006 fc41 	bl	800e638 <iprintf>

  while (pcb != NULL) {
 8007db6:	e011      	b.n	8007ddc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d108      	bne.n	8007dd6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f7fe fd2a 	bl	8006824 <tcp_abort>
      pcb = next;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	e002      	b.n	8007ddc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1ea      	bne.n	8007db8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007de2:	bf00      	nop
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	0800ff5c 	.word	0x0800ff5c
 8007df0:	08010690 	.word	0x08010690
 8007df4:	0800ffa0 	.word	0x0800ffa0

08007df8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d02a      	beq.n	8007e5e <tcp_netif_ip_addr_changed+0x66>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d026      	beq.n	8007e5e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007e10:	4b15      	ldr	r3, [pc, #84]	; (8007e68 <tcp_netif_ip_addr_changed+0x70>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7ff ffbc 	bl	8007d94 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007e1c:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <tcp_netif_ip_addr_changed+0x74>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff ffb6 	bl	8007d94 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d017      	beq.n	8007e5e <tcp_netif_ip_addr_changed+0x66>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d013      	beq.n	8007e5e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007e36:	4b0e      	ldr	r3, [pc, #56]	; (8007e70 <tcp_netif_ip_addr_changed+0x78>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60fb      	str	r3, [r7, #12]
 8007e3c:	e00c      	b.n	8007e58 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d103      	bne.n	8007e52 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	68db      	ldr	r3, [r3, #12]
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1ef      	bne.n	8007e3e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007e5e:	bf00      	nop
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20006930 	.word	0x20006930
 8007e6c:	2000693c 	.word	0x2000693c
 8007e70:	20006938 	.word	0x20006938

08007e74 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d007      	beq.n	8007e94 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7ff fb59 	bl	8007540 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007e9c:	b590      	push	{r4, r7, lr}
 8007e9e:	b08d      	sub	sp, #52	; 0x34
 8007ea0:	af04      	add	r7, sp, #16
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d105      	bne.n	8007eb8 <tcp_input+0x1c>
 8007eac:	4b9b      	ldr	r3, [pc, #620]	; (800811c <tcp_input+0x280>)
 8007eae:	2283      	movs	r2, #131	; 0x83
 8007eb0:	499b      	ldr	r1, [pc, #620]	; (8008120 <tcp_input+0x284>)
 8007eb2:	489c      	ldr	r0, [pc, #624]	; (8008124 <tcp_input+0x288>)
 8007eb4:	f006 fbc0 	bl	800e638 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4a9a      	ldr	r2, [pc, #616]	; (8008128 <tcp_input+0x28c>)
 8007ebe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	895b      	ldrh	r3, [r3, #10]
 8007ec4:	2b13      	cmp	r3, #19
 8007ec6:	f240 83c4 	bls.w	8008652 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007eca:	4b98      	ldr	r3, [pc, #608]	; (800812c <tcp_input+0x290>)
 8007ecc:	695a      	ldr	r2, [r3, #20]
 8007ece:	4b97      	ldr	r3, [pc, #604]	; (800812c <tcp_input+0x290>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	f005 fc1d 	bl	800d714 <ip4_addr_isbroadcast_u32>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f040 83ba 	bne.w	8008656 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007ee2:	4b92      	ldr	r3, [pc, #584]	; (800812c <tcp_input+0x290>)
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007eea:	2be0      	cmp	r3, #224	; 0xe0
 8007eec:	f000 83b3 	beq.w	8008656 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007ef0:	4b8d      	ldr	r3, [pc, #564]	; (8008128 <tcp_input+0x28c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	899b      	ldrh	r3, [r3, #12]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7fc fc63 	bl	80047c4 <lwip_htons>
 8007efe:	4603      	mov	r3, r0
 8007f00:	0b1b      	lsrs	r3, r3, #12
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007f0a:	7cbb      	ldrb	r3, [r7, #18]
 8007f0c:	2b13      	cmp	r3, #19
 8007f0e:	f240 83a2 	bls.w	8008656 <tcp_input+0x7ba>
 8007f12:	7cbb      	ldrb	r3, [r7, #18]
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	891b      	ldrh	r3, [r3, #8]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	f200 839b 	bhi.w	8008656 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007f20:	7cbb      	ldrb	r3, [r7, #18]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	3b14      	subs	r3, #20
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	4b81      	ldr	r3, [pc, #516]	; (8008130 <tcp_input+0x294>)
 8007f2a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007f2c:	4b81      	ldr	r3, [pc, #516]	; (8008134 <tcp_input+0x298>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	895a      	ldrh	r2, [r3, #10]
 8007f36:	7cbb      	ldrb	r3, [r7, #18]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d309      	bcc.n	8007f52 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007f3e:	4b7c      	ldr	r3, [pc, #496]	; (8008130 <tcp_input+0x294>)
 8007f40:	881a      	ldrh	r2, [r3, #0]
 8007f42:	4b7d      	ldr	r3, [pc, #500]	; (8008138 <tcp_input+0x29c>)
 8007f44:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007f46:	7cbb      	ldrb	r3, [r7, #18]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fd fe64 	bl	8005c18 <pbuf_remove_header>
 8007f50:	e04e      	b.n	8007ff0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <tcp_input+0xca>
 8007f5a:	4b70      	ldr	r3, [pc, #448]	; (800811c <tcp_input+0x280>)
 8007f5c:	22c2      	movs	r2, #194	; 0xc2
 8007f5e:	4977      	ldr	r1, [pc, #476]	; (800813c <tcp_input+0x2a0>)
 8007f60:	4870      	ldr	r0, [pc, #448]	; (8008124 <tcp_input+0x288>)
 8007f62:	f006 fb69 	bl	800e638 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007f66:	2114      	movs	r1, #20
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7fd fe55 	bl	8005c18 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	895a      	ldrh	r2, [r3, #10]
 8007f72:	4b71      	ldr	r3, [pc, #452]	; (8008138 <tcp_input+0x29c>)
 8007f74:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007f76:	4b6e      	ldr	r3, [pc, #440]	; (8008130 <tcp_input+0x294>)
 8007f78:	881a      	ldrh	r2, [r3, #0]
 8007f7a:	4b6f      	ldr	r3, [pc, #444]	; (8008138 <tcp_input+0x29c>)
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007f82:	4b6d      	ldr	r3, [pc, #436]	; (8008138 <tcp_input+0x29c>)
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7fd fe45 	bl	8005c18 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	895b      	ldrh	r3, [r3, #10]
 8007f94:	8a3a      	ldrh	r2, [r7, #16]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	f200 835f 	bhi.w	800865a <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	4a64      	ldr	r2, [pc, #400]	; (8008134 <tcp_input+0x298>)
 8007fa4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	8a3a      	ldrh	r2, [r7, #16]
 8007fac:	4611      	mov	r1, r2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7fd fe32 	bl	8005c18 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	891a      	ldrh	r2, [r3, #8]
 8007fb8:	8a3b      	ldrh	r3, [r7, #16]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	895b      	ldrh	r3, [r3, #10]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d005      	beq.n	8007fd6 <tcp_input+0x13a>
 8007fca:	4b54      	ldr	r3, [pc, #336]	; (800811c <tcp_input+0x280>)
 8007fcc:	22df      	movs	r2, #223	; 0xdf
 8007fce:	495c      	ldr	r1, [pc, #368]	; (8008140 <tcp_input+0x2a4>)
 8007fd0:	4854      	ldr	r0, [pc, #336]	; (8008124 <tcp_input+0x288>)
 8007fd2:	f006 fb31 	bl	800e638 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	891a      	ldrh	r2, [r3, #8]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	891b      	ldrh	r3, [r3, #8]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d005      	beq.n	8007ff0 <tcp_input+0x154>
 8007fe4:	4b4d      	ldr	r3, [pc, #308]	; (800811c <tcp_input+0x280>)
 8007fe6:	22e0      	movs	r2, #224	; 0xe0
 8007fe8:	4956      	ldr	r1, [pc, #344]	; (8008144 <tcp_input+0x2a8>)
 8007fea:	484e      	ldr	r0, [pc, #312]	; (8008124 <tcp_input+0x288>)
 8007fec:	f006 fb24 	bl	800e638 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007ff0:	4b4d      	ldr	r3, [pc, #308]	; (8008128 <tcp_input+0x28c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29a      	uxth	r2, r3
 8007ff8:	4b4b      	ldr	r3, [pc, #300]	; (8008128 <tcp_input+0x28c>)
 8007ffa:	681c      	ldr	r4, [r3, #0]
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	f7fc fbe1 	bl	80047c4 <lwip_htons>
 8008002:	4603      	mov	r3, r0
 8008004:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008006:	4b48      	ldr	r3, [pc, #288]	; (8008128 <tcp_input+0x28c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	885b      	ldrh	r3, [r3, #2]
 800800c:	b29a      	uxth	r2, r3
 800800e:	4b46      	ldr	r3, [pc, #280]	; (8008128 <tcp_input+0x28c>)
 8008010:	681c      	ldr	r4, [r3, #0]
 8008012:	4610      	mov	r0, r2
 8008014:	f7fc fbd6 	bl	80047c4 <lwip_htons>
 8008018:	4603      	mov	r3, r0
 800801a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800801c:	4b42      	ldr	r3, [pc, #264]	; (8008128 <tcp_input+0x28c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	4b41      	ldr	r3, [pc, #260]	; (8008128 <tcp_input+0x28c>)
 8008024:	681c      	ldr	r4, [r3, #0]
 8008026:	4610      	mov	r0, r2
 8008028:	f7fc fbe1 	bl	80047ee <lwip_htonl>
 800802c:	4603      	mov	r3, r0
 800802e:	6063      	str	r3, [r4, #4]
 8008030:	6863      	ldr	r3, [r4, #4]
 8008032:	4a45      	ldr	r2, [pc, #276]	; (8008148 <tcp_input+0x2ac>)
 8008034:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008036:	4b3c      	ldr	r3, [pc, #240]	; (8008128 <tcp_input+0x28c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689a      	ldr	r2, [r3, #8]
 800803c:	4b3a      	ldr	r3, [pc, #232]	; (8008128 <tcp_input+0x28c>)
 800803e:	681c      	ldr	r4, [r3, #0]
 8008040:	4610      	mov	r0, r2
 8008042:	f7fc fbd4 	bl	80047ee <lwip_htonl>
 8008046:	4603      	mov	r3, r0
 8008048:	60a3      	str	r3, [r4, #8]
 800804a:	68a3      	ldr	r3, [r4, #8]
 800804c:	4a3f      	ldr	r2, [pc, #252]	; (800814c <tcp_input+0x2b0>)
 800804e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008050:	4b35      	ldr	r3, [pc, #212]	; (8008128 <tcp_input+0x28c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	89db      	ldrh	r3, [r3, #14]
 8008056:	b29a      	uxth	r2, r3
 8008058:	4b33      	ldr	r3, [pc, #204]	; (8008128 <tcp_input+0x28c>)
 800805a:	681c      	ldr	r4, [r3, #0]
 800805c:	4610      	mov	r0, r2
 800805e:	f7fc fbb1 	bl	80047c4 <lwip_htons>
 8008062:	4603      	mov	r3, r0
 8008064:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008066:	4b30      	ldr	r3, [pc, #192]	; (8008128 <tcp_input+0x28c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	899b      	ldrh	r3, [r3, #12]
 800806c:	b29b      	uxth	r3, r3
 800806e:	4618      	mov	r0, r3
 8008070:	f7fc fba8 	bl	80047c4 <lwip_htons>
 8008074:	4603      	mov	r3, r0
 8008076:	b2db      	uxtb	r3, r3
 8008078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800807c:	b2da      	uxtb	r2, r3
 800807e:	4b34      	ldr	r3, [pc, #208]	; (8008150 <tcp_input+0x2b4>)
 8008080:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	891a      	ldrh	r2, [r3, #8]
 8008086:	4b33      	ldr	r3, [pc, #204]	; (8008154 <tcp_input+0x2b8>)
 8008088:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800808a:	4b31      	ldr	r3, [pc, #196]	; (8008150 <tcp_input+0x2b4>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	f003 0303 	and.w	r3, r3, #3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00c      	beq.n	80080b0 <tcp_input+0x214>
    tcplen++;
 8008096:	4b2f      	ldr	r3, [pc, #188]	; (8008154 <tcp_input+0x2b8>)
 8008098:	881b      	ldrh	r3, [r3, #0]
 800809a:	3301      	adds	r3, #1
 800809c:	b29a      	uxth	r2, r3
 800809e:	4b2d      	ldr	r3, [pc, #180]	; (8008154 <tcp_input+0x2b8>)
 80080a0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	891a      	ldrh	r2, [r3, #8]
 80080a6:	4b2b      	ldr	r3, [pc, #172]	; (8008154 <tcp_input+0x2b8>)
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	f200 82d7 	bhi.w	800865e <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80080b0:	2300      	movs	r3, #0
 80080b2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80080b4:	4b28      	ldr	r3, [pc, #160]	; (8008158 <tcp_input+0x2bc>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	61fb      	str	r3, [r7, #28]
 80080ba:	e09d      	b.n	80081f8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	7d1b      	ldrb	r3, [r3, #20]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d105      	bne.n	80080d0 <tcp_input+0x234>
 80080c4:	4b15      	ldr	r3, [pc, #84]	; (800811c <tcp_input+0x280>)
 80080c6:	22fb      	movs	r2, #251	; 0xfb
 80080c8:	4924      	ldr	r1, [pc, #144]	; (800815c <tcp_input+0x2c0>)
 80080ca:	4816      	ldr	r0, [pc, #88]	; (8008124 <tcp_input+0x288>)
 80080cc:	f006 fab4 	bl	800e638 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	7d1b      	ldrb	r3, [r3, #20]
 80080d4:	2b0a      	cmp	r3, #10
 80080d6:	d105      	bne.n	80080e4 <tcp_input+0x248>
 80080d8:	4b10      	ldr	r3, [pc, #64]	; (800811c <tcp_input+0x280>)
 80080da:	22fc      	movs	r2, #252	; 0xfc
 80080dc:	4920      	ldr	r1, [pc, #128]	; (8008160 <tcp_input+0x2c4>)
 80080de:	4811      	ldr	r0, [pc, #68]	; (8008124 <tcp_input+0x288>)
 80080e0:	f006 faaa 	bl	800e638 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	7d1b      	ldrb	r3, [r3, #20]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d105      	bne.n	80080f8 <tcp_input+0x25c>
 80080ec:	4b0b      	ldr	r3, [pc, #44]	; (800811c <tcp_input+0x280>)
 80080ee:	22fd      	movs	r2, #253	; 0xfd
 80080f0:	491c      	ldr	r1, [pc, #112]	; (8008164 <tcp_input+0x2c8>)
 80080f2:	480c      	ldr	r0, [pc, #48]	; (8008124 <tcp_input+0x288>)
 80080f4:	f006 faa0 	bl	800e638 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	7a1b      	ldrb	r3, [r3, #8]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d033      	beq.n	8008168 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	7a1a      	ldrb	r2, [r3, #8]
 8008104:	4b09      	ldr	r3, [pc, #36]	; (800812c <tcp_input+0x290>)
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800810c:	3301      	adds	r3, #1
 800810e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008110:	429a      	cmp	r2, r3
 8008112:	d029      	beq.n	8008168 <tcp_input+0x2cc>
      prev = pcb;
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	61bb      	str	r3, [r7, #24]
      continue;
 8008118:	e06b      	b.n	80081f2 <tcp_input+0x356>
 800811a:	bf00      	nop
 800811c:	080106c4 	.word	0x080106c4
 8008120:	080106f8 	.word	0x080106f8
 8008124:	08010710 	.word	0x08010710
 8008128:	200000e0 	.word	0x200000e0
 800812c:	200033ec 	.word	0x200033ec
 8008130:	200000e4 	.word	0x200000e4
 8008134:	200000e8 	.word	0x200000e8
 8008138:	200000e6 	.word	0x200000e6
 800813c:	08010738 	.word	0x08010738
 8008140:	08010748 	.word	0x08010748
 8008144:	08010754 	.word	0x08010754
 8008148:	200000f0 	.word	0x200000f0
 800814c:	200000f4 	.word	0x200000f4
 8008150:	200000fc 	.word	0x200000fc
 8008154:	200000fa 	.word	0x200000fa
 8008158:	20006930 	.word	0x20006930
 800815c:	08010774 	.word	0x08010774
 8008160:	0801079c 	.word	0x0801079c
 8008164:	080107c8 	.word	0x080107c8
    }

    if (pcb->remote_port == tcphdr->src &&
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	8b1a      	ldrh	r2, [r3, #24]
 800816c:	4b94      	ldr	r3, [pc, #592]	; (80083c0 <tcp_input+0x524>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	b29b      	uxth	r3, r3
 8008174:	429a      	cmp	r2, r3
 8008176:	d13a      	bne.n	80081ee <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	8ada      	ldrh	r2, [r3, #22]
 800817c:	4b90      	ldr	r3, [pc, #576]	; (80083c0 <tcp_input+0x524>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	885b      	ldrh	r3, [r3, #2]
 8008182:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008184:	429a      	cmp	r2, r3
 8008186:	d132      	bne.n	80081ee <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	4b8d      	ldr	r3, [pc, #564]	; (80083c4 <tcp_input+0x528>)
 800818e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008190:	429a      	cmp	r2, r3
 8008192:	d12c      	bne.n	80081ee <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	4b8a      	ldr	r3, [pc, #552]	; (80083c4 <tcp_input+0x528>)
 800819a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800819c:	429a      	cmp	r2, r3
 800819e:	d126      	bne.n	80081ee <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	69fa      	ldr	r2, [r7, #28]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d106      	bne.n	80081b8 <tcp_input+0x31c>
 80081aa:	4b87      	ldr	r3, [pc, #540]	; (80083c8 <tcp_input+0x52c>)
 80081ac:	f240 120d 	movw	r2, #269	; 0x10d
 80081b0:	4986      	ldr	r1, [pc, #536]	; (80083cc <tcp_input+0x530>)
 80081b2:	4887      	ldr	r0, [pc, #540]	; (80083d0 <tcp_input+0x534>)
 80081b4:	f006 fa40 	bl	800e638 <iprintf>
      if (prev != NULL) {
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <tcp_input+0x338>
        prev->next = pcb->next;
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	68da      	ldr	r2, [r3, #12]
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80081c6:	4b83      	ldr	r3, [pc, #524]	; (80083d4 <tcp_input+0x538>)
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80081ce:	4a81      	ldr	r2, [pc, #516]	; (80083d4 <tcp_input+0x538>)
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	69fa      	ldr	r2, [r7, #28]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d111      	bne.n	8008202 <tcp_input+0x366>
 80081de:	4b7a      	ldr	r3, [pc, #488]	; (80083c8 <tcp_input+0x52c>)
 80081e0:	f240 1215 	movw	r2, #277	; 0x115
 80081e4:	497c      	ldr	r1, [pc, #496]	; (80083d8 <tcp_input+0x53c>)
 80081e6:	487a      	ldr	r0, [pc, #488]	; (80083d0 <tcp_input+0x534>)
 80081e8:	f006 fa26 	bl	800e638 <iprintf>
      break;
 80081ec:	e009      	b.n	8008202 <tcp_input+0x366>
    }
    prev = pcb;
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	61fb      	str	r3, [r7, #28]
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	f47f af5e 	bne.w	80080bc <tcp_input+0x220>
 8008200:	e000      	b.n	8008204 <tcp_input+0x368>
      break;
 8008202:	bf00      	nop
  }

  if (pcb == NULL) {
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f040 8095 	bne.w	8008336 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800820c:	4b73      	ldr	r3, [pc, #460]	; (80083dc <tcp_input+0x540>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	61fb      	str	r3, [r7, #28]
 8008212:	e03f      	b.n	8008294 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	7d1b      	ldrb	r3, [r3, #20]
 8008218:	2b0a      	cmp	r3, #10
 800821a:	d006      	beq.n	800822a <tcp_input+0x38e>
 800821c:	4b6a      	ldr	r3, [pc, #424]	; (80083c8 <tcp_input+0x52c>)
 800821e:	f240 121f 	movw	r2, #287	; 0x11f
 8008222:	496f      	ldr	r1, [pc, #444]	; (80083e0 <tcp_input+0x544>)
 8008224:	486a      	ldr	r0, [pc, #424]	; (80083d0 <tcp_input+0x534>)
 8008226:	f006 fa07 	bl	800e638 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	7a1b      	ldrb	r3, [r3, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d009      	beq.n	8008246 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	7a1a      	ldrb	r2, [r3, #8]
 8008236:	4b63      	ldr	r3, [pc, #396]	; (80083c4 <tcp_input+0x528>)
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800823e:	3301      	adds	r3, #1
 8008240:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008242:	429a      	cmp	r2, r3
 8008244:	d122      	bne.n	800828c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	8b1a      	ldrh	r2, [r3, #24]
 800824a:	4b5d      	ldr	r3, [pc, #372]	; (80083c0 <tcp_input+0x524>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	881b      	ldrh	r3, [r3, #0]
 8008250:	b29b      	uxth	r3, r3
 8008252:	429a      	cmp	r2, r3
 8008254:	d11b      	bne.n	800828e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	8ada      	ldrh	r2, [r3, #22]
 800825a:	4b59      	ldr	r3, [pc, #356]	; (80083c0 <tcp_input+0x524>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	885b      	ldrh	r3, [r3, #2]
 8008260:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008262:	429a      	cmp	r2, r3
 8008264:	d113      	bne.n	800828e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	4b56      	ldr	r3, [pc, #344]	; (80083c4 <tcp_input+0x528>)
 800826c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800826e:	429a      	cmp	r2, r3
 8008270:	d10d      	bne.n	800828e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	4b53      	ldr	r3, [pc, #332]	; (80083c4 <tcp_input+0x528>)
 8008278:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800827a:	429a      	cmp	r2, r3
 800827c:	d107      	bne.n	800828e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800827e:	69f8      	ldr	r0, [r7, #28]
 8008280:	f000 fb52 	bl	8008928 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7fd fd4d 	bl	8005d24 <pbuf_free>
        return;
 800828a:	e1ee      	b.n	800866a <tcp_input+0x7ce>
        continue;
 800828c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	61fb      	str	r3, [r7, #28]
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1bc      	bne.n	8008214 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800829e:	4b51      	ldr	r3, [pc, #324]	; (80083e4 <tcp_input+0x548>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	617b      	str	r3, [r7, #20]
 80082a4:	e02a      	b.n	80082fc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	7a1b      	ldrb	r3, [r3, #8]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00c      	beq.n	80082c8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	7a1a      	ldrb	r2, [r3, #8]
 80082b2:	4b44      	ldr	r3, [pc, #272]	; (80083c4 <tcp_input+0x528>)
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082ba:	3301      	adds	r3, #1
 80082bc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80082be:	429a      	cmp	r2, r3
 80082c0:	d002      	beq.n	80082c8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	61bb      	str	r3, [r7, #24]
        continue;
 80082c6:	e016      	b.n	80082f6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	8ada      	ldrh	r2, [r3, #22]
 80082cc:	4b3c      	ldr	r3, [pc, #240]	; (80083c0 <tcp_input+0x524>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	885b      	ldrh	r3, [r3, #2]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d10c      	bne.n	80082f2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	4b39      	ldr	r3, [pc, #228]	; (80083c4 <tcp_input+0x528>)
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d00f      	beq.n	8008304 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00d      	beq.n	8008306 <tcp_input+0x46a>
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d009      	beq.n	8008306 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1d1      	bne.n	80082a6 <tcp_input+0x40a>
 8008302:	e000      	b.n	8008306 <tcp_input+0x46a>
            break;
 8008304:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d014      	beq.n	8008336 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00a      	beq.n	8008328 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	68da      	ldr	r2, [r3, #12]
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800831a:	4b32      	ldr	r3, [pc, #200]	; (80083e4 <tcp_input+0x548>)
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008322:	4a30      	ldr	r2, [pc, #192]	; (80083e4 <tcp_input+0x548>)
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008328:	6978      	ldr	r0, [r7, #20]
 800832a:	f000 f9ff 	bl	800872c <tcp_listen_input>
      }
      pbuf_free(p);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7fd fcf8 	bl	8005d24 <pbuf_free>
      return;
 8008334:	e199      	b.n	800866a <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	2b00      	cmp	r3, #0
 800833a:	f000 8160 	beq.w	80085fe <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800833e:	4b2a      	ldr	r3, [pc, #168]	; (80083e8 <tcp_input+0x54c>)
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	891a      	ldrh	r2, [r3, #8]
 8008348:	4b27      	ldr	r3, [pc, #156]	; (80083e8 <tcp_input+0x54c>)
 800834a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800834c:	4a26      	ldr	r2, [pc, #152]	; (80083e8 <tcp_input+0x54c>)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008352:	4b1b      	ldr	r3, [pc, #108]	; (80083c0 <tcp_input+0x524>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a24      	ldr	r2, [pc, #144]	; (80083e8 <tcp_input+0x54c>)
 8008358:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800835a:	4b24      	ldr	r3, [pc, #144]	; (80083ec <tcp_input+0x550>)
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008360:	4b23      	ldr	r3, [pc, #140]	; (80083f0 <tcp_input+0x554>)
 8008362:	2200      	movs	r2, #0
 8008364:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008366:	4b23      	ldr	r3, [pc, #140]	; (80083f4 <tcp_input+0x558>)
 8008368:	2200      	movs	r2, #0
 800836a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800836c:	4b22      	ldr	r3, [pc, #136]	; (80083f8 <tcp_input+0x55c>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b00      	cmp	r3, #0
 8008376:	d006      	beq.n	8008386 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	7b5b      	ldrb	r3, [r3, #13]
 800837c:	f043 0301 	orr.w	r3, r3, #1
 8008380:	b2da      	uxtb	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800838a:	2b00      	cmp	r3, #0
 800838c:	d038      	beq.n	8008400 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800838e:	69f8      	ldr	r0, [r7, #28]
 8008390:	f7ff f85a 	bl	8007448 <tcp_process_refused_data>
 8008394:	4603      	mov	r3, r0
 8008396:	f113 0f0d 	cmn.w	r3, #13
 800839a:	d007      	beq.n	80083ac <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d02d      	beq.n	8008400 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80083a4:	4b15      	ldr	r3, [pc, #84]	; (80083fc <tcp_input+0x560>)
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d029      	beq.n	8008400 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f040 8104 	bne.w	80085be <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80083b6:	69f8      	ldr	r0, [r7, #28]
 80083b8:	f003 f9ce 	bl	800b758 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80083bc:	e0ff      	b.n	80085be <tcp_input+0x722>
 80083be:	bf00      	nop
 80083c0:	200000e0 	.word	0x200000e0
 80083c4:	200033ec 	.word	0x200033ec
 80083c8:	080106c4 	.word	0x080106c4
 80083cc:	080107f0 	.word	0x080107f0
 80083d0:	08010710 	.word	0x08010710
 80083d4:	20006930 	.word	0x20006930
 80083d8:	0801081c 	.word	0x0801081c
 80083dc:	20006940 	.word	0x20006940
 80083e0:	08010848 	.word	0x08010848
 80083e4:	20006938 	.word	0x20006938
 80083e8:	200000d0 	.word	0x200000d0
 80083ec:	20000100 	.word	0x20000100
 80083f0:	200000fd 	.word	0x200000fd
 80083f4:	200000f8 	.word	0x200000f8
 80083f8:	200000fc 	.word	0x200000fc
 80083fc:	200000fa 	.word	0x200000fa
      }
    }
    tcp_input_pcb = pcb;
 8008400:	4a9b      	ldr	r2, [pc, #620]	; (8008670 <tcp_input+0x7d4>)
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008406:	69f8      	ldr	r0, [r7, #28]
 8008408:	f000 fb0a 	bl	8008a20 <tcp_process>
 800840c:	4603      	mov	r3, r0
 800840e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008410:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008414:	f113 0f0d 	cmn.w	r3, #13
 8008418:	f000 80d3 	beq.w	80085c2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800841c:	4b95      	ldr	r3, [pc, #596]	; (8008674 <tcp_input+0x7d8>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f003 0308 	and.w	r3, r3, #8
 8008424:	2b00      	cmp	r3, #0
 8008426:	d015      	beq.n	8008454 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800842e:	2b00      	cmp	r3, #0
 8008430:	d008      	beq.n	8008444 <tcp_input+0x5a8>
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008438:	69fa      	ldr	r2, [r7, #28]
 800843a:	6912      	ldr	r2, [r2, #16]
 800843c:	f06f 010d 	mvn.w	r1, #13
 8008440:	4610      	mov	r0, r2
 8008442:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008444:	69f9      	ldr	r1, [r7, #28]
 8008446:	488c      	ldr	r0, [pc, #560]	; (8008678 <tcp_input+0x7dc>)
 8008448:	f7ff fbb0 	bl	8007bac <tcp_pcb_remove>
        tcp_free(pcb);
 800844c:	69f8      	ldr	r0, [r7, #28]
 800844e:	f7fd ff09 	bl	8006264 <tcp_free>
 8008452:	e0c1      	b.n	80085d8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008458:	4b88      	ldr	r3, [pc, #544]	; (800867c <tcp_input+0x7e0>)
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d01d      	beq.n	800849c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008460:	4b86      	ldr	r3, [pc, #536]	; (800867c <tcp_input+0x7e0>)
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00a      	beq.n	8008486 <tcp_input+0x5ea>
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008476:	69fa      	ldr	r2, [r7, #28]
 8008478:	6910      	ldr	r0, [r2, #16]
 800847a:	89fa      	ldrh	r2, [r7, #14]
 800847c:	69f9      	ldr	r1, [r7, #28]
 800847e:	4798      	blx	r3
 8008480:	4603      	mov	r3, r0
 8008482:	74fb      	strb	r3, [r7, #19]
 8008484:	e001      	b.n	800848a <tcp_input+0x5ee>
 8008486:	2300      	movs	r3, #0
 8008488:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800848a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800848e:	f113 0f0d 	cmn.w	r3, #13
 8008492:	f000 8098 	beq.w	80085c6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008496:	4b79      	ldr	r3, [pc, #484]	; (800867c <tcp_input+0x7e0>)
 8008498:	2200      	movs	r2, #0
 800849a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800849c:	69f8      	ldr	r0, [r7, #28]
 800849e:	f000 f905 	bl	80086ac <tcp_input_delayed_close>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f040 8090 	bne.w	80085ca <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80084aa:	4b75      	ldr	r3, [pc, #468]	; (8008680 <tcp_input+0x7e4>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d041      	beq.n	8008536 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d006      	beq.n	80084c8 <tcp_input+0x62c>
 80084ba:	4b72      	ldr	r3, [pc, #456]	; (8008684 <tcp_input+0x7e8>)
 80084bc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80084c0:	4971      	ldr	r1, [pc, #452]	; (8008688 <tcp_input+0x7ec>)
 80084c2:	4872      	ldr	r0, [pc, #456]	; (800868c <tcp_input+0x7f0>)
 80084c4:	f006 f8b8 	bl	800e638 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	8b5b      	ldrh	r3, [r3, #26]
 80084cc:	f003 0310 	and.w	r3, r3, #16
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d008      	beq.n	80084e6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80084d4:	4b6a      	ldr	r3, [pc, #424]	; (8008680 <tcp_input+0x7e4>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fd fc23 	bl	8005d24 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80084de:	69f8      	ldr	r0, [r7, #28]
 80084e0:	f7fe f9a0 	bl	8006824 <tcp_abort>
            goto aborted;
 80084e4:	e078      	b.n	80085d8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00c      	beq.n	800850a <tcp_input+0x66e>
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	6918      	ldr	r0, [r3, #16]
 80084fa:	4b61      	ldr	r3, [pc, #388]	; (8008680 <tcp_input+0x7e4>)
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	2300      	movs	r3, #0
 8008500:	69f9      	ldr	r1, [r7, #28]
 8008502:	47a0      	blx	r4
 8008504:	4603      	mov	r3, r0
 8008506:	74fb      	strb	r3, [r7, #19]
 8008508:	e008      	b.n	800851c <tcp_input+0x680>
 800850a:	4b5d      	ldr	r3, [pc, #372]	; (8008680 <tcp_input+0x7e4>)
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	2300      	movs	r3, #0
 8008510:	69f9      	ldr	r1, [r7, #28]
 8008512:	2000      	movs	r0, #0
 8008514:	f7ff f88a 	bl	800762c <tcp_recv_null>
 8008518:	4603      	mov	r3, r0
 800851a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800851c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008520:	f113 0f0d 	cmn.w	r3, #13
 8008524:	d053      	beq.n	80085ce <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008526:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d003      	beq.n	8008536 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800852e:	4b54      	ldr	r3, [pc, #336]	; (8008680 <tcp_input+0x7e4>)
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008536:	4b4f      	ldr	r3, [pc, #316]	; (8008674 <tcp_input+0x7d8>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	f003 0320 	and.w	r3, r3, #32
 800853e:	2b00      	cmp	r3, #0
 8008540:	d030      	beq.n	80085a4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008546:	2b00      	cmp	r3, #0
 8008548:	d009      	beq.n	800855e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800854e:	7b5a      	ldrb	r2, [r3, #13]
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008554:	f042 0220 	orr.w	r2, r2, #32
 8008558:	b2d2      	uxtb	r2, r2
 800855a:	735a      	strb	r2, [r3, #13]
 800855c:	e022      	b.n	80085a4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008562:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008566:	d005      	beq.n	8008574 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800856c:	3301      	adds	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00b      	beq.n	8008596 <tcp_input+0x6fa>
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	6918      	ldr	r0, [r3, #16]
 8008588:	2300      	movs	r3, #0
 800858a:	2200      	movs	r2, #0
 800858c:	69f9      	ldr	r1, [r7, #28]
 800858e:	47a0      	blx	r4
 8008590:	4603      	mov	r3, r0
 8008592:	74fb      	strb	r3, [r7, #19]
 8008594:	e001      	b.n	800859a <tcp_input+0x6fe>
 8008596:	2300      	movs	r3, #0
 8008598:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800859a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800859e:	f113 0f0d 	cmn.w	r3, #13
 80085a2:	d016      	beq.n	80085d2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80085a4:	4b32      	ldr	r3, [pc, #200]	; (8008670 <tcp_input+0x7d4>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80085aa:	69f8      	ldr	r0, [r7, #28]
 80085ac:	f000 f87e 	bl	80086ac <tcp_input_delayed_close>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d10f      	bne.n	80085d6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80085b6:	69f8      	ldr	r0, [r7, #28]
 80085b8:	f002 fab6 	bl	800ab28 <tcp_output>
 80085bc:	e00c      	b.n	80085d8 <tcp_input+0x73c>
        goto aborted;
 80085be:	bf00      	nop
 80085c0:	e00a      	b.n	80085d8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80085c2:	bf00      	nop
 80085c4:	e008      	b.n	80085d8 <tcp_input+0x73c>
              goto aborted;
 80085c6:	bf00      	nop
 80085c8:	e006      	b.n	80085d8 <tcp_input+0x73c>
          goto aborted;
 80085ca:	bf00      	nop
 80085cc:	e004      	b.n	80085d8 <tcp_input+0x73c>
            goto aborted;
 80085ce:	bf00      	nop
 80085d0:	e002      	b.n	80085d8 <tcp_input+0x73c>
              goto aborted;
 80085d2:	bf00      	nop
 80085d4:	e000      	b.n	80085d8 <tcp_input+0x73c>
          goto aborted;
 80085d6:	bf00      	nop
    tcp_input_pcb = NULL;
 80085d8:	4b25      	ldr	r3, [pc, #148]	; (8008670 <tcp_input+0x7d4>)
 80085da:	2200      	movs	r2, #0
 80085dc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80085de:	4b28      	ldr	r3, [pc, #160]	; (8008680 <tcp_input+0x7e4>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80085e4:	4b2a      	ldr	r3, [pc, #168]	; (8008690 <tcp_input+0x7f4>)
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d03d      	beq.n	8008668 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80085ec:	4b28      	ldr	r3, [pc, #160]	; (8008690 <tcp_input+0x7f4>)
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fd fb97 	bl	8005d24 <pbuf_free>
      inseg.p = NULL;
 80085f6:	4b26      	ldr	r3, [pc, #152]	; (8008690 <tcp_input+0x7f4>)
 80085f8:	2200      	movs	r2, #0
 80085fa:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80085fc:	e034      	b.n	8008668 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80085fe:	4b25      	ldr	r3, [pc, #148]	; (8008694 <tcp_input+0x7f8>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	899b      	ldrh	r3, [r3, #12]
 8008604:	b29b      	uxth	r3, r3
 8008606:	4618      	mov	r0, r3
 8008608:	f7fc f8dc 	bl	80047c4 <lwip_htons>
 800860c:	4603      	mov	r3, r0
 800860e:	b2db      	uxtb	r3, r3
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	2b00      	cmp	r3, #0
 8008616:	d118      	bne.n	800864a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008618:	4b1f      	ldr	r3, [pc, #124]	; (8008698 <tcp_input+0x7fc>)
 800861a:	6819      	ldr	r1, [r3, #0]
 800861c:	4b1f      	ldr	r3, [pc, #124]	; (800869c <tcp_input+0x800>)
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	461a      	mov	r2, r3
 8008622:	4b1f      	ldr	r3, [pc, #124]	; (80086a0 <tcp_input+0x804>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008628:	4b1a      	ldr	r3, [pc, #104]	; (8008694 <tcp_input+0x7f8>)
 800862a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800862c:	885b      	ldrh	r3, [r3, #2]
 800862e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008630:	4a18      	ldr	r2, [pc, #96]	; (8008694 <tcp_input+0x7f8>)
 8008632:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008634:	8812      	ldrh	r2, [r2, #0]
 8008636:	b292      	uxth	r2, r2
 8008638:	9202      	str	r2, [sp, #8]
 800863a:	9301      	str	r3, [sp, #4]
 800863c:	4b19      	ldr	r3, [pc, #100]	; (80086a4 <tcp_input+0x808>)
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	4b19      	ldr	r3, [pc, #100]	; (80086a8 <tcp_input+0x80c>)
 8008642:	4602      	mov	r2, r0
 8008644:	2000      	movs	r0, #0
 8008646:	f003 f835 	bl	800b6b4 <tcp_rst>
    pbuf_free(p);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7fd fb6a 	bl	8005d24 <pbuf_free>
  return;
 8008650:	e00a      	b.n	8008668 <tcp_input+0x7cc>
    goto dropped;
 8008652:	bf00      	nop
 8008654:	e004      	b.n	8008660 <tcp_input+0x7c4>
dropped:
 8008656:	bf00      	nop
 8008658:	e002      	b.n	8008660 <tcp_input+0x7c4>
      goto dropped;
 800865a:	bf00      	nop
 800865c:	e000      	b.n	8008660 <tcp_input+0x7c4>
      goto dropped;
 800865e:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f7fd fb5f 	bl	8005d24 <pbuf_free>
 8008666:	e000      	b.n	800866a <tcp_input+0x7ce>
  return;
 8008668:	bf00      	nop
}
 800866a:	3724      	adds	r7, #36	; 0x24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd90      	pop	{r4, r7, pc}
 8008670:	20006944 	.word	0x20006944
 8008674:	200000fd 	.word	0x200000fd
 8008678:	20006930 	.word	0x20006930
 800867c:	200000f8 	.word	0x200000f8
 8008680:	20000100 	.word	0x20000100
 8008684:	080106c4 	.word	0x080106c4
 8008688:	08010878 	.word	0x08010878
 800868c:	08010710 	.word	0x08010710
 8008690:	200000d0 	.word	0x200000d0
 8008694:	200000e0 	.word	0x200000e0
 8008698:	200000f4 	.word	0x200000f4
 800869c:	200000fa 	.word	0x200000fa
 80086a0:	200000f0 	.word	0x200000f0
 80086a4:	200033fc 	.word	0x200033fc
 80086a8:	20003400 	.word	0x20003400

080086ac <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d106      	bne.n	80086c8 <tcp_input_delayed_close+0x1c>
 80086ba:	4b17      	ldr	r3, [pc, #92]	; (8008718 <tcp_input_delayed_close+0x6c>)
 80086bc:	f240 225a 	movw	r2, #602	; 0x25a
 80086c0:	4916      	ldr	r1, [pc, #88]	; (800871c <tcp_input_delayed_close+0x70>)
 80086c2:	4817      	ldr	r0, [pc, #92]	; (8008720 <tcp_input_delayed_close+0x74>)
 80086c4:	f005 ffb8 	bl	800e638 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80086c8:	4b16      	ldr	r3, [pc, #88]	; (8008724 <tcp_input_delayed_close+0x78>)
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	f003 0310 	and.w	r3, r3, #16
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01c      	beq.n	800870e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	8b5b      	ldrh	r3, [r3, #26]
 80086d8:	f003 0310 	and.w	r3, r3, #16
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10d      	bne.n	80086fc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d008      	beq.n	80086fc <tcp_input_delayed_close+0x50>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6912      	ldr	r2, [r2, #16]
 80086f4:	f06f 010e 	mvn.w	r1, #14
 80086f8:	4610      	mov	r0, r2
 80086fa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80086fc:	6879      	ldr	r1, [r7, #4]
 80086fe:	480a      	ldr	r0, [pc, #40]	; (8008728 <tcp_input_delayed_close+0x7c>)
 8008700:	f7ff fa54 	bl	8007bac <tcp_pcb_remove>
    tcp_free(pcb);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7fd fdad 	bl	8006264 <tcp_free>
    return 1;
 800870a:	2301      	movs	r3, #1
 800870c:	e000      	b.n	8008710 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	080106c4 	.word	0x080106c4
 800871c:	08010894 	.word	0x08010894
 8008720:	08010710 	.word	0x08010710
 8008724:	200000fd 	.word	0x200000fd
 8008728:	20006930 	.word	0x20006930

0800872c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800872c:	b590      	push	{r4, r7, lr}
 800872e:	b08b      	sub	sp, #44	; 0x2c
 8008730:	af04      	add	r7, sp, #16
 8008732:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008734:	4b6f      	ldr	r3, [pc, #444]	; (80088f4 <tcp_listen_input+0x1c8>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	f003 0304 	and.w	r3, r3, #4
 800873c:	2b00      	cmp	r3, #0
 800873e:	f040 80d3 	bne.w	80088e8 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d106      	bne.n	8008756 <tcp_listen_input+0x2a>
 8008748:	4b6b      	ldr	r3, [pc, #428]	; (80088f8 <tcp_listen_input+0x1cc>)
 800874a:	f240 2281 	movw	r2, #641	; 0x281
 800874e:	496b      	ldr	r1, [pc, #428]	; (80088fc <tcp_listen_input+0x1d0>)
 8008750:	486b      	ldr	r0, [pc, #428]	; (8008900 <tcp_listen_input+0x1d4>)
 8008752:	f005 ff71 	bl	800e638 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008756:	4b67      	ldr	r3, [pc, #412]	; (80088f4 <tcp_listen_input+0x1c8>)
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	f003 0310 	and.w	r3, r3, #16
 800875e:	2b00      	cmp	r3, #0
 8008760:	d019      	beq.n	8008796 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008762:	4b68      	ldr	r3, [pc, #416]	; (8008904 <tcp_listen_input+0x1d8>)
 8008764:	6819      	ldr	r1, [r3, #0]
 8008766:	4b68      	ldr	r3, [pc, #416]	; (8008908 <tcp_listen_input+0x1dc>)
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	461a      	mov	r2, r3
 800876c:	4b67      	ldr	r3, [pc, #412]	; (800890c <tcp_listen_input+0x1e0>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008772:	4b67      	ldr	r3, [pc, #412]	; (8008910 <tcp_listen_input+0x1e4>)
 8008774:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008776:	885b      	ldrh	r3, [r3, #2]
 8008778:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800877a:	4a65      	ldr	r2, [pc, #404]	; (8008910 <tcp_listen_input+0x1e4>)
 800877c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800877e:	8812      	ldrh	r2, [r2, #0]
 8008780:	b292      	uxth	r2, r2
 8008782:	9202      	str	r2, [sp, #8]
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	4b63      	ldr	r3, [pc, #396]	; (8008914 <tcp_listen_input+0x1e8>)
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	4b63      	ldr	r3, [pc, #396]	; (8008918 <tcp_listen_input+0x1ec>)
 800878c:	4602      	mov	r2, r0
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f002 ff90 	bl	800b6b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008794:	e0aa      	b.n	80088ec <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8008796:	4b57      	ldr	r3, [pc, #348]	; (80088f4 <tcp_listen_input+0x1c8>)
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	f003 0302 	and.w	r3, r3, #2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 80a4 	beq.w	80088ec <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	7d5b      	ldrb	r3, [r3, #21]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7ff f863 	bl	8007874 <tcp_alloc>
 80087ae:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d111      	bne.n	80087da <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <tcp_listen_input+0xa8>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	6910      	ldr	r0, [r2, #16]
 80087c6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ca:	2100      	movs	r1, #0
 80087cc:	4798      	blx	r3
 80087ce:	4603      	mov	r3, r0
 80087d0:	73bb      	strb	r3, [r7, #14]
      return;
 80087d2:	e08c      	b.n	80088ee <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80087d4:	23f0      	movs	r3, #240	; 0xf0
 80087d6:	73bb      	strb	r3, [r7, #14]
      return;
 80087d8:	e089      	b.n	80088ee <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80087da:	4b50      	ldr	r3, [pc, #320]	; (800891c <tcp_listen_input+0x1f0>)
 80087dc:	695a      	ldr	r2, [r3, #20]
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80087e2:	4b4e      	ldr	r3, [pc, #312]	; (800891c <tcp_listen_input+0x1f0>)
 80087e4:	691a      	ldr	r2, [r3, #16]
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	8ada      	ldrh	r2, [r3, #22]
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80087f2:	4b47      	ldr	r3, [pc, #284]	; (8008910 <tcp_listen_input+0x1e4>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2203      	movs	r2, #3
 8008802:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008804:	4b41      	ldr	r3, [pc, #260]	; (800890c <tcp_listen_input+0x1e0>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	1c5a      	adds	r2, r3, #1
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008816:	6978      	ldr	r0, [r7, #20]
 8008818:	f7ff fa5c 	bl	8007cd4 <tcp_next_iss>
 800881c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	693a      	ldr	r2, [r7, #16]
 8008828:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008836:	4b35      	ldr	r3, [pc, #212]	; (800890c <tcp_listen_input+0x1e0>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	1e5a      	subs	r2, r3, #1
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	691a      	ldr	r2, [r3, #16]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	7a5b      	ldrb	r3, [r3, #9]
 8008852:	f003 030c 	and.w	r3, r3, #12
 8008856:	b2da      	uxtb	r2, r3
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	7a1a      	ldrb	r2, [r3, #8]
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008864:	4b2e      	ldr	r3, [pc, #184]	; (8008920 <tcp_listen_input+0x1f4>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	60da      	str	r2, [r3, #12]
 800886c:	4a2c      	ldr	r2, [pc, #176]	; (8008920 <tcp_listen_input+0x1f4>)
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	f003 f8e1 	bl	800ba38 <tcp_timer_needed>
 8008876:	4b2b      	ldr	r3, [pc, #172]	; (8008924 <tcp_listen_input+0x1f8>)
 8008878:	2201      	movs	r2, #1
 800887a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800887c:	6978      	ldr	r0, [r7, #20]
 800887e:	f001 fd8f 	bl	800a3a0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008882:	4b23      	ldr	r3, [pc, #140]	; (8008910 <tcp_listen_input+0x1e4>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	89db      	ldrh	r3, [r3, #14]
 8008888:	b29a      	uxth	r2, r3
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	3304      	adds	r3, #4
 80088a4:	4618      	mov	r0, r3
 80088a6:	f004 fca1 	bl	800d1ec <ip4_route>
 80088aa:	4601      	mov	r1, r0
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	3304      	adds	r3, #4
 80088b0:	461a      	mov	r2, r3
 80088b2:	4620      	mov	r0, r4
 80088b4:	f7ff fa34 	bl	8007d20 <tcp_eff_send_mss_netif>
 80088b8:	4603      	mov	r3, r0
 80088ba:	461a      	mov	r2, r3
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80088c0:	2112      	movs	r1, #18
 80088c2:	6978      	ldr	r0, [r7, #20]
 80088c4:	f002 f842 	bl	800a94c <tcp_enqueue_flags>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80088cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d004      	beq.n	80088de <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80088d4:	2100      	movs	r1, #0
 80088d6:	6978      	ldr	r0, [r7, #20]
 80088d8:	f7fd fee6 	bl	80066a8 <tcp_abandon>
      return;
 80088dc:	e007      	b.n	80088ee <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80088de:	6978      	ldr	r0, [r7, #20]
 80088e0:	f002 f922 	bl	800ab28 <tcp_output>
  return;
 80088e4:	bf00      	nop
 80088e6:	e001      	b.n	80088ec <tcp_listen_input+0x1c0>
    return;
 80088e8:	bf00      	nop
 80088ea:	e000      	b.n	80088ee <tcp_listen_input+0x1c2>
  return;
 80088ec:	bf00      	nop
}
 80088ee:	371c      	adds	r7, #28
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd90      	pop	{r4, r7, pc}
 80088f4:	200000fc 	.word	0x200000fc
 80088f8:	080106c4 	.word	0x080106c4
 80088fc:	080108bc 	.word	0x080108bc
 8008900:	08010710 	.word	0x08010710
 8008904:	200000f4 	.word	0x200000f4
 8008908:	200000fa 	.word	0x200000fa
 800890c:	200000f0 	.word	0x200000f0
 8008910:	200000e0 	.word	0x200000e0
 8008914:	200033fc 	.word	0x200033fc
 8008918:	20003400 	.word	0x20003400
 800891c:	200033ec 	.word	0x200033ec
 8008920:	20006930 	.word	0x20006930
 8008924:	2000692c 	.word	0x2000692c

08008928 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af04      	add	r7, sp, #16
 800892e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008930:	4b30      	ldr	r3, [pc, #192]	; (80089f4 <tcp_timewait_input+0xcc>)
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	f003 0304 	and.w	r3, r3, #4
 8008938:	2b00      	cmp	r3, #0
 800893a:	d154      	bne.n	80089e6 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d106      	bne.n	8008950 <tcp_timewait_input+0x28>
 8008942:	4b2d      	ldr	r3, [pc, #180]	; (80089f8 <tcp_timewait_input+0xd0>)
 8008944:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008948:	492c      	ldr	r1, [pc, #176]	; (80089fc <tcp_timewait_input+0xd4>)
 800894a:	482d      	ldr	r0, [pc, #180]	; (8008a00 <tcp_timewait_input+0xd8>)
 800894c:	f005 fe74 	bl	800e638 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008950:	4b28      	ldr	r3, [pc, #160]	; (80089f4 <tcp_timewait_input+0xcc>)
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	f003 0302 	and.w	r3, r3, #2
 8008958:	2b00      	cmp	r3, #0
 800895a:	d02a      	beq.n	80089b2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800895c:	4b29      	ldr	r3, [pc, #164]	; (8008a04 <tcp_timewait_input+0xdc>)
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	db2d      	blt.n	80089c6 <tcp_timewait_input+0x9e>
 800896a:	4b26      	ldr	r3, [pc, #152]	; (8008a04 <tcp_timewait_input+0xdc>)
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008976:	440b      	add	r3, r1
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	dc23      	bgt.n	80089c6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800897e:	4b22      	ldr	r3, [pc, #136]	; (8008a08 <tcp_timewait_input+0xe0>)
 8008980:	6819      	ldr	r1, [r3, #0]
 8008982:	4b22      	ldr	r3, [pc, #136]	; (8008a0c <tcp_timewait_input+0xe4>)
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	4b1e      	ldr	r3, [pc, #120]	; (8008a04 <tcp_timewait_input+0xdc>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800898e:	4b20      	ldr	r3, [pc, #128]	; (8008a10 <tcp_timewait_input+0xe8>)
 8008990:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008992:	885b      	ldrh	r3, [r3, #2]
 8008994:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008996:	4a1e      	ldr	r2, [pc, #120]	; (8008a10 <tcp_timewait_input+0xe8>)
 8008998:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800899a:	8812      	ldrh	r2, [r2, #0]
 800899c:	b292      	uxth	r2, r2
 800899e:	9202      	str	r2, [sp, #8]
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	4b1c      	ldr	r3, [pc, #112]	; (8008a14 <tcp_timewait_input+0xec>)
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	4b1c      	ldr	r3, [pc, #112]	; (8008a18 <tcp_timewait_input+0xf0>)
 80089a8:	4602      	mov	r2, r0
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f002 fe82 	bl	800b6b4 <tcp_rst>
      return;
 80089b0:	e01c      	b.n	80089ec <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 80089b2:	4b10      	ldr	r3, [pc, #64]	; (80089f4 <tcp_timewait_input+0xcc>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80089be:	4b17      	ldr	r3, [pc, #92]	; (8008a1c <tcp_timewait_input+0xf4>)
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80089c6:	4b11      	ldr	r3, [pc, #68]	; (8008a0c <tcp_timewait_input+0xe4>)
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00d      	beq.n	80089ea <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	8b5b      	ldrh	r3, [r3, #26]
 80089d2:	f043 0302 	orr.w	r3, r3, #2
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f002 f8a3 	bl	800ab28 <tcp_output>
  }
  return;
 80089e2:	bf00      	nop
 80089e4:	e001      	b.n	80089ea <tcp_timewait_input+0xc2>
    return;
 80089e6:	bf00      	nop
 80089e8:	e000      	b.n	80089ec <tcp_timewait_input+0xc4>
  return;
 80089ea:	bf00      	nop
}
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	200000fc 	.word	0x200000fc
 80089f8:	080106c4 	.word	0x080106c4
 80089fc:	080108dc 	.word	0x080108dc
 8008a00:	08010710 	.word	0x08010710
 8008a04:	200000f0 	.word	0x200000f0
 8008a08:	200000f4 	.word	0x200000f4
 8008a0c:	200000fa 	.word	0x200000fa
 8008a10:	200000e0 	.word	0x200000e0
 8008a14:	200033fc 	.word	0x200033fc
 8008a18:	20003400 	.word	0x20003400
 8008a1c:	20006934 	.word	0x20006934

08008a20 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008a20:	b590      	push	{r4, r7, lr}
 8008a22:	b08d      	sub	sp, #52	; 0x34
 8008a24:	af04      	add	r7, sp, #16
 8008a26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d106      	bne.n	8008a44 <tcp_process+0x24>
 8008a36:	4ba5      	ldr	r3, [pc, #660]	; (8008ccc <tcp_process+0x2ac>)
 8008a38:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008a3c:	49a4      	ldr	r1, [pc, #656]	; (8008cd0 <tcp_process+0x2b0>)
 8008a3e:	48a5      	ldr	r0, [pc, #660]	; (8008cd4 <tcp_process+0x2b4>)
 8008a40:	f005 fdfa 	bl	800e638 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008a44:	4ba4      	ldr	r3, [pc, #656]	; (8008cd8 <tcp_process+0x2b8>)
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d04e      	beq.n	8008aee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	7d1b      	ldrb	r3, [r3, #20]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d108      	bne.n	8008a6a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a5c:	4b9f      	ldr	r3, [pc, #636]	; (8008cdc <tcp_process+0x2bc>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d123      	bne.n	8008aac <tcp_process+0x8c>
        acceptable = 1;
 8008a64:	2301      	movs	r3, #1
 8008a66:	76fb      	strb	r3, [r7, #27]
 8008a68:	e020      	b.n	8008aac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a6e:	4b9c      	ldr	r3, [pc, #624]	; (8008ce0 <tcp_process+0x2c0>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d102      	bne.n	8008a7c <tcp_process+0x5c>
        acceptable = 1;
 8008a76:	2301      	movs	r3, #1
 8008a78:	76fb      	strb	r3, [r7, #27]
 8008a7a:	e017      	b.n	8008aac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008a7c:	4b98      	ldr	r3, [pc, #608]	; (8008ce0 <tcp_process+0x2c0>)
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	db10      	blt.n	8008aac <tcp_process+0x8c>
 8008a8a:	4b95      	ldr	r3, [pc, #596]	; (8008ce0 <tcp_process+0x2c0>)
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008a96:	440b      	add	r3, r1
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dc06      	bgt.n	8008aac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	8b5b      	ldrh	r3, [r3, #26]
 8008aa2:	f043 0302 	orr.w	r3, r3, #2
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008aac:	7efb      	ldrb	r3, [r7, #27]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d01b      	beq.n	8008aea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7d1b      	ldrb	r3, [r3, #20]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d106      	bne.n	8008ac8 <tcp_process+0xa8>
 8008aba:	4b84      	ldr	r3, [pc, #528]	; (8008ccc <tcp_process+0x2ac>)
 8008abc:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008ac0:	4988      	ldr	r1, [pc, #544]	; (8008ce4 <tcp_process+0x2c4>)
 8008ac2:	4884      	ldr	r0, [pc, #528]	; (8008cd4 <tcp_process+0x2b4>)
 8008ac4:	f005 fdb8 	bl	800e638 <iprintf>
      recv_flags |= TF_RESET;
 8008ac8:	4b87      	ldr	r3, [pc, #540]	; (8008ce8 <tcp_process+0x2c8>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	f043 0308 	orr.w	r3, r3, #8
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	4b85      	ldr	r3, [pc, #532]	; (8008ce8 <tcp_process+0x2c8>)
 8008ad4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	8b5b      	ldrh	r3, [r3, #26]
 8008ada:	f023 0301 	bic.w	r3, r3, #1
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008ae4:	f06f 030d 	mvn.w	r3, #13
 8008ae8:	e37a      	b.n	80091e0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	e378      	b.n	80091e0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008aee:	4b7a      	ldr	r3, [pc, #488]	; (8008cd8 <tcp_process+0x2b8>)
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	f003 0302 	and.w	r3, r3, #2
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d010      	beq.n	8008b1c <tcp_process+0xfc>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	7d1b      	ldrb	r3, [r3, #20]
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d00c      	beq.n	8008b1c <tcp_process+0xfc>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	7d1b      	ldrb	r3, [r3, #20]
 8008b06:	2b03      	cmp	r3, #3
 8008b08:	d008      	beq.n	8008b1c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	8b5b      	ldrh	r3, [r3, #26]
 8008b0e:	f043 0302 	orr.w	r3, r3, #2
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	e361      	b.n	80091e0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	8b5b      	ldrh	r3, [r3, #26]
 8008b20:	f003 0310 	and.w	r3, r3, #16
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d103      	bne.n	8008b30 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008b28:	4b70      	ldr	r3, [pc, #448]	; (8008cec <tcp_process+0x2cc>)
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 fc2d 	bl	800a3a0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	7d1b      	ldrb	r3, [r3, #20]
 8008b4a:	3b02      	subs	r3, #2
 8008b4c:	2b07      	cmp	r3, #7
 8008b4e:	f200 8337 	bhi.w	80091c0 <tcp_process+0x7a0>
 8008b52:	a201      	add	r2, pc, #4	; (adr r2, 8008b58 <tcp_process+0x138>)
 8008b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b58:	08008b79 	.word	0x08008b79
 8008b5c:	08008da9 	.word	0x08008da9
 8008b60:	08008f21 	.word	0x08008f21
 8008b64:	08008f4b 	.word	0x08008f4b
 8008b68:	0800906f 	.word	0x0800906f
 8008b6c:	08008f21 	.word	0x08008f21
 8008b70:	080090fb 	.word	0x080090fb
 8008b74:	0800918b 	.word	0x0800918b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008b78:	4b57      	ldr	r3, [pc, #348]	; (8008cd8 <tcp_process+0x2b8>)
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	f003 0310 	and.w	r3, r3, #16
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 80e4 	beq.w	8008d4e <tcp_process+0x32e>
 8008b86:	4b54      	ldr	r3, [pc, #336]	; (8008cd8 <tcp_process+0x2b8>)
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 80dd 	beq.w	8008d4e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b98:	1c5a      	adds	r2, r3, #1
 8008b9a:	4b50      	ldr	r3, [pc, #320]	; (8008cdc <tcp_process+0x2bc>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	f040 80d5 	bne.w	8008d4e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008ba4:	4b4e      	ldr	r3, [pc, #312]	; (8008ce0 <tcp_process+0x2c0>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008bb6:	4b49      	ldr	r3, [pc, #292]	; (8008cdc <tcp_process+0x2bc>)
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008bbe:	4b4c      	ldr	r3, [pc, #304]	; (8008cf0 <tcp_process+0x2d0>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	89db      	ldrh	r3, [r3, #14]
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008bd8:	4b41      	ldr	r3, [pc, #260]	; (8008ce0 <tcp_process+0x2c0>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	1e5a      	subs	r2, r3, #1
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2204      	movs	r2, #4
 8008be6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f004 fafb 	bl	800d1ec <ip4_route>
 8008bf6:	4601      	mov	r1, r0
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f7ff f88e 	bl	8007d20 <tcp_eff_send_mss_netif>
 8008c04:	4603      	mov	r3, r0
 8008c06:	461a      	mov	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c10:	009a      	lsls	r2, r3, #2
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	f241 111c 	movw	r1, #4380	; 0x111c
 8008c1c:	428b      	cmp	r3, r1
 8008c1e:	bf38      	it	cc
 8008c20:	460b      	movcc	r3, r1
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d204      	bcs.n	8008c30 <tcp_process+0x210>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	e00d      	b.n	8008c4c <tcp_process+0x22c>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	f241 121c 	movw	r2, #4380	; 0x111c
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d904      	bls.n	8008c48 <tcp_process+0x228>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	e001      	b.n	8008c4c <tcp_process+0x22c>
 8008c48:	f241 131c 	movw	r3, #4380	; 0x111c
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d106      	bne.n	8008c6a <tcp_process+0x24a>
 8008c5c:	4b1b      	ldr	r3, [pc, #108]	; (8008ccc <tcp_process+0x2ac>)
 8008c5e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008c62:	4924      	ldr	r1, [pc, #144]	; (8008cf4 <tcp_process+0x2d4>)
 8008c64:	481b      	ldr	r0, [pc, #108]	; (8008cd4 <tcp_process+0x2b4>)
 8008c66:	f005 fce7 	bl	800e638 <iprintf>
        --pcb->snd_queuelen;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c70:	3b01      	subs	r3, #1
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c7e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d111      	bne.n	8008caa <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c8a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d106      	bne.n	8008ca0 <tcp_process+0x280>
 8008c92:	4b0e      	ldr	r3, [pc, #56]	; (8008ccc <tcp_process+0x2ac>)
 8008c94:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008c98:	4917      	ldr	r1, [pc, #92]	; (8008cf8 <tcp_process+0x2d8>)
 8008c9a:	480e      	ldr	r0, [pc, #56]	; (8008cd4 <tcp_process+0x2b4>)
 8008c9c:	f005 fccc 	bl	800e638 <iprintf>
          pcb->unsent = rseg->next;
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	66da      	str	r2, [r3, #108]	; 0x6c
 8008ca8:	e003      	b.n	8008cb2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008cb2:	69f8      	ldr	r0, [r7, #28]
 8008cb4:	f7fe fc58 	bl	8007568 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d11d      	bne.n	8008cfc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008cc6:	861a      	strh	r2, [r3, #48]	; 0x30
 8008cc8:	e01f      	b.n	8008d0a <tcp_process+0x2ea>
 8008cca:	bf00      	nop
 8008ccc:	080106c4 	.word	0x080106c4
 8008cd0:	080108fc 	.word	0x080108fc
 8008cd4:	08010710 	.word	0x08010710
 8008cd8:	200000fc 	.word	0x200000fc
 8008cdc:	200000f4 	.word	0x200000f4
 8008ce0:	200000f0 	.word	0x200000f0
 8008ce4:	08010918 	.word	0x08010918
 8008ce8:	200000fd 	.word	0x200000fd
 8008cec:	20006934 	.word	0x20006934
 8008cf0:	200000e0 	.word	0x200000e0
 8008cf4:	08010938 	.word	0x08010938
 8008cf8:	08010950 	.word	0x08010950
        } else {
          pcb->rtime = 0;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00a      	beq.n	8008d2a <tcp_process+0x30a>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	6910      	ldr	r0, [r2, #16]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	4798      	blx	r3
 8008d24:	4603      	mov	r3, r0
 8008d26:	76bb      	strb	r3, [r7, #26]
 8008d28:	e001      	b.n	8008d2e <tcp_process+0x30e>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008d2e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008d32:	f113 0f0d 	cmn.w	r3, #13
 8008d36:	d102      	bne.n	8008d3e <tcp_process+0x31e>
          return ERR_ABRT;
 8008d38:	f06f 030c 	mvn.w	r3, #12
 8008d3c:	e250      	b.n	80091e0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	8b5b      	ldrh	r3, [r3, #26]
 8008d42:	f043 0302 	orr.w	r3, r3, #2
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008d4c:	e23a      	b.n	80091c4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008d4e:	4b9d      	ldr	r3, [pc, #628]	; (8008fc4 <tcp_process+0x5a4>)
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	f003 0310 	and.w	r3, r3, #16
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f000 8234 	beq.w	80091c4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d5c:	4b9a      	ldr	r3, [pc, #616]	; (8008fc8 <tcp_process+0x5a8>)
 8008d5e:	6819      	ldr	r1, [r3, #0]
 8008d60:	4b9a      	ldr	r3, [pc, #616]	; (8008fcc <tcp_process+0x5ac>)
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	461a      	mov	r2, r3
 8008d66:	4b9a      	ldr	r3, [pc, #616]	; (8008fd0 <tcp_process+0x5b0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d6c:	4b99      	ldr	r3, [pc, #612]	; (8008fd4 <tcp_process+0x5b4>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d70:	885b      	ldrh	r3, [r3, #2]
 8008d72:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d74:	4a97      	ldr	r2, [pc, #604]	; (8008fd4 <tcp_process+0x5b4>)
 8008d76:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d78:	8812      	ldrh	r2, [r2, #0]
 8008d7a:	b292      	uxth	r2, r2
 8008d7c:	9202      	str	r2, [sp, #8]
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	4b95      	ldr	r3, [pc, #596]	; (8008fd8 <tcp_process+0x5b8>)
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	4b95      	ldr	r3, [pc, #596]	; (8008fdc <tcp_process+0x5bc>)
 8008d86:	4602      	mov	r2, r0
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f002 fc93 	bl	800b6b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d94:	2b05      	cmp	r3, #5
 8008d96:	f200 8215 	bhi.w	80091c4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f002 fa51 	bl	800b248 <tcp_rexmit_rto>
      break;
 8008da6:	e20d      	b.n	80091c4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008da8:	4b86      	ldr	r3, [pc, #536]	; (8008fc4 <tcp_process+0x5a4>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	f003 0310 	and.w	r3, r3, #16
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f000 80a1 	beq.w	8008ef8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008db6:	4b84      	ldr	r3, [pc, #528]	; (8008fc8 <tcp_process+0x5a8>)
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	db7e      	blt.n	8008ec4 <tcp_process+0x4a4>
 8008dc6:	4b80      	ldr	r3, [pc, #512]	; (8008fc8 <tcp_process+0x5a8>)
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	dc77      	bgt.n	8008ec4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2204      	movs	r2, #4
 8008dd8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d102      	bne.n	8008de8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008de2:	23fa      	movs	r3, #250	; 0xfa
 8008de4:	76bb      	strb	r3, [r7, #26]
 8008de6:	e01d      	b.n	8008e24 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d106      	bne.n	8008e00 <tcp_process+0x3e0>
 8008df2:	4b7b      	ldr	r3, [pc, #492]	; (8008fe0 <tcp_process+0x5c0>)
 8008df4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008df8:	497a      	ldr	r1, [pc, #488]	; (8008fe4 <tcp_process+0x5c4>)
 8008dfa:	487b      	ldr	r0, [pc, #492]	; (8008fe8 <tcp_process+0x5c8>)
 8008dfc:	f005 fc1c 	bl	800e638 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00a      	beq.n	8008e20 <tcp_process+0x400>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	6910      	ldr	r0, [r2, #16]
 8008e14:	2200      	movs	r2, #0
 8008e16:	6879      	ldr	r1, [r7, #4]
 8008e18:	4798      	blx	r3
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	76bb      	strb	r3, [r7, #26]
 8008e1e:	e001      	b.n	8008e24 <tcp_process+0x404>
 8008e20:	23f0      	movs	r3, #240	; 0xf0
 8008e22:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008e24:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00a      	beq.n	8008e42 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008e2c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008e30:	f113 0f0d 	cmn.w	r3, #13
 8008e34:	d002      	beq.n	8008e3c <tcp_process+0x41c>
              tcp_abort(pcb);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7fd fcf4 	bl	8006824 <tcp_abort>
            }
            return ERR_ABRT;
 8008e3c:	f06f 030c 	mvn.w	r3, #12
 8008e40:	e1ce      	b.n	80091e0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fae0 	bl	8009408 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008e48:	4b68      	ldr	r3, [pc, #416]	; (8008fec <tcp_process+0x5cc>)
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d005      	beq.n	8008e5c <tcp_process+0x43c>
            recv_acked--;
 8008e50:	4b66      	ldr	r3, [pc, #408]	; (8008fec <tcp_process+0x5cc>)
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	3b01      	subs	r3, #1
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	4b64      	ldr	r3, [pc, #400]	; (8008fec <tcp_process+0x5cc>)
 8008e5a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e60:	009a      	lsls	r2, r3, #2
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	f241 111c 	movw	r1, #4380	; 0x111c
 8008e6c:	428b      	cmp	r3, r1
 8008e6e:	bf38      	it	cc
 8008e70:	460b      	movcc	r3, r1
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d204      	bcs.n	8008e80 <tcp_process+0x460>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	e00d      	b.n	8008e9c <tcp_process+0x47c>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e84:	005b      	lsls	r3, r3, #1
 8008e86:	f241 121c 	movw	r2, #4380	; 0x111c
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d904      	bls.n	8008e98 <tcp_process+0x478>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e92:	005b      	lsls	r3, r3, #1
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	e001      	b.n	8008e9c <tcp_process+0x47c>
 8008e98:	f241 131c 	movw	r3, #4380	; 0x111c
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008ea2:	4b53      	ldr	r3, [pc, #332]	; (8008ff0 <tcp_process+0x5d0>)
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	f003 0320 	and.w	r3, r3, #32
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d037      	beq.n	8008f1e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	8b5b      	ldrh	r3, [r3, #26]
 8008eb2:	f043 0302 	orr.w	r3, r3, #2
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2207      	movs	r2, #7
 8008ec0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008ec2:	e02c      	b.n	8008f1e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ec4:	4b40      	ldr	r3, [pc, #256]	; (8008fc8 <tcp_process+0x5a8>)
 8008ec6:	6819      	ldr	r1, [r3, #0]
 8008ec8:	4b40      	ldr	r3, [pc, #256]	; (8008fcc <tcp_process+0x5ac>)
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	4b40      	ldr	r3, [pc, #256]	; (8008fd0 <tcp_process+0x5b0>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008ed4:	4b3f      	ldr	r3, [pc, #252]	; (8008fd4 <tcp_process+0x5b4>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ed8:	885b      	ldrh	r3, [r3, #2]
 8008eda:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008edc:	4a3d      	ldr	r2, [pc, #244]	; (8008fd4 <tcp_process+0x5b4>)
 8008ede:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ee0:	8812      	ldrh	r2, [r2, #0]
 8008ee2:	b292      	uxth	r2, r2
 8008ee4:	9202      	str	r2, [sp, #8]
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	4b3b      	ldr	r3, [pc, #236]	; (8008fd8 <tcp_process+0x5b8>)
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	4b3b      	ldr	r3, [pc, #236]	; (8008fdc <tcp_process+0x5bc>)
 8008eee:	4602      	mov	r2, r0
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f002 fbdf 	bl	800b6b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008ef6:	e167      	b.n	80091c8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008ef8:	4b32      	ldr	r3, [pc, #200]	; (8008fc4 <tcp_process+0x5a4>)
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 8161 	beq.w	80091c8 <tcp_process+0x7a8>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0a:	1e5a      	subs	r2, r3, #1
 8008f0c:	4b30      	ldr	r3, [pc, #192]	; (8008fd0 <tcp_process+0x5b0>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	f040 8159 	bne.w	80091c8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f002 f9b8 	bl	800b28c <tcp_rexmit>
      break;
 8008f1c:	e154      	b.n	80091c8 <tcp_process+0x7a8>
 8008f1e:	e153      	b.n	80091c8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fa71 	bl	8009408 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008f26:	4b32      	ldr	r3, [pc, #200]	; (8008ff0 <tcp_process+0x5d0>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	f003 0320 	and.w	r3, r3, #32
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f000 814c 	beq.w	80091cc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	8b5b      	ldrh	r3, [r3, #26]
 8008f38:	f043 0302 	orr.w	r3, r3, #2
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2207      	movs	r2, #7
 8008f46:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008f48:	e140      	b.n	80091cc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fa5c 	bl	8009408 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008f50:	4b27      	ldr	r3, [pc, #156]	; (8008ff0 <tcp_process+0x5d0>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	f003 0320 	and.w	r3, r3, #32
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d071      	beq.n	8009040 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f5c:	4b19      	ldr	r3, [pc, #100]	; (8008fc4 <tcp_process+0x5a4>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d060      	beq.n	800902a <tcp_process+0x60a>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f6c:	4b16      	ldr	r3, [pc, #88]	; (8008fc8 <tcp_process+0x5a8>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d15a      	bne.n	800902a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d156      	bne.n	800902a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	8b5b      	ldrh	r3, [r3, #26]
 8008f80:	f043 0302 	orr.w	r3, r3, #2
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7fe fdbe 	bl	8007b0c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008f90:	4b18      	ldr	r3, [pc, #96]	; (8008ff4 <tcp_process+0x5d4>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d105      	bne.n	8008fa6 <tcp_process+0x586>
 8008f9a:	4b16      	ldr	r3, [pc, #88]	; (8008ff4 <tcp_process+0x5d4>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	4a14      	ldr	r2, [pc, #80]	; (8008ff4 <tcp_process+0x5d4>)
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	e02e      	b.n	8009004 <tcp_process+0x5e4>
 8008fa6:	4b13      	ldr	r3, [pc, #76]	; (8008ff4 <tcp_process+0x5d4>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	617b      	str	r3, [r7, #20]
 8008fac:	e027      	b.n	8008ffe <tcp_process+0x5de>
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d11f      	bne.n	8008ff8 <tcp_process+0x5d8>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68da      	ldr	r2, [r3, #12]
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	60da      	str	r2, [r3, #12]
 8008fc0:	e020      	b.n	8009004 <tcp_process+0x5e4>
 8008fc2:	bf00      	nop
 8008fc4:	200000fc 	.word	0x200000fc
 8008fc8:	200000f4 	.word	0x200000f4
 8008fcc:	200000fa 	.word	0x200000fa
 8008fd0:	200000f0 	.word	0x200000f0
 8008fd4:	200000e0 	.word	0x200000e0
 8008fd8:	200033fc 	.word	0x200033fc
 8008fdc:	20003400 	.word	0x20003400
 8008fe0:	080106c4 	.word	0x080106c4
 8008fe4:	08010964 	.word	0x08010964
 8008fe8:	08010710 	.word	0x08010710
 8008fec:	200000f8 	.word	0x200000f8
 8008ff0:	200000fd 	.word	0x200000fd
 8008ff4:	20006930 	.word	0x20006930
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1d4      	bne.n	8008fae <tcp_process+0x58e>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	60da      	str	r2, [r3, #12]
 800900a:	4b77      	ldr	r3, [pc, #476]	; (80091e8 <tcp_process+0x7c8>)
 800900c:	2201      	movs	r2, #1
 800900e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	220a      	movs	r2, #10
 8009014:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009016:	4b75      	ldr	r3, [pc, #468]	; (80091ec <tcp_process+0x7cc>)
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	60da      	str	r2, [r3, #12]
 800901e:	4a73      	ldr	r2, [pc, #460]	; (80091ec <tcp_process+0x7cc>)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	f002 fd08 	bl	800ba38 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009028:	e0d2      	b.n	80091d0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	8b5b      	ldrh	r3, [r3, #26]
 800902e:	f043 0302 	orr.w	r3, r3, #2
 8009032:	b29a      	uxth	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2208      	movs	r2, #8
 800903c:	751a      	strb	r2, [r3, #20]
      break;
 800903e:	e0c7      	b.n	80091d0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009040:	4b6b      	ldr	r3, [pc, #428]	; (80091f0 <tcp_process+0x7d0>)
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	f003 0310 	and.w	r3, r3, #16
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 80c1 	beq.w	80091d0 <tcp_process+0x7b0>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009052:	4b68      	ldr	r3, [pc, #416]	; (80091f4 <tcp_process+0x7d4>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	429a      	cmp	r2, r3
 8009058:	f040 80ba 	bne.w	80091d0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009060:	2b00      	cmp	r3, #0
 8009062:	f040 80b5 	bne.w	80091d0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2206      	movs	r2, #6
 800906a:	751a      	strb	r2, [r3, #20]
      break;
 800906c:	e0b0      	b.n	80091d0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f9ca 	bl	8009408 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009074:	4b60      	ldr	r3, [pc, #384]	; (80091f8 <tcp_process+0x7d8>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	f003 0320 	and.w	r3, r3, #32
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 80a9 	beq.w	80091d4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	8b5b      	ldrh	r3, [r3, #26]
 8009086:	f043 0302 	orr.w	r3, r3, #2
 800908a:	b29a      	uxth	r2, r3
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7fe fd3b 	bl	8007b0c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009096:	4b59      	ldr	r3, [pc, #356]	; (80091fc <tcp_process+0x7dc>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	429a      	cmp	r2, r3
 800909e:	d105      	bne.n	80090ac <tcp_process+0x68c>
 80090a0:	4b56      	ldr	r3, [pc, #344]	; (80091fc <tcp_process+0x7dc>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	4a55      	ldr	r2, [pc, #340]	; (80091fc <tcp_process+0x7dc>)
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	e013      	b.n	80090d4 <tcp_process+0x6b4>
 80090ac:	4b53      	ldr	r3, [pc, #332]	; (80091fc <tcp_process+0x7dc>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	613b      	str	r3, [r7, #16]
 80090b2:	e00c      	b.n	80090ce <tcp_process+0x6ae>
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d104      	bne.n	80090c8 <tcp_process+0x6a8>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	68da      	ldr	r2, [r3, #12]
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	60da      	str	r2, [r3, #12]
 80090c6:	e005      	b.n	80090d4 <tcp_process+0x6b4>
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	613b      	str	r3, [r7, #16]
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1ef      	bne.n	80090b4 <tcp_process+0x694>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	60da      	str	r2, [r3, #12]
 80090da:	4b43      	ldr	r3, [pc, #268]	; (80091e8 <tcp_process+0x7c8>)
 80090dc:	2201      	movs	r2, #1
 80090de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	220a      	movs	r2, #10
 80090e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80090e6:	4b41      	ldr	r3, [pc, #260]	; (80091ec <tcp_process+0x7cc>)
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60da      	str	r2, [r3, #12]
 80090ee:	4a3f      	ldr	r2, [pc, #252]	; (80091ec <tcp_process+0x7cc>)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6013      	str	r3, [r2, #0]
 80090f4:	f002 fca0 	bl	800ba38 <tcp_timer_needed>
      }
      break;
 80090f8:	e06c      	b.n	80091d4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f984 	bl	8009408 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009100:	4b3b      	ldr	r3, [pc, #236]	; (80091f0 <tcp_process+0x7d0>)
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	f003 0310 	and.w	r3, r3, #16
 8009108:	2b00      	cmp	r3, #0
 800910a:	d065      	beq.n	80091d8 <tcp_process+0x7b8>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009110:	4b38      	ldr	r3, [pc, #224]	; (80091f4 <tcp_process+0x7d4>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	429a      	cmp	r2, r3
 8009116:	d15f      	bne.n	80091d8 <tcp_process+0x7b8>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800911c:	2b00      	cmp	r3, #0
 800911e:	d15b      	bne.n	80091d8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7fe fcf3 	bl	8007b0c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009126:	4b35      	ldr	r3, [pc, #212]	; (80091fc <tcp_process+0x7dc>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	429a      	cmp	r2, r3
 800912e:	d105      	bne.n	800913c <tcp_process+0x71c>
 8009130:	4b32      	ldr	r3, [pc, #200]	; (80091fc <tcp_process+0x7dc>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	4a31      	ldr	r2, [pc, #196]	; (80091fc <tcp_process+0x7dc>)
 8009138:	6013      	str	r3, [r2, #0]
 800913a:	e013      	b.n	8009164 <tcp_process+0x744>
 800913c:	4b2f      	ldr	r3, [pc, #188]	; (80091fc <tcp_process+0x7dc>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	60fb      	str	r3, [r7, #12]
 8009142:	e00c      	b.n	800915e <tcp_process+0x73e>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	429a      	cmp	r2, r3
 800914c:	d104      	bne.n	8009158 <tcp_process+0x738>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68da      	ldr	r2, [r3, #12]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	60da      	str	r2, [r3, #12]
 8009156:	e005      	b.n	8009164 <tcp_process+0x744>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	60fb      	str	r3, [r7, #12]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1ef      	bne.n	8009144 <tcp_process+0x724>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	60da      	str	r2, [r3, #12]
 800916a:	4b1f      	ldr	r3, [pc, #124]	; (80091e8 <tcp_process+0x7c8>)
 800916c:	2201      	movs	r2, #1
 800916e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	220a      	movs	r2, #10
 8009174:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009176:	4b1d      	ldr	r3, [pc, #116]	; (80091ec <tcp_process+0x7cc>)
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	60da      	str	r2, [r3, #12]
 800917e:	4a1b      	ldr	r2, [pc, #108]	; (80091ec <tcp_process+0x7cc>)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	f002 fc58 	bl	800ba38 <tcp_timer_needed>
      }
      break;
 8009188:	e026      	b.n	80091d8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f93c 	bl	8009408 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009190:	4b17      	ldr	r3, [pc, #92]	; (80091f0 <tcp_process+0x7d0>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	f003 0310 	and.w	r3, r3, #16
 8009198:	2b00      	cmp	r3, #0
 800919a:	d01f      	beq.n	80091dc <tcp_process+0x7bc>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091a0:	4b14      	ldr	r3, [pc, #80]	; (80091f4 <tcp_process+0x7d4>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d119      	bne.n	80091dc <tcp_process+0x7bc>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d115      	bne.n	80091dc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80091b0:	4b11      	ldr	r3, [pc, #68]	; (80091f8 <tcp_process+0x7d8>)
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	f043 0310 	orr.w	r3, r3, #16
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	4b0f      	ldr	r3, [pc, #60]	; (80091f8 <tcp_process+0x7d8>)
 80091bc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80091be:	e00d      	b.n	80091dc <tcp_process+0x7bc>
    default:
      break;
 80091c0:	bf00      	nop
 80091c2:	e00c      	b.n	80091de <tcp_process+0x7be>
      break;
 80091c4:	bf00      	nop
 80091c6:	e00a      	b.n	80091de <tcp_process+0x7be>
      break;
 80091c8:	bf00      	nop
 80091ca:	e008      	b.n	80091de <tcp_process+0x7be>
      break;
 80091cc:	bf00      	nop
 80091ce:	e006      	b.n	80091de <tcp_process+0x7be>
      break;
 80091d0:	bf00      	nop
 80091d2:	e004      	b.n	80091de <tcp_process+0x7be>
      break;
 80091d4:	bf00      	nop
 80091d6:	e002      	b.n	80091de <tcp_process+0x7be>
      break;
 80091d8:	bf00      	nop
 80091da:	e000      	b.n	80091de <tcp_process+0x7be>
      break;
 80091dc:	bf00      	nop
  }
  return ERR_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3724      	adds	r7, #36	; 0x24
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd90      	pop	{r4, r7, pc}
 80091e8:	2000692c 	.word	0x2000692c
 80091ec:	20006940 	.word	0x20006940
 80091f0:	200000fc 	.word	0x200000fc
 80091f4:	200000f4 	.word	0x200000f4
 80091f8:	200000fd 	.word	0x200000fd
 80091fc:	20006930 	.word	0x20006930

08009200 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009200:	b590      	push	{r4, r7, lr}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d106      	bne.n	800921e <tcp_oos_insert_segment+0x1e>
 8009210:	4b3b      	ldr	r3, [pc, #236]	; (8009300 <tcp_oos_insert_segment+0x100>)
 8009212:	f240 421f 	movw	r2, #1055	; 0x41f
 8009216:	493b      	ldr	r1, [pc, #236]	; (8009304 <tcp_oos_insert_segment+0x104>)
 8009218:	483b      	ldr	r0, [pc, #236]	; (8009308 <tcp_oos_insert_segment+0x108>)
 800921a:	f005 fa0d 	bl	800e638 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	899b      	ldrh	r3, [r3, #12]
 8009224:	b29b      	uxth	r3, r3
 8009226:	4618      	mov	r0, r3
 8009228:	f7fb facc 	bl	80047c4 <lwip_htons>
 800922c:	4603      	mov	r3, r0
 800922e:	b2db      	uxtb	r3, r3
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	d028      	beq.n	800928a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009238:	6838      	ldr	r0, [r7, #0]
 800923a:	f7fe f981 	bl	8007540 <tcp_segs_free>
    next = NULL;
 800923e:	2300      	movs	r3, #0
 8009240:	603b      	str	r3, [r7, #0]
 8009242:	e056      	b.n	80092f2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	899b      	ldrh	r3, [r3, #12]
 800924a:	b29b      	uxth	r3, r3
 800924c:	4618      	mov	r0, r3
 800924e:	f7fb fab9 	bl	80047c4 <lwip_htons>
 8009252:	4603      	mov	r3, r0
 8009254:	b2db      	uxtb	r3, r3
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00d      	beq.n	800927a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	899b      	ldrh	r3, [r3, #12]
 8009264:	b29c      	uxth	r4, r3
 8009266:	2001      	movs	r0, #1
 8009268:	f7fb faac 	bl	80047c4 <lwip_htons>
 800926c:	4603      	mov	r3, r0
 800926e:	461a      	mov	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	4322      	orrs	r2, r4
 8009276:	b292      	uxth	r2, r2
 8009278:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f7fe f96f 	bl	8007568 <tcp_seg_free>
    while (next &&
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00e      	beq.n	80092ae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	891b      	ldrh	r3, [r3, #8]
 8009294:	461a      	mov	r2, r3
 8009296:	4b1d      	ldr	r3, [pc, #116]	; (800930c <tcp_oos_insert_segment+0x10c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	441a      	add	r2, r3
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	8909      	ldrh	r1, [r1, #8]
 80092a6:	440b      	add	r3, r1
 80092a8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	daca      	bge.n	8009244 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d01e      	beq.n	80092f2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	891b      	ldrh	r3, [r3, #8]
 80092b8:	461a      	mov	r2, r3
 80092ba:	4b14      	ldr	r3, [pc, #80]	; (800930c <tcp_oos_insert_segment+0x10c>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	441a      	add	r2, r3
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	dd12      	ble.n	80092f2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	4b0d      	ldr	r3, [pc, #52]	; (800930c <tcp_oos_insert_segment+0x10c>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	b29b      	uxth	r3, r3
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	b29a      	uxth	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	891b      	ldrh	r3, [r3, #8]
 80092ea:	4619      	mov	r1, r3
 80092ec:	4610      	mov	r0, r2
 80092ee:	f7fc fb93 	bl	8005a18 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	601a      	str	r2, [r3, #0]
}
 80092f8:	bf00      	nop
 80092fa:	3714      	adds	r7, #20
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd90      	pop	{r4, r7, pc}
 8009300:	080106c4 	.word	0x080106c4
 8009304:	08010984 	.word	0x08010984
 8009308:	08010710 	.word	0x08010710
 800930c:	200000f0 	.word	0x200000f0

08009310 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009310:	b5b0      	push	{r4, r5, r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
 800931c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800931e:	e03e      	b.n	800939e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	4618      	mov	r0, r3
 8009330:	f7fc fd80 	bl	8005e34 <pbuf_clen>
 8009334:	4603      	mov	r3, r0
 8009336:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800933e:	8a7a      	ldrh	r2, [r7, #18]
 8009340:	429a      	cmp	r2, r3
 8009342:	d906      	bls.n	8009352 <tcp_free_acked_segments+0x42>
 8009344:	4b2a      	ldr	r3, [pc, #168]	; (80093f0 <tcp_free_acked_segments+0xe0>)
 8009346:	f240 4257 	movw	r2, #1111	; 0x457
 800934a:	492a      	ldr	r1, [pc, #168]	; (80093f4 <tcp_free_acked_segments+0xe4>)
 800934c:	482a      	ldr	r0, [pc, #168]	; (80093f8 <tcp_free_acked_segments+0xe8>)
 800934e:	f005 f973 	bl	800e638 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009358:	8a7b      	ldrh	r3, [r7, #18]
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	b29a      	uxth	r2, r3
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	891a      	ldrh	r2, [r3, #8]
 8009368:	4b24      	ldr	r3, [pc, #144]	; (80093fc <tcp_free_acked_segments+0xec>)
 800936a:	881b      	ldrh	r3, [r3, #0]
 800936c:	4413      	add	r3, r2
 800936e:	b29a      	uxth	r2, r3
 8009370:	4b22      	ldr	r3, [pc, #136]	; (80093fc <tcp_free_acked_segments+0xec>)
 8009372:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009374:	6978      	ldr	r0, [r7, #20]
 8009376:	f7fe f8f7 	bl	8007568 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00c      	beq.n	800939e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d109      	bne.n	800939e <tcp_free_acked_segments+0x8e>
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d106      	bne.n	800939e <tcp_free_acked_segments+0x8e>
 8009390:	4b17      	ldr	r3, [pc, #92]	; (80093f0 <tcp_free_acked_segments+0xe0>)
 8009392:	f240 4262 	movw	r2, #1122	; 0x462
 8009396:	491a      	ldr	r1, [pc, #104]	; (8009400 <tcp_free_acked_segments+0xf0>)
 8009398:	4817      	ldr	r0, [pc, #92]	; (80093f8 <tcp_free_acked_segments+0xe8>)
 800939a:	f005 f94d 	bl	800e638 <iprintf>
  while (seg_list != NULL &&
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d020      	beq.n	80093e6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fb fa1f 	bl	80047ee <lwip_htonl>
 80093b0:	4604      	mov	r4, r0
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	891b      	ldrh	r3, [r3, #8]
 80093b6:	461d      	mov	r5, r3
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	899b      	ldrh	r3, [r3, #12]
 80093be:	b29b      	uxth	r3, r3
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fb f9ff 	bl	80047c4 <lwip_htons>
 80093c6:	4603      	mov	r3, r0
 80093c8:	b2db      	uxtb	r3, r3
 80093ca:	f003 0303 	and.w	r3, r3, #3
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d001      	beq.n	80093d6 <tcp_free_acked_segments+0xc6>
 80093d2:	2301      	movs	r3, #1
 80093d4:	e000      	b.n	80093d8 <tcp_free_acked_segments+0xc8>
 80093d6:	2300      	movs	r3, #0
 80093d8:	442b      	add	r3, r5
 80093da:	18e2      	adds	r2, r4, r3
 80093dc:	4b09      	ldr	r3, [pc, #36]	; (8009404 <tcp_free_acked_segments+0xf4>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	dd9c      	ble.n	8009320 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80093e6:	68bb      	ldr	r3, [r7, #8]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3718      	adds	r7, #24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bdb0      	pop	{r4, r5, r7, pc}
 80093f0:	080106c4 	.word	0x080106c4
 80093f4:	080109ac 	.word	0x080109ac
 80093f8:	08010710 	.word	0x08010710
 80093fc:	200000f8 	.word	0x200000f8
 8009400:	080109d4 	.word	0x080109d4
 8009404:	200000f4 	.word	0x200000f4

08009408 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009408:	b5b0      	push	{r4, r5, r7, lr}
 800940a:	b094      	sub	sp, #80	; 0x50
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d106      	bne.n	8009428 <tcp_receive+0x20>
 800941a:	4ba6      	ldr	r3, [pc, #664]	; (80096b4 <tcp_receive+0x2ac>)
 800941c:	f240 427b 	movw	r2, #1147	; 0x47b
 8009420:	49a5      	ldr	r1, [pc, #660]	; (80096b8 <tcp_receive+0x2b0>)
 8009422:	48a6      	ldr	r0, [pc, #664]	; (80096bc <tcp_receive+0x2b4>)
 8009424:	f005 f908 	bl	800e638 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	7d1b      	ldrb	r3, [r3, #20]
 800942c:	2b03      	cmp	r3, #3
 800942e:	d806      	bhi.n	800943e <tcp_receive+0x36>
 8009430:	4ba0      	ldr	r3, [pc, #640]	; (80096b4 <tcp_receive+0x2ac>)
 8009432:	f240 427c 	movw	r2, #1148	; 0x47c
 8009436:	49a2      	ldr	r1, [pc, #648]	; (80096c0 <tcp_receive+0x2b8>)
 8009438:	48a0      	ldr	r0, [pc, #640]	; (80096bc <tcp_receive+0x2b4>)
 800943a:	f005 f8fd 	bl	800e638 <iprintf>

  if (flags & TCP_ACK) {
 800943e:	4ba1      	ldr	r3, [pc, #644]	; (80096c4 <tcp_receive+0x2bc>)
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	f003 0310 	and.w	r3, r3, #16
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 8263 	beq.w	8009912 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009452:	461a      	mov	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009458:	4413      	add	r3, r2
 800945a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009460:	4b99      	ldr	r3, [pc, #612]	; (80096c8 <tcp_receive+0x2c0>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	db1b      	blt.n	80094a2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800946e:	4b96      	ldr	r3, [pc, #600]	; (80096c8 <tcp_receive+0x2c0>)
 8009470:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009472:	429a      	cmp	r2, r3
 8009474:	d106      	bne.n	8009484 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800947a:	4b94      	ldr	r3, [pc, #592]	; (80096cc <tcp_receive+0x2c4>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	2b00      	cmp	r3, #0
 8009482:	db0e      	blt.n	80094a2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009488:	4b90      	ldr	r3, [pc, #576]	; (80096cc <tcp_receive+0x2c4>)
 800948a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800948c:	429a      	cmp	r2, r3
 800948e:	d125      	bne.n	80094dc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009490:	4b8f      	ldr	r3, [pc, #572]	; (80096d0 <tcp_receive+0x2c8>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	89db      	ldrh	r3, [r3, #14]
 8009496:	b29a      	uxth	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800949e:	429a      	cmp	r2, r3
 80094a0:	d91c      	bls.n	80094dc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80094a2:	4b8b      	ldr	r3, [pc, #556]	; (80096d0 <tcp_receive+0x2c8>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	89db      	ldrh	r3, [r3, #14]
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094bc:	429a      	cmp	r2, r3
 80094be:	d205      	bcs.n	80094cc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80094cc:	4b7e      	ldr	r3, [pc, #504]	; (80096c8 <tcp_receive+0x2c0>)
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80094d4:	4b7d      	ldr	r3, [pc, #500]	; (80096cc <tcp_receive+0x2c4>)
 80094d6:	681a      	ldr	r2, [r3, #0]
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80094dc:	4b7b      	ldr	r3, [pc, #492]	; (80096cc <tcp_receive+0x2c4>)
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	dc58      	bgt.n	800959c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80094ea:	4b7a      	ldr	r3, [pc, #488]	; (80096d4 <tcp_receive+0x2cc>)
 80094ec:	881b      	ldrh	r3, [r3, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d14b      	bne.n	800958a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80094fc:	4413      	add	r3, r2
 80094fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009500:	429a      	cmp	r2, r3
 8009502:	d142      	bne.n	800958a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800950a:	2b00      	cmp	r3, #0
 800950c:	db3d      	blt.n	800958a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009512:	4b6e      	ldr	r3, [pc, #440]	; (80096cc <tcp_receive+0x2c4>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	429a      	cmp	r2, r3
 8009518:	d137      	bne.n	800958a <tcp_receive+0x182>
              found_dupack = 1;
 800951a:	2301      	movs	r3, #1
 800951c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009524:	2bff      	cmp	r3, #255	; 0xff
 8009526:	d007      	beq.n	8009538 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800952e:	3301      	adds	r3, #1
 8009530:	b2da      	uxtb	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800953e:	2b03      	cmp	r3, #3
 8009540:	d91b      	bls.n	800957a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800954c:	4413      	add	r3, r2
 800954e:	b29a      	uxth	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009556:	429a      	cmp	r2, r3
 8009558:	d30a      	bcc.n	8009570 <tcp_receive+0x168>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009564:	4413      	add	r3, r2
 8009566:	b29a      	uxth	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800956e:	e004      	b.n	800957a <tcp_receive+0x172>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009576:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009580:	2b02      	cmp	r3, #2
 8009582:	d902      	bls.n	800958a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f001 feed 	bl	800b364 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800958a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800958c:	2b00      	cmp	r3, #0
 800958e:	f040 8160 	bne.w	8009852 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800959a:	e15a      	b.n	8009852 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800959c:	4b4b      	ldr	r3, [pc, #300]	; (80096cc <tcp_receive+0x2c4>)
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	3b01      	subs	r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f2c0 814d 	blt.w	8009848 <tcp_receive+0x440>
 80095ae:	4b47      	ldr	r3, [pc, #284]	; (80096cc <tcp_receive+0x2c4>)
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f300 8145 	bgt.w	8009848 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	8b5b      	ldrh	r3, [r3, #26]
 80095c2:	f003 0304 	and.w	r3, r3, #4
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d010      	beq.n	80095ec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	8b5b      	ldrh	r3, [r3, #26]
 80095ce:	f023 0304 	bic.w	r3, r3, #4
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80095fa:	10db      	asrs	r3, r3, #3
 80095fc:	b21b      	sxth	r3, r3
 80095fe:	b29a      	uxth	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009606:	b29b      	uxth	r3, r3
 8009608:	4413      	add	r3, r2
 800960a:	b29b      	uxth	r3, r3
 800960c:	b21a      	sxth	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009614:	4b2d      	ldr	r3, [pc, #180]	; (80096cc <tcp_receive+0x2c4>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	b29a      	uxth	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961e:	b29b      	uxth	r3, r3
 8009620:	1ad3      	subs	r3, r2, r3
 8009622:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800962c:	4b27      	ldr	r3, [pc, #156]	; (80096cc <tcp_receive+0x2c4>)
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	7d1b      	ldrb	r3, [r3, #20]
 8009638:	2b03      	cmp	r3, #3
 800963a:	f240 8096 	bls.w	800976a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800964a:	429a      	cmp	r2, r3
 800964c:	d244      	bcs.n	80096d8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	8b5b      	ldrh	r3, [r3, #26]
 8009652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <tcp_receive+0x256>
 800965a:	2301      	movs	r3, #1
 800965c:	e000      	b.n	8009660 <tcp_receive+0x258>
 800965e:	2302      	movs	r3, #2
 8009660:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009664:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009668:	b29a      	uxth	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800966e:	fb12 f303 	smulbb	r3, r2, r3
 8009672:	b29b      	uxth	r3, r3
 8009674:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009676:	4293      	cmp	r3, r2
 8009678:	bf28      	it	cs
 800967a:	4613      	movcs	r3, r2
 800967c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009684:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009686:	4413      	add	r3, r2
 8009688:	b29a      	uxth	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009690:	429a      	cmp	r2, r3
 8009692:	d309      	bcc.n	80096a8 <tcp_receive+0x2a0>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800969a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800969c:	4413      	add	r3, r2
 800969e:	b29a      	uxth	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80096a6:	e060      	b.n	800976a <tcp_receive+0x362>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80096b2:	e05a      	b.n	800976a <tcp_receive+0x362>
 80096b4:	080106c4 	.word	0x080106c4
 80096b8:	080109f4 	.word	0x080109f4
 80096bc:	08010710 	.word	0x08010710
 80096c0:	08010a10 	.word	0x08010a10
 80096c4:	200000fc 	.word	0x200000fc
 80096c8:	200000f0 	.word	0x200000f0
 80096cc:	200000f4 	.word	0x200000f4
 80096d0:	200000e0 	.word	0x200000e0
 80096d4:	200000fa 	.word	0x200000fa
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80096de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096e0:	4413      	add	r3, r2
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d309      	bcc.n	8009702 <tcp_receive+0x2fa>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80096f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096f6:	4413      	add	r3, r2
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009700:	e004      	b.n	800970c <tcp_receive+0x304>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009708:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009718:	429a      	cmp	r2, r3
 800971a:	d326      	bcc.n	800976a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	b29a      	uxth	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800973c:	4413      	add	r3, r2
 800973e:	b29a      	uxth	r2, r3
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009746:	429a      	cmp	r2, r3
 8009748:	d30a      	bcc.n	8009760 <tcp_receive+0x358>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009754:	4413      	add	r3, r2
 8009756:	b29a      	uxth	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800975e:	e004      	b.n	800976a <tcp_receive+0x362>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009766:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009772:	4a98      	ldr	r2, [pc, #608]	; (80099d4 <tcp_receive+0x5cc>)
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7ff fdcb 	bl	8009310 <tcp_free_acked_segments>
 800977a:	4602      	mov	r2, r0
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009788:	4a93      	ldr	r2, [pc, #588]	; (80099d8 <tcp_receive+0x5d0>)
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7ff fdc0 	bl	8009310 <tcp_free_acked_segments>
 8009790:	4602      	mov	r2, r0
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979a:	2b00      	cmp	r3, #0
 800979c:	d104      	bne.n	80097a8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097a4:	861a      	strh	r2, [r3, #48]	; 0x30
 80097a6:	e002      	b.n	80097ae <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d103      	bne.n	80097c4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80097ca:	4b84      	ldr	r3, [pc, #528]	; (80099dc <tcp_receive+0x5d4>)
 80097cc:	881b      	ldrh	r3, [r3, #0]
 80097ce:	4413      	add	r3, r2
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	8b5b      	ldrh	r3, [r3, #26]
 80097dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d035      	beq.n	8009850 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d118      	bne.n	800981e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00c      	beq.n	800980e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	4618      	mov	r0, r3
 8009802:	f7fa fff4 	bl	80047ee <lwip_htonl>
 8009806:	4603      	mov	r3, r0
 8009808:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800980a:	2b00      	cmp	r3, #0
 800980c:	dc20      	bgt.n	8009850 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	8b5b      	ldrh	r3, [r3, #26]
 8009812:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009816:	b29a      	uxth	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800981c:	e018      	b.n	8009850 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	4618      	mov	r0, r3
 800982c:	f7fa ffdf 	bl	80047ee <lwip_htonl>
 8009830:	4603      	mov	r3, r0
 8009832:	1ae3      	subs	r3, r4, r3
 8009834:	2b00      	cmp	r3, #0
 8009836:	dc0b      	bgt.n	8009850 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	8b5b      	ldrh	r3, [r3, #26]
 800983c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009840:	b29a      	uxth	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009846:	e003      	b.n	8009850 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f001 ff85 	bl	800b758 <tcp_send_empty_ack>
 800984e:	e000      	b.n	8009852 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009850:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009856:	2b00      	cmp	r3, #0
 8009858:	d05b      	beq.n	8009912 <tcp_receive+0x50a>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800985e:	4b60      	ldr	r3, [pc, #384]	; (80099e0 <tcp_receive+0x5d8>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	2b00      	cmp	r3, #0
 8009866:	da54      	bge.n	8009912 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009868:	4b5e      	ldr	r3, [pc, #376]	; (80099e4 <tcp_receive+0x5dc>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	b29a      	uxth	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009872:	b29b      	uxth	r3, r3
 8009874:	1ad3      	subs	r3, r2, r3
 8009876:	b29b      	uxth	r3, r3
 8009878:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800987c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009886:	10db      	asrs	r3, r3, #3
 8009888:	b21b      	sxth	r3, r3
 800988a:	b29b      	uxth	r3, r3
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	b29b      	uxth	r3, r3
 8009890:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800989a:	b29a      	uxth	r2, r3
 800989c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80098a0:	4413      	add	r3, r2
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	b21a      	sxth	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80098aa:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	da05      	bge.n	80098be <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80098b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80098b6:	425b      	negs	r3, r3
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80098be:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80098c8:	109b      	asrs	r3, r3, #2
 80098ca:	b21b      	sxth	r3, r3
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80098dc:	b29a      	uxth	r2, r3
 80098de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80098e2:	4413      	add	r3, r2
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	b21a      	sxth	r2, r3
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80098f2:	10db      	asrs	r3, r3, #3
 80098f4:	b21b      	sxth	r3, r3
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80098fe:	b29b      	uxth	r3, r3
 8009900:	4413      	add	r3, r2
 8009902:	b29b      	uxth	r3, r3
 8009904:	b21a      	sxth	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009912:	4b35      	ldr	r3, [pc, #212]	; (80099e8 <tcp_receive+0x5e0>)
 8009914:	881b      	ldrh	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 84e1 	beq.w	800a2de <tcp_receive+0xed6>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	7d1b      	ldrb	r3, [r3, #20]
 8009920:	2b06      	cmp	r3, #6
 8009922:	f200 84dc 	bhi.w	800a2de <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800992a:	4b30      	ldr	r3, [pc, #192]	; (80099ec <tcp_receive+0x5e4>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	3b01      	subs	r3, #1
 8009932:	2b00      	cmp	r3, #0
 8009934:	f2c0 808e 	blt.w	8009a54 <tcp_receive+0x64c>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800993c:	4b2a      	ldr	r3, [pc, #168]	; (80099e8 <tcp_receive+0x5e0>)
 800993e:	881b      	ldrh	r3, [r3, #0]
 8009940:	4619      	mov	r1, r3
 8009942:	4b2a      	ldr	r3, [pc, #168]	; (80099ec <tcp_receive+0x5e4>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	440b      	add	r3, r1
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	3301      	adds	r3, #1
 800994c:	2b00      	cmp	r3, #0
 800994e:	f300 8081 	bgt.w	8009a54 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009952:	4b27      	ldr	r3, [pc, #156]	; (80099f0 <tcp_receive+0x5e8>)
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800995c:	4b23      	ldr	r3, [pc, #140]	; (80099ec <tcp_receive+0x5e4>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009964:	4b22      	ldr	r3, [pc, #136]	; (80099f0 <tcp_receive+0x5e8>)
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d106      	bne.n	800997a <tcp_receive+0x572>
 800996c:	4b21      	ldr	r3, [pc, #132]	; (80099f4 <tcp_receive+0x5ec>)
 800996e:	f240 5294 	movw	r2, #1428	; 0x594
 8009972:	4921      	ldr	r1, [pc, #132]	; (80099f8 <tcp_receive+0x5f0>)
 8009974:	4821      	ldr	r0, [pc, #132]	; (80099fc <tcp_receive+0x5f4>)
 8009976:	f004 fe5f 	bl	800e638 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009980:	4293      	cmp	r3, r2
 8009982:	d906      	bls.n	8009992 <tcp_receive+0x58a>
 8009984:	4b1b      	ldr	r3, [pc, #108]	; (80099f4 <tcp_receive+0x5ec>)
 8009986:	f240 5295 	movw	r2, #1429	; 0x595
 800998a:	491d      	ldr	r1, [pc, #116]	; (8009a00 <tcp_receive+0x5f8>)
 800998c:	481b      	ldr	r0, [pc, #108]	; (80099fc <tcp_receive+0x5f4>)
 800998e:	f004 fe53 	bl	800e638 <iprintf>
      off = (u16_t)off32;
 8009992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009994:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009998:	4b15      	ldr	r3, [pc, #84]	; (80099f0 <tcp_receive+0x5e8>)
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	891b      	ldrh	r3, [r3, #8]
 800999e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d906      	bls.n	80099b4 <tcp_receive+0x5ac>
 80099a6:	4b13      	ldr	r3, [pc, #76]	; (80099f4 <tcp_receive+0x5ec>)
 80099a8:	f240 5297 	movw	r2, #1431	; 0x597
 80099ac:	4915      	ldr	r1, [pc, #84]	; (8009a04 <tcp_receive+0x5fc>)
 80099ae:	4813      	ldr	r0, [pc, #76]	; (80099fc <tcp_receive+0x5f4>)
 80099b0:	f004 fe42 	bl	800e638 <iprintf>
      inseg.len -= off;
 80099b4:	4b0e      	ldr	r3, [pc, #56]	; (80099f0 <tcp_receive+0x5e8>)
 80099b6:	891a      	ldrh	r2, [r3, #8]
 80099b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80099bc:	1ad3      	subs	r3, r2, r3
 80099be:	b29a      	uxth	r2, r3
 80099c0:	4b0b      	ldr	r3, [pc, #44]	; (80099f0 <tcp_receive+0x5e8>)
 80099c2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80099c4:	4b0a      	ldr	r3, [pc, #40]	; (80099f0 <tcp_receive+0x5e8>)
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	891a      	ldrh	r2, [r3, #8]
 80099ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80099d2:	e029      	b.n	8009a28 <tcp_receive+0x620>
 80099d4:	08010a2c 	.word	0x08010a2c
 80099d8:	08010a34 	.word	0x08010a34
 80099dc:	200000f8 	.word	0x200000f8
 80099e0:	200000f4 	.word	0x200000f4
 80099e4:	20006934 	.word	0x20006934
 80099e8:	200000fa 	.word	0x200000fa
 80099ec:	200000f0 	.word	0x200000f0
 80099f0:	200000d0 	.word	0x200000d0
 80099f4:	080106c4 	.word	0x080106c4
 80099f8:	08010a3c 	.word	0x08010a3c
 80099fc:	08010710 	.word	0x08010710
 8009a00:	08010a4c 	.word	0x08010a4c
 8009a04:	08010a5c 	.word	0x08010a5c
        off -= p->len;
 8009a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a0a:	895b      	ldrh	r3, [r3, #10]
 8009a0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a18:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009a1a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a1e:	2200      	movs	r2, #0
 8009a20:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a2a:	895b      	ldrh	r3, [r3, #10]
 8009a2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d8e9      	bhi.n	8009a08 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009a34:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009a38:	4619      	mov	r1, r3
 8009a3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009a3c:	f7fc f8ec 	bl	8005c18 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a44:	4a91      	ldr	r2, [pc, #580]	; (8009c8c <tcp_receive+0x884>)
 8009a46:	6013      	str	r3, [r2, #0]
 8009a48:	4b91      	ldr	r3, [pc, #580]	; (8009c90 <tcp_receive+0x888>)
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	4a8f      	ldr	r2, [pc, #572]	; (8009c8c <tcp_receive+0x884>)
 8009a4e:	6812      	ldr	r2, [r2, #0]
 8009a50:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009a52:	e00d      	b.n	8009a70 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009a54:	4b8d      	ldr	r3, [pc, #564]	; (8009c8c <tcp_receive+0x884>)
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	da06      	bge.n	8009a70 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	8b5b      	ldrh	r3, [r3, #26]
 8009a66:	f043 0302 	orr.w	r3, r3, #2
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009a70:	4b86      	ldr	r3, [pc, #536]	; (8009c8c <tcp_receive+0x884>)
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	f2c0 842a 	blt.w	800a2d4 <tcp_receive+0xecc>
 8009a80:	4b82      	ldr	r3, [pc, #520]	; (8009c8c <tcp_receive+0x884>)
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	6879      	ldr	r1, [r7, #4]
 8009a8a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a8c:	440b      	add	r3, r1
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	3301      	adds	r3, #1
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f300 841e 	bgt.w	800a2d4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a9c:	4b7b      	ldr	r3, [pc, #492]	; (8009c8c <tcp_receive+0x884>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	f040 829a 	bne.w	8009fda <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009aa6:	4b7a      	ldr	r3, [pc, #488]	; (8009c90 <tcp_receive+0x888>)
 8009aa8:	891c      	ldrh	r4, [r3, #8]
 8009aaa:	4b79      	ldr	r3, [pc, #484]	; (8009c90 <tcp_receive+0x888>)
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	899b      	ldrh	r3, [r3, #12]
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fa fe86 	bl	80047c4 <lwip_htons>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	f003 0303 	and.w	r3, r3, #3
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d001      	beq.n	8009ac8 <tcp_receive+0x6c0>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e000      	b.n	8009aca <tcp_receive+0x6c2>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	4423      	add	r3, r4
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	4b71      	ldr	r3, [pc, #452]	; (8009c94 <tcp_receive+0x88c>)
 8009ad0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009ad6:	4b6f      	ldr	r3, [pc, #444]	; (8009c94 <tcp_receive+0x88c>)
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d275      	bcs.n	8009bca <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009ade:	4b6c      	ldr	r3, [pc, #432]	; (8009c90 <tcp_receive+0x888>)
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	899b      	ldrh	r3, [r3, #12]
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fa fe6c 	bl	80047c4 <lwip_htons>
 8009aec:	4603      	mov	r3, r0
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d01f      	beq.n	8009b38 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009af8:	4b65      	ldr	r3, [pc, #404]	; (8009c90 <tcp_receive+0x888>)
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	899b      	ldrh	r3, [r3, #12]
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	b21b      	sxth	r3, r3
 8009b02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009b06:	b21c      	sxth	r4, r3
 8009b08:	4b61      	ldr	r3, [pc, #388]	; (8009c90 <tcp_receive+0x888>)
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	899b      	ldrh	r3, [r3, #12]
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7fa fe57 	bl	80047c4 <lwip_htons>
 8009b16:	4603      	mov	r3, r0
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fa fe4e 	bl	80047c4 <lwip_htons>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	b21b      	sxth	r3, r3
 8009b2c:	4323      	orrs	r3, r4
 8009b2e:	b21a      	sxth	r2, r3
 8009b30:	4b57      	ldr	r3, [pc, #348]	; (8009c90 <tcp_receive+0x888>)
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	b292      	uxth	r2, r2
 8009b36:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b3c:	4b54      	ldr	r3, [pc, #336]	; (8009c90 <tcp_receive+0x888>)
 8009b3e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009b40:	4b53      	ldr	r3, [pc, #332]	; (8009c90 <tcp_receive+0x888>)
 8009b42:	68db      	ldr	r3, [r3, #12]
 8009b44:	899b      	ldrh	r3, [r3, #12]
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fa fe3b 	bl	80047c4 <lwip_htons>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	f003 0302 	and.w	r3, r3, #2
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d005      	beq.n	8009b66 <tcp_receive+0x75e>
            inseg.len -= 1;
 8009b5a:	4b4d      	ldr	r3, [pc, #308]	; (8009c90 <tcp_receive+0x888>)
 8009b5c:	891b      	ldrh	r3, [r3, #8]
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	4b4b      	ldr	r3, [pc, #300]	; (8009c90 <tcp_receive+0x888>)
 8009b64:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009b66:	4b4a      	ldr	r3, [pc, #296]	; (8009c90 <tcp_receive+0x888>)
 8009b68:	685a      	ldr	r2, [r3, #4]
 8009b6a:	4b49      	ldr	r3, [pc, #292]	; (8009c90 <tcp_receive+0x888>)
 8009b6c:	891b      	ldrh	r3, [r3, #8]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	4610      	mov	r0, r2
 8009b72:	f7fb ff51 	bl	8005a18 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009b76:	4b46      	ldr	r3, [pc, #280]	; (8009c90 <tcp_receive+0x888>)
 8009b78:	891c      	ldrh	r4, [r3, #8]
 8009b7a:	4b45      	ldr	r3, [pc, #276]	; (8009c90 <tcp_receive+0x888>)
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	899b      	ldrh	r3, [r3, #12]
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7fa fe1e 	bl	80047c4 <lwip_htons>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f003 0303 	and.w	r3, r3, #3
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d001      	beq.n	8009b98 <tcp_receive+0x790>
 8009b94:	2301      	movs	r3, #1
 8009b96:	e000      	b.n	8009b9a <tcp_receive+0x792>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4423      	add	r3, r4
 8009b9c:	b29a      	uxth	r2, r3
 8009b9e:	4b3d      	ldr	r3, [pc, #244]	; (8009c94 <tcp_receive+0x88c>)
 8009ba0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009ba2:	4b3c      	ldr	r3, [pc, #240]	; (8009c94 <tcp_receive+0x88c>)
 8009ba4:	881b      	ldrh	r3, [r3, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	4b38      	ldr	r3, [pc, #224]	; (8009c8c <tcp_receive+0x884>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	441a      	add	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb2:	6879      	ldr	r1, [r7, #4]
 8009bb4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009bb6:	440b      	add	r3, r1
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	d006      	beq.n	8009bca <tcp_receive+0x7c2>
 8009bbc:	4b36      	ldr	r3, [pc, #216]	; (8009c98 <tcp_receive+0x890>)
 8009bbe:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8009bc2:	4936      	ldr	r1, [pc, #216]	; (8009c9c <tcp_receive+0x894>)
 8009bc4:	4836      	ldr	r0, [pc, #216]	; (8009ca0 <tcp_receive+0x898>)
 8009bc6:	f004 fd37 	bl	800e638 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 80e7 	beq.w	8009da2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009bd4:	4b2e      	ldr	r3, [pc, #184]	; (8009c90 <tcp_receive+0x888>)
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	899b      	ldrh	r3, [r3, #12]
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7fa fdf1 	bl	80047c4 <lwip_htons>
 8009be2:	4603      	mov	r3, r0
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	f003 0301 	and.w	r3, r3, #1
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d010      	beq.n	8009c10 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009bee:	e00a      	b.n	8009c06 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bf4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f7fd fcb1 	bl	8007568 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1f0      	bne.n	8009bf0 <tcp_receive+0x7e8>
 8009c0e:	e0c8      	b.n	8009da2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c14:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009c16:	e052      	b.n	8009cbe <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	899b      	ldrh	r3, [r3, #12]
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7fa fdcf 	bl	80047c4 <lwip_htons>
 8009c26:	4603      	mov	r3, r0
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d03d      	beq.n	8009cae <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009c32:	4b17      	ldr	r3, [pc, #92]	; (8009c90 <tcp_receive+0x888>)
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	899b      	ldrh	r3, [r3, #12]
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fa fdc2 	bl	80047c4 <lwip_htons>
 8009c40:	4603      	mov	r3, r0
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d130      	bne.n	8009cae <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009c4c:	4b10      	ldr	r3, [pc, #64]	; (8009c90 <tcp_receive+0x888>)
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	899b      	ldrh	r3, [r3, #12]
 8009c52:	b29c      	uxth	r4, r3
 8009c54:	2001      	movs	r0, #1
 8009c56:	f7fa fdb5 	bl	80047c4 <lwip_htons>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	4b0c      	ldr	r3, [pc, #48]	; (8009c90 <tcp_receive+0x888>)
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	4322      	orrs	r2, r4
 8009c64:	b292      	uxth	r2, r2
 8009c66:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009c68:	4b09      	ldr	r3, [pc, #36]	; (8009c90 <tcp_receive+0x888>)
 8009c6a:	891c      	ldrh	r4, [r3, #8]
 8009c6c:	4b08      	ldr	r3, [pc, #32]	; (8009c90 <tcp_receive+0x888>)
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	899b      	ldrh	r3, [r3, #12]
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7fa fda5 	bl	80047c4 <lwip_htons>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	f003 0303 	and.w	r3, r3, #3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00e      	beq.n	8009ca4 <tcp_receive+0x89c>
 8009c86:	2301      	movs	r3, #1
 8009c88:	e00d      	b.n	8009ca6 <tcp_receive+0x89e>
 8009c8a:	bf00      	nop
 8009c8c:	200000f0 	.word	0x200000f0
 8009c90:	200000d0 	.word	0x200000d0
 8009c94:	200000fa 	.word	0x200000fa
 8009c98:	080106c4 	.word	0x080106c4
 8009c9c:	08010a6c 	.word	0x08010a6c
 8009ca0:	08010710 	.word	0x08010710
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4423      	add	r3, r4
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	4b98      	ldr	r3, [pc, #608]	; (8009f0c <tcp_receive+0xb04>)
 8009cac:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009cb8:	6938      	ldr	r0, [r7, #16]
 8009cba:	f7fd fc55 	bl	8007568 <tcp_seg_free>
            while (next &&
 8009cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00e      	beq.n	8009ce2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009cc4:	4b91      	ldr	r3, [pc, #580]	; (8009f0c <tcp_receive+0xb04>)
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	461a      	mov	r2, r3
 8009cca:	4b91      	ldr	r3, [pc, #580]	; (8009f10 <tcp_receive+0xb08>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	441a      	add	r2, r3
 8009cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cd8:	8909      	ldrh	r1, [r1, #8]
 8009cda:	440b      	add	r3, r1
 8009cdc:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	da9a      	bge.n	8009c18 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d059      	beq.n	8009d9c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009ce8:	4b88      	ldr	r3, [pc, #544]	; (8009f0c <tcp_receive+0xb04>)
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	461a      	mov	r2, r3
 8009cee:	4b88      	ldr	r3, [pc, #544]	; (8009f10 <tcp_receive+0xb08>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	441a      	add	r2, r3
 8009cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	dd4d      	ble.n	8009d9c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	4b81      	ldr	r3, [pc, #516]	; (8009f10 <tcp_receive+0xb08>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	4b80      	ldr	r3, [pc, #512]	; (8009f14 <tcp_receive+0xb0c>)
 8009d14:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009d16:	4b7f      	ldr	r3, [pc, #508]	; (8009f14 <tcp_receive+0xb0c>)
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	899b      	ldrh	r3, [r3, #12]
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fa fd50 	bl	80047c4 <lwip_htons>
 8009d24:	4603      	mov	r3, r0
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	f003 0302 	and.w	r3, r3, #2
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d005      	beq.n	8009d3c <tcp_receive+0x934>
                inseg.len -= 1;
 8009d30:	4b78      	ldr	r3, [pc, #480]	; (8009f14 <tcp_receive+0xb0c>)
 8009d32:	891b      	ldrh	r3, [r3, #8]
 8009d34:	3b01      	subs	r3, #1
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	4b76      	ldr	r3, [pc, #472]	; (8009f14 <tcp_receive+0xb0c>)
 8009d3a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009d3c:	4b75      	ldr	r3, [pc, #468]	; (8009f14 <tcp_receive+0xb0c>)
 8009d3e:	685a      	ldr	r2, [r3, #4]
 8009d40:	4b74      	ldr	r3, [pc, #464]	; (8009f14 <tcp_receive+0xb0c>)
 8009d42:	891b      	ldrh	r3, [r3, #8]
 8009d44:	4619      	mov	r1, r3
 8009d46:	4610      	mov	r0, r2
 8009d48:	f7fb fe66 	bl	8005a18 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009d4c:	4b71      	ldr	r3, [pc, #452]	; (8009f14 <tcp_receive+0xb0c>)
 8009d4e:	891c      	ldrh	r4, [r3, #8]
 8009d50:	4b70      	ldr	r3, [pc, #448]	; (8009f14 <tcp_receive+0xb0c>)
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	899b      	ldrh	r3, [r3, #12]
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7fa fd33 	bl	80047c4 <lwip_htons>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	f003 0303 	and.w	r3, r3, #3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <tcp_receive+0x966>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e000      	b.n	8009d70 <tcp_receive+0x968>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	4423      	add	r3, r4
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	4b65      	ldr	r3, [pc, #404]	; (8009f0c <tcp_receive+0xb04>)
 8009d76:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009d78:	4b64      	ldr	r3, [pc, #400]	; (8009f0c <tcp_receive+0xb04>)
 8009d7a:	881b      	ldrh	r3, [r3, #0]
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	4b64      	ldr	r3, [pc, #400]	; (8009f10 <tcp_receive+0xb08>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	441a      	add	r2, r3
 8009d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d006      	beq.n	8009d9c <tcp_receive+0x994>
 8009d8e:	4b62      	ldr	r3, [pc, #392]	; (8009f18 <tcp_receive+0xb10>)
 8009d90:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8009d94:	4961      	ldr	r1, [pc, #388]	; (8009f1c <tcp_receive+0xb14>)
 8009d96:	4862      	ldr	r0, [pc, #392]	; (8009f20 <tcp_receive+0xb18>)
 8009d98:	f004 fc4e 	bl	800e638 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009da0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009da2:	4b5a      	ldr	r3, [pc, #360]	; (8009f0c <tcp_receive+0xb04>)
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	461a      	mov	r2, r3
 8009da8:	4b59      	ldr	r3, [pc, #356]	; (8009f10 <tcp_receive+0xb08>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	441a      	add	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009db6:	4b55      	ldr	r3, [pc, #340]	; (8009f0c <tcp_receive+0xb04>)
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d206      	bcs.n	8009dcc <tcp_receive+0x9c4>
 8009dbe:	4b56      	ldr	r3, [pc, #344]	; (8009f18 <tcp_receive+0xb10>)
 8009dc0:	f240 6207 	movw	r2, #1543	; 0x607
 8009dc4:	4957      	ldr	r1, [pc, #348]	; (8009f24 <tcp_receive+0xb1c>)
 8009dc6:	4856      	ldr	r0, [pc, #344]	; (8009f20 <tcp_receive+0xb18>)
 8009dc8:	f004 fc36 	bl	800e638 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009dd0:	4b4e      	ldr	r3, [pc, #312]	; (8009f0c <tcp_receive+0xb04>)
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f7fc fea1 	bl	8006b24 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009de2:	4b4c      	ldr	r3, [pc, #304]	; (8009f14 <tcp_receive+0xb0c>)
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	891b      	ldrh	r3, [r3, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d006      	beq.n	8009dfa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009dec:	4b49      	ldr	r3, [pc, #292]	; (8009f14 <tcp_receive+0xb0c>)
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	4a4d      	ldr	r2, [pc, #308]	; (8009f28 <tcp_receive+0xb20>)
 8009df2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009df4:	4b47      	ldr	r3, [pc, #284]	; (8009f14 <tcp_receive+0xb0c>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009dfa:	4b46      	ldr	r3, [pc, #280]	; (8009f14 <tcp_receive+0xb0c>)
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	899b      	ldrh	r3, [r3, #12]
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fa fcde 	bl	80047c4 <lwip_htons>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f000 80b8 	beq.w	8009f86 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009e16:	4b45      	ldr	r3, [pc, #276]	; (8009f2c <tcp_receive+0xb24>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	f043 0320 	orr.w	r3, r3, #32
 8009e1e:	b2da      	uxtb	r2, r3
 8009e20:	4b42      	ldr	r3, [pc, #264]	; (8009f2c <tcp_receive+0xb24>)
 8009e22:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009e24:	e0af      	b.n	8009f86 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e2a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	4a36      	ldr	r2, [pc, #216]	; (8009f10 <tcp_receive+0xb08>)
 8009e36:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	891b      	ldrh	r3, [r3, #8]
 8009e3c:	461c      	mov	r4, r3
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	899b      	ldrh	r3, [r3, #12]
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fa fcbc 	bl	80047c4 <lwip_htons>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	f003 0303 	and.w	r3, r3, #3
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <tcp_receive+0xa54>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e000      	b.n	8009e5e <tcp_receive+0xa56>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	191a      	adds	r2, r3, r4
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e64:	441a      	add	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e6e:	461c      	mov	r4, r3
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	891b      	ldrh	r3, [r3, #8]
 8009e74:	461d      	mov	r5, r3
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	68db      	ldr	r3, [r3, #12]
 8009e7a:	899b      	ldrh	r3, [r3, #12]
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fa fca0 	bl	80047c4 <lwip_htons>
 8009e84:	4603      	mov	r3, r0
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	f003 0303 	and.w	r3, r3, #3
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <tcp_receive+0xa8c>
 8009e90:	2301      	movs	r3, #1
 8009e92:	e000      	b.n	8009e96 <tcp_receive+0xa8e>
 8009e94:	2300      	movs	r3, #0
 8009e96:	442b      	add	r3, r5
 8009e98:	429c      	cmp	r4, r3
 8009e9a:	d206      	bcs.n	8009eaa <tcp_receive+0xaa2>
 8009e9c:	4b1e      	ldr	r3, [pc, #120]	; (8009f18 <tcp_receive+0xb10>)
 8009e9e:	f240 622c 	movw	r2, #1580	; 0x62c
 8009ea2:	4923      	ldr	r1, [pc, #140]	; (8009f30 <tcp_receive+0xb28>)
 8009ea4:	481e      	ldr	r0, [pc, #120]	; (8009f20 <tcp_receive+0xb18>)
 8009ea6:	f004 fbc7 	bl	800e638 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	891b      	ldrh	r3, [r3, #8]
 8009eae:	461c      	mov	r4, r3
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	899b      	ldrh	r3, [r3, #12]
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fa fc83 	bl	80047c4 <lwip_htons>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	f003 0303 	and.w	r3, r3, #3
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <tcp_receive+0xac6>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e000      	b.n	8009ed0 <tcp_receive+0xac8>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	1919      	adds	r1, r3, r4
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009ed6:	b28b      	uxth	r3, r1
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7fc fe1f 	bl	8006b24 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	891b      	ldrh	r3, [r3, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d028      	beq.n	8009f42 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009ef0:	4b0d      	ldr	r3, [pc, #52]	; (8009f28 <tcp_receive+0xb20>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d01d      	beq.n	8009f34 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009ef8:	4b0b      	ldr	r3, [pc, #44]	; (8009f28 <tcp_receive+0xb20>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	4619      	mov	r1, r3
 8009f02:	4610      	mov	r0, r2
 8009f04:	f7fb ffd0 	bl	8005ea8 <pbuf_cat>
 8009f08:	e018      	b.n	8009f3c <tcp_receive+0xb34>
 8009f0a:	bf00      	nop
 8009f0c:	200000fa 	.word	0x200000fa
 8009f10:	200000f0 	.word	0x200000f0
 8009f14:	200000d0 	.word	0x200000d0
 8009f18:	080106c4 	.word	0x080106c4
 8009f1c:	08010aa4 	.word	0x08010aa4
 8009f20:	08010710 	.word	0x08010710
 8009f24:	08010ae0 	.word	0x08010ae0
 8009f28:	20000100 	.word	0x20000100
 8009f2c:	200000fd 	.word	0x200000fd
 8009f30:	08010b00 	.word	0x08010b00
            } else {
              recv_data = cseg->p;
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	4a70      	ldr	r2, [pc, #448]	; (800a0fc <tcp_receive+0xcf4>)
 8009f3a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	899b      	ldrh	r3, [r3, #12]
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fa fc3a 	bl	80047c4 <lwip_htons>
 8009f50:	4603      	mov	r3, r0
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	f003 0301 	and.w	r3, r3, #1
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00d      	beq.n	8009f78 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009f5c:	4b68      	ldr	r3, [pc, #416]	; (800a100 <tcp_receive+0xcf8>)
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	f043 0320 	orr.w	r3, r3, #32
 8009f64:	b2da      	uxtb	r2, r3
 8009f66:	4b66      	ldr	r3, [pc, #408]	; (800a100 <tcp_receive+0xcf8>)
 8009f68:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	7d1b      	ldrb	r3, [r3, #20]
 8009f6e:	2b04      	cmp	r3, #4
 8009f70:	d102      	bne.n	8009f78 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2207      	movs	r2, #7
 8009f76:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009f80:	68b8      	ldr	r0, [r7, #8]
 8009f82:	f7fd faf1 	bl	8007568 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d008      	beq.n	8009fa0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	f43f af43 	beq.w	8009e26 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	8b5b      	ldrh	r3, [r3, #26]
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00e      	beq.n	8009fca <tcp_receive+0xbc2>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	8b5b      	ldrh	r3, [r3, #26]
 8009fb0:	f023 0301 	bic.w	r3, r3, #1
 8009fb4:	b29a      	uxth	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	835a      	strh	r2, [r3, #26]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	8b5b      	ldrh	r3, [r3, #26]
 8009fbe:	f043 0302 	orr.w	r3, r3, #2
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009fc8:	e188      	b.n	800a2dc <tcp_receive+0xed4>
        tcp_ack(pcb);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	8b5b      	ldrh	r3, [r3, #26]
 8009fce:	f043 0301 	orr.w	r3, r3, #1
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009fd8:	e180      	b.n	800a2dc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d106      	bne.n	8009ff0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009fe2:	4848      	ldr	r0, [pc, #288]	; (800a104 <tcp_receive+0xcfc>)
 8009fe4:	f7fd faf6 	bl	80075d4 <tcp_seg_copy>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	675a      	str	r2, [r3, #116]	; 0x74
 8009fee:	e16d      	b.n	800a2cc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ffa:	e157      	b.n	800a2ac <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	4b41      	ldr	r3, [pc, #260]	; (800a108 <tcp_receive+0xd00>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	429a      	cmp	r2, r3
 800a008:	d11d      	bne.n	800a046 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a00a:	4b3e      	ldr	r3, [pc, #248]	; (800a104 <tcp_receive+0xcfc>)
 800a00c:	891a      	ldrh	r2, [r3, #8]
 800a00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a010:	891b      	ldrh	r3, [r3, #8]
 800a012:	429a      	cmp	r2, r3
 800a014:	f240 814f 	bls.w	800a2b6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a018:	483a      	ldr	r0, [pc, #232]	; (800a104 <tcp_receive+0xcfc>)
 800a01a:	f7fd fadb 	bl	80075d4 <tcp_seg_copy>
 800a01e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	2b00      	cmp	r3, #0
 800a024:	f000 8149 	beq.w	800a2ba <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800a028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d003      	beq.n	800a036 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800a02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	601a      	str	r2, [r3, #0]
 800a034:	e002      	b.n	800a03c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a03c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a03e:	6978      	ldr	r0, [r7, #20]
 800a040:	f7ff f8de 	bl	8009200 <tcp_oos_insert_segment>
                }
                break;
 800a044:	e139      	b.n	800a2ba <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d117      	bne.n	800a07c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a04c:	4b2e      	ldr	r3, [pc, #184]	; (800a108 <tcp_receive+0xd00>)
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	2b00      	cmp	r3, #0
 800a05a:	da57      	bge.n	800a10c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a05c:	4829      	ldr	r0, [pc, #164]	; (800a104 <tcp_receive+0xcfc>)
 800a05e:	f7fd fab9 	bl	80075d4 <tcp_seg_copy>
 800a062:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	2b00      	cmp	r3, #0
 800a068:	f000 8129 	beq.w	800a2be <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	69ba      	ldr	r2, [r7, #24]
 800a070:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a072:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a074:	69b8      	ldr	r0, [r7, #24]
 800a076:	f7ff f8c3 	bl	8009200 <tcp_oos_insert_segment>
                  }
                  break;
 800a07a:	e120      	b.n	800a2be <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a07c:	4b22      	ldr	r3, [pc, #136]	; (800a108 <tcp_receive+0xd00>)
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	3b01      	subs	r3, #1
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	db3e      	blt.n	800a10c <tcp_receive+0xd04>
 800a08e:	4b1e      	ldr	r3, [pc, #120]	; (800a108 <tcp_receive+0xd00>)
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	3301      	adds	r3, #1
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	dc35      	bgt.n	800a10c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a0a0:	4818      	ldr	r0, [pc, #96]	; (800a104 <tcp_receive+0xcfc>)
 800a0a2:	f7fd fa97 	bl	80075d4 <tcp_seg_copy>
 800a0a6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f000 8109 	beq.w	800a2c2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0b8:	8912      	ldrh	r2, [r2, #8]
 800a0ba:	441a      	add	r2, r3
 800a0bc:	4b12      	ldr	r3, [pc, #72]	; (800a108 <tcp_receive+0xd00>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	dd12      	ble.n	800a0ec <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a0c6:	4b10      	ldr	r3, [pc, #64]	; (800a108 <tcp_receive+0xd00>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0da:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0de:	685a      	ldr	r2, [r3, #4]
 800a0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e2:	891b      	ldrh	r3, [r3, #8]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	f7fb fc96 	bl	8005a18 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ee:	69fa      	ldr	r2, [r7, #28]
 800a0f0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a0f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0f4:	69f8      	ldr	r0, [r7, #28]
 800a0f6:	f7ff f883 	bl	8009200 <tcp_oos_insert_segment>
                  }
                  break;
 800a0fa:	e0e2      	b.n	800a2c2 <tcp_receive+0xeba>
 800a0fc:	20000100 	.word	0x20000100
 800a100:	200000fd 	.word	0x200000fd
 800a104:	200000d0 	.word	0x200000d0
 800a108:	200000f0 	.word	0x200000f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	f040 80c6 	bne.w	800a2a6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a11a:	4b80      	ldr	r3, [pc, #512]	; (800a31c <tcp_receive+0xf14>)
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a126:	2b00      	cmp	r3, #0
 800a128:	f340 80bd 	ble.w	800a2a6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	899b      	ldrh	r3, [r3, #12]
 800a132:	b29b      	uxth	r3, r3
 800a134:	4618      	mov	r0, r3
 800a136:	f7fa fb45 	bl	80047c4 <lwip_htons>
 800a13a:	4603      	mov	r3, r0
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	f040 80bf 	bne.w	800a2c6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a148:	4875      	ldr	r0, [pc, #468]	; (800a320 <tcp_receive+0xf18>)
 800a14a:	f7fd fa43 	bl	80075d4 <tcp_seg_copy>
 800a14e:	4602      	mov	r2, r0
 800a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a152:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f000 80b6 	beq.w	800a2ca <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a166:	8912      	ldrh	r2, [r2, #8]
 800a168:	441a      	add	r2, r3
 800a16a:	4b6c      	ldr	r3, [pc, #432]	; (800a31c <tcp_receive+0xf14>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	dd12      	ble.n	800a19a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a174:	4b69      	ldr	r3, [pc, #420]	; (800a31c <tcp_receive+0xf14>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	b29a      	uxth	r2, r3
 800a17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	b29b      	uxth	r3, r3
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	b29a      	uxth	r2, r3
 800a186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a188:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18c:	685a      	ldr	r2, [r3, #4]
 800a18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a190:	891b      	ldrh	r3, [r3, #8]
 800a192:	4619      	mov	r1, r3
 800a194:	4610      	mov	r0, r2
 800a196:	f7fb fc3f 	bl	8005a18 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a19a:	4b62      	ldr	r3, [pc, #392]	; (800a324 <tcp_receive+0xf1c>)
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	4b5e      	ldr	r3, [pc, #376]	; (800a31c <tcp_receive+0xf14>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	441a      	add	r2, r3
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1aa:	6879      	ldr	r1, [r7, #4]
 800a1ac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a1ae:	440b      	add	r3, r1
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f340 8089 	ble.w	800a2ca <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	899b      	ldrh	r3, [r3, #12]
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7fa fafe 	bl	80047c4 <lwip_htons>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d022      	beq.n	800a21a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	899b      	ldrh	r3, [r3, #12]
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	b21b      	sxth	r3, r3
 800a1e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a1e4:	b21c      	sxth	r4, r3
 800a1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	899b      	ldrh	r3, [r3, #12]
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fa fae7 	bl	80047c4 <lwip_htons>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a200:	b29b      	uxth	r3, r3
 800a202:	4618      	mov	r0, r3
 800a204:	f7fa fade 	bl	80047c4 <lwip_htons>
 800a208:	4603      	mov	r3, r0
 800a20a:	b21b      	sxth	r3, r3
 800a20c:	4323      	orrs	r3, r4
 800a20e:	b21a      	sxth	r2, r3
 800a210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	b292      	uxth	r2, r2
 800a218:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21e:	b29a      	uxth	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a224:	4413      	add	r3, r2
 800a226:	b299      	uxth	r1, r3
 800a228:	4b3c      	ldr	r3, [pc, #240]	; (800a31c <tcp_receive+0xf14>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	1a8a      	subs	r2, r1, r2
 800a234:	b292      	uxth	r2, r2
 800a236:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	891b      	ldrh	r3, [r3, #8]
 800a244:	4619      	mov	r1, r3
 800a246:	4610      	mov	r0, r2
 800a248:	f7fb fbe6 	bl	8005a18 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	891c      	ldrh	r4, [r3, #8]
 800a252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	899b      	ldrh	r3, [r3, #12]
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fa fab1 	bl	80047c4 <lwip_htons>
 800a262:	4603      	mov	r3, r0
 800a264:	b2db      	uxtb	r3, r3
 800a266:	f003 0303 	and.w	r3, r3, #3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <tcp_receive+0xe6a>
 800a26e:	2301      	movs	r3, #1
 800a270:	e000      	b.n	800a274 <tcp_receive+0xe6c>
 800a272:	2300      	movs	r3, #0
 800a274:	4423      	add	r3, r4
 800a276:	b29a      	uxth	r2, r3
 800a278:	4b2a      	ldr	r3, [pc, #168]	; (800a324 <tcp_receive+0xf1c>)
 800a27a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a27c:	4b29      	ldr	r3, [pc, #164]	; (800a324 <tcp_receive+0xf1c>)
 800a27e:	881b      	ldrh	r3, [r3, #0]
 800a280:	461a      	mov	r2, r3
 800a282:	4b26      	ldr	r3, [pc, #152]	; (800a31c <tcp_receive+0xf14>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	441a      	add	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	6879      	ldr	r1, [r7, #4]
 800a28e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a290:	440b      	add	r3, r1
 800a292:	429a      	cmp	r2, r3
 800a294:	d019      	beq.n	800a2ca <tcp_receive+0xec2>
 800a296:	4b24      	ldr	r3, [pc, #144]	; (800a328 <tcp_receive+0xf20>)
 800a298:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a29c:	4923      	ldr	r1, [pc, #140]	; (800a32c <tcp_receive+0xf24>)
 800a29e:	4824      	ldr	r0, [pc, #144]	; (800a330 <tcp_receive+0xf28>)
 800a2a0:	f004 f9ca 	bl	800e638 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a2a4:	e011      	b.n	800a2ca <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	f47f aea4 	bne.w	8009ffc <tcp_receive+0xbf4>
 800a2b4:	e00a      	b.n	800a2cc <tcp_receive+0xec4>
                break;
 800a2b6:	bf00      	nop
 800a2b8:	e008      	b.n	800a2cc <tcp_receive+0xec4>
                break;
 800a2ba:	bf00      	nop
 800a2bc:	e006      	b.n	800a2cc <tcp_receive+0xec4>
                  break;
 800a2be:	bf00      	nop
 800a2c0:	e004      	b.n	800a2cc <tcp_receive+0xec4>
                  break;
 800a2c2:	bf00      	nop
 800a2c4:	e002      	b.n	800a2cc <tcp_receive+0xec4>
                  break;
 800a2c6:	bf00      	nop
 800a2c8:	e000      	b.n	800a2cc <tcp_receive+0xec4>
                break;
 800a2ca:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f001 fa43 	bl	800b758 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a2d2:	e003      	b.n	800a2dc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f001 fa3f 	bl	800b758 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a2da:	e01a      	b.n	800a312 <tcp_receive+0xf0a>
 800a2dc:	e019      	b.n	800a312 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a2de:	4b0f      	ldr	r3, [pc, #60]	; (800a31c <tcp_receive+0xf14>)
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e6:	1ad3      	subs	r3, r2, r3
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	db0a      	blt.n	800a302 <tcp_receive+0xefa>
 800a2ec:	4b0b      	ldr	r3, [pc, #44]	; (800a31c <tcp_receive+0xf14>)
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f4:	6879      	ldr	r1, [r7, #4]
 800a2f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a2f8:	440b      	add	r3, r1
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	dd07      	ble.n	800a312 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	8b5b      	ldrh	r3, [r3, #26]
 800a306:	f043 0302 	orr.w	r3, r3, #2
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a310:	e7ff      	b.n	800a312 <tcp_receive+0xf0a>
 800a312:	bf00      	nop
 800a314:	3750      	adds	r7, #80	; 0x50
 800a316:	46bd      	mov	sp, r7
 800a318:	bdb0      	pop	{r4, r5, r7, pc}
 800a31a:	bf00      	nop
 800a31c:	200000f0 	.word	0x200000f0
 800a320:	200000d0 	.word	0x200000d0
 800a324:	200000fa 	.word	0x200000fa
 800a328:	080106c4 	.word	0x080106c4
 800a32c:	08010a6c 	.word	0x08010a6c
 800a330:	08010710 	.word	0x08010710

0800a334 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a33a:	4b15      	ldr	r3, [pc, #84]	; (800a390 <tcp_get_next_optbyte+0x5c>)
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	1c5a      	adds	r2, r3, #1
 800a340:	b291      	uxth	r1, r2
 800a342:	4a13      	ldr	r2, [pc, #76]	; (800a390 <tcp_get_next_optbyte+0x5c>)
 800a344:	8011      	strh	r1, [r2, #0]
 800a346:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a348:	4b12      	ldr	r3, [pc, #72]	; (800a394 <tcp_get_next_optbyte+0x60>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d004      	beq.n	800a35a <tcp_get_next_optbyte+0x26>
 800a350:	4b11      	ldr	r3, [pc, #68]	; (800a398 <tcp_get_next_optbyte+0x64>)
 800a352:	881b      	ldrh	r3, [r3, #0]
 800a354:	88fa      	ldrh	r2, [r7, #6]
 800a356:	429a      	cmp	r2, r3
 800a358:	d208      	bcs.n	800a36c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a35a:	4b10      	ldr	r3, [pc, #64]	; (800a39c <tcp_get_next_optbyte+0x68>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	3314      	adds	r3, #20
 800a360:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a362:	88fb      	ldrh	r3, [r7, #6]
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	4413      	add	r3, r2
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	e00b      	b.n	800a384 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a36c:	88fb      	ldrh	r3, [r7, #6]
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	4b09      	ldr	r3, [pc, #36]	; (800a398 <tcp_get_next_optbyte+0x64>)
 800a372:	881b      	ldrh	r3, [r3, #0]
 800a374:	b2db      	uxtb	r3, r3
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a37a:	4b06      	ldr	r3, [pc, #24]	; (800a394 <tcp_get_next_optbyte+0x60>)
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	797b      	ldrb	r3, [r7, #5]
 800a380:	4413      	add	r3, r2
 800a382:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a384:	4618      	mov	r0, r3
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	200000ec 	.word	0x200000ec
 800a394:	200000e8 	.word	0x200000e8
 800a398:	200000e6 	.word	0x200000e6
 800a39c:	200000e0 	.word	0x200000e0

0800a3a0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d106      	bne.n	800a3bc <tcp_parseopt+0x1c>
 800a3ae:	4b31      	ldr	r3, [pc, #196]	; (800a474 <tcp_parseopt+0xd4>)
 800a3b0:	f240 727d 	movw	r2, #1917	; 0x77d
 800a3b4:	4930      	ldr	r1, [pc, #192]	; (800a478 <tcp_parseopt+0xd8>)
 800a3b6:	4831      	ldr	r0, [pc, #196]	; (800a47c <tcp_parseopt+0xdc>)
 800a3b8:	f004 f93e 	bl	800e638 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a3bc:	4b30      	ldr	r3, [pc, #192]	; (800a480 <tcp_parseopt+0xe0>)
 800a3be:	881b      	ldrh	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d053      	beq.n	800a46c <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a3c4:	4b2f      	ldr	r3, [pc, #188]	; (800a484 <tcp_parseopt+0xe4>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	801a      	strh	r2, [r3, #0]
 800a3ca:	e043      	b.n	800a454 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800a3cc:	f7ff ffb2 	bl	800a334 <tcp_get_next_optbyte>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a3d4:	7bfb      	ldrb	r3, [r7, #15]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d03c      	beq.n	800a454 <tcp_parseopt+0xb4>
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d002      	beq.n	800a3e4 <tcp_parseopt+0x44>
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d03f      	beq.n	800a462 <tcp_parseopt+0xc2>
 800a3e2:	e026      	b.n	800a432 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a3e4:	f7ff ffa6 	bl	800a334 <tcp_get_next_optbyte>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b04      	cmp	r3, #4
 800a3ec:	d13b      	bne.n	800a466 <tcp_parseopt+0xc6>
 800a3ee:	4b25      	ldr	r3, [pc, #148]	; (800a484 <tcp_parseopt+0xe4>)
 800a3f0:	881b      	ldrh	r3, [r3, #0]
 800a3f2:	3302      	adds	r3, #2
 800a3f4:	4a22      	ldr	r2, [pc, #136]	; (800a480 <tcp_parseopt+0xe0>)
 800a3f6:	8812      	ldrh	r2, [r2, #0]
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	dc34      	bgt.n	800a466 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a3fc:	f7ff ff9a 	bl	800a334 <tcp_get_next_optbyte>
 800a400:	4603      	mov	r3, r0
 800a402:	b29b      	uxth	r3, r3
 800a404:	021b      	lsls	r3, r3, #8
 800a406:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a408:	f7ff ff94 	bl	800a334 <tcp_get_next_optbyte>
 800a40c:	4603      	mov	r3, r0
 800a40e:	b29a      	uxth	r2, r3
 800a410:	89bb      	ldrh	r3, [r7, #12]
 800a412:	4313      	orrs	r3, r2
 800a414:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a416:	89bb      	ldrh	r3, [r7, #12]
 800a418:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a41c:	d804      	bhi.n	800a428 <tcp_parseopt+0x88>
 800a41e:	89bb      	ldrh	r3, [r7, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <tcp_parseopt+0x88>
 800a424:	89ba      	ldrh	r2, [r7, #12]
 800a426:	e001      	b.n	800a42c <tcp_parseopt+0x8c>
 800a428:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a430:	e010      	b.n	800a454 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a432:	f7ff ff7f 	bl	800a334 <tcp_get_next_optbyte>
 800a436:	4603      	mov	r3, r0
 800a438:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a43a:	7afb      	ldrb	r3, [r7, #11]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d914      	bls.n	800a46a <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a440:	7afb      	ldrb	r3, [r7, #11]
 800a442:	b29a      	uxth	r2, r3
 800a444:	4b0f      	ldr	r3, [pc, #60]	; (800a484 <tcp_parseopt+0xe4>)
 800a446:	881b      	ldrh	r3, [r3, #0]
 800a448:	4413      	add	r3, r2
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	3b02      	subs	r3, #2
 800a44e:	b29a      	uxth	r2, r3
 800a450:	4b0c      	ldr	r3, [pc, #48]	; (800a484 <tcp_parseopt+0xe4>)
 800a452:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a454:	4b0b      	ldr	r3, [pc, #44]	; (800a484 <tcp_parseopt+0xe4>)
 800a456:	881a      	ldrh	r2, [r3, #0]
 800a458:	4b09      	ldr	r3, [pc, #36]	; (800a480 <tcp_parseopt+0xe0>)
 800a45a:	881b      	ldrh	r3, [r3, #0]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d3b5      	bcc.n	800a3cc <tcp_parseopt+0x2c>
 800a460:	e004      	b.n	800a46c <tcp_parseopt+0xcc>
          return;
 800a462:	bf00      	nop
 800a464:	e002      	b.n	800a46c <tcp_parseopt+0xcc>
            return;
 800a466:	bf00      	nop
 800a468:	e000      	b.n	800a46c <tcp_parseopt+0xcc>
            return;
 800a46a:	bf00      	nop
      }
    }
  }
}
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	080106c4 	.word	0x080106c4
 800a478:	08010b28 	.word	0x08010b28
 800a47c:	08010710 	.word	0x08010710
 800a480:	200000e4 	.word	0x200000e4
 800a484:	200000ec 	.word	0x200000ec

0800a488 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a488:	b480      	push	{r7}
 800a48a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a48c:	4b05      	ldr	r3, [pc, #20]	; (800a4a4 <tcp_trigger_input_pcb_close+0x1c>)
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	f043 0310 	orr.w	r3, r3, #16
 800a494:	b2da      	uxtb	r2, r3
 800a496:	4b03      	ldr	r3, [pc, #12]	; (800a4a4 <tcp_trigger_input_pcb_close+0x1c>)
 800a498:	701a      	strb	r2, [r3, #0]
}
 800a49a:	bf00      	nop
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	200000fd 	.word	0x200000fd

0800a4a8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00a      	beq.n	800a4d0 <tcp_route+0x28>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	7a1b      	ldrb	r3, [r3, #8]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d006      	beq.n	800a4d0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	7a1b      	ldrb	r3, [r3, #8]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fb f8d0 	bl	800566c <netif_get_by_index>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	e003      	b.n	800a4d8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f002 fe8b 	bl	800d1ec <ip4_route>
 800a4d6:	4603      	mov	r3, r0
  }
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a4e0:	b590      	push	{r4, r7, lr}
 800a4e2:	b087      	sub	sp, #28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	603b      	str	r3, [r7, #0]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d105      	bne.n	800a502 <tcp_create_segment+0x22>
 800a4f6:	4b44      	ldr	r3, [pc, #272]	; (800a608 <tcp_create_segment+0x128>)
 800a4f8:	22a3      	movs	r2, #163	; 0xa3
 800a4fa:	4944      	ldr	r1, [pc, #272]	; (800a60c <tcp_create_segment+0x12c>)
 800a4fc:	4844      	ldr	r0, [pc, #272]	; (800a610 <tcp_create_segment+0x130>)
 800a4fe:	f004 f89b 	bl	800e638 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d105      	bne.n	800a514 <tcp_create_segment+0x34>
 800a508:	4b3f      	ldr	r3, [pc, #252]	; (800a608 <tcp_create_segment+0x128>)
 800a50a:	22a4      	movs	r2, #164	; 0xa4
 800a50c:	4941      	ldr	r1, [pc, #260]	; (800a614 <tcp_create_segment+0x134>)
 800a50e:	4840      	ldr	r0, [pc, #256]	; (800a610 <tcp_create_segment+0x130>)
 800a510:	f004 f892 	bl	800e638 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a514:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	f003 0304 	and.w	r3, r3, #4
 800a520:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a522:	2003      	movs	r0, #3
 800a524:	f7fa fda4 	bl	8005070 <memp_malloc>
 800a528:	6138      	str	r0, [r7, #16]
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d104      	bne.n	800a53a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a530:	68b8      	ldr	r0, [r7, #8]
 800a532:	f7fb fbf7 	bl	8005d24 <pbuf_free>
    return NULL;
 800a536:	2300      	movs	r3, #0
 800a538:	e061      	b.n	800a5fe <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a540:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	891a      	ldrh	r2, [r3, #8]
 800a552:	7dfb      	ldrb	r3, [r7, #23]
 800a554:	b29b      	uxth	r3, r3
 800a556:	429a      	cmp	r2, r3
 800a558:	d205      	bcs.n	800a566 <tcp_create_segment+0x86>
 800a55a:	4b2b      	ldr	r3, [pc, #172]	; (800a608 <tcp_create_segment+0x128>)
 800a55c:	22b0      	movs	r2, #176	; 0xb0
 800a55e:	492e      	ldr	r1, [pc, #184]	; (800a618 <tcp_create_segment+0x138>)
 800a560:	482b      	ldr	r0, [pc, #172]	; (800a610 <tcp_create_segment+0x130>)
 800a562:	f004 f869 	bl	800e638 <iprintf>
  seg->len = p->tot_len - optlen;
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	891a      	ldrh	r2, [r3, #8]
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	b29a      	uxth	r2, r3
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a576:	2114      	movs	r1, #20
 800a578:	68b8      	ldr	r0, [r7, #8]
 800a57a:	f7fb fb3d 	bl	8005bf8 <pbuf_add_header>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d004      	beq.n	800a58e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a584:	6938      	ldr	r0, [r7, #16]
 800a586:	f7fc ffef 	bl	8007568 <tcp_seg_free>
    return NULL;
 800a58a:	2300      	movs	r3, #0
 800a58c:	e037      	b.n	800a5fe <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	685a      	ldr	r2, [r3, #4]
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	8ada      	ldrh	r2, [r3, #22]
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	68dc      	ldr	r4, [r3, #12]
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	f7fa f90f 	bl	80047c4 <lwip_htons>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	8b1a      	ldrh	r2, [r3, #24]
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	68dc      	ldr	r4, [r3, #12]
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	f7fa f906 	bl	80047c4 <lwip_htons>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	68dc      	ldr	r4, [r3, #12]
 800a5c0:	6838      	ldr	r0, [r7, #0]
 800a5c2:	f7fa f914 	bl	80047ee <lwip_htonl>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a5ca:	7dfb      	ldrb	r3, [r7, #23]
 800a5cc:	089b      	lsrs	r3, r3, #2
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	3305      	adds	r3, #5
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	031b      	lsls	r3, r3, #12
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	79fb      	ldrb	r3, [r7, #7]
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	68dc      	ldr	r4, [r3, #12]
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	f7fa f8ec 	bl	80047c4 <lwip_htons>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	749a      	strb	r2, [r3, #18]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	74da      	strb	r2, [r3, #19]
  return seg;
 800a5fc:	693b      	ldr	r3, [r7, #16]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	371c      	adds	r7, #28
 800a602:	46bd      	mov	sp, r7
 800a604:	bd90      	pop	{r4, r7, pc}
 800a606:	bf00      	nop
 800a608:	08010b44 	.word	0x08010b44
 800a60c:	08010b78 	.word	0x08010b78
 800a610:	08010b98 	.word	0x08010b98
 800a614:	08010bc0 	.word	0x08010bc0
 800a618:	08010be4 	.word	0x08010be4

0800a61c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a61c:	b590      	push	{r4, r7, lr}
 800a61e:	b08b      	sub	sp, #44	; 0x2c
 800a620:	af02      	add	r7, sp, #8
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a628:	2300      	movs	r3, #0
 800a62a:	61fb      	str	r3, [r7, #28]
 800a62c:	2300      	movs	r3, #0
 800a62e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a630:	2300      	movs	r3, #0
 800a632:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d106      	bne.n	800a648 <tcp_split_unsent_seg+0x2c>
 800a63a:	4b95      	ldr	r3, [pc, #596]	; (800a890 <tcp_split_unsent_seg+0x274>)
 800a63c:	f240 324b 	movw	r2, #843	; 0x34b
 800a640:	4994      	ldr	r1, [pc, #592]	; (800a894 <tcp_split_unsent_seg+0x278>)
 800a642:	4895      	ldr	r0, [pc, #596]	; (800a898 <tcp_split_unsent_seg+0x27c>)
 800a644:	f003 fff8 	bl	800e638 <iprintf>

  useg = pcb->unsent;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a64c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d102      	bne.n	800a65a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a654:	f04f 33ff 	mov.w	r3, #4294967295
 800a658:	e116      	b.n	800a888 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a65a:	887b      	ldrh	r3, [r7, #2]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d109      	bne.n	800a674 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a660:	4b8b      	ldr	r3, [pc, #556]	; (800a890 <tcp_split_unsent_seg+0x274>)
 800a662:	f240 3253 	movw	r2, #851	; 0x353
 800a666:	498d      	ldr	r1, [pc, #564]	; (800a89c <tcp_split_unsent_seg+0x280>)
 800a668:	488b      	ldr	r0, [pc, #556]	; (800a898 <tcp_split_unsent_seg+0x27c>)
 800a66a:	f003 ffe5 	bl	800e638 <iprintf>
    return ERR_VAL;
 800a66e:	f06f 0305 	mvn.w	r3, #5
 800a672:	e109      	b.n	800a888 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	891b      	ldrh	r3, [r3, #8]
 800a678:	887a      	ldrh	r2, [r7, #2]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d301      	bcc.n	800a682 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	e102      	b.n	800a888 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a686:	887a      	ldrh	r2, [r7, #2]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d906      	bls.n	800a69a <tcp_split_unsent_seg+0x7e>
 800a68c:	4b80      	ldr	r3, [pc, #512]	; (800a890 <tcp_split_unsent_seg+0x274>)
 800a68e:	f240 325b 	movw	r2, #859	; 0x35b
 800a692:	4983      	ldr	r1, [pc, #524]	; (800a8a0 <tcp_split_unsent_seg+0x284>)
 800a694:	4880      	ldr	r0, [pc, #512]	; (800a898 <tcp_split_unsent_seg+0x27c>)
 800a696:	f003 ffcf 	bl	800e638 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	891b      	ldrh	r3, [r3, #8]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d106      	bne.n	800a6b0 <tcp_split_unsent_seg+0x94>
 800a6a2:	4b7b      	ldr	r3, [pc, #492]	; (800a890 <tcp_split_unsent_seg+0x274>)
 800a6a4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a6a8:	497e      	ldr	r1, [pc, #504]	; (800a8a4 <tcp_split_unsent_seg+0x288>)
 800a6aa:	487b      	ldr	r0, [pc, #492]	; (800a898 <tcp_split_unsent_seg+0x27c>)
 800a6ac:	f003 ffc4 	bl	800e638 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	7a9b      	ldrb	r3, [r3, #10]
 800a6b4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a6b6:	7bfb      	ldrb	r3, [r7, #15]
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	f003 0304 	and.w	r3, r3, #4
 800a6c0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	891a      	ldrh	r2, [r3, #8]
 800a6c6:	887b      	ldrh	r3, [r7, #2]
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a6cc:	7bbb      	ldrb	r3, [r7, #14]
 800a6ce:	b29a      	uxth	r2, r3
 800a6d0:	89bb      	ldrh	r3, [r7, #12]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a6da:	4619      	mov	r1, r3
 800a6dc:	2036      	movs	r0, #54	; 0x36
 800a6de:	f7fb f841 	bl	8005764 <pbuf_alloc>
 800a6e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f000 80b7 	beq.w	800a85a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	891a      	ldrh	r2, [r3, #8]
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	891b      	ldrh	r3, [r3, #8]
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	887b      	ldrh	r3, [r7, #2]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	6858      	ldr	r0, [r3, #4]
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	685a      	ldr	r2, [r3, #4]
 800a708:	7bbb      	ldrb	r3, [r7, #14]
 800a70a:	18d1      	adds	r1, r2, r3
 800a70c:	897b      	ldrh	r3, [r7, #10]
 800a70e:	89ba      	ldrh	r2, [r7, #12]
 800a710:	f7fb fcf2 	bl	80060f8 <pbuf_copy_partial>
 800a714:	4603      	mov	r3, r0
 800a716:	461a      	mov	r2, r3
 800a718:	89bb      	ldrh	r3, [r7, #12]
 800a71a:	4293      	cmp	r3, r2
 800a71c:	f040 809f 	bne.w	800a85e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	68db      	ldr	r3, [r3, #12]
 800a724:	899b      	ldrh	r3, [r3, #12]
 800a726:	b29b      	uxth	r3, r3
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fa f84b 	bl	80047c4 <lwip_htons>
 800a72e:	4603      	mov	r3, r0
 800a730:	b2db      	uxtb	r3, r3
 800a732:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a736:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a738:	2300      	movs	r3, #0
 800a73a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a73c:	7efb      	ldrb	r3, [r7, #27]
 800a73e:	f003 0308 	and.w	r3, r3, #8
 800a742:	2b00      	cmp	r3, #0
 800a744:	d007      	beq.n	800a756 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a746:	7efb      	ldrb	r3, [r7, #27]
 800a748:	f023 0308 	bic.w	r3, r3, #8
 800a74c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a74e:	7ebb      	ldrb	r3, [r7, #26]
 800a750:	f043 0308 	orr.w	r3, r3, #8
 800a754:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a756:	7efb      	ldrb	r3, [r7, #27]
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d007      	beq.n	800a770 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a760:	7efb      	ldrb	r3, [r7, #27]
 800a762:	f023 0301 	bic.w	r3, r3, #1
 800a766:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a768:	7ebb      	ldrb	r3, [r7, #26]
 800a76a:	f043 0301 	orr.w	r3, r3, #1
 800a76e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	4618      	mov	r0, r3
 800a778:	f7fa f839 	bl	80047ee <lwip_htonl>
 800a77c:	4602      	mov	r2, r0
 800a77e:	887b      	ldrh	r3, [r7, #2]
 800a780:	18d1      	adds	r1, r2, r3
 800a782:	7eba      	ldrb	r2, [r7, #26]
 800a784:	7bfb      	ldrb	r3, [r7, #15]
 800a786:	9300      	str	r3, [sp, #0]
 800a788:	460b      	mov	r3, r1
 800a78a:	6939      	ldr	r1, [r7, #16]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7ff fea7 	bl	800a4e0 <tcp_create_segment>
 800a792:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d063      	beq.n	800a862 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fb fb48 	bl	8005e34 <pbuf_clen>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a7ae:	1a9b      	subs	r3, r3, r2
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	6858      	ldr	r0, [r3, #4]
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	891a      	ldrh	r2, [r3, #8]
 800a7c2:	89bb      	ldrh	r3, [r7, #12]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	f7fb f925 	bl	8005a18 <pbuf_realloc>
  useg->len -= remainder;
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	891a      	ldrh	r2, [r3, #8]
 800a7d2:	89bb      	ldrh	r3, [r7, #12]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	899b      	ldrh	r3, [r3, #12]
 800a7e2:	b29c      	uxth	r4, r3
 800a7e4:	7efb      	ldrb	r3, [r7, #27]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7f9 ffeb 	bl	80047c4 <lwip_htons>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	4322      	orrs	r2, r4
 800a7f8:	b292      	uxth	r2, r2
 800a7fa:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	4618      	mov	r0, r3
 800a802:	f7fb fb17 	bl	8005e34 <pbuf_clen>
 800a806:	4603      	mov	r3, r0
 800a808:	461a      	mov	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a810:	4413      	add	r3, r2
 800a812:	b29a      	uxth	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fb fb08 	bl	8005e34 <pbuf_clen>
 800a824:	4603      	mov	r3, r0
 800a826:	461a      	mov	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a82e:	4413      	add	r3, r2
 800a830:	b29a      	uxth	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	69fa      	ldr	r2, [r7, #28]
 800a844:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d103      	bne.n	800a856 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	e016      	b.n	800a888 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a85a:	bf00      	nop
 800a85c:	e002      	b.n	800a864 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a85e:	bf00      	nop
 800a860:	e000      	b.n	800a864 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a862:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d006      	beq.n	800a878 <tcp_split_unsent_seg+0x25c>
 800a86a:	4b09      	ldr	r3, [pc, #36]	; (800a890 <tcp_split_unsent_seg+0x274>)
 800a86c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a870:	490d      	ldr	r1, [pc, #52]	; (800a8a8 <tcp_split_unsent_seg+0x28c>)
 800a872:	4809      	ldr	r0, [pc, #36]	; (800a898 <tcp_split_unsent_seg+0x27c>)
 800a874:	f003 fee0 	bl	800e638 <iprintf>
  if (p != NULL) {
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d002      	beq.n	800a884 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a87e:	6938      	ldr	r0, [r7, #16]
 800a880:	f7fb fa50 	bl	8005d24 <pbuf_free>
  }

  return ERR_MEM;
 800a884:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3724      	adds	r7, #36	; 0x24
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd90      	pop	{r4, r7, pc}
 800a890:	08010b44 	.word	0x08010b44
 800a894:	08010ed8 	.word	0x08010ed8
 800a898:	08010b98 	.word	0x08010b98
 800a89c:	08010efc 	.word	0x08010efc
 800a8a0:	08010f20 	.word	0x08010f20
 800a8a4:	08010f30 	.word	0x08010f30
 800a8a8:	08010f40 	.word	0x08010f40

0800a8ac <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a8ac:	b590      	push	{r4, r7, lr}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d106      	bne.n	800a8c8 <tcp_send_fin+0x1c>
 800a8ba:	4b21      	ldr	r3, [pc, #132]	; (800a940 <tcp_send_fin+0x94>)
 800a8bc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a8c0:	4920      	ldr	r1, [pc, #128]	; (800a944 <tcp_send_fin+0x98>)
 800a8c2:	4821      	ldr	r0, [pc, #132]	; (800a948 <tcp_send_fin+0x9c>)
 800a8c4:	f003 feb8 	bl	800e638 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d02e      	beq.n	800a92e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8d4:	60fb      	str	r3, [r7, #12]
 800a8d6:	e002      	b.n	800a8de <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1f8      	bne.n	800a8d8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	899b      	ldrh	r3, [r3, #12]
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7f9 ff68 	bl	80047c4 <lwip_htons>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	f003 0307 	and.w	r3, r3, #7
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d116      	bne.n	800a92e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	899b      	ldrh	r3, [r3, #12]
 800a906:	b29c      	uxth	r4, r3
 800a908:	2001      	movs	r0, #1
 800a90a:	f7f9 ff5b 	bl	80047c4 <lwip_htons>
 800a90e:	4603      	mov	r3, r0
 800a910:	461a      	mov	r2, r3
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	4322      	orrs	r2, r4
 800a918:	b292      	uxth	r2, r2
 800a91a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	8b5b      	ldrh	r3, [r3, #26]
 800a920:	f043 0320 	orr.w	r3, r3, #32
 800a924:	b29a      	uxth	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	e004      	b.n	800a938 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a92e:	2101      	movs	r1, #1
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f80b 	bl	800a94c <tcp_enqueue_flags>
 800a936:	4603      	mov	r3, r0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3714      	adds	r7, #20
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd90      	pop	{r4, r7, pc}
 800a940:	08010b44 	.word	0x08010b44
 800a944:	08010f4c 	.word	0x08010f4c
 800a948:	08010b98 	.word	0x08010b98

0800a94c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08a      	sub	sp, #40	; 0x28
 800a950:	af02      	add	r7, sp, #8
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a960:	78fb      	ldrb	r3, [r7, #3]
 800a962:	f003 0303 	and.w	r3, r3, #3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d106      	bne.n	800a978 <tcp_enqueue_flags+0x2c>
 800a96a:	4b67      	ldr	r3, [pc, #412]	; (800ab08 <tcp_enqueue_flags+0x1bc>)
 800a96c:	f240 4212 	movw	r2, #1042	; 0x412
 800a970:	4966      	ldr	r1, [pc, #408]	; (800ab0c <tcp_enqueue_flags+0x1c0>)
 800a972:	4867      	ldr	r0, [pc, #412]	; (800ab10 <tcp_enqueue_flags+0x1c4>)
 800a974:	f003 fe60 	bl	800e638 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d106      	bne.n	800a98c <tcp_enqueue_flags+0x40>
 800a97e:	4b62      	ldr	r3, [pc, #392]	; (800ab08 <tcp_enqueue_flags+0x1bc>)
 800a980:	f240 4213 	movw	r2, #1043	; 0x413
 800a984:	4963      	ldr	r1, [pc, #396]	; (800ab14 <tcp_enqueue_flags+0x1c8>)
 800a986:	4862      	ldr	r0, [pc, #392]	; (800ab10 <tcp_enqueue_flags+0x1c4>)
 800a988:	f003 fe56 	bl	800e638 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a98c:	78fb      	ldrb	r3, [r7, #3]
 800a98e:	f003 0302 	and.w	r3, r3, #2
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a996:	2301      	movs	r3, #1
 800a998:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a99a:	7ffb      	ldrb	r3, [r7, #31]
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	f003 0304 	and.w	r3, r3, #4
 800a9a4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a9a6:	7dfb      	ldrb	r3, [r7, #23]
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	2036      	movs	r0, #54	; 0x36
 800a9b2:	f7fa fed7 	bl	8005764 <pbuf_alloc>
 800a9b6:	6138      	str	r0, [r7, #16]
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d109      	bne.n	800a9d2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	8b5b      	ldrh	r3, [r3, #26]
 800a9c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d0:	e095      	b.n	800aafe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	895a      	ldrh	r2, [r3, #10]
 800a9d6:	7dfb      	ldrb	r3, [r7, #23]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d206      	bcs.n	800a9ec <tcp_enqueue_flags+0xa0>
 800a9de:	4b4a      	ldr	r3, [pc, #296]	; (800ab08 <tcp_enqueue_flags+0x1bc>)
 800a9e0:	f240 423a 	movw	r2, #1082	; 0x43a
 800a9e4:	494c      	ldr	r1, [pc, #304]	; (800ab18 <tcp_enqueue_flags+0x1cc>)
 800a9e6:	484a      	ldr	r0, [pc, #296]	; (800ab10 <tcp_enqueue_flags+0x1c4>)
 800a9e8:	f003 fe26 	bl	800e638 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a9f0:	78fa      	ldrb	r2, [r7, #3]
 800a9f2:	7ffb      	ldrb	r3, [r7, #31]
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	6939      	ldr	r1, [r7, #16]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7ff fd70 	bl	800a4e0 <tcp_create_segment>
 800aa00:	60f8      	str	r0, [r7, #12]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d109      	bne.n	800aa1c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	8b5b      	ldrh	r3, [r3, #26]
 800aa0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800aa16:	f04f 33ff 	mov.w	r3, #4294967295
 800aa1a:	e070      	b.n	800aafe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	f003 0303 	and.w	r3, r3, #3
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d006      	beq.n	800aa36 <tcp_enqueue_flags+0xea>
 800aa28:	4b37      	ldr	r3, [pc, #220]	; (800ab08 <tcp_enqueue_flags+0x1bc>)
 800aa2a:	f240 4242 	movw	r2, #1090	; 0x442
 800aa2e:	493b      	ldr	r1, [pc, #236]	; (800ab1c <tcp_enqueue_flags+0x1d0>)
 800aa30:	4837      	ldr	r0, [pc, #220]	; (800ab10 <tcp_enqueue_flags+0x1c4>)
 800aa32:	f003 fe01 	bl	800e638 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	891b      	ldrh	r3, [r3, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d006      	beq.n	800aa4c <tcp_enqueue_flags+0x100>
 800aa3e:	4b32      	ldr	r3, [pc, #200]	; (800ab08 <tcp_enqueue_flags+0x1bc>)
 800aa40:	f240 4243 	movw	r2, #1091	; 0x443
 800aa44:	4936      	ldr	r1, [pc, #216]	; (800ab20 <tcp_enqueue_flags+0x1d4>)
 800aa46:	4832      	ldr	r0, [pc, #200]	; (800ab10 <tcp_enqueue_flags+0x1c4>)
 800aa48:	f003 fdf6 	bl	800e638 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d103      	bne.n	800aa5c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	68fa      	ldr	r2, [r7, #12]
 800aa58:	66da      	str	r2, [r3, #108]	; 0x6c
 800aa5a:	e00d      	b.n	800aa78 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa60:	61bb      	str	r3, [r7, #24]
 800aa62:	e002      	b.n	800aa6a <tcp_enqueue_flags+0x11e>
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	61bb      	str	r3, [r7, #24]
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1f8      	bne.n	800aa64 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	f003 0302 	and.w	r3, r3, #2
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d104      	bne.n	800aa94 <tcp_enqueue_flags+0x148>
 800aa8a:	78fb      	ldrb	r3, [r7, #3]
 800aa8c:	f003 0301 	and.w	r3, r3, #1
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d004      	beq.n	800aa9e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa98:	1c5a      	adds	r2, r3, #1
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800aa9e:	78fb      	ldrb	r3, [r7, #3]
 800aaa0:	f003 0301 	and.w	r3, r3, #1
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d006      	beq.n	800aab6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	8b5b      	ldrh	r3, [r3, #26]
 800aaac:	f043 0320 	orr.w	r3, r3, #32
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fb f9ba 	bl	8005e34 <pbuf_clen>
 800aac0:	4603      	mov	r3, r0
 800aac2:	461a      	mov	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aaca:	4413      	add	r3, r2
 800aacc:	b29a      	uxth	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00e      	beq.n	800aafc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10a      	bne.n	800aafc <tcp_enqueue_flags+0x1b0>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d106      	bne.n	800aafc <tcp_enqueue_flags+0x1b0>
 800aaee:	4b06      	ldr	r3, [pc, #24]	; (800ab08 <tcp_enqueue_flags+0x1bc>)
 800aaf0:	f240 4266 	movw	r2, #1126	; 0x466
 800aaf4:	490b      	ldr	r1, [pc, #44]	; (800ab24 <tcp_enqueue_flags+0x1d8>)
 800aaf6:	4806      	ldr	r0, [pc, #24]	; (800ab10 <tcp_enqueue_flags+0x1c4>)
 800aaf8:	f003 fd9e 	bl	800e638 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3720      	adds	r7, #32
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	08010b44 	.word	0x08010b44
 800ab0c:	08010f68 	.word	0x08010f68
 800ab10:	08010b98 	.word	0x08010b98
 800ab14:	08010fc0 	.word	0x08010fc0
 800ab18:	08010fe0 	.word	0x08010fe0
 800ab1c:	0801101c 	.word	0x0801101c
 800ab20:	08011034 	.word	0x08011034
 800ab24:	08011060 	.word	0x08011060

0800ab28 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ab28:	b5b0      	push	{r4, r5, r7, lr}
 800ab2a:	b08a      	sub	sp, #40	; 0x28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d106      	bne.n	800ab44 <tcp_output+0x1c>
 800ab36:	4ba0      	ldr	r3, [pc, #640]	; (800adb8 <tcp_output+0x290>)
 800ab38:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ab3c:	499f      	ldr	r1, [pc, #636]	; (800adbc <tcp_output+0x294>)
 800ab3e:	48a0      	ldr	r0, [pc, #640]	; (800adc0 <tcp_output+0x298>)
 800ab40:	f003 fd7a 	bl	800e638 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	7d1b      	ldrb	r3, [r3, #20]
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d106      	bne.n	800ab5a <tcp_output+0x32>
 800ab4c:	4b9a      	ldr	r3, [pc, #616]	; (800adb8 <tcp_output+0x290>)
 800ab4e:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800ab52:	499c      	ldr	r1, [pc, #624]	; (800adc4 <tcp_output+0x29c>)
 800ab54:	489a      	ldr	r0, [pc, #616]	; (800adc0 <tcp_output+0x298>)
 800ab56:	f003 fd6f 	bl	800e638 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ab5a:	4b9b      	ldr	r3, [pc, #620]	; (800adc8 <tcp_output+0x2a0>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d101      	bne.n	800ab68 <tcp_output+0x40>
    return ERR_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	e1d2      	b.n	800af0e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d203      	bcs.n	800ab80 <tcp_output+0x58>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab7e:	e002      	b.n	800ab86 <tcp_output+0x5e>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ab86:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab8c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10b      	bne.n	800abac <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	8b5b      	ldrh	r3, [r3, #26]
 800ab98:	f003 0302 	and.w	r3, r3, #2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 81a9 	beq.w	800aef4 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fdd8 	bl	800b758 <tcp_send_empty_ack>
 800aba8:	4603      	mov	r3, r0
 800abaa:	e1b0      	b.n	800af0e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800abac:	6879      	ldr	r1, [r7, #4]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	3304      	adds	r3, #4
 800abb2:	461a      	mov	r2, r3
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7ff fc77 	bl	800a4a8 <tcp_route>
 800abba:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d102      	bne.n	800abc8 <tcp_output+0xa0>
    return ERR_RTE;
 800abc2:	f06f 0303 	mvn.w	r3, #3
 800abc6:	e1a2      	b.n	800af0e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d003      	beq.n	800abd6 <tcp_output+0xae>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d111      	bne.n	800abfa <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <tcp_output+0xba>
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	3304      	adds	r3, #4
 800abe0:	e000      	b.n	800abe4 <tcp_output+0xbc>
 800abe2:	2300      	movs	r3, #0
 800abe4:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d102      	bne.n	800abf2 <tcp_output+0xca>
      return ERR_RTE;
 800abec:	f06f 0303 	mvn.w	r3, #3
 800abf0:	e18d      	b.n	800af0e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7f9 fdf4 	bl	80047ee <lwip_htonl>
 800ac06:	4602      	mov	r2, r0
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac10:	8912      	ldrh	r2, [r2, #8]
 800ac12:	4413      	add	r3, r2
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d227      	bcs.n	800ac6a <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ac20:	461a      	mov	r2, r3
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d114      	bne.n	800ac52 <tcp_output+0x12a>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d110      	bne.n	800ac52 <tcp_output+0x12a>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10b      	bne.n	800ac52 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	8b5b      	ldrh	r3, [r3, #26]
 800ac56:	f003 0302 	and.w	r3, r3, #2
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f000 814c 	beq.w	800aef8 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fd79 	bl	800b758 <tcp_send_empty_ack>
 800ac66:	4603      	mov	r3, r0
 800ac68:	e151      	b.n	800af0e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac76:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ac78:	6a3b      	ldr	r3, [r7, #32]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f000 811b 	beq.w	800aeb6 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800ac80:	e002      	b.n	800ac88 <tcp_output+0x160>
 800ac82:	6a3b      	ldr	r3, [r7, #32]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	623b      	str	r3, [r7, #32]
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d1f8      	bne.n	800ac82 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ac90:	e111      	b.n	800aeb6 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ac92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	899b      	ldrh	r3, [r3, #12]
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7f9 fd92 	bl	80047c4 <lwip_htons>
 800aca0:	4603      	mov	r3, r0
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	f003 0304 	and.w	r3, r3, #4
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d006      	beq.n	800acba <tcp_output+0x192>
 800acac:	4b42      	ldr	r3, [pc, #264]	; (800adb8 <tcp_output+0x290>)
 800acae:	f240 5237 	movw	r2, #1335	; 0x537
 800acb2:	4946      	ldr	r1, [pc, #280]	; (800adcc <tcp_output+0x2a4>)
 800acb4:	4842      	ldr	r0, [pc, #264]	; (800adc0 <tcp_output+0x298>)
 800acb6:	f003 fcbf 	bl	800e638 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d01f      	beq.n	800ad02 <tcp_output+0x1da>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	8b5b      	ldrh	r3, [r3, #26]
 800acc6:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800acca:	2b00      	cmp	r3, #0
 800accc:	d119      	bne.n	800ad02 <tcp_output+0x1da>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00b      	beq.n	800acee <tcp_output+0x1c6>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d110      	bne.n	800ad02 <tcp_output+0x1da>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ace4:	891a      	ldrh	r2, [r3, #8]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800acea:	429a      	cmp	r2, r3
 800acec:	d209      	bcs.n	800ad02 <tcp_output+0x1da>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d004      	beq.n	800ad02 <tcp_output+0x1da>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800acfe:	2b08      	cmp	r3, #8
 800ad00:	d901      	bls.n	800ad06 <tcp_output+0x1de>
 800ad02:	2301      	movs	r3, #1
 800ad04:	e000      	b.n	800ad08 <tcp_output+0x1e0>
 800ad06:	2300      	movs	r3, #0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d106      	bne.n	800ad1a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	8b5b      	ldrh	r3, [r3, #26]
 800ad10:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f000 80e3 	beq.w	800aee0 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	7d1b      	ldrb	r3, [r3, #20]
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d00d      	beq.n	800ad3e <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ad22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	899b      	ldrh	r3, [r3, #12]
 800ad28:	b29c      	uxth	r4, r3
 800ad2a:	2010      	movs	r0, #16
 800ad2c:	f7f9 fd4a 	bl	80047c4 <lwip_htons>
 800ad30:	4603      	mov	r3, r0
 800ad32:	461a      	mov	r2, r3
 800ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	4322      	orrs	r2, r4
 800ad3a:	b292      	uxth	r2, r2
 800ad3c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ad3e:	697a      	ldr	r2, [r7, #20]
 800ad40:	6879      	ldr	r1, [r7, #4]
 800ad42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad44:	f000 f908 	bl	800af58 <tcp_output_segment>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ad4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d009      	beq.n	800ad68 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	8b5b      	ldrh	r3, [r3, #26]
 800ad58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	835a      	strh	r2, [r3, #26]
      return err;
 800ad62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad66:	e0d2      	b.n	800af0e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	7d1b      	ldrb	r3, [r3, #20]
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d006      	beq.n	800ad86 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	8b5b      	ldrh	r3, [r3, #26]
 800ad7c:	f023 0303 	bic.w	r3, r3, #3
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ad86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7f9 fd2e 	bl	80047ee <lwip_htonl>
 800ad92:	4604      	mov	r4, r0
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	891b      	ldrh	r3, [r3, #8]
 800ad98:	461d      	mov	r5, r3
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	899b      	ldrh	r3, [r3, #12]
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7f9 fd0e 	bl	80047c4 <lwip_htons>
 800ada8:	4603      	mov	r3, r0
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	f003 0303 	and.w	r3, r3, #3
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00d      	beq.n	800add0 <tcp_output+0x2a8>
 800adb4:	2301      	movs	r3, #1
 800adb6:	e00c      	b.n	800add2 <tcp_output+0x2aa>
 800adb8:	08010b44 	.word	0x08010b44
 800adbc:	08011088 	.word	0x08011088
 800adc0:	08010b98 	.word	0x08010b98
 800adc4:	080110a0 	.word	0x080110a0
 800adc8:	20006944 	.word	0x20006944
 800adcc:	080110c8 	.word	0x080110c8
 800add0:	2300      	movs	r3, #0
 800add2:	442b      	add	r3, r5
 800add4:	4423      	add	r3, r4
 800add6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	1ad3      	subs	r3, r2, r3
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	da02      	bge.n	800adea <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800adea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adec:	891b      	ldrh	r3, [r3, #8]
 800adee:	461c      	mov	r4, r3
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	899b      	ldrh	r3, [r3, #12]
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7f9 fce3 	bl	80047c4 <lwip_htons>
 800adfe:	4603      	mov	r3, r0
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	f003 0303 	and.w	r3, r3, #3
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <tcp_output+0x2e6>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e000      	b.n	800ae10 <tcp_output+0x2e8>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	4423      	add	r3, r4
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d049      	beq.n	800aeaa <tcp_output+0x382>
      seg->next = NULL;
 800ae16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d105      	bne.n	800ae30 <tcp_output+0x308>
        pcb->unacked = seg;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae28:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2c:	623b      	str	r3, [r7, #32]
 800ae2e:	e03f      	b.n	800aeb0 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7f9 fcd9 	bl	80047ee <lwip_htonl>
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	6a3b      	ldr	r3, [r7, #32]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7f9 fcd2 	bl	80047ee <lwip_htonl>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	1ae3      	subs	r3, r4, r3
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	da24      	bge.n	800ae9c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	3370      	adds	r3, #112	; 0x70
 800ae56:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ae58:	e002      	b.n	800ae60 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ae5a:	69fb      	ldr	r3, [r7, #28]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d011      	beq.n	800ae8c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7f9 fcbc 	bl	80047ee <lwip_htonl>
 800ae76:	4604      	mov	r4, r0
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7f9 fcb5 	bl	80047ee <lwip_htonl>
 800ae84:	4603      	mov	r3, r0
 800ae86:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	dbe6      	blt.n	800ae5a <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae98:	601a      	str	r2, [r3, #0]
 800ae9a:	e009      	b.n	800aeb0 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ae9c:	6a3b      	ldr	r3, [r7, #32]
 800ae9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aea0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800aea2:	6a3b      	ldr	r3, [r7, #32]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	623b      	str	r3, [r7, #32]
 800aea8:	e002      	b.n	800aeb0 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800aeaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aeac:	f7fc fb5c 	bl	8007568 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeb4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d012      	beq.n	800aee2 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7f9 fc93 	bl	80047ee <lwip_htonl>
 800aec8:	4602      	mov	r2, r0
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aed2:	8912      	ldrh	r2, [r2, #8]
 800aed4:	4413      	add	r3, r2
  while (seg != NULL &&
 800aed6:	69ba      	ldr	r2, [r7, #24]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	f4bf aeda 	bcs.w	800ac92 <tcp_output+0x16a>
 800aede:	e000      	b.n	800aee2 <tcp_output+0x3ba>
      break;
 800aee0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d108      	bne.n	800aefc <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800aef2:	e004      	b.n	800aefe <tcp_output+0x3d6>
    goto output_done;
 800aef4:	bf00      	nop
 800aef6:	e002      	b.n	800aefe <tcp_output+0x3d6>
    goto output_done;
 800aef8:	bf00      	nop
 800aefa:	e000      	b.n	800aefe <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800aefc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	8b5b      	ldrh	r3, [r3, #26]
 800af02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af06:	b29a      	uxth	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3728      	adds	r7, #40	; 0x28
 800af12:	46bd      	mov	sp, r7
 800af14:	bdb0      	pop	{r4, r5, r7, pc}
 800af16:	bf00      	nop

0800af18 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d106      	bne.n	800af34 <tcp_output_segment_busy+0x1c>
 800af26:	4b09      	ldr	r3, [pc, #36]	; (800af4c <tcp_output_segment_busy+0x34>)
 800af28:	f240 529a 	movw	r2, #1434	; 0x59a
 800af2c:	4908      	ldr	r1, [pc, #32]	; (800af50 <tcp_output_segment_busy+0x38>)
 800af2e:	4809      	ldr	r0, [pc, #36]	; (800af54 <tcp_output_segment_busy+0x3c>)
 800af30:	f003 fb82 	bl	800e638 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	7b9b      	ldrb	r3, [r3, #14]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d001      	beq.n	800af42 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800af3e:	2301      	movs	r3, #1
 800af40:	e000      	b.n	800af44 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800af42:	2300      	movs	r3, #0
}
 800af44:	4618      	mov	r0, r3
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	08010b44 	.word	0x08010b44
 800af50:	080110e0 	.word	0x080110e0
 800af54:	08010b98 	.word	0x08010b98

0800af58 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800af58:	b5b0      	push	{r4, r5, r7, lr}
 800af5a:	b08c      	sub	sp, #48	; 0x30
 800af5c:	af04      	add	r7, sp, #16
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d106      	bne.n	800af78 <tcp_output_segment+0x20>
 800af6a:	4b64      	ldr	r3, [pc, #400]	; (800b0fc <tcp_output_segment+0x1a4>)
 800af6c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800af70:	4963      	ldr	r1, [pc, #396]	; (800b100 <tcp_output_segment+0x1a8>)
 800af72:	4864      	ldr	r0, [pc, #400]	; (800b104 <tcp_output_segment+0x1ac>)
 800af74:	f003 fb60 	bl	800e638 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d106      	bne.n	800af8c <tcp_output_segment+0x34>
 800af7e:	4b5f      	ldr	r3, [pc, #380]	; (800b0fc <tcp_output_segment+0x1a4>)
 800af80:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800af84:	4960      	ldr	r1, [pc, #384]	; (800b108 <tcp_output_segment+0x1b0>)
 800af86:	485f      	ldr	r0, [pc, #380]	; (800b104 <tcp_output_segment+0x1ac>)
 800af88:	f003 fb56 	bl	800e638 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d106      	bne.n	800afa0 <tcp_output_segment+0x48>
 800af92:	4b5a      	ldr	r3, [pc, #360]	; (800b0fc <tcp_output_segment+0x1a4>)
 800af94:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800af98:	495c      	ldr	r1, [pc, #368]	; (800b10c <tcp_output_segment+0x1b4>)
 800af9a:	485a      	ldr	r0, [pc, #360]	; (800b104 <tcp_output_segment+0x1ac>)
 800af9c:	f003 fb4c 	bl	800e638 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f7ff ffb9 	bl	800af18 <tcp_output_segment_busy>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d001      	beq.n	800afb0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	e0a0      	b.n	800b0f2 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	68dc      	ldr	r4, [r3, #12]
 800afb8:	4610      	mov	r0, r2
 800afba:	f7f9 fc18 	bl	80047ee <lwip_htonl>
 800afbe:	4603      	mov	r3, r0
 800afc0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	68dc      	ldr	r4, [r3, #12]
 800afca:	4610      	mov	r0, r2
 800afcc:	f7f9 fbfa 	bl	80047c4 <lwip_htons>
 800afd0:	4603      	mov	r3, r0
 800afd2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	68ba      	ldr	r2, [r7, #8]
 800afda:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800afdc:	441a      	add	r2, r3
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	3314      	adds	r3, #20
 800afe8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	7a9b      	ldrb	r3, [r3, #10]
 800afee:	f003 0301 	and.w	r3, r3, #1
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d015      	beq.n	800b022 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	3304      	adds	r3, #4
 800affa:	461a      	mov	r2, r3
 800affc:	6879      	ldr	r1, [r7, #4]
 800affe:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b002:	f7fc fe8d 	bl	8007d20 <tcp_eff_send_mss_netif>
 800b006:	4603      	mov	r3, r0
 800b008:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b00a:	8b7b      	ldrh	r3, [r7, #26]
 800b00c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b010:	4618      	mov	r0, r3
 800b012:	f7f9 fbec 	bl	80047ee <lwip_htonl>
 800b016:	4602      	mov	r2, r0
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	3304      	adds	r3, #4
 800b020:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b028:	2b00      	cmp	r3, #0
 800b02a:	da02      	bge.n	800b032 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	2200      	movs	r2, #0
 800b030:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10c      	bne.n	800b054 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b03a:	4b35      	ldr	r3, [pc, #212]	; (800b110 <tcp_output_segment+0x1b8>)
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	4618      	mov	r0, r3
 800b04a:	f7f9 fbd0 	bl	80047ee <lwip_htonl>
 800b04e:	4602      	mov	r2, r0
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	461a      	mov	r2, r3
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	1ad3      	subs	r3, r2, r3
 800b062:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	8959      	ldrh	r1, [r3, #10]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	8b3a      	ldrh	r2, [r7, #24]
 800b070:	1a8a      	subs	r2, r1, r2
 800b072:	b292      	uxth	r2, r2
 800b074:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	8919      	ldrh	r1, [r3, #8]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	8b3a      	ldrh	r2, [r7, #24]
 800b082:	1a8a      	subs	r2, r1, r2
 800b084:	b292      	uxth	r2, r2
 800b086:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	68d2      	ldr	r2, [r2, #12]
 800b090:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	741a      	strb	r2, [r3, #16]
 800b09a:	2200      	movs	r2, #0
 800b09c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	f103 0214 	add.w	r2, r3, #20
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	7a9b      	ldrb	r3, [r3, #10]
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	f003 0304 	and.w	r3, r3, #4
 800b0b0:	4413      	add	r3, r2
 800b0b2:	69fa      	ldr	r2, [r7, #28]
 800b0b4:	429a      	cmp	r2, r3
 800b0b6:	d006      	beq.n	800b0c6 <tcp_output_segment+0x16e>
 800b0b8:	4b10      	ldr	r3, [pc, #64]	; (800b0fc <tcp_output_segment+0x1a4>)
 800b0ba:	f240 621c 	movw	r2, #1564	; 0x61c
 800b0be:	4915      	ldr	r1, [pc, #84]	; (800b114 <tcp_output_segment+0x1bc>)
 800b0c0:	4810      	ldr	r0, [pc, #64]	; (800b104 <tcp_output_segment+0x1ac>)
 800b0c2:	f003 fab9 	bl	800e638 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6858      	ldr	r0, [r3, #4]
 800b0ca:	68b9      	ldr	r1, [r7, #8]
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	1d1c      	adds	r4, r3, #4
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	7add      	ldrb	r5, [r3, #11]
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	7a9b      	ldrb	r3, [r3, #10]
 800b0d8:	687a      	ldr	r2, [r7, #4]
 800b0da:	9202      	str	r2, [sp, #8]
 800b0dc:	2206      	movs	r2, #6
 800b0de:	9201      	str	r2, [sp, #4]
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	462b      	mov	r3, r5
 800b0e4:	4622      	mov	r2, r4
 800b0e6:	f002 fa3d 	bl	800d564 <ip4_output_if>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b0ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3720      	adds	r7, #32
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bdb0      	pop	{r4, r5, r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	08010b44 	.word	0x08010b44
 800b100:	08011108 	.word	0x08011108
 800b104:	08010b98 	.word	0x08010b98
 800b108:	08011128 	.word	0x08011128
 800b10c:	08011148 	.word	0x08011148
 800b110:	20006934 	.word	0x20006934
 800b114:	0801116c 	.word	0x0801116c

0800b118 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b118:	b5b0      	push	{r4, r5, r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d106      	bne.n	800b134 <tcp_rexmit_rto_prepare+0x1c>
 800b126:	4b31      	ldr	r3, [pc, #196]	; (800b1ec <tcp_rexmit_rto_prepare+0xd4>)
 800b128:	f240 6263 	movw	r2, #1635	; 0x663
 800b12c:	4930      	ldr	r1, [pc, #192]	; (800b1f0 <tcp_rexmit_rto_prepare+0xd8>)
 800b12e:	4831      	ldr	r0, [pc, #196]	; (800b1f4 <tcp_rexmit_rto_prepare+0xdc>)
 800b130:	f003 fa82 	bl	800e638 <iprintf>

  if (pcb->unacked == NULL) {
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d102      	bne.n	800b142 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b13c:	f06f 0305 	mvn.w	r3, #5
 800b140:	e050      	b.n	800b1e4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b146:	60fb      	str	r3, [r7, #12]
 800b148:	e00b      	b.n	800b162 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f7ff fee4 	bl	800af18 <tcp_output_segment_busy>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d002      	beq.n	800b15c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b156:	f06f 0305 	mvn.w	r3, #5
 800b15a:	e043      	b.n	800b1e4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	60fb      	str	r3, [r7, #12]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d1ef      	bne.n	800b14a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	f7ff fed4 	bl	800af18 <tcp_output_segment_busy>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b176:	f06f 0305 	mvn.w	r3, #5
 800b17a:	e033      	b.n	800b1e4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	8b5b      	ldrh	r3, [r3, #26]
 800b196:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7f9 fb21 	bl	80047ee <lwip_htonl>
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	891b      	ldrh	r3, [r3, #8]
 800b1b2:	461d      	mov	r5, r3
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	899b      	ldrh	r3, [r3, #12]
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7f9 fb01 	bl	80047c4 <lwip_htons>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	f003 0303 	and.w	r3, r3, #3
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d001      	beq.n	800b1d2 <tcp_rexmit_rto_prepare+0xba>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e000      	b.n	800b1d4 <tcp_rexmit_rto_prepare+0xbc>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	442b      	add	r3, r5
 800b1d6:	18e2      	adds	r2, r4, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bdb0      	pop	{r4, r5, r7, pc}
 800b1ec:	08010b44 	.word	0x08010b44
 800b1f0:	08011180 	.word	0x08011180
 800b1f4:	08010b98 	.word	0x08010b98

0800b1f8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d106      	bne.n	800b214 <tcp_rexmit_rto_commit+0x1c>
 800b206:	4b0d      	ldr	r3, [pc, #52]	; (800b23c <tcp_rexmit_rto_commit+0x44>)
 800b208:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b20c:	490c      	ldr	r1, [pc, #48]	; (800b240 <tcp_rexmit_rto_commit+0x48>)
 800b20e:	480d      	ldr	r0, [pc, #52]	; (800b244 <tcp_rexmit_rto_commit+0x4c>)
 800b210:	f003 fa12 	bl	800e638 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b21a:	2bff      	cmp	r3, #255	; 0xff
 800b21c:	d007      	beq.n	800b22e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b224:	3301      	adds	r3, #1
 800b226:	b2da      	uxtb	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f7ff fc7a 	bl	800ab28 <tcp_output>
}
 800b234:	bf00      	nop
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	08010b44 	.word	0x08010b44
 800b240:	080111a4 	.word	0x080111a4
 800b244:	08010b98 	.word	0x08010b98

0800b248 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d106      	bne.n	800b264 <tcp_rexmit_rto+0x1c>
 800b256:	4b0a      	ldr	r3, [pc, #40]	; (800b280 <tcp_rexmit_rto+0x38>)
 800b258:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b25c:	4909      	ldr	r1, [pc, #36]	; (800b284 <tcp_rexmit_rto+0x3c>)
 800b25e:	480a      	ldr	r0, [pc, #40]	; (800b288 <tcp_rexmit_rto+0x40>)
 800b260:	f003 f9ea 	bl	800e638 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f7ff ff57 	bl	800b118 <tcp_rexmit_rto_prepare>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d102      	bne.n	800b276 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff ffc1 	bl	800b1f8 <tcp_rexmit_rto_commit>
  }
}
 800b276:	bf00      	nop
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	08010b44 	.word	0x08010b44
 800b284:	080111c8 	.word	0x080111c8
 800b288:	08010b98 	.word	0x08010b98

0800b28c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b28c:	b590      	push	{r4, r7, lr}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d106      	bne.n	800b2a8 <tcp_rexmit+0x1c>
 800b29a:	4b2f      	ldr	r3, [pc, #188]	; (800b358 <tcp_rexmit+0xcc>)
 800b29c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b2a0:	492e      	ldr	r1, [pc, #184]	; (800b35c <tcp_rexmit+0xd0>)
 800b2a2:	482f      	ldr	r0, [pc, #188]	; (800b360 <tcp_rexmit+0xd4>)
 800b2a4:	f003 f9c8 	bl	800e638 <iprintf>

  if (pcb->unacked == NULL) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d102      	bne.n	800b2b6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b2b0:	f06f 0305 	mvn.w	r3, #5
 800b2b4:	e04c      	b.n	800b350 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ba:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b2bc:	68b8      	ldr	r0, [r7, #8]
 800b2be:	f7ff fe2b 	bl	800af18 <tcp_output_segment_busy>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b2c8:	f06f 0305 	mvn.w	r3, #5
 800b2cc:	e040      	b.n	800b350 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	336c      	adds	r3, #108	; 0x6c
 800b2da:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b2dc:	e002      	b.n	800b2e4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d011      	beq.n	800b310 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7f9 fa7a 	bl	80047ee <lwip_htonl>
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	4618      	mov	r0, r3
 800b304:	f7f9 fa73 	bl	80047ee <lwip_htonl>
 800b308:	4603      	mov	r3, r0
 800b30a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dbe6      	blt.n	800b2de <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d103      	bne.n	800b32e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b334:	2bff      	cmp	r3, #255	; 0xff
 800b336:	d007      	beq.n	800b348 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b33e:	3301      	adds	r3, #1
 800b340:	b2da      	uxtb	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3714      	adds	r7, #20
 800b354:	46bd      	mov	sp, r7
 800b356:	bd90      	pop	{r4, r7, pc}
 800b358:	08010b44 	.word	0x08010b44
 800b35c:	080111e4 	.word	0x080111e4
 800b360:	08010b98 	.word	0x08010b98

0800b364 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d106      	bne.n	800b380 <tcp_rexmit_fast+0x1c>
 800b372:	4b2f      	ldr	r3, [pc, #188]	; (800b430 <tcp_rexmit_fast+0xcc>)
 800b374:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b378:	492e      	ldr	r1, [pc, #184]	; (800b434 <tcp_rexmit_fast+0xd0>)
 800b37a:	482f      	ldr	r0, [pc, #188]	; (800b438 <tcp_rexmit_fast+0xd4>)
 800b37c:	f003 f95c 	bl	800e638 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b384:	2b00      	cmp	r3, #0
 800b386:	d04f      	beq.n	800b428 <tcp_rexmit_fast+0xc4>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	8b5b      	ldrh	r3, [r3, #26]
 800b38c:	f003 0304 	and.w	r3, r3, #4
 800b390:	2b00      	cmp	r3, #0
 800b392:	d149      	bne.n	800b428 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7ff ff79 	bl	800b28c <tcp_rexmit>
 800b39a:	4603      	mov	r3, r0
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d143      	bne.n	800b428 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d208      	bcs.n	800b3c2 <tcp_rexmit_fast+0x5e>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	da00      	bge.n	800b3bc <tcp_rexmit_fast+0x58>
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	105b      	asrs	r3, r3, #1
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	e007      	b.n	800b3d2 <tcp_rexmit_fast+0x6e>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	da00      	bge.n	800b3ce <tcp_rexmit_fast+0x6a>
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	105b      	asrs	r3, r3, #1
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b3de:	461a      	mov	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3e4:	005b      	lsls	r3, r3, #1
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d206      	bcs.n	800b3f8 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3ee:	005b      	lsls	r3, r3, #1
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b402:	4619      	mov	r1, r3
 800b404:	0049      	lsls	r1, r1, #1
 800b406:	440b      	add	r3, r1
 800b408:	b29b      	uxth	r3, r3
 800b40a:	4413      	add	r3, r2
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	8b5b      	ldrh	r3, [r3, #26]
 800b418:	f043 0304 	orr.w	r3, r3, #4
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b428:	bf00      	nop
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	08010b44 	.word	0x08010b44
 800b434:	080111fc 	.word	0x080111fc
 800b438:	08010b98 	.word	0x08010b98

0800b43c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	607b      	str	r3, [r7, #4]
 800b446:	460b      	mov	r3, r1
 800b448:	817b      	strh	r3, [r7, #10]
 800b44a:	4613      	mov	r3, r2
 800b44c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b44e:	897a      	ldrh	r2, [r7, #10]
 800b450:	893b      	ldrh	r3, [r7, #8]
 800b452:	4413      	add	r3, r2
 800b454:	b29b      	uxth	r3, r3
 800b456:	3314      	adds	r3, #20
 800b458:	b29b      	uxth	r3, r3
 800b45a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b45e:	4619      	mov	r1, r3
 800b460:	2022      	movs	r0, #34	; 0x22
 800b462:	f7fa f97f 	bl	8005764 <pbuf_alloc>
 800b466:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d04e      	beq.n	800b50c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	895b      	ldrh	r3, [r3, #10]
 800b472:	461a      	mov	r2, r3
 800b474:	897b      	ldrh	r3, [r7, #10]
 800b476:	3314      	adds	r3, #20
 800b478:	429a      	cmp	r2, r3
 800b47a:	da06      	bge.n	800b48a <tcp_output_alloc_header_common+0x4e>
 800b47c:	4b26      	ldr	r3, [pc, #152]	; (800b518 <tcp_output_alloc_header_common+0xdc>)
 800b47e:	f240 7224 	movw	r2, #1828	; 0x724
 800b482:	4926      	ldr	r1, [pc, #152]	; (800b51c <tcp_output_alloc_header_common+0xe0>)
 800b484:	4826      	ldr	r0, [pc, #152]	; (800b520 <tcp_output_alloc_header_common+0xe4>)
 800b486:	f003 f8d7 	bl	800e638 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b490:	8c3b      	ldrh	r3, [r7, #32]
 800b492:	4618      	mov	r0, r3
 800b494:	f7f9 f996 	bl	80047c4 <lwip_htons>
 800b498:	4603      	mov	r3, r0
 800b49a:	461a      	mov	r2, r3
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b4a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7f9 f98e 	bl	80047c4 <lwip_htons>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f7f9 f999 	bl	80047ee <lwip_htonl>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b4c2:	897b      	ldrh	r3, [r7, #10]
 800b4c4:	089b      	lsrs	r3, r3, #2
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	3305      	adds	r3, #5
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	031b      	lsls	r3, r3, #12
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7f9 f972 	bl	80047c4 <lwip_htons>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b4e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7f9 f96a 	bl	80047c4 <lwip_htons>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	741a      	strb	r2, [r3, #16]
 800b4fe:	2200      	movs	r2, #0
 800b500:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	2200      	movs	r2, #0
 800b506:	749a      	strb	r2, [r3, #18]
 800b508:	2200      	movs	r2, #0
 800b50a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b50c:	697b      	ldr	r3, [r7, #20]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3718      	adds	r7, #24
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	08010b44 	.word	0x08010b44
 800b51c:	0801121c 	.word	0x0801121c
 800b520:	08010b98 	.word	0x08010b98

0800b524 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b524:	b5b0      	push	{r4, r5, r7, lr}
 800b526:	b08a      	sub	sp, #40	; 0x28
 800b528:	af04      	add	r7, sp, #16
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	607b      	str	r3, [r7, #4]
 800b52e:	460b      	mov	r3, r1
 800b530:	817b      	strh	r3, [r7, #10]
 800b532:	4613      	mov	r3, r2
 800b534:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d106      	bne.n	800b54a <tcp_output_alloc_header+0x26>
 800b53c:	4b15      	ldr	r3, [pc, #84]	; (800b594 <tcp_output_alloc_header+0x70>)
 800b53e:	f240 7242 	movw	r2, #1858	; 0x742
 800b542:	4915      	ldr	r1, [pc, #84]	; (800b598 <tcp_output_alloc_header+0x74>)
 800b544:	4815      	ldr	r0, [pc, #84]	; (800b59c <tcp_output_alloc_header+0x78>)
 800b546:	f003 f877 	bl	800e638 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	8adb      	ldrh	r3, [r3, #22]
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	8b12      	ldrh	r2, [r2, #24]
 800b556:	68f9      	ldr	r1, [r7, #12]
 800b558:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b55a:	893d      	ldrh	r5, [r7, #8]
 800b55c:	897c      	ldrh	r4, [r7, #10]
 800b55e:	9103      	str	r1, [sp, #12]
 800b560:	2110      	movs	r1, #16
 800b562:	9102      	str	r1, [sp, #8]
 800b564:	9201      	str	r2, [sp, #4]
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	462a      	mov	r2, r5
 800b56c:	4621      	mov	r1, r4
 800b56e:	f7ff ff65 	bl	800b43c <tcp_output_alloc_header_common>
 800b572:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d006      	beq.n	800b588 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b582:	441a      	add	r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b588:	697b      	ldr	r3, [r7, #20]
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3718      	adds	r7, #24
 800b58e:	46bd      	mov	sp, r7
 800b590:	bdb0      	pop	{r4, r5, r7, pc}
 800b592:	bf00      	nop
 800b594:	08010b44 	.word	0x08010b44
 800b598:	0801124c 	.word	0x0801124c
 800b59c:	08010b98 	.word	0x08010b98

0800b5a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b088      	sub	sp, #32
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	71fb      	strb	r3, [r7, #7]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d106      	bne.n	800b5ce <tcp_output_fill_options+0x2e>
 800b5c0:	4b13      	ldr	r3, [pc, #76]	; (800b610 <tcp_output_fill_options+0x70>)
 800b5c2:	f240 7256 	movw	r2, #1878	; 0x756
 800b5c6:	4913      	ldr	r1, [pc, #76]	; (800b614 <tcp_output_fill_options+0x74>)
 800b5c8:	4813      	ldr	r0, [pc, #76]	; (800b618 <tcp_output_fill_options+0x78>)
 800b5ca:	f003 f835 	bl	800e638 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	3314      	adds	r3, #20
 800b5d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	f103 0214 	add.w	r2, r3, #20
 800b5e0:	8bfb      	ldrh	r3, [r7, #30]
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	79fb      	ldrb	r3, [r7, #7]
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	f003 0304 	and.w	r3, r3, #4
 800b5ee:	440b      	add	r3, r1
 800b5f0:	4413      	add	r3, r2
 800b5f2:	697a      	ldr	r2, [r7, #20]
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d006      	beq.n	800b606 <tcp_output_fill_options+0x66>
 800b5f8:	4b05      	ldr	r3, [pc, #20]	; (800b610 <tcp_output_fill_options+0x70>)
 800b5fa:	f240 7275 	movw	r2, #1909	; 0x775
 800b5fe:	4907      	ldr	r1, [pc, #28]	; (800b61c <tcp_output_fill_options+0x7c>)
 800b600:	4805      	ldr	r0, [pc, #20]	; (800b618 <tcp_output_fill_options+0x78>)
 800b602:	f003 f819 	bl	800e638 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b606:	bf00      	nop
 800b608:	3720      	adds	r7, #32
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	08010b44 	.word	0x08010b44
 800b614:	08011274 	.word	0x08011274
 800b618:	08010b98 	.word	0x08010b98
 800b61c:	0801116c 	.word	0x0801116c

0800b620 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b08a      	sub	sp, #40	; 0x28
 800b624:	af04      	add	r7, sp, #16
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	60b9      	str	r1, [r7, #8]
 800b62a:	607a      	str	r2, [r7, #4]
 800b62c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d106      	bne.n	800b642 <tcp_output_control_segment+0x22>
 800b634:	4b1c      	ldr	r3, [pc, #112]	; (800b6a8 <tcp_output_control_segment+0x88>)
 800b636:	f240 7287 	movw	r2, #1927	; 0x787
 800b63a:	491c      	ldr	r1, [pc, #112]	; (800b6ac <tcp_output_control_segment+0x8c>)
 800b63c:	481c      	ldr	r0, [pc, #112]	; (800b6b0 <tcp_output_control_segment+0x90>)
 800b63e:	f002 fffb 	bl	800e638 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b642:	683a      	ldr	r2, [r7, #0]
 800b644:	6879      	ldr	r1, [r7, #4]
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f7fe ff2e 	bl	800a4a8 <tcp_route>
 800b64c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d102      	bne.n	800b65a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b654:	23fc      	movs	r3, #252	; 0xfc
 800b656:	75fb      	strb	r3, [r7, #23]
 800b658:	e01c      	b.n	800b694 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d006      	beq.n	800b66e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	7adb      	ldrb	r3, [r3, #11]
 800b664:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	7a9b      	ldrb	r3, [r3, #10]
 800b66a:	757b      	strb	r3, [r7, #21]
 800b66c:	e003      	b.n	800b676 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b66e:	23ff      	movs	r3, #255	; 0xff
 800b670:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b672:	2300      	movs	r3, #0
 800b674:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b676:	7dba      	ldrb	r2, [r7, #22]
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	9302      	str	r3, [sp, #8]
 800b67c:	2306      	movs	r3, #6
 800b67e:	9301      	str	r3, [sp, #4]
 800b680:	7d7b      	ldrb	r3, [r7, #21]
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	4613      	mov	r3, r2
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	68b8      	ldr	r0, [r7, #8]
 800b68c:	f001 ff6a 	bl	800d564 <ip4_output_if>
 800b690:	4603      	mov	r3, r0
 800b692:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b694:	68b8      	ldr	r0, [r7, #8]
 800b696:	f7fa fb45 	bl	8005d24 <pbuf_free>
  return err;
 800b69a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	08010b44 	.word	0x08010b44
 800b6ac:	0801129c 	.word	0x0801129c
 800b6b0:	08010b98 	.word	0x08010b98

0800b6b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b6b4:	b590      	push	{r4, r7, lr}
 800b6b6:	b08b      	sub	sp, #44	; 0x2c
 800b6b8:	af04      	add	r7, sp, #16
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d106      	bne.n	800b6d6 <tcp_rst+0x22>
 800b6c8:	4b1f      	ldr	r3, [pc, #124]	; (800b748 <tcp_rst+0x94>)
 800b6ca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b6ce:	491f      	ldr	r1, [pc, #124]	; (800b74c <tcp_rst+0x98>)
 800b6d0:	481f      	ldr	r0, [pc, #124]	; (800b750 <tcp_rst+0x9c>)
 800b6d2:	f002 ffb1 	bl	800e638 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d106      	bne.n	800b6ea <tcp_rst+0x36>
 800b6dc:	4b1a      	ldr	r3, [pc, #104]	; (800b748 <tcp_rst+0x94>)
 800b6de:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b6e2:	491c      	ldr	r1, [pc, #112]	; (800b754 <tcp_rst+0xa0>)
 800b6e4:	481a      	ldr	r0, [pc, #104]	; (800b750 <tcp_rst+0x9c>)
 800b6e6:	f002 ffa7 	bl	800e638 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b6ee:	f246 0308 	movw	r3, #24584	; 0x6008
 800b6f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b6f4:	7dfb      	ldrb	r3, [r7, #23]
 800b6f6:	b29c      	uxth	r4, r3
 800b6f8:	68b8      	ldr	r0, [r7, #8]
 800b6fa:	f7f9 f878 	bl	80047ee <lwip_htonl>
 800b6fe:	4602      	mov	r2, r0
 800b700:	8abb      	ldrh	r3, [r7, #20]
 800b702:	9303      	str	r3, [sp, #12]
 800b704:	2314      	movs	r3, #20
 800b706:	9302      	str	r3, [sp, #8]
 800b708:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b70a:	9301      	str	r3, [sp, #4]
 800b70c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	4613      	mov	r3, r2
 800b712:	2200      	movs	r2, #0
 800b714:	4621      	mov	r1, r4
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f7ff fe90 	bl	800b43c <tcp_output_alloc_header_common>
 800b71c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00c      	beq.n	800b73e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b724:	7dfb      	ldrb	r3, [r7, #23]
 800b726:	2200      	movs	r2, #0
 800b728:	6939      	ldr	r1, [r7, #16]
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f7ff ff38 	bl	800b5a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	6939      	ldr	r1, [r7, #16]
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f7ff ff72 	bl	800b620 <tcp_output_control_segment>
 800b73c:	e000      	b.n	800b740 <tcp_rst+0x8c>
    return;
 800b73e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b740:	371c      	adds	r7, #28
 800b742:	46bd      	mov	sp, r7
 800b744:	bd90      	pop	{r4, r7, pc}
 800b746:	bf00      	nop
 800b748:	08010b44 	.word	0x08010b44
 800b74c:	080112c8 	.word	0x080112c8
 800b750:	08010b98 	.word	0x08010b98
 800b754:	080112e4 	.word	0x080112e4

0800b758 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b758:	b590      	push	{r4, r7, lr}
 800b75a:	b087      	sub	sp, #28
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b760:	2300      	movs	r3, #0
 800b762:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b764:	2300      	movs	r3, #0
 800b766:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d106      	bne.n	800b77c <tcp_send_empty_ack+0x24>
 800b76e:	4b28      	ldr	r3, [pc, #160]	; (800b810 <tcp_send_empty_ack+0xb8>)
 800b770:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b774:	4927      	ldr	r1, [pc, #156]	; (800b814 <tcp_send_empty_ack+0xbc>)
 800b776:	4828      	ldr	r0, [pc, #160]	; (800b818 <tcp_send_empty_ack+0xc0>)
 800b778:	f002 ff5e 	bl	800e638 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b77c:	7dfb      	ldrb	r3, [r7, #23]
 800b77e:	009b      	lsls	r3, r3, #2
 800b780:	b2db      	uxtb	r3, r3
 800b782:	f003 0304 	and.w	r3, r3, #4
 800b786:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b788:	7d7b      	ldrb	r3, [r7, #21]
 800b78a:	b29c      	uxth	r4, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b790:	4618      	mov	r0, r3
 800b792:	f7f9 f82c 	bl	80047ee <lwip_htonl>
 800b796:	4603      	mov	r3, r0
 800b798:	2200      	movs	r2, #0
 800b79a:	4621      	mov	r1, r4
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f7ff fec1 	bl	800b524 <tcp_output_alloc_header>
 800b7a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d109      	bne.n	800b7be <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	8b5b      	ldrh	r3, [r3, #26]
 800b7ae:	f043 0303 	orr.w	r3, r3, #3
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b7b8:	f06f 0301 	mvn.w	r3, #1
 800b7bc:	e023      	b.n	800b806 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b7be:	7dbb      	ldrb	r3, [r7, #22]
 800b7c0:	7dfa      	ldrb	r2, [r7, #23]
 800b7c2:	6939      	ldr	r1, [r7, #16]
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f7ff feeb 	bl	800b5a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	6939      	ldr	r1, [r7, #16]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7ff ff24 	bl	800b620 <tcp_output_control_segment>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b7dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d007      	beq.n	800b7f4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	8b5b      	ldrh	r3, [r3, #26]
 800b7e8:	f043 0303 	orr.w	r3, r3, #3
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	835a      	strh	r2, [r3, #26]
 800b7f2:	e006      	b.n	800b802 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	8b5b      	ldrh	r3, [r3, #26]
 800b7f8:	f023 0303 	bic.w	r3, r3, #3
 800b7fc:	b29a      	uxth	r2, r3
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b802:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b806:	4618      	mov	r0, r3
 800b808:	371c      	adds	r7, #28
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd90      	pop	{r4, r7, pc}
 800b80e:	bf00      	nop
 800b810:	08010b44 	.word	0x08010b44
 800b814:	08011300 	.word	0x08011300
 800b818:	08010b98 	.word	0x08010b98

0800b81c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b81c:	b590      	push	{r4, r7, lr}
 800b81e:	b087      	sub	sp, #28
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b824:	2300      	movs	r3, #0
 800b826:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d106      	bne.n	800b83c <tcp_keepalive+0x20>
 800b82e:	4b18      	ldr	r3, [pc, #96]	; (800b890 <tcp_keepalive+0x74>)
 800b830:	f640 0224 	movw	r2, #2084	; 0x824
 800b834:	4917      	ldr	r1, [pc, #92]	; (800b894 <tcp_keepalive+0x78>)
 800b836:	4818      	ldr	r0, [pc, #96]	; (800b898 <tcp_keepalive+0x7c>)
 800b838:	f002 fefe 	bl	800e638 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b83c:	7dfb      	ldrb	r3, [r7, #23]
 800b83e:	b29c      	uxth	r4, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b844:	3b01      	subs	r3, #1
 800b846:	4618      	mov	r0, r3
 800b848:	f7f8 ffd1 	bl	80047ee <lwip_htonl>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2200      	movs	r2, #0
 800b850:	4621      	mov	r1, r4
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f7ff fe66 	bl	800b524 <tcp_output_alloc_header>
 800b858:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d102      	bne.n	800b866 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b860:	f04f 33ff 	mov.w	r3, #4294967295
 800b864:	e010      	b.n	800b888 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b866:	7dfb      	ldrb	r3, [r7, #23]
 800b868:	2200      	movs	r2, #0
 800b86a:	6939      	ldr	r1, [r7, #16]
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7ff fe97 	bl	800b5a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	3304      	adds	r3, #4
 800b878:	6939      	ldr	r1, [r7, #16]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7ff fed0 	bl	800b620 <tcp_output_control_segment>
 800b880:	4603      	mov	r3, r0
 800b882:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b884:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	371c      	adds	r7, #28
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd90      	pop	{r4, r7, pc}
 800b890:	08010b44 	.word	0x08010b44
 800b894:	08011320 	.word	0x08011320
 800b898:	08010b98 	.word	0x08010b98

0800b89c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b89c:	b590      	push	{r4, r7, lr}
 800b89e:	b08b      	sub	sp, #44	; 0x2c
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d106      	bne.n	800b8be <tcp_zero_window_probe+0x22>
 800b8b0:	4b4c      	ldr	r3, [pc, #304]	; (800b9e4 <tcp_zero_window_probe+0x148>)
 800b8b2:	f640 024f 	movw	r2, #2127	; 0x84f
 800b8b6:	494c      	ldr	r1, [pc, #304]	; (800b9e8 <tcp_zero_window_probe+0x14c>)
 800b8b8:	484c      	ldr	r0, [pc, #304]	; (800b9ec <tcp_zero_window_probe+0x150>)
 800b8ba:	f002 febd 	bl	800e638 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d101      	bne.n	800b8ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	e086      	b.n	800b9dc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b8d4:	2bff      	cmp	r3, #255	; 0xff
 800b8d6:	d007      	beq.n	800b8e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b8de:	3301      	adds	r3, #1
 800b8e0:	b2da      	uxtb	r2, r3
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	899b      	ldrh	r3, [r3, #12]
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7f8 ff67 	bl	80047c4 <lwip_htons>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	f003 0301 	and.w	r3, r3, #1
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d005      	beq.n	800b90e <tcp_zero_window_probe+0x72>
 800b902:	6a3b      	ldr	r3, [r7, #32]
 800b904:	891b      	ldrh	r3, [r3, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d101      	bne.n	800b90e <tcp_zero_window_probe+0x72>
 800b90a:	2301      	movs	r3, #1
 800b90c:	e000      	b.n	800b910 <tcp_zero_window_probe+0x74>
 800b90e:	2300      	movs	r3, #0
 800b910:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b912:	7ffb      	ldrb	r3, [r7, #31]
 800b914:	2b00      	cmp	r3, #0
 800b916:	bf0c      	ite	eq
 800b918:	2301      	moveq	r3, #1
 800b91a:	2300      	movne	r3, #0
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b924:	b299      	uxth	r1, r3
 800b926:	6a3b      	ldr	r3, [r7, #32]
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	8bba      	ldrh	r2, [r7, #28]
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7ff fdf8 	bl	800b524 <tcp_output_alloc_header>
 800b934:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d102      	bne.n	800b942 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b93c:	f04f 33ff 	mov.w	r3, #4294967295
 800b940:	e04c      	b.n	800b9dc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b942:	69bb      	ldr	r3, [r7, #24]
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b948:	7ffb      	ldrb	r3, [r7, #31]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d011      	beq.n	800b972 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	899b      	ldrh	r3, [r3, #12]
 800b952:	b29b      	uxth	r3, r3
 800b954:	b21b      	sxth	r3, r3
 800b956:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b95a:	b21c      	sxth	r4, r3
 800b95c:	2011      	movs	r0, #17
 800b95e:	f7f8 ff31 	bl	80047c4 <lwip_htons>
 800b962:	4603      	mov	r3, r0
 800b964:	b21b      	sxth	r3, r3
 800b966:	4323      	orrs	r3, r4
 800b968:	b21b      	sxth	r3, r3
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	819a      	strh	r2, [r3, #12]
 800b970:	e010      	b.n	800b994 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b972:	69bb      	ldr	r3, [r7, #24]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	3314      	adds	r3, #20
 800b978:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	6858      	ldr	r0, [r3, #4]
 800b97e:	6a3b      	ldr	r3, [r7, #32]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	891a      	ldrh	r2, [r3, #8]
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	891b      	ldrh	r3, [r3, #8]
 800b988:	1ad3      	subs	r3, r2, r3
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	2201      	movs	r2, #1
 800b98e:	6939      	ldr	r1, [r7, #16]
 800b990:	f7fa fbb2 	bl	80060f8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b994:	6a3b      	ldr	r3, [r7, #32]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7f8 ff27 	bl	80047ee <lwip_htonl>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	da02      	bge.n	800b9b8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9bc:	2200      	movs	r2, #0
 800b9be:	69b9      	ldr	r1, [r7, #24]
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f7ff fded 	bl	800b5a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	69b9      	ldr	r1, [r7, #24]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7ff fe26 	bl	800b620 <tcp_output_control_segment>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b9d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	372c      	adds	r7, #44	; 0x2c
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd90      	pop	{r4, r7, pc}
 800b9e4:	08010b44 	.word	0x08010b44
 800b9e8:	0801133c 	.word	0x0801133c
 800b9ec:	08010b98 	.word	0x08010b98

0800b9f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b9f8:	f7fa fc6c 	bl	80062d4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ba28 <tcpip_tcp_timer+0x38>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d103      	bne.n	800ba0c <tcpip_tcp_timer+0x1c>
 800ba04:	4b09      	ldr	r3, [pc, #36]	; (800ba2c <tcpip_tcp_timer+0x3c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d005      	beq.n	800ba18 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	4908      	ldr	r1, [pc, #32]	; (800ba30 <tcpip_tcp_timer+0x40>)
 800ba10:	20fa      	movs	r0, #250	; 0xfa
 800ba12:	f000 f8f1 	bl	800bbf8 <sys_timeout>
 800ba16:	e002      	b.n	800ba1e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ba18:	4b06      	ldr	r3, [pc, #24]	; (800ba34 <tcpip_tcp_timer+0x44>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	601a      	str	r2, [r3, #0]
  }
}
 800ba1e:	bf00      	nop
 800ba20:	3708      	adds	r7, #8
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	20006930 	.word	0x20006930
 800ba2c:	20006940 	.word	0x20006940
 800ba30:	0800b9f1 	.word	0x0800b9f1
 800ba34:	2000010c 	.word	0x2000010c

0800ba38 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ba3c:	4b0a      	ldr	r3, [pc, #40]	; (800ba68 <tcp_timer_needed+0x30>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10f      	bne.n	800ba64 <tcp_timer_needed+0x2c>
 800ba44:	4b09      	ldr	r3, [pc, #36]	; (800ba6c <tcp_timer_needed+0x34>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d103      	bne.n	800ba54 <tcp_timer_needed+0x1c>
 800ba4c:	4b08      	ldr	r3, [pc, #32]	; (800ba70 <tcp_timer_needed+0x38>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d007      	beq.n	800ba64 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ba54:	4b04      	ldr	r3, [pc, #16]	; (800ba68 <tcp_timer_needed+0x30>)
 800ba56:	2201      	movs	r2, #1
 800ba58:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	4905      	ldr	r1, [pc, #20]	; (800ba74 <tcp_timer_needed+0x3c>)
 800ba5e:	20fa      	movs	r0, #250	; 0xfa
 800ba60:	f000 f8ca 	bl	800bbf8 <sys_timeout>
  }
}
 800ba64:	bf00      	nop
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	2000010c 	.word	0x2000010c
 800ba6c:	20006930 	.word	0x20006930
 800ba70:	20006940 	.word	0x20006940
 800ba74:	0800b9f1 	.word	0x0800b9f1

0800ba78 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	60f8      	str	r0, [r7, #12]
 800ba80:	60b9      	str	r1, [r7, #8]
 800ba82:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ba84:	2006      	movs	r0, #6
 800ba86:	f7f9 faf3 	bl	8005070 <memp_malloc>
 800ba8a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d109      	bne.n	800baa6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d151      	bne.n	800bb3c <sys_timeout_abs+0xc4>
 800ba98:	4b2a      	ldr	r3, [pc, #168]	; (800bb44 <sys_timeout_abs+0xcc>)
 800ba9a:	22be      	movs	r2, #190	; 0xbe
 800ba9c:	492a      	ldr	r1, [pc, #168]	; (800bb48 <sys_timeout_abs+0xd0>)
 800ba9e:	482b      	ldr	r0, [pc, #172]	; (800bb4c <sys_timeout_abs+0xd4>)
 800baa0:	f002 fdca 	bl	800e638 <iprintf>
    return;
 800baa4:	e04a      	b.n	800bb3c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	2200      	movs	r2, #0
 800baaa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	68fa      	ldr	r2, [r7, #12]
 800babc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800babe:	4b24      	ldr	r3, [pc, #144]	; (800bb50 <sys_timeout_abs+0xd8>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d103      	bne.n	800bace <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bac6:	4a22      	ldr	r2, [pc, #136]	; (800bb50 <sys_timeout_abs+0xd8>)
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	6013      	str	r3, [r2, #0]
    return;
 800bacc:	e037      	b.n	800bb3e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	685a      	ldr	r2, [r3, #4]
 800bad2:	4b1f      	ldr	r3, [pc, #124]	; (800bb50 <sys_timeout_abs+0xd8>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	1ad3      	subs	r3, r2, r3
 800bada:	0fdb      	lsrs	r3, r3, #31
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d007      	beq.n	800baf6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bae6:	4b1a      	ldr	r3, [pc, #104]	; (800bb50 <sys_timeout_abs+0xd8>)
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800baee:	4a18      	ldr	r2, [pc, #96]	; (800bb50 <sys_timeout_abs+0xd8>)
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	6013      	str	r3, [r2, #0]
 800baf4:	e023      	b.n	800bb3e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800baf6:	4b16      	ldr	r3, [pc, #88]	; (800bb50 <sys_timeout_abs+0xd8>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	617b      	str	r3, [r7, #20]
 800bafc:	e01a      	b.n	800bb34 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d00b      	beq.n	800bb1e <sys_timeout_abs+0xa6>
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	0fdb      	lsrs	r3, r3, #31
 800bb14:	f003 0301 	and.w	r3, r3, #1
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d007      	beq.n	800bb2e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	693a      	ldr	r2, [r7, #16]
 800bb2a:	601a      	str	r2, [r3, #0]
        break;
 800bb2c:	e007      	b.n	800bb3e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	617b      	str	r3, [r7, #20]
 800bb34:	697b      	ldr	r3, [r7, #20]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1e1      	bne.n	800bafe <sys_timeout_abs+0x86>
 800bb3a:	e000      	b.n	800bb3e <sys_timeout_abs+0xc6>
    return;
 800bb3c:	bf00      	nop
      }
    }
  }
}
 800bb3e:	3718      	adds	r7, #24
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	08011360 	.word	0x08011360
 800bb48:	08011394 	.word	0x08011394
 800bb4c:	080113d4 	.word	0x080113d4
 800bb50:	20000104 	.word	0x20000104

0800bb54 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	4798      	blx	r3

  now = sys_now();
 800bb66:	f7f8 fd9f 	bl	80046a8 <sys_now>
 800bb6a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	4b0f      	ldr	r3, [pc, #60]	; (800bbb0 <lwip_cyclic_timer+0x5c>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4413      	add	r3, r2
 800bb76:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bb78:	68fa      	ldr	r2, [r7, #12]
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	0fdb      	lsrs	r3, r3, #31
 800bb80:	f003 0301 	and.w	r3, r3, #1
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d009      	beq.n	800bb9e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	4413      	add	r3, r2
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	4907      	ldr	r1, [pc, #28]	; (800bbb4 <lwip_cyclic_timer+0x60>)
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7ff ff6e 	bl	800ba78 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bb9c:	e004      	b.n	800bba8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	4904      	ldr	r1, [pc, #16]	; (800bbb4 <lwip_cyclic_timer+0x60>)
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f7ff ff68 	bl	800ba78 <sys_timeout_abs>
}
 800bba8:	bf00      	nop
 800bbaa:	3718      	adds	r7, #24
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	20000108 	.word	0x20000108
 800bbb4:	0800bb55 	.word	0x0800bb55

0800bbb8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	607b      	str	r3, [r7, #4]
 800bbc2:	e00e      	b.n	800bbe2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bbc4:	4a0a      	ldr	r2, [pc, #40]	; (800bbf0 <sys_timeouts_init+0x38>)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	00db      	lsls	r3, r3, #3
 800bbd0:	4a07      	ldr	r2, [pc, #28]	; (800bbf0 <sys_timeouts_init+0x38>)
 800bbd2:	4413      	add	r3, r2
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	4907      	ldr	r1, [pc, #28]	; (800bbf4 <sys_timeouts_init+0x3c>)
 800bbd8:	f000 f80e 	bl	800bbf8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	607b      	str	r3, [r7, #4]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d9ed      	bls.n	800bbc4 <sys_timeouts_init+0xc>
  }
}
 800bbe8:	bf00      	nop
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	08011f44 	.word	0x08011f44
 800bbf4:	0800bb55 	.word	0x0800bb55

0800bbf8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc0a:	d306      	bcc.n	800bc1a <sys_timeout+0x22>
 800bc0c:	4b0a      	ldr	r3, [pc, #40]	; (800bc38 <sys_timeout+0x40>)
 800bc0e:	f240 1229 	movw	r2, #297	; 0x129
 800bc12:	490a      	ldr	r1, [pc, #40]	; (800bc3c <sys_timeout+0x44>)
 800bc14:	480a      	ldr	r0, [pc, #40]	; (800bc40 <sys_timeout+0x48>)
 800bc16:	f002 fd0f 	bl	800e638 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bc1a:	f7f8 fd45 	bl	80046a8 <sys_now>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	4413      	add	r3, r2
 800bc24:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	68b9      	ldr	r1, [r7, #8]
 800bc2a:	6978      	ldr	r0, [r7, #20]
 800bc2c:	f7ff ff24 	bl	800ba78 <sys_timeout_abs>
#endif
}
 800bc30:	bf00      	nop
 800bc32:	3718      	adds	r7, #24
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	08011360 	.word	0x08011360
 800bc3c:	080113fc 	.word	0x080113fc
 800bc40:	080113d4 	.word	0x080113d4

0800bc44 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bc4a:	f7f8 fd2d 	bl	80046a8 <sys_now>
 800bc4e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bc50:	4b1a      	ldr	r3, [pc, #104]	; (800bcbc <sys_check_timeouts+0x78>)
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d001      	beq.n	800bc5e <sys_check_timeouts+0x1a>
 800bc5a:	f7f9 fd2d 	bl	80056b8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bc5e:	4b18      	ldr	r3, [pc, #96]	; (800bcc0 <sys_check_timeouts+0x7c>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d022      	beq.n	800bcb0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	0fdb      	lsrs	r3, r3, #31
 800bc74:	f003 0301 	and.w	r3, r3, #1
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d11a      	bne.n	800bcb4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a0f      	ldr	r2, [pc, #60]	; (800bcc0 <sys_check_timeouts+0x7c>)
 800bc84:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	4a0b      	ldr	r2, [pc, #44]	; (800bcc4 <sys_check_timeouts+0x80>)
 800bc98:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bc9a:	68b9      	ldr	r1, [r7, #8]
 800bc9c:	2006      	movs	r0, #6
 800bc9e:	f7f9 fa33 	bl	8005108 <memp_free>
    if (handler != NULL) {
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d0d3      	beq.n	800bc50 <sys_check_timeouts+0xc>
      handler(arg);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6838      	ldr	r0, [r7, #0]
 800bcac:	4798      	blx	r3
  do {
 800bcae:	e7cf      	b.n	800bc50 <sys_check_timeouts+0xc>
      return;
 800bcb0:	bf00      	nop
 800bcb2:	e000      	b.n	800bcb6 <sys_check_timeouts+0x72>
      return;
 800bcb4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}
 800bcbc:	20006928 	.word	0x20006928
 800bcc0:	20000104 	.word	0x20000104
 800bcc4:	20000108 	.word	0x20000108

0800bcc8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bccc:	f002 fccc 	bl	800e668 <rand>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	4b01      	ldr	r3, [pc, #4]	; (800bce8 <udp_init+0x20>)
 800bce2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bce4:	bf00      	nop
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	20000010 	.word	0x20000010

0800bcec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d105      	bne.n	800bd0c <udp_input_local_match+0x20>
 800bd00:	4b27      	ldr	r3, [pc, #156]	; (800bda0 <udp_input_local_match+0xb4>)
 800bd02:	2287      	movs	r2, #135	; 0x87
 800bd04:	4927      	ldr	r1, [pc, #156]	; (800bda4 <udp_input_local_match+0xb8>)
 800bd06:	4828      	ldr	r0, [pc, #160]	; (800bda8 <udp_input_local_match+0xbc>)
 800bd08:	f002 fc96 	bl	800e638 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d105      	bne.n	800bd1e <udp_input_local_match+0x32>
 800bd12:	4b23      	ldr	r3, [pc, #140]	; (800bda0 <udp_input_local_match+0xb4>)
 800bd14:	2288      	movs	r2, #136	; 0x88
 800bd16:	4925      	ldr	r1, [pc, #148]	; (800bdac <udp_input_local_match+0xc0>)
 800bd18:	4823      	ldr	r0, [pc, #140]	; (800bda8 <udp_input_local_match+0xbc>)
 800bd1a:	f002 fc8d 	bl	800e638 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	7a1b      	ldrb	r3, [r3, #8]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00b      	beq.n	800bd3e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	7a1a      	ldrb	r2, [r3, #8]
 800bd2a:	4b21      	ldr	r3, [pc, #132]	; (800bdb0 <udp_input_local_match+0xc4>)
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd32:	3301      	adds	r3, #1
 800bd34:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d001      	beq.n	800bd3e <udp_input_local_match+0x52>
    return 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	e02b      	b.n	800bd96 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bd3e:	79fb      	ldrb	r3, [r7, #7]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d018      	beq.n	800bd76 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d013      	beq.n	800bd72 <udp_input_local_match+0x86>
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d00f      	beq.n	800bd72 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bd52:	4b17      	ldr	r3, [pc, #92]	; (800bdb0 <udp_input_local_match+0xc4>)
 800bd54:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bd56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd5a:	d00a      	beq.n	800bd72 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	4b13      	ldr	r3, [pc, #76]	; (800bdb0 <udp_input_local_match+0xc4>)
 800bd62:	695b      	ldr	r3, [r3, #20]
 800bd64:	405a      	eors	r2, r3
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	3308      	adds	r3, #8
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d110      	bne.n	800bd94 <udp_input_local_match+0xa8>
          return 1;
 800bd72:	2301      	movs	r3, #1
 800bd74:	e00f      	b.n	800bd96 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d009      	beq.n	800bd90 <udp_input_local_match+0xa4>
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d005      	beq.n	800bd90 <udp_input_local_match+0xa4>
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	4b09      	ldr	r3, [pc, #36]	; (800bdb0 <udp_input_local_match+0xc4>)
 800bd8a:	695b      	ldr	r3, [r3, #20]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d101      	bne.n	800bd94 <udp_input_local_match+0xa8>
        return 1;
 800bd90:	2301      	movs	r3, #1
 800bd92:	e000      	b.n	800bd96 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	08011448 	.word	0x08011448
 800bda4:	08011478 	.word	0x08011478
 800bda8:	0801149c 	.word	0x0801149c
 800bdac:	080114c4 	.word	0x080114c4
 800bdb0:	200033ec 	.word	0x200033ec

0800bdb4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bdb4:	b590      	push	{r4, r7, lr}
 800bdb6:	b08d      	sub	sp, #52	; 0x34
 800bdb8:	af02      	add	r7, sp, #8
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d105      	bne.n	800bdd4 <udp_input+0x20>
 800bdc8:	4b7c      	ldr	r3, [pc, #496]	; (800bfbc <udp_input+0x208>)
 800bdca:	22cf      	movs	r2, #207	; 0xcf
 800bdcc:	497c      	ldr	r1, [pc, #496]	; (800bfc0 <udp_input+0x20c>)
 800bdce:	487d      	ldr	r0, [pc, #500]	; (800bfc4 <udp_input+0x210>)
 800bdd0:	f002 fc32 	bl	800e638 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d105      	bne.n	800bde6 <udp_input+0x32>
 800bdda:	4b78      	ldr	r3, [pc, #480]	; (800bfbc <udp_input+0x208>)
 800bddc:	22d0      	movs	r2, #208	; 0xd0
 800bdde:	497a      	ldr	r1, [pc, #488]	; (800bfc8 <udp_input+0x214>)
 800bde0:	4878      	ldr	r0, [pc, #480]	; (800bfc4 <udp_input+0x210>)
 800bde2:	f002 fc29 	bl	800e638 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	895b      	ldrh	r3, [r3, #10]
 800bdea:	2b07      	cmp	r3, #7
 800bdec:	d803      	bhi.n	800bdf6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f7f9 ff98 	bl	8005d24 <pbuf_free>
    goto end;
 800bdf4:	e0de      	b.n	800bfb4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bdfc:	4b73      	ldr	r3, [pc, #460]	; (800bfcc <udp_input+0x218>)
 800bdfe:	695a      	ldr	r2, [r3, #20]
 800be00:	4b72      	ldr	r3, [pc, #456]	; (800bfcc <udp_input+0x218>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4619      	mov	r1, r3
 800be06:	4610      	mov	r0, r2
 800be08:	f001 fc84 	bl	800d714 <ip4_addr_isbroadcast_u32>
 800be0c:	4603      	mov	r3, r0
 800be0e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	881b      	ldrh	r3, [r3, #0]
 800be14:	b29b      	uxth	r3, r3
 800be16:	4618      	mov	r0, r3
 800be18:	f7f8 fcd4 	bl	80047c4 <lwip_htons>
 800be1c:	4603      	mov	r3, r0
 800be1e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	885b      	ldrh	r3, [r3, #2]
 800be24:	b29b      	uxth	r3, r3
 800be26:	4618      	mov	r0, r3
 800be28:	f7f8 fccc 	bl	80047c4 <lwip_htons>
 800be2c:	4603      	mov	r3, r0
 800be2e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800be30:	2300      	movs	r3, #0
 800be32:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800be34:	2300      	movs	r3, #0
 800be36:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800be38:	2300      	movs	r3, #0
 800be3a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be3c:	4b64      	ldr	r3, [pc, #400]	; (800bfd0 <udp_input+0x21c>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	627b      	str	r3, [r7, #36]	; 0x24
 800be42:	e054      	b.n	800beee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be46:	8a5b      	ldrh	r3, [r3, #18]
 800be48:	89fa      	ldrh	r2, [r7, #14]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d14a      	bne.n	800bee4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800be4e:	7cfb      	ldrb	r3, [r7, #19]
 800be50:	461a      	mov	r2, r3
 800be52:	6839      	ldr	r1, [r7, #0]
 800be54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be56:	f7ff ff49 	bl	800bcec <udp_input_local_match>
 800be5a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d041      	beq.n	800bee4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	7c1b      	ldrb	r3, [r3, #16]
 800be64:	f003 0304 	and.w	r3, r3, #4
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d11d      	bne.n	800bea8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d102      	bne.n	800be78 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800be72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be74:	61fb      	str	r3, [r7, #28]
 800be76:	e017      	b.n	800bea8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800be78:	7cfb      	ldrb	r3, [r7, #19]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d014      	beq.n	800bea8 <udp_input+0xf4>
 800be7e:	4b53      	ldr	r3, [pc, #332]	; (800bfcc <udp_input+0x218>)
 800be80:	695b      	ldr	r3, [r3, #20]
 800be82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be86:	d10f      	bne.n	800bea8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	3304      	adds	r3, #4
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	429a      	cmp	r2, r3
 800be94:	d008      	beq.n	800bea8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800be96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	3304      	adds	r3, #4
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d101      	bne.n	800bea8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800bea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beaa:	8a9b      	ldrh	r3, [r3, #20]
 800beac:	8a3a      	ldrh	r2, [r7, #16]
 800beae:	429a      	cmp	r2, r3
 800beb0:	d118      	bne.n	800bee4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800beb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d005      	beq.n	800bec6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800beba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebc:	685a      	ldr	r2, [r3, #4]
 800bebe:	4b43      	ldr	r3, [pc, #268]	; (800bfcc <udp_input+0x218>)
 800bec0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d10e      	bne.n	800bee4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bec6:	6a3b      	ldr	r3, [r7, #32]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d014      	beq.n	800bef6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	68da      	ldr	r2, [r3, #12]
 800bed0:	6a3b      	ldr	r3, [r7, #32]
 800bed2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bed4:	4b3e      	ldr	r3, [pc, #248]	; (800bfd0 <udp_input+0x21c>)
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beda:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bedc:	4a3c      	ldr	r2, [pc, #240]	; (800bfd0 <udp_input+0x21c>)
 800bede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bee2:	e008      	b.n	800bef6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	627b      	str	r3, [r7, #36]	; 0x24
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1a7      	bne.n	800be44 <udp_input+0x90>
 800bef4:	e000      	b.n	800bef8 <udp_input+0x144>
        break;
 800bef6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befa:	2b00      	cmp	r3, #0
 800befc:	d101      	bne.n	800bf02 <udp_input+0x14e>
    pcb = uncon_pcb;
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d002      	beq.n	800bf0e <udp_input+0x15a>
    for_us = 1;
 800bf08:	2301      	movs	r3, #1
 800bf0a:	76fb      	strb	r3, [r7, #27]
 800bf0c:	e00a      	b.n	800bf24 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	3304      	adds	r3, #4
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	4b2d      	ldr	r3, [pc, #180]	; (800bfcc <udp_input+0x218>)
 800bf16:	695b      	ldr	r3, [r3, #20]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	bf0c      	ite	eq
 800bf1c:	2301      	moveq	r3, #1
 800bf1e:	2300      	movne	r3, #0
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bf24:	7efb      	ldrb	r3, [r7, #27]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d041      	beq.n	800bfae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bf2a:	2108      	movs	r1, #8
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7f9 fe73 	bl	8005c18 <pbuf_remove_header>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00a      	beq.n	800bf4e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bf38:	4b20      	ldr	r3, [pc, #128]	; (800bfbc <udp_input+0x208>)
 800bf3a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bf3e:	4925      	ldr	r1, [pc, #148]	; (800bfd4 <udp_input+0x220>)
 800bf40:	4820      	ldr	r0, [pc, #128]	; (800bfc4 <udp_input+0x210>)
 800bf42:	f002 fb79 	bl	800e638 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7f9 feec 	bl	8005d24 <pbuf_free>
      goto end;
 800bf4c:	e032      	b.n	800bfb4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800bf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d012      	beq.n	800bf7a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00a      	beq.n	800bf72 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	699c      	ldr	r4, [r3, #24]
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	69d8      	ldr	r0, [r3, #28]
 800bf64:	8a3b      	ldrh	r3, [r7, #16]
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	4b1b      	ldr	r3, [pc, #108]	; (800bfd8 <udp_input+0x224>)
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf6e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bf70:	e021      	b.n	800bfb6 <udp_input+0x202>
        pbuf_free(p);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7f9 fed6 	bl	8005d24 <pbuf_free>
        goto end;
 800bf78:	e01c      	b.n	800bfb4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bf7a:	7cfb      	ldrb	r3, [r7, #19]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d112      	bne.n	800bfa6 <udp_input+0x1f2>
 800bf80:	4b12      	ldr	r3, [pc, #72]	; (800bfcc <udp_input+0x218>)
 800bf82:	695b      	ldr	r3, [r3, #20]
 800bf84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf88:	2be0      	cmp	r3, #224	; 0xe0
 800bf8a:	d00c      	beq.n	800bfa6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bf8c:	4b0f      	ldr	r3, [pc, #60]	; (800bfcc <udp_input+0x218>)
 800bf8e:	899b      	ldrh	r3, [r3, #12]
 800bf90:	3308      	adds	r3, #8
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	b21b      	sxth	r3, r3
 800bf96:	4619      	mov	r1, r3
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7f9 feb0 	bl	8005cfe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bf9e:	2103      	movs	r1, #3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f001 f899 	bl	800d0d8 <icmp_dest_unreach>
      pbuf_free(p);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7f9 febc 	bl	8005d24 <pbuf_free>
  return;
 800bfac:	e003      	b.n	800bfb6 <udp_input+0x202>
    pbuf_free(p);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7f9 feb8 	bl	8005d24 <pbuf_free>
  return;
 800bfb4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bfb6:	372c      	adds	r7, #44	; 0x2c
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd90      	pop	{r4, r7, pc}
 800bfbc:	08011448 	.word	0x08011448
 800bfc0:	080114ec 	.word	0x080114ec
 800bfc4:	0801149c 	.word	0x0801149c
 800bfc8:	08011504 	.word	0x08011504
 800bfcc:	200033ec 	.word	0x200033ec
 800bfd0:	20006948 	.word	0x20006948
 800bfd4:	08011520 	.word	0x08011520
 800bfd8:	200033fc 	.word	0x200033fc

0800bfdc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d01e      	beq.n	800c02a <udp_netif_ip_addr_changed+0x4e>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d01a      	beq.n	800c02a <udp_netif_ip_addr_changed+0x4e>
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d017      	beq.n	800c02a <udp_netif_ip_addr_changed+0x4e>
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d013      	beq.n	800c02a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c002:	4b0d      	ldr	r3, [pc, #52]	; (800c038 <udp_netif_ip_addr_changed+0x5c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	60fb      	str	r3, [r7, #12]
 800c008:	e00c      	b.n	800c024 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	429a      	cmp	r2, r3
 800c014:	d103      	bne.n	800c01e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	60fb      	str	r3, [r7, #12]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1ef      	bne.n	800c00a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c02a:	bf00      	nop
 800c02c:	3714      	adds	r7, #20
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	20006948 	.word	0x20006948

0800c03c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c044:	4915      	ldr	r1, [pc, #84]	; (800c09c <etharp_free_entry+0x60>)
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	4613      	mov	r3, r2
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	4413      	add	r3, r2
 800c04e:	00db      	lsls	r3, r3, #3
 800c050:	440b      	add	r3, r1
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d013      	beq.n	800c080 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c058:	4910      	ldr	r1, [pc, #64]	; (800c09c <etharp_free_entry+0x60>)
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	4613      	mov	r3, r2
 800c05e:	005b      	lsls	r3, r3, #1
 800c060:	4413      	add	r3, r2
 800c062:	00db      	lsls	r3, r3, #3
 800c064:	440b      	add	r3, r1
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4618      	mov	r0, r3
 800c06a:	f7f9 fe5b 	bl	8005d24 <pbuf_free>
    arp_table[i].q = NULL;
 800c06e:	490b      	ldr	r1, [pc, #44]	; (800c09c <etharp_free_entry+0x60>)
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	4613      	mov	r3, r2
 800c074:	005b      	lsls	r3, r3, #1
 800c076:	4413      	add	r3, r2
 800c078:	00db      	lsls	r3, r3, #3
 800c07a:	440b      	add	r3, r1
 800c07c:	2200      	movs	r2, #0
 800c07e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c080:	4906      	ldr	r1, [pc, #24]	; (800c09c <etharp_free_entry+0x60>)
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	4613      	mov	r3, r2
 800c086:	005b      	lsls	r3, r3, #1
 800c088:	4413      	add	r3, r2
 800c08a:	00db      	lsls	r3, r3, #3
 800c08c:	440b      	add	r3, r1
 800c08e:	3314      	adds	r3, #20
 800c090:	2200      	movs	r2, #0
 800c092:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c094:	bf00      	nop
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	20000110 	.word	0x20000110

0800c0a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	607b      	str	r3, [r7, #4]
 800c0aa:	e096      	b.n	800c1da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c0ac:	494f      	ldr	r1, [pc, #316]	; (800c1ec <etharp_tmr+0x14c>)
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	005b      	lsls	r3, r3, #1
 800c0b4:	4413      	add	r3, r2
 800c0b6:	00db      	lsls	r3, r3, #3
 800c0b8:	440b      	add	r3, r1
 800c0ba:	3314      	adds	r3, #20
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c0c0:	78fb      	ldrb	r3, [r7, #3]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f000 8086 	beq.w	800c1d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c0c8:	4948      	ldr	r1, [pc, #288]	; (800c1ec <etharp_tmr+0x14c>)
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	005b      	lsls	r3, r3, #1
 800c0d0:	4413      	add	r3, r2
 800c0d2:	00db      	lsls	r3, r3, #3
 800c0d4:	440b      	add	r3, r1
 800c0d6:	3312      	adds	r3, #18
 800c0d8:	881b      	ldrh	r3, [r3, #0]
 800c0da:	3301      	adds	r3, #1
 800c0dc:	b298      	uxth	r0, r3
 800c0de:	4943      	ldr	r1, [pc, #268]	; (800c1ec <etharp_tmr+0x14c>)
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	005b      	lsls	r3, r3, #1
 800c0e6:	4413      	add	r3, r2
 800c0e8:	00db      	lsls	r3, r3, #3
 800c0ea:	440b      	add	r3, r1
 800c0ec:	3312      	adds	r3, #18
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c0f2:	493e      	ldr	r1, [pc, #248]	; (800c1ec <etharp_tmr+0x14c>)
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	005b      	lsls	r3, r3, #1
 800c0fa:	4413      	add	r3, r2
 800c0fc:	00db      	lsls	r3, r3, #3
 800c0fe:	440b      	add	r3, r1
 800c100:	3312      	adds	r3, #18
 800c102:	881b      	ldrh	r3, [r3, #0]
 800c104:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c108:	d215      	bcs.n	800c136 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c10a:	4938      	ldr	r1, [pc, #224]	; (800c1ec <etharp_tmr+0x14c>)
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	4613      	mov	r3, r2
 800c110:	005b      	lsls	r3, r3, #1
 800c112:	4413      	add	r3, r2
 800c114:	00db      	lsls	r3, r3, #3
 800c116:	440b      	add	r3, r1
 800c118:	3314      	adds	r3, #20
 800c11a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c11c:	2b01      	cmp	r3, #1
 800c11e:	d10e      	bne.n	800c13e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c120:	4932      	ldr	r1, [pc, #200]	; (800c1ec <etharp_tmr+0x14c>)
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	4613      	mov	r3, r2
 800c126:	005b      	lsls	r3, r3, #1
 800c128:	4413      	add	r3, r2
 800c12a:	00db      	lsls	r3, r3, #3
 800c12c:	440b      	add	r3, r1
 800c12e:	3312      	adds	r3, #18
 800c130:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c132:	2b04      	cmp	r3, #4
 800c134:	d903      	bls.n	800c13e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7ff ff80 	bl	800c03c <etharp_free_entry>
 800c13c:	e04a      	b.n	800c1d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c13e:	492b      	ldr	r1, [pc, #172]	; (800c1ec <etharp_tmr+0x14c>)
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	4613      	mov	r3, r2
 800c144:	005b      	lsls	r3, r3, #1
 800c146:	4413      	add	r3, r2
 800c148:	00db      	lsls	r3, r3, #3
 800c14a:	440b      	add	r3, r1
 800c14c:	3314      	adds	r3, #20
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	2b03      	cmp	r3, #3
 800c152:	d10a      	bne.n	800c16a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c154:	4925      	ldr	r1, [pc, #148]	; (800c1ec <etharp_tmr+0x14c>)
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	4613      	mov	r3, r2
 800c15a:	005b      	lsls	r3, r3, #1
 800c15c:	4413      	add	r3, r2
 800c15e:	00db      	lsls	r3, r3, #3
 800c160:	440b      	add	r3, r1
 800c162:	3314      	adds	r3, #20
 800c164:	2204      	movs	r2, #4
 800c166:	701a      	strb	r2, [r3, #0]
 800c168:	e034      	b.n	800c1d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c16a:	4920      	ldr	r1, [pc, #128]	; (800c1ec <etharp_tmr+0x14c>)
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	4613      	mov	r3, r2
 800c170:	005b      	lsls	r3, r3, #1
 800c172:	4413      	add	r3, r2
 800c174:	00db      	lsls	r3, r3, #3
 800c176:	440b      	add	r3, r1
 800c178:	3314      	adds	r3, #20
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	2b04      	cmp	r3, #4
 800c17e:	d10a      	bne.n	800c196 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c180:	491a      	ldr	r1, [pc, #104]	; (800c1ec <etharp_tmr+0x14c>)
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	4613      	mov	r3, r2
 800c186:	005b      	lsls	r3, r3, #1
 800c188:	4413      	add	r3, r2
 800c18a:	00db      	lsls	r3, r3, #3
 800c18c:	440b      	add	r3, r1
 800c18e:	3314      	adds	r3, #20
 800c190:	2202      	movs	r2, #2
 800c192:	701a      	strb	r2, [r3, #0]
 800c194:	e01e      	b.n	800c1d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c196:	4915      	ldr	r1, [pc, #84]	; (800c1ec <etharp_tmr+0x14c>)
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	4613      	mov	r3, r2
 800c19c:	005b      	lsls	r3, r3, #1
 800c19e:	4413      	add	r3, r2
 800c1a0:	00db      	lsls	r3, r3, #3
 800c1a2:	440b      	add	r3, r1
 800c1a4:	3314      	adds	r3, #20
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d113      	bne.n	800c1d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c1ac:	490f      	ldr	r1, [pc, #60]	; (800c1ec <etharp_tmr+0x14c>)
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	005b      	lsls	r3, r3, #1
 800c1b4:	4413      	add	r3, r2
 800c1b6:	00db      	lsls	r3, r3, #3
 800c1b8:	440b      	add	r3, r1
 800c1ba:	3308      	adds	r3, #8
 800c1bc:	6818      	ldr	r0, [r3, #0]
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	005b      	lsls	r3, r3, #1
 800c1c4:	4413      	add	r3, r2
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	4a08      	ldr	r2, [pc, #32]	; (800c1ec <etharp_tmr+0x14c>)
 800c1ca:	4413      	add	r3, r2
 800c1cc:	3304      	adds	r3, #4
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	f000 fe6e 	bl	800ceb0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	607b      	str	r3, [r7, #4]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2b09      	cmp	r3, #9
 800c1de:	f77f af65 	ble.w	800c0ac <etharp_tmr+0xc>
      }
    }
  }
}
 800c1e2:	bf00      	nop
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	20000110 	.word	0x20000110

0800c1f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b08a      	sub	sp, #40	; 0x28
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	607a      	str	r2, [r7, #4]
 800c1fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c1fe:	230a      	movs	r3, #10
 800c200:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c202:	230a      	movs	r3, #10
 800c204:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c206:	230a      	movs	r3, #10
 800c208:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c20a:	2300      	movs	r3, #0
 800c20c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c20e:	230a      	movs	r3, #10
 800c210:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c212:	2300      	movs	r3, #0
 800c214:	83bb      	strh	r3, [r7, #28]
 800c216:	2300      	movs	r3, #0
 800c218:	837b      	strh	r3, [r7, #26]
 800c21a:	2300      	movs	r3, #0
 800c21c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c21e:	2300      	movs	r3, #0
 800c220:	843b      	strh	r3, [r7, #32]
 800c222:	e0ae      	b.n	800c382 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c224:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c228:	49a6      	ldr	r1, [pc, #664]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c22a:	4613      	mov	r3, r2
 800c22c:	005b      	lsls	r3, r3, #1
 800c22e:	4413      	add	r3, r2
 800c230:	00db      	lsls	r3, r3, #3
 800c232:	440b      	add	r3, r1
 800c234:	3314      	adds	r3, #20
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c23a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c23e:	2b0a      	cmp	r3, #10
 800c240:	d105      	bne.n	800c24e <etharp_find_entry+0x5e>
 800c242:	7dfb      	ldrb	r3, [r7, #23]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d102      	bne.n	800c24e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c248:	8c3b      	ldrh	r3, [r7, #32]
 800c24a:	847b      	strh	r3, [r7, #34]	; 0x22
 800c24c:	e095      	b.n	800c37a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c24e:	7dfb      	ldrb	r3, [r7, #23]
 800c250:	2b00      	cmp	r3, #0
 800c252:	f000 8092 	beq.w	800c37a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c256:	7dfb      	ldrb	r3, [r7, #23]
 800c258:	2b01      	cmp	r3, #1
 800c25a:	d009      	beq.n	800c270 <etharp_find_entry+0x80>
 800c25c:	7dfb      	ldrb	r3, [r7, #23]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d806      	bhi.n	800c270 <etharp_find_entry+0x80>
 800c262:	4b99      	ldr	r3, [pc, #612]	; (800c4c8 <etharp_find_entry+0x2d8>)
 800c264:	f44f 7292 	mov.w	r2, #292	; 0x124
 800c268:	4998      	ldr	r1, [pc, #608]	; (800c4cc <etharp_find_entry+0x2dc>)
 800c26a:	4899      	ldr	r0, [pc, #612]	; (800c4d0 <etharp_find_entry+0x2e0>)
 800c26c:	f002 f9e4 	bl	800e638 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d020      	beq.n	800c2b8 <etharp_find_entry+0xc8>
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6819      	ldr	r1, [r3, #0]
 800c27a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c27e:	4891      	ldr	r0, [pc, #580]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c280:	4613      	mov	r3, r2
 800c282:	005b      	lsls	r3, r3, #1
 800c284:	4413      	add	r3, r2
 800c286:	00db      	lsls	r3, r3, #3
 800c288:	4403      	add	r3, r0
 800c28a:	3304      	adds	r3, #4
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4299      	cmp	r1, r3
 800c290:	d112      	bne.n	800c2b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d00c      	beq.n	800c2b2 <etharp_find_entry+0xc2>
 800c298:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c29c:	4989      	ldr	r1, [pc, #548]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c29e:	4613      	mov	r3, r2
 800c2a0:	005b      	lsls	r3, r3, #1
 800c2a2:	4413      	add	r3, r2
 800c2a4:	00db      	lsls	r3, r3, #3
 800c2a6:	440b      	add	r3, r1
 800c2a8:	3308      	adds	r3, #8
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d102      	bne.n	800c2b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c2b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c2b6:	e100      	b.n	800c4ba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c2b8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d140      	bne.n	800c340 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c2be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c2c2:	4980      	ldr	r1, [pc, #512]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	005b      	lsls	r3, r3, #1
 800c2c8:	4413      	add	r3, r2
 800c2ca:	00db      	lsls	r3, r3, #3
 800c2cc:	440b      	add	r3, r1
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d01a      	beq.n	800c30a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c2d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c2d8:	497a      	ldr	r1, [pc, #488]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c2da:	4613      	mov	r3, r2
 800c2dc:	005b      	lsls	r3, r3, #1
 800c2de:	4413      	add	r3, r2
 800c2e0:	00db      	lsls	r3, r3, #3
 800c2e2:	440b      	add	r3, r1
 800c2e4:	3312      	adds	r3, #18
 800c2e6:	881b      	ldrh	r3, [r3, #0]
 800c2e8:	8bba      	ldrh	r2, [r7, #28]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d845      	bhi.n	800c37a <etharp_find_entry+0x18a>
            old_queue = i;
 800c2ee:	8c3b      	ldrh	r3, [r7, #32]
 800c2f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c2f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c2f6:	4973      	ldr	r1, [pc, #460]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	005b      	lsls	r3, r3, #1
 800c2fc:	4413      	add	r3, r2
 800c2fe:	00db      	lsls	r3, r3, #3
 800c300:	440b      	add	r3, r1
 800c302:	3312      	adds	r3, #18
 800c304:	881b      	ldrh	r3, [r3, #0]
 800c306:	83bb      	strh	r3, [r7, #28]
 800c308:	e037      	b.n	800c37a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c30a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c30e:	496d      	ldr	r1, [pc, #436]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c310:	4613      	mov	r3, r2
 800c312:	005b      	lsls	r3, r3, #1
 800c314:	4413      	add	r3, r2
 800c316:	00db      	lsls	r3, r3, #3
 800c318:	440b      	add	r3, r1
 800c31a:	3312      	adds	r3, #18
 800c31c:	881b      	ldrh	r3, [r3, #0]
 800c31e:	8b7a      	ldrh	r2, [r7, #26]
 800c320:	429a      	cmp	r2, r3
 800c322:	d82a      	bhi.n	800c37a <etharp_find_entry+0x18a>
            old_pending = i;
 800c324:	8c3b      	ldrh	r3, [r7, #32]
 800c326:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c328:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c32c:	4965      	ldr	r1, [pc, #404]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c32e:	4613      	mov	r3, r2
 800c330:	005b      	lsls	r3, r3, #1
 800c332:	4413      	add	r3, r2
 800c334:	00db      	lsls	r3, r3, #3
 800c336:	440b      	add	r3, r1
 800c338:	3312      	adds	r3, #18
 800c33a:	881b      	ldrh	r3, [r3, #0]
 800c33c:	837b      	strh	r3, [r7, #26]
 800c33e:	e01c      	b.n	800c37a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c340:	7dfb      	ldrb	r3, [r7, #23]
 800c342:	2b01      	cmp	r3, #1
 800c344:	d919      	bls.n	800c37a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c346:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c34a:	495e      	ldr	r1, [pc, #376]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c34c:	4613      	mov	r3, r2
 800c34e:	005b      	lsls	r3, r3, #1
 800c350:	4413      	add	r3, r2
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	440b      	add	r3, r1
 800c356:	3312      	adds	r3, #18
 800c358:	881b      	ldrh	r3, [r3, #0]
 800c35a:	8b3a      	ldrh	r2, [r7, #24]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d80c      	bhi.n	800c37a <etharp_find_entry+0x18a>
            old_stable = i;
 800c360:	8c3b      	ldrh	r3, [r7, #32]
 800c362:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c364:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c368:	4956      	ldr	r1, [pc, #344]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c36a:	4613      	mov	r3, r2
 800c36c:	005b      	lsls	r3, r3, #1
 800c36e:	4413      	add	r3, r2
 800c370:	00db      	lsls	r3, r3, #3
 800c372:	440b      	add	r3, r1
 800c374:	3312      	adds	r3, #18
 800c376:	881b      	ldrh	r3, [r3, #0]
 800c378:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c37a:	8c3b      	ldrh	r3, [r7, #32]
 800c37c:	3301      	adds	r3, #1
 800c37e:	b29b      	uxth	r3, r3
 800c380:	843b      	strh	r3, [r7, #32]
 800c382:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c386:	2b09      	cmp	r3, #9
 800c388:	f77f af4c 	ble.w	800c224 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c38c:	7afb      	ldrb	r3, [r7, #11]
 800c38e:	f003 0302 	and.w	r3, r3, #2
 800c392:	2b00      	cmp	r3, #0
 800c394:	d108      	bne.n	800c3a8 <etharp_find_entry+0x1b8>
 800c396:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c39a:	2b0a      	cmp	r3, #10
 800c39c:	d107      	bne.n	800c3ae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c39e:	7afb      	ldrb	r3, [r7, #11]
 800c3a0:	f003 0301 	and.w	r3, r3, #1
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d102      	bne.n	800c3ae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c3a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ac:	e085      	b.n	800c4ba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c3ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c3b2:	2b09      	cmp	r3, #9
 800c3b4:	dc02      	bgt.n	800c3bc <etharp_find_entry+0x1cc>
    i = empty;
 800c3b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3b8:	843b      	strh	r3, [r7, #32]
 800c3ba:	e039      	b.n	800c430 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c3bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c3c0:	2b09      	cmp	r3, #9
 800c3c2:	dc14      	bgt.n	800c3ee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c3c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3c6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c3c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c3cc:	493d      	ldr	r1, [pc, #244]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	005b      	lsls	r3, r3, #1
 800c3d2:	4413      	add	r3, r2
 800c3d4:	00db      	lsls	r3, r3, #3
 800c3d6:	440b      	add	r3, r1
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d018      	beq.n	800c410 <etharp_find_entry+0x220>
 800c3de:	4b3a      	ldr	r3, [pc, #232]	; (800c4c8 <etharp_find_entry+0x2d8>)
 800c3e0:	f240 126d 	movw	r2, #365	; 0x16d
 800c3e4:	493b      	ldr	r1, [pc, #236]	; (800c4d4 <etharp_find_entry+0x2e4>)
 800c3e6:	483a      	ldr	r0, [pc, #232]	; (800c4d0 <etharp_find_entry+0x2e0>)
 800c3e8:	f002 f926 	bl	800e638 <iprintf>
 800c3ec:	e010      	b.n	800c410 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c3ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c3f2:	2b09      	cmp	r3, #9
 800c3f4:	dc02      	bgt.n	800c3fc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c3f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c3f8:	843b      	strh	r3, [r7, #32]
 800c3fa:	e009      	b.n	800c410 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c3fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c400:	2b09      	cmp	r3, #9
 800c402:	dc02      	bgt.n	800c40a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c404:	8bfb      	ldrh	r3, [r7, #30]
 800c406:	843b      	strh	r3, [r7, #32]
 800c408:	e002      	b.n	800c410 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c40a:	f04f 33ff 	mov.w	r3, #4294967295
 800c40e:	e054      	b.n	800c4ba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c410:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c414:	2b09      	cmp	r3, #9
 800c416:	dd06      	ble.n	800c426 <etharp_find_entry+0x236>
 800c418:	4b2b      	ldr	r3, [pc, #172]	; (800c4c8 <etharp_find_entry+0x2d8>)
 800c41a:	f240 127f 	movw	r2, #383	; 0x17f
 800c41e:	492e      	ldr	r1, [pc, #184]	; (800c4d8 <etharp_find_entry+0x2e8>)
 800c420:	482b      	ldr	r0, [pc, #172]	; (800c4d0 <etharp_find_entry+0x2e0>)
 800c422:	f002 f909 	bl	800e638 <iprintf>
    etharp_free_entry(i);
 800c426:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7ff fe06 	bl	800c03c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c430:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c434:	2b09      	cmp	r3, #9
 800c436:	dd06      	ble.n	800c446 <etharp_find_entry+0x256>
 800c438:	4b23      	ldr	r3, [pc, #140]	; (800c4c8 <etharp_find_entry+0x2d8>)
 800c43a:	f240 1283 	movw	r2, #387	; 0x183
 800c43e:	4926      	ldr	r1, [pc, #152]	; (800c4d8 <etharp_find_entry+0x2e8>)
 800c440:	4823      	ldr	r0, [pc, #140]	; (800c4d0 <etharp_find_entry+0x2e0>)
 800c442:	f002 f8f9 	bl	800e638 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c446:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c44a:	491e      	ldr	r1, [pc, #120]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c44c:	4613      	mov	r3, r2
 800c44e:	005b      	lsls	r3, r3, #1
 800c450:	4413      	add	r3, r2
 800c452:	00db      	lsls	r3, r3, #3
 800c454:	440b      	add	r3, r1
 800c456:	3314      	adds	r3, #20
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d006      	beq.n	800c46c <etharp_find_entry+0x27c>
 800c45e:	4b1a      	ldr	r3, [pc, #104]	; (800c4c8 <etharp_find_entry+0x2d8>)
 800c460:	f240 1285 	movw	r2, #389	; 0x185
 800c464:	491d      	ldr	r1, [pc, #116]	; (800c4dc <etharp_find_entry+0x2ec>)
 800c466:	481a      	ldr	r0, [pc, #104]	; (800c4d0 <etharp_find_entry+0x2e0>)
 800c468:	f002 f8e6 	bl	800e638 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00b      	beq.n	800c48a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c472:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6819      	ldr	r1, [r3, #0]
 800c47a:	4812      	ldr	r0, [pc, #72]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c47c:	4613      	mov	r3, r2
 800c47e:	005b      	lsls	r3, r3, #1
 800c480:	4413      	add	r3, r2
 800c482:	00db      	lsls	r3, r3, #3
 800c484:	4403      	add	r3, r0
 800c486:	3304      	adds	r3, #4
 800c488:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c48a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c48e:	490d      	ldr	r1, [pc, #52]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c490:	4613      	mov	r3, r2
 800c492:	005b      	lsls	r3, r3, #1
 800c494:	4413      	add	r3, r2
 800c496:	00db      	lsls	r3, r3, #3
 800c498:	440b      	add	r3, r1
 800c49a:	3312      	adds	r3, #18
 800c49c:	2200      	movs	r2, #0
 800c49e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c4a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c4a4:	4907      	ldr	r1, [pc, #28]	; (800c4c4 <etharp_find_entry+0x2d4>)
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	005b      	lsls	r3, r3, #1
 800c4aa:	4413      	add	r3, r2
 800c4ac:	00db      	lsls	r3, r3, #3
 800c4ae:	440b      	add	r3, r1
 800c4b0:	3308      	adds	r3, #8
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c4b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3728      	adds	r7, #40	; 0x28
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	20000110 	.word	0x20000110
 800c4c8:	080117ac 	.word	0x080117ac
 800c4cc:	080117e4 	.word	0x080117e4
 800c4d0:	08011824 	.word	0x08011824
 800c4d4:	0801184c 	.word	0x0801184c
 800c4d8:	08011864 	.word	0x08011864
 800c4dc:	08011878 	.word	0x08011878

0800c4e0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b088      	sub	sp, #32
 800c4e4:	af02      	add	r7, sp, #8
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
 800c4ec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c4f4:	2b06      	cmp	r3, #6
 800c4f6:	d006      	beq.n	800c506 <etharp_update_arp_entry+0x26>
 800c4f8:	4b48      	ldr	r3, [pc, #288]	; (800c61c <etharp_update_arp_entry+0x13c>)
 800c4fa:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c4fe:	4948      	ldr	r1, [pc, #288]	; (800c620 <etharp_update_arp_entry+0x140>)
 800c500:	4848      	ldr	r0, [pc, #288]	; (800c624 <etharp_update_arp_entry+0x144>)
 800c502:	f002 f899 	bl	800e638 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d012      	beq.n	800c532 <etharp_update_arp_entry+0x52>
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00e      	beq.n	800c532 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	68f9      	ldr	r1, [r7, #12]
 800c51a:	4618      	mov	r0, r3
 800c51c:	f001 f8fa 	bl	800d714 <ip4_addr_isbroadcast_u32>
 800c520:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c522:	2b00      	cmp	r3, #0
 800c524:	d105      	bne.n	800c532 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c52e:	2be0      	cmp	r3, #224	; 0xe0
 800c530:	d102      	bne.n	800c538 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c532:	f06f 030f 	mvn.w	r3, #15
 800c536:	e06c      	b.n	800c612 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c538:	78fb      	ldrb	r3, [r7, #3]
 800c53a:	68fa      	ldr	r2, [r7, #12]
 800c53c:	4619      	mov	r1, r3
 800c53e:	68b8      	ldr	r0, [r7, #8]
 800c540:	f7ff fe56 	bl	800c1f0 <etharp_find_entry>
 800c544:	4603      	mov	r3, r0
 800c546:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c548:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	da02      	bge.n	800c556 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c550:	8afb      	ldrh	r3, [r7, #22]
 800c552:	b25b      	sxtb	r3, r3
 800c554:	e05d      	b.n	800c612 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c556:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c55a:	4933      	ldr	r1, [pc, #204]	; (800c628 <etharp_update_arp_entry+0x148>)
 800c55c:	4613      	mov	r3, r2
 800c55e:	005b      	lsls	r3, r3, #1
 800c560:	4413      	add	r3, r2
 800c562:	00db      	lsls	r3, r3, #3
 800c564:	440b      	add	r3, r1
 800c566:	3314      	adds	r3, #20
 800c568:	2202      	movs	r2, #2
 800c56a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c56c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c570:	492d      	ldr	r1, [pc, #180]	; (800c628 <etharp_update_arp_entry+0x148>)
 800c572:	4613      	mov	r3, r2
 800c574:	005b      	lsls	r3, r3, #1
 800c576:	4413      	add	r3, r2
 800c578:	00db      	lsls	r3, r3, #3
 800c57a:	440b      	add	r3, r1
 800c57c:	3308      	adds	r3, #8
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c582:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c586:	4613      	mov	r3, r2
 800c588:	005b      	lsls	r3, r3, #1
 800c58a:	4413      	add	r3, r2
 800c58c:	00db      	lsls	r3, r3, #3
 800c58e:	3308      	adds	r3, #8
 800c590:	4a25      	ldr	r2, [pc, #148]	; (800c628 <etharp_update_arp_entry+0x148>)
 800c592:	4413      	add	r3, r2
 800c594:	3304      	adds	r3, #4
 800c596:	2206      	movs	r2, #6
 800c598:	6879      	ldr	r1, [r7, #4]
 800c59a:	4618      	mov	r0, r3
 800c59c:	f002 f839 	bl	800e612 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c5a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c5a4:	4920      	ldr	r1, [pc, #128]	; (800c628 <etharp_update_arp_entry+0x148>)
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	005b      	lsls	r3, r3, #1
 800c5aa:	4413      	add	r3, r2
 800c5ac:	00db      	lsls	r3, r3, #3
 800c5ae:	440b      	add	r3, r1
 800c5b0:	3312      	adds	r3, #18
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c5b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c5ba:	491b      	ldr	r1, [pc, #108]	; (800c628 <etharp_update_arp_entry+0x148>)
 800c5bc:	4613      	mov	r3, r2
 800c5be:	005b      	lsls	r3, r3, #1
 800c5c0:	4413      	add	r3, r2
 800c5c2:	00db      	lsls	r3, r3, #3
 800c5c4:	440b      	add	r3, r1
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d021      	beq.n	800c610 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c5cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c5d0:	4915      	ldr	r1, [pc, #84]	; (800c628 <etharp_update_arp_entry+0x148>)
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	005b      	lsls	r3, r3, #1
 800c5d6:	4413      	add	r3, r2
 800c5d8:	00db      	lsls	r3, r3, #3
 800c5da:	440b      	add	r3, r1
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c5e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c5e4:	4910      	ldr	r1, [pc, #64]	; (800c628 <etharp_update_arp_entry+0x148>)
 800c5e6:	4613      	mov	r3, r2
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	4413      	add	r3, r2
 800c5ec:	00db      	lsls	r3, r3, #3
 800c5ee:	440b      	add	r3, r1
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c5fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c5fe:	9300      	str	r3, [sp, #0]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6939      	ldr	r1, [r7, #16]
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f001 ff89 	bl	800e51c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c60a:	6938      	ldr	r0, [r7, #16]
 800c60c:	f7f9 fb8a 	bl	8005d24 <pbuf_free>
  }
  return ERR_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3718      	adds	r7, #24
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	080117ac 	.word	0x080117ac
 800c620:	080118a4 	.word	0x080118a4
 800c624:	08011824 	.word	0x08011824
 800c628:	20000110 	.word	0x20000110

0800c62c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c634:	2300      	movs	r3, #0
 800c636:	60fb      	str	r3, [r7, #12]
 800c638:	e01e      	b.n	800c678 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c63a:	4913      	ldr	r1, [pc, #76]	; (800c688 <etharp_cleanup_netif+0x5c>)
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	4613      	mov	r3, r2
 800c640:	005b      	lsls	r3, r3, #1
 800c642:	4413      	add	r3, r2
 800c644:	00db      	lsls	r3, r3, #3
 800c646:	440b      	add	r3, r1
 800c648:	3314      	adds	r3, #20
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c64e:	7afb      	ldrb	r3, [r7, #11]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00e      	beq.n	800c672 <etharp_cleanup_netif+0x46>
 800c654:	490c      	ldr	r1, [pc, #48]	; (800c688 <etharp_cleanup_netif+0x5c>)
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	4613      	mov	r3, r2
 800c65a:	005b      	lsls	r3, r3, #1
 800c65c:	4413      	add	r3, r2
 800c65e:	00db      	lsls	r3, r3, #3
 800c660:	440b      	add	r3, r1
 800c662:	3308      	adds	r3, #8
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d102      	bne.n	800c672 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f7ff fce5 	bl	800c03c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	3301      	adds	r3, #1
 800c676:	60fb      	str	r3, [r7, #12]
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2b09      	cmp	r3, #9
 800c67c:	dddd      	ble.n	800c63a <etharp_cleanup_netif+0xe>
    }
  }
}
 800c67e:	bf00      	nop
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}
 800c686:	bf00      	nop
 800c688:	20000110 	.word	0x20000110

0800c68c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c68c:	b5b0      	push	{r4, r5, r7, lr}
 800c68e:	b08a      	sub	sp, #40	; 0x28
 800c690:	af04      	add	r7, sp, #16
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d107      	bne.n	800c6ac <etharp_input+0x20>
 800c69c:	4b3d      	ldr	r3, [pc, #244]	; (800c794 <etharp_input+0x108>)
 800c69e:	f240 228a 	movw	r2, #650	; 0x28a
 800c6a2:	493d      	ldr	r1, [pc, #244]	; (800c798 <etharp_input+0x10c>)
 800c6a4:	483d      	ldr	r0, [pc, #244]	; (800c79c <etharp_input+0x110>)
 800c6a6:	f001 ffc7 	bl	800e638 <iprintf>
 800c6aa:	e06f      	b.n	800c78c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	881b      	ldrh	r3, [r3, #0]
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6bc:	d10c      	bne.n	800c6d8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c6c2:	2b06      	cmp	r3, #6
 800c6c4:	d108      	bne.n	800c6d8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c6ca:	2b04      	cmp	r3, #4
 800c6cc:	d104      	bne.n	800c6d8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	885b      	ldrh	r3, [r3, #2]
 800c6d2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c6d4:	2b08      	cmp	r3, #8
 800c6d6:	d003      	beq.n	800c6e0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f7f9 fb23 	bl	8005d24 <pbuf_free>
    return;
 800c6de:	e055      	b.n	800c78c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	330e      	adds	r3, #14
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	3318      	adds	r3, #24
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	3304      	adds	r3, #4
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d102      	bne.n	800c700 <etharp_input+0x74>
    for_us = 0;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	75fb      	strb	r3, [r7, #23]
 800c6fe:	e009      	b.n	800c714 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c700:	68ba      	ldr	r2, [r7, #8]
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	3304      	adds	r3, #4
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	429a      	cmp	r2, r3
 800c70a:	bf0c      	ite	eq
 800c70c:	2301      	moveq	r3, #1
 800c70e:	2300      	movne	r3, #0
 800c710:	b2db      	uxtb	r3, r3
 800c712:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	f103 0208 	add.w	r2, r3, #8
 800c71a:	7dfb      	ldrb	r3, [r7, #23]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d001      	beq.n	800c724 <etharp_input+0x98>
 800c720:	2301      	movs	r3, #1
 800c722:	e000      	b.n	800c726 <etharp_input+0x9a>
 800c724:	2302      	movs	r3, #2
 800c726:	f107 010c 	add.w	r1, r7, #12
 800c72a:	6838      	ldr	r0, [r7, #0]
 800c72c:	f7ff fed8 	bl	800c4e0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	88db      	ldrh	r3, [r3, #6]
 800c734:	b29b      	uxth	r3, r3
 800c736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c73a:	d003      	beq.n	800c744 <etharp_input+0xb8>
 800c73c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c740:	d01e      	beq.n	800c780 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c742:	e020      	b.n	800c786 <etharp_input+0xfa>
      if (for_us) {
 800c744:	7dfb      	ldrb	r3, [r7, #23]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d01c      	beq.n	800c784 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c764:	2102      	movs	r1, #2
 800c766:	9103      	str	r1, [sp, #12]
 800c768:	f107 010c 	add.w	r1, r7, #12
 800c76c:	9102      	str	r1, [sp, #8]
 800c76e:	9201      	str	r2, [sp, #4]
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	462b      	mov	r3, r5
 800c774:	4622      	mov	r2, r4
 800c776:	4601      	mov	r1, r0
 800c778:	6838      	ldr	r0, [r7, #0]
 800c77a:	f000 faeb 	bl	800cd54 <etharp_raw>
      break;
 800c77e:	e001      	b.n	800c784 <etharp_input+0xf8>
      break;
 800c780:	bf00      	nop
 800c782:	e000      	b.n	800c786 <etharp_input+0xfa>
      break;
 800c784:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7f9 facc 	bl	8005d24 <pbuf_free>
}
 800c78c:	3718      	adds	r7, #24
 800c78e:	46bd      	mov	sp, r7
 800c790:	bdb0      	pop	{r4, r5, r7, pc}
 800c792:	bf00      	nop
 800c794:	080117ac 	.word	0x080117ac
 800c798:	080118fc 	.word	0x080118fc
 800c79c:	08011824 	.word	0x08011824

0800c7a0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b086      	sub	sp, #24
 800c7a4:	af02      	add	r7, sp, #8
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c7ae:	79fa      	ldrb	r2, [r7, #7]
 800c7b0:	4944      	ldr	r1, [pc, #272]	; (800c8c4 <etharp_output_to_arp_index+0x124>)
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	4413      	add	r3, r2
 800c7b8:	00db      	lsls	r3, r3, #3
 800c7ba:	440b      	add	r3, r1
 800c7bc:	3314      	adds	r3, #20
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d806      	bhi.n	800c7d2 <etharp_output_to_arp_index+0x32>
 800c7c4:	4b40      	ldr	r3, [pc, #256]	; (800c8c8 <etharp_output_to_arp_index+0x128>)
 800c7c6:	f240 22ef 	movw	r2, #751	; 0x2ef
 800c7ca:	4940      	ldr	r1, [pc, #256]	; (800c8cc <etharp_output_to_arp_index+0x12c>)
 800c7cc:	4840      	ldr	r0, [pc, #256]	; (800c8d0 <etharp_output_to_arp_index+0x130>)
 800c7ce:	f001 ff33 	bl	800e638 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c7d2:	79fa      	ldrb	r2, [r7, #7]
 800c7d4:	493b      	ldr	r1, [pc, #236]	; (800c8c4 <etharp_output_to_arp_index+0x124>)
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	4413      	add	r3, r2
 800c7dc:	00db      	lsls	r3, r3, #3
 800c7de:	440b      	add	r3, r1
 800c7e0:	3314      	adds	r3, #20
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	2b02      	cmp	r3, #2
 800c7e6:	d153      	bne.n	800c890 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c7e8:	79fa      	ldrb	r2, [r7, #7]
 800c7ea:	4936      	ldr	r1, [pc, #216]	; (800c8c4 <etharp_output_to_arp_index+0x124>)
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	005b      	lsls	r3, r3, #1
 800c7f0:	4413      	add	r3, r2
 800c7f2:	00db      	lsls	r3, r3, #3
 800c7f4:	440b      	add	r3, r1
 800c7f6:	3312      	adds	r3, #18
 800c7f8:	881b      	ldrh	r3, [r3, #0]
 800c7fa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c7fe:	d919      	bls.n	800c834 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c800:	79fa      	ldrb	r2, [r7, #7]
 800c802:	4613      	mov	r3, r2
 800c804:	005b      	lsls	r3, r3, #1
 800c806:	4413      	add	r3, r2
 800c808:	00db      	lsls	r3, r3, #3
 800c80a:	4a2e      	ldr	r2, [pc, #184]	; (800c8c4 <etharp_output_to_arp_index+0x124>)
 800c80c:	4413      	add	r3, r2
 800c80e:	3304      	adds	r3, #4
 800c810:	4619      	mov	r1, r3
 800c812:	68f8      	ldr	r0, [r7, #12]
 800c814:	f000 fb4c 	bl	800ceb0 <etharp_request>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d138      	bne.n	800c890 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c81e:	79fa      	ldrb	r2, [r7, #7]
 800c820:	4928      	ldr	r1, [pc, #160]	; (800c8c4 <etharp_output_to_arp_index+0x124>)
 800c822:	4613      	mov	r3, r2
 800c824:	005b      	lsls	r3, r3, #1
 800c826:	4413      	add	r3, r2
 800c828:	00db      	lsls	r3, r3, #3
 800c82a:	440b      	add	r3, r1
 800c82c:	3314      	adds	r3, #20
 800c82e:	2203      	movs	r2, #3
 800c830:	701a      	strb	r2, [r3, #0]
 800c832:	e02d      	b.n	800c890 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c834:	79fa      	ldrb	r2, [r7, #7]
 800c836:	4923      	ldr	r1, [pc, #140]	; (800c8c4 <etharp_output_to_arp_index+0x124>)
 800c838:	4613      	mov	r3, r2
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	4413      	add	r3, r2
 800c83e:	00db      	lsls	r3, r3, #3
 800c840:	440b      	add	r3, r1
 800c842:	3312      	adds	r3, #18
 800c844:	881b      	ldrh	r3, [r3, #0]
 800c846:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c84a:	d321      	bcc.n	800c890 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c84c:	79fa      	ldrb	r2, [r7, #7]
 800c84e:	4613      	mov	r3, r2
 800c850:	005b      	lsls	r3, r3, #1
 800c852:	4413      	add	r3, r2
 800c854:	00db      	lsls	r3, r3, #3
 800c856:	4a1b      	ldr	r2, [pc, #108]	; (800c8c4 <etharp_output_to_arp_index+0x124>)
 800c858:	4413      	add	r3, r2
 800c85a:	1d19      	adds	r1, r3, #4
 800c85c:	79fa      	ldrb	r2, [r7, #7]
 800c85e:	4613      	mov	r3, r2
 800c860:	005b      	lsls	r3, r3, #1
 800c862:	4413      	add	r3, r2
 800c864:	00db      	lsls	r3, r3, #3
 800c866:	3308      	adds	r3, #8
 800c868:	4a16      	ldr	r2, [pc, #88]	; (800c8c4 <etharp_output_to_arp_index+0x124>)
 800c86a:	4413      	add	r3, r2
 800c86c:	3304      	adds	r3, #4
 800c86e:	461a      	mov	r2, r3
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f000 fafb 	bl	800ce6c <etharp_request_dst>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d109      	bne.n	800c890 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c87c:	79fa      	ldrb	r2, [r7, #7]
 800c87e:	4911      	ldr	r1, [pc, #68]	; (800c8c4 <etharp_output_to_arp_index+0x124>)
 800c880:	4613      	mov	r3, r2
 800c882:	005b      	lsls	r3, r3, #1
 800c884:	4413      	add	r3, r2
 800c886:	00db      	lsls	r3, r3, #3
 800c888:	440b      	add	r3, r1
 800c88a:	3314      	adds	r3, #20
 800c88c:	2203      	movs	r2, #3
 800c88e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c896:	79fa      	ldrb	r2, [r7, #7]
 800c898:	4613      	mov	r3, r2
 800c89a:	005b      	lsls	r3, r3, #1
 800c89c:	4413      	add	r3, r2
 800c89e:	00db      	lsls	r3, r3, #3
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	4a08      	ldr	r2, [pc, #32]	; (800c8c4 <etharp_output_to_arp_index+0x124>)
 800c8a4:	4413      	add	r3, r2
 800c8a6:	1d1a      	adds	r2, r3, #4
 800c8a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c8ac:	9300      	str	r3, [sp, #0]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	460a      	mov	r2, r1
 800c8b2:	68b9      	ldr	r1, [r7, #8]
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f001 fe31 	bl	800e51c <ethernet_output>
 800c8ba:	4603      	mov	r3, r0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	20000110 	.word	0x20000110
 800c8c8:	080117ac 	.word	0x080117ac
 800c8cc:	0801191c 	.word	0x0801191c
 800c8d0:	08011824 	.word	0x08011824

0800c8d4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b08a      	sub	sp, #40	; 0x28
 800c8d8:	af02      	add	r7, sp, #8
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d106      	bne.n	800c8f8 <etharp_output+0x24>
 800c8ea:	4b73      	ldr	r3, [pc, #460]	; (800cab8 <etharp_output+0x1e4>)
 800c8ec:	f240 321e 	movw	r2, #798	; 0x31e
 800c8f0:	4972      	ldr	r1, [pc, #456]	; (800cabc <etharp_output+0x1e8>)
 800c8f2:	4873      	ldr	r0, [pc, #460]	; (800cac0 <etharp_output+0x1ec>)
 800c8f4:	f001 fea0 	bl	800e638 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d106      	bne.n	800c90c <etharp_output+0x38>
 800c8fe:	4b6e      	ldr	r3, [pc, #440]	; (800cab8 <etharp_output+0x1e4>)
 800c900:	f240 321f 	movw	r2, #799	; 0x31f
 800c904:	496f      	ldr	r1, [pc, #444]	; (800cac4 <etharp_output+0x1f0>)
 800c906:	486e      	ldr	r0, [pc, #440]	; (800cac0 <etharp_output+0x1ec>)
 800c908:	f001 fe96 	bl	800e638 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d106      	bne.n	800c920 <etharp_output+0x4c>
 800c912:	4b69      	ldr	r3, [pc, #420]	; (800cab8 <etharp_output+0x1e4>)
 800c914:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c918:	496b      	ldr	r1, [pc, #428]	; (800cac8 <etharp_output+0x1f4>)
 800c91a:	4869      	ldr	r0, [pc, #420]	; (800cac0 <etharp_output+0x1ec>)
 800c91c:	f001 fe8c 	bl	800e638 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68f9      	ldr	r1, [r7, #12]
 800c926:	4618      	mov	r0, r3
 800c928:	f000 fef4 	bl	800d714 <ip4_addr_isbroadcast_u32>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d002      	beq.n	800c938 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c932:	4b66      	ldr	r3, [pc, #408]	; (800cacc <etharp_output+0x1f8>)
 800c934:	61fb      	str	r3, [r7, #28]
 800c936:	e0af      	b.n	800ca98 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c940:	2be0      	cmp	r3, #224	; 0xe0
 800c942:	d118      	bne.n	800c976 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c944:	2301      	movs	r3, #1
 800c946:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c948:	2300      	movs	r3, #0
 800c94a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c94c:	235e      	movs	r3, #94	; 0x5e
 800c94e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	3301      	adds	r3, #1
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	3302      	adds	r3, #2
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	3303      	adds	r3, #3
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c96e:	f107 0310 	add.w	r3, r7, #16
 800c972:	61fb      	str	r3, [r7, #28]
 800c974:	e090      	b.n	800ca98 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3304      	adds	r3, #4
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	405a      	eors	r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	3308      	adds	r3, #8
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4013      	ands	r3, r2
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d012      	beq.n	800c9b4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c994:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c998:	4293      	cmp	r3, r2
 800c99a:	d00b      	beq.n	800c9b4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	330c      	adds	r3, #12
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d003      	beq.n	800c9ae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	330c      	adds	r3, #12
 800c9aa:	61bb      	str	r3, [r7, #24]
 800c9ac:	e002      	b.n	800c9b4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c9ae:	f06f 0303 	mvn.w	r3, #3
 800c9b2:	e07d      	b.n	800cab0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c9b4:	4b46      	ldr	r3, [pc, #280]	; (800cad0 <etharp_output+0x1fc>)
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	4a46      	ldr	r2, [pc, #280]	; (800cad4 <etharp_output+0x200>)
 800c9bc:	460b      	mov	r3, r1
 800c9be:	005b      	lsls	r3, r3, #1
 800c9c0:	440b      	add	r3, r1
 800c9c2:	00db      	lsls	r3, r3, #3
 800c9c4:	4413      	add	r3, r2
 800c9c6:	3314      	adds	r3, #20
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d925      	bls.n	800ca1a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c9ce:	4b40      	ldr	r3, [pc, #256]	; (800cad0 <etharp_output+0x1fc>)
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	4a3f      	ldr	r2, [pc, #252]	; (800cad4 <etharp_output+0x200>)
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	005b      	lsls	r3, r3, #1
 800c9da:	440b      	add	r3, r1
 800c9dc:	00db      	lsls	r3, r3, #3
 800c9de:	4413      	add	r3, r2
 800c9e0:	3308      	adds	r3, #8
 800c9e2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d117      	bne.n	800ca1a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	4b38      	ldr	r3, [pc, #224]	; (800cad0 <etharp_output+0x1fc>)
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	4937      	ldr	r1, [pc, #220]	; (800cad4 <etharp_output+0x200>)
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	005b      	lsls	r3, r3, #1
 800c9fa:	4403      	add	r3, r0
 800c9fc:	00db      	lsls	r3, r3, #3
 800c9fe:	440b      	add	r3, r1
 800ca00:	3304      	adds	r3, #4
 800ca02:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d108      	bne.n	800ca1a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ca08:	4b31      	ldr	r3, [pc, #196]	; (800cad0 <etharp_output+0x1fc>)
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	68b9      	ldr	r1, [r7, #8]
 800ca10:	68f8      	ldr	r0, [r7, #12]
 800ca12:	f7ff fec5 	bl	800c7a0 <etharp_output_to_arp_index>
 800ca16:	4603      	mov	r3, r0
 800ca18:	e04a      	b.n	800cab0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	75fb      	strb	r3, [r7, #23]
 800ca1e:	e031      	b.n	800ca84 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ca20:	7dfa      	ldrb	r2, [r7, #23]
 800ca22:	492c      	ldr	r1, [pc, #176]	; (800cad4 <etharp_output+0x200>)
 800ca24:	4613      	mov	r3, r2
 800ca26:	005b      	lsls	r3, r3, #1
 800ca28:	4413      	add	r3, r2
 800ca2a:	00db      	lsls	r3, r3, #3
 800ca2c:	440b      	add	r3, r1
 800ca2e:	3314      	adds	r3, #20
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	2b01      	cmp	r3, #1
 800ca34:	d923      	bls.n	800ca7e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ca36:	7dfa      	ldrb	r2, [r7, #23]
 800ca38:	4926      	ldr	r1, [pc, #152]	; (800cad4 <etharp_output+0x200>)
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	005b      	lsls	r3, r3, #1
 800ca3e:	4413      	add	r3, r2
 800ca40:	00db      	lsls	r3, r3, #3
 800ca42:	440b      	add	r3, r1
 800ca44:	3308      	adds	r3, #8
 800ca46:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ca48:	68fa      	ldr	r2, [r7, #12]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d117      	bne.n	800ca7e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	6819      	ldr	r1, [r3, #0]
 800ca52:	7dfa      	ldrb	r2, [r7, #23]
 800ca54:	481f      	ldr	r0, [pc, #124]	; (800cad4 <etharp_output+0x200>)
 800ca56:	4613      	mov	r3, r2
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	4413      	add	r3, r2
 800ca5c:	00db      	lsls	r3, r3, #3
 800ca5e:	4403      	add	r3, r0
 800ca60:	3304      	adds	r3, #4
 800ca62:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800ca64:	4299      	cmp	r1, r3
 800ca66:	d10a      	bne.n	800ca7e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800ca68:	4a19      	ldr	r2, [pc, #100]	; (800cad0 <etharp_output+0x1fc>)
 800ca6a:	7dfb      	ldrb	r3, [r7, #23]
 800ca6c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ca6e:	7dfb      	ldrb	r3, [r7, #23]
 800ca70:	461a      	mov	r2, r3
 800ca72:	68b9      	ldr	r1, [r7, #8]
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f7ff fe93 	bl	800c7a0 <etharp_output_to_arp_index>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	e018      	b.n	800cab0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ca7e:	7dfb      	ldrb	r3, [r7, #23]
 800ca80:	3301      	adds	r3, #1
 800ca82:	75fb      	strb	r3, [r7, #23]
 800ca84:	7dfb      	ldrb	r3, [r7, #23]
 800ca86:	2b09      	cmp	r3, #9
 800ca88:	d9ca      	bls.n	800ca20 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ca8a:	68ba      	ldr	r2, [r7, #8]
 800ca8c:	69b9      	ldr	r1, [r7, #24]
 800ca8e:	68f8      	ldr	r0, [r7, #12]
 800ca90:	f000 f822 	bl	800cad8 <etharp_query>
 800ca94:	4603      	mov	r3, r0
 800ca96:	e00b      	b.n	800cab0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800ca9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800caa2:	9300      	str	r3, [sp, #0]
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	68b9      	ldr	r1, [r7, #8]
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f001 fd37 	bl	800e51c <ethernet_output>
 800caae:	4603      	mov	r3, r0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3720      	adds	r7, #32
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	080117ac 	.word	0x080117ac
 800cabc:	080118fc 	.word	0x080118fc
 800cac0:	08011824 	.word	0x08011824
 800cac4:	0801194c 	.word	0x0801194c
 800cac8:	080118ec 	.word	0x080118ec
 800cacc:	08011f60 	.word	0x08011f60
 800cad0:	20000200 	.word	0x20000200
 800cad4:	20000110 	.word	0x20000110

0800cad8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b08c      	sub	sp, #48	; 0x30
 800cadc:	af02      	add	r7, sp, #8
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	3326      	adds	r3, #38	; 0x26
 800cae8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800caea:	23ff      	movs	r3, #255	; 0xff
 800caec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	68f9      	ldr	r1, [r7, #12]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f000 fe0a 	bl	800d714 <ip4_addr_isbroadcast_u32>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d10c      	bne.n	800cb20 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cb0e:	2be0      	cmp	r3, #224	; 0xe0
 800cb10:	d006      	beq.n	800cb20 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d003      	beq.n	800cb20 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d102      	bne.n	800cb26 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cb20:	f06f 030f 	mvn.w	r3, #15
 800cb24:	e102      	b.n	800cd2c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cb26:	68fa      	ldr	r2, [r7, #12]
 800cb28:	2101      	movs	r1, #1
 800cb2a:	68b8      	ldr	r0, [r7, #8]
 800cb2c:	f7ff fb60 	bl	800c1f0 <etharp_find_entry>
 800cb30:	4603      	mov	r3, r0
 800cb32:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800cb34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	da02      	bge.n	800cb42 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800cb3c:	8a7b      	ldrh	r3, [r7, #18]
 800cb3e:	b25b      	sxtb	r3, r3
 800cb40:	e0f4      	b.n	800cd2c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cb42:	8a7b      	ldrh	r3, [r7, #18]
 800cb44:	2b7e      	cmp	r3, #126	; 0x7e
 800cb46:	d906      	bls.n	800cb56 <etharp_query+0x7e>
 800cb48:	4b7a      	ldr	r3, [pc, #488]	; (800cd34 <etharp_query+0x25c>)
 800cb4a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800cb4e:	497a      	ldr	r1, [pc, #488]	; (800cd38 <etharp_query+0x260>)
 800cb50:	487a      	ldr	r0, [pc, #488]	; (800cd3c <etharp_query+0x264>)
 800cb52:	f001 fd71 	bl	800e638 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800cb56:	8a7b      	ldrh	r3, [r7, #18]
 800cb58:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cb5a:	7c7a      	ldrb	r2, [r7, #17]
 800cb5c:	4978      	ldr	r1, [pc, #480]	; (800cd40 <etharp_query+0x268>)
 800cb5e:	4613      	mov	r3, r2
 800cb60:	005b      	lsls	r3, r3, #1
 800cb62:	4413      	add	r3, r2
 800cb64:	00db      	lsls	r3, r3, #3
 800cb66:	440b      	add	r3, r1
 800cb68:	3314      	adds	r3, #20
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d115      	bne.n	800cb9c <etharp_query+0xc4>
    is_new_entry = 1;
 800cb70:	2301      	movs	r3, #1
 800cb72:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cb74:	7c7a      	ldrb	r2, [r7, #17]
 800cb76:	4972      	ldr	r1, [pc, #456]	; (800cd40 <etharp_query+0x268>)
 800cb78:	4613      	mov	r3, r2
 800cb7a:	005b      	lsls	r3, r3, #1
 800cb7c:	4413      	add	r3, r2
 800cb7e:	00db      	lsls	r3, r3, #3
 800cb80:	440b      	add	r3, r1
 800cb82:	3314      	adds	r3, #20
 800cb84:	2201      	movs	r2, #1
 800cb86:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cb88:	7c7a      	ldrb	r2, [r7, #17]
 800cb8a:	496d      	ldr	r1, [pc, #436]	; (800cd40 <etharp_query+0x268>)
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	005b      	lsls	r3, r3, #1
 800cb90:	4413      	add	r3, r2
 800cb92:	00db      	lsls	r3, r3, #3
 800cb94:	440b      	add	r3, r1
 800cb96:	3308      	adds	r3, #8
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cb9c:	7c7a      	ldrb	r2, [r7, #17]
 800cb9e:	4968      	ldr	r1, [pc, #416]	; (800cd40 <etharp_query+0x268>)
 800cba0:	4613      	mov	r3, r2
 800cba2:	005b      	lsls	r3, r3, #1
 800cba4:	4413      	add	r3, r2
 800cba6:	00db      	lsls	r3, r3, #3
 800cba8:	440b      	add	r3, r1
 800cbaa:	3314      	adds	r3, #20
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	2b01      	cmp	r3, #1
 800cbb0:	d011      	beq.n	800cbd6 <etharp_query+0xfe>
 800cbb2:	7c7a      	ldrb	r2, [r7, #17]
 800cbb4:	4962      	ldr	r1, [pc, #392]	; (800cd40 <etharp_query+0x268>)
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	005b      	lsls	r3, r3, #1
 800cbba:	4413      	add	r3, r2
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	440b      	add	r3, r1
 800cbc0:	3314      	adds	r3, #20
 800cbc2:	781b      	ldrb	r3, [r3, #0]
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d806      	bhi.n	800cbd6 <etharp_query+0xfe>
 800cbc8:	4b5a      	ldr	r3, [pc, #360]	; (800cd34 <etharp_query+0x25c>)
 800cbca:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cbce:	495d      	ldr	r1, [pc, #372]	; (800cd44 <etharp_query+0x26c>)
 800cbd0:	485a      	ldr	r0, [pc, #360]	; (800cd3c <etharp_query+0x264>)
 800cbd2:	f001 fd31 	bl	800e638 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cbd6:	6a3b      	ldr	r3, [r7, #32]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d102      	bne.n	800cbe2 <etharp_query+0x10a>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d10c      	bne.n	800cbfc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cbe2:	68b9      	ldr	r1, [r7, #8]
 800cbe4:	68f8      	ldr	r0, [r7, #12]
 800cbe6:	f000 f963 	bl	800ceb0 <etharp_request>
 800cbea:	4603      	mov	r3, r0
 800cbec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d102      	bne.n	800cbfc <etharp_query+0x124>
      return result;
 800cbf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cbfa:	e097      	b.n	800cd2c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d106      	bne.n	800cc10 <etharp_query+0x138>
 800cc02:	4b4c      	ldr	r3, [pc, #304]	; (800cd34 <etharp_query+0x25c>)
 800cc04:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cc08:	494f      	ldr	r1, [pc, #316]	; (800cd48 <etharp_query+0x270>)
 800cc0a:	484c      	ldr	r0, [pc, #304]	; (800cd3c <etharp_query+0x264>)
 800cc0c:	f001 fd14 	bl	800e638 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cc10:	7c7a      	ldrb	r2, [r7, #17]
 800cc12:	494b      	ldr	r1, [pc, #300]	; (800cd40 <etharp_query+0x268>)
 800cc14:	4613      	mov	r3, r2
 800cc16:	005b      	lsls	r3, r3, #1
 800cc18:	4413      	add	r3, r2
 800cc1a:	00db      	lsls	r3, r3, #3
 800cc1c:	440b      	add	r3, r1
 800cc1e:	3314      	adds	r3, #20
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d918      	bls.n	800cc58 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cc26:	4a49      	ldr	r2, [pc, #292]	; (800cd4c <etharp_query+0x274>)
 800cc28:	7c7b      	ldrb	r3, [r7, #17]
 800cc2a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cc2c:	7c7a      	ldrb	r2, [r7, #17]
 800cc2e:	4613      	mov	r3, r2
 800cc30:	005b      	lsls	r3, r3, #1
 800cc32:	4413      	add	r3, r2
 800cc34:	00db      	lsls	r3, r3, #3
 800cc36:	3308      	adds	r3, #8
 800cc38:	4a41      	ldr	r2, [pc, #260]	; (800cd40 <etharp_query+0x268>)
 800cc3a:	4413      	add	r3, r2
 800cc3c:	1d1a      	adds	r2, r3, #4
 800cc3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cc42:	9300      	str	r3, [sp, #0]
 800cc44:	4613      	mov	r3, r2
 800cc46:	697a      	ldr	r2, [r7, #20]
 800cc48:	6879      	ldr	r1, [r7, #4]
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f001 fc66 	bl	800e51c <ethernet_output>
 800cc50:	4603      	mov	r3, r0
 800cc52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc56:	e067      	b.n	800cd28 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cc58:	7c7a      	ldrb	r2, [r7, #17]
 800cc5a:	4939      	ldr	r1, [pc, #228]	; (800cd40 <etharp_query+0x268>)
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	005b      	lsls	r3, r3, #1
 800cc60:	4413      	add	r3, r2
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	440b      	add	r3, r1
 800cc66:	3314      	adds	r3, #20
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d15c      	bne.n	800cd28 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cc76:	e01c      	b.n	800ccb2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	895a      	ldrh	r2, [r3, #10]
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	891b      	ldrh	r3, [r3, #8]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d10a      	bne.n	800cc9a <etharp_query+0x1c2>
 800cc84:	69fb      	ldr	r3, [r7, #28]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d006      	beq.n	800cc9a <etharp_query+0x1c2>
 800cc8c:	4b29      	ldr	r3, [pc, #164]	; (800cd34 <etharp_query+0x25c>)
 800cc8e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cc92:	492f      	ldr	r1, [pc, #188]	; (800cd50 <etharp_query+0x278>)
 800cc94:	4829      	ldr	r0, [pc, #164]	; (800cd3c <etharp_query+0x264>)
 800cc96:	f001 fccf 	bl	800e638 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	7b1b      	ldrb	r3, [r3, #12]
 800cc9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d002      	beq.n	800ccac <etharp_query+0x1d4>
        copy_needed = 1;
 800cca6:	2301      	movs	r3, #1
 800cca8:	61bb      	str	r3, [r7, #24]
        break;
 800ccaa:	e005      	b.n	800ccb8 <etharp_query+0x1e0>
      }
      p = p->next;
 800ccac:	69fb      	ldr	r3, [r7, #28]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1df      	bne.n	800cc78 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d007      	beq.n	800ccce <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ccc4:	200e      	movs	r0, #14
 800ccc6:	f7f9 fa89 	bl	80061dc <pbuf_clone>
 800ccca:	61f8      	str	r0, [r7, #28]
 800cccc:	e004      	b.n	800ccd8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ccd2:	69f8      	ldr	r0, [r7, #28]
 800ccd4:	f7f9 f8c6 	bl	8005e64 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d021      	beq.n	800cd22 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ccde:	7c7a      	ldrb	r2, [r7, #17]
 800cce0:	4917      	ldr	r1, [pc, #92]	; (800cd40 <etharp_query+0x268>)
 800cce2:	4613      	mov	r3, r2
 800cce4:	005b      	lsls	r3, r3, #1
 800cce6:	4413      	add	r3, r2
 800cce8:	00db      	lsls	r3, r3, #3
 800ccea:	440b      	add	r3, r1
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d00a      	beq.n	800cd08 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ccf2:	7c7a      	ldrb	r2, [r7, #17]
 800ccf4:	4912      	ldr	r1, [pc, #72]	; (800cd40 <etharp_query+0x268>)
 800ccf6:	4613      	mov	r3, r2
 800ccf8:	005b      	lsls	r3, r3, #1
 800ccfa:	4413      	add	r3, r2
 800ccfc:	00db      	lsls	r3, r3, #3
 800ccfe:	440b      	add	r3, r1
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7f9 f80e 	bl	8005d24 <pbuf_free>
      }
      arp_table[i].q = p;
 800cd08:	7c7a      	ldrb	r2, [r7, #17]
 800cd0a:	490d      	ldr	r1, [pc, #52]	; (800cd40 <etharp_query+0x268>)
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	005b      	lsls	r3, r3, #1
 800cd10:	4413      	add	r3, r2
 800cd12:	00db      	lsls	r3, r3, #3
 800cd14:	440b      	add	r3, r1
 800cd16:	69fa      	ldr	r2, [r7, #28]
 800cd18:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd20:	e002      	b.n	800cd28 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800cd22:	23ff      	movs	r3, #255	; 0xff
 800cd24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800cd28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3728      	adds	r7, #40	; 0x28
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	080117ac 	.word	0x080117ac
 800cd38:	08011958 	.word	0x08011958
 800cd3c:	08011824 	.word	0x08011824
 800cd40:	20000110 	.word	0x20000110
 800cd44:	08011968 	.word	0x08011968
 800cd48:	0801194c 	.word	0x0801194c
 800cd4c:	20000200 	.word	0x20000200
 800cd50:	08011990 	.word	0x08011990

0800cd54 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b08a      	sub	sp, #40	; 0x28
 800cd58:	af02      	add	r7, sp, #8
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
 800cd60:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cd62:	2300      	movs	r3, #0
 800cd64:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d106      	bne.n	800cd7a <etharp_raw+0x26>
 800cd6c:	4b3a      	ldr	r3, [pc, #232]	; (800ce58 <etharp_raw+0x104>)
 800cd6e:	f240 4257 	movw	r2, #1111	; 0x457
 800cd72:	493a      	ldr	r1, [pc, #232]	; (800ce5c <etharp_raw+0x108>)
 800cd74:	483a      	ldr	r0, [pc, #232]	; (800ce60 <etharp_raw+0x10c>)
 800cd76:	f001 fc5f 	bl	800e638 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cd7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd7e:	211c      	movs	r1, #28
 800cd80:	200e      	movs	r0, #14
 800cd82:	f7f8 fcef 	bl	8005764 <pbuf_alloc>
 800cd86:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d102      	bne.n	800cd94 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800cd8e:	f04f 33ff 	mov.w	r3, #4294967295
 800cd92:	e05d      	b.n	800ce50 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	895b      	ldrh	r3, [r3, #10]
 800cd98:	2b1b      	cmp	r3, #27
 800cd9a:	d806      	bhi.n	800cdaa <etharp_raw+0x56>
 800cd9c:	4b2e      	ldr	r3, [pc, #184]	; (800ce58 <etharp_raw+0x104>)
 800cd9e:	f240 4263 	movw	r2, #1123	; 0x463
 800cda2:	4930      	ldr	r1, [pc, #192]	; (800ce64 <etharp_raw+0x110>)
 800cda4:	482e      	ldr	r0, [pc, #184]	; (800ce60 <etharp_raw+0x10c>)
 800cda6:	f001 fc47 	bl	800e638 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cdb0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7f7 fd06 	bl	80047c4 <lwip_htons>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	461a      	mov	r2, r3
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cdc6:	2b06      	cmp	r3, #6
 800cdc8:	d006      	beq.n	800cdd8 <etharp_raw+0x84>
 800cdca:	4b23      	ldr	r3, [pc, #140]	; (800ce58 <etharp_raw+0x104>)
 800cdcc:	f240 426a 	movw	r2, #1130	; 0x46a
 800cdd0:	4925      	ldr	r1, [pc, #148]	; (800ce68 <etharp_raw+0x114>)
 800cdd2:	4823      	ldr	r0, [pc, #140]	; (800ce60 <etharp_raw+0x10c>)
 800cdd4:	f001 fc30 	bl	800e638 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	3308      	adds	r3, #8
 800cddc:	2206      	movs	r2, #6
 800cdde:	6839      	ldr	r1, [r7, #0]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f001 fc16 	bl	800e612 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	3312      	adds	r3, #18
 800cdea:	2206      	movs	r2, #6
 800cdec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f001 fc0f 	bl	800e612 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	330e      	adds	r3, #14
 800cdf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdfa:	6812      	ldr	r2, [r2, #0]
 800cdfc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	3318      	adds	r3, #24
 800ce02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce04:	6812      	ldr	r2, [r2, #0]
 800ce06:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	701a      	strb	r2, [r3, #0]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	f042 0201 	orr.w	r2, r2, #1
 800ce14:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f042 0208 	orr.w	r2, r2, #8
 800ce1e:	709a      	strb	r2, [r3, #2]
 800ce20:	2200      	movs	r2, #0
 800ce22:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	2206      	movs	r2, #6
 800ce28:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	2204      	movs	r2, #4
 800ce2e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ce30:	f640 0306 	movw	r3, #2054	; 0x806
 800ce34:	9300      	str	r3, [sp, #0]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	68ba      	ldr	r2, [r7, #8]
 800ce3a:	69b9      	ldr	r1, [r7, #24]
 800ce3c:	68f8      	ldr	r0, [r7, #12]
 800ce3e:	f001 fb6d 	bl	800e51c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ce42:	69b8      	ldr	r0, [r7, #24]
 800ce44:	f7f8 ff6e 	bl	8005d24 <pbuf_free>
  p = NULL;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800ce4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3720      	adds	r7, #32
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	080117ac 	.word	0x080117ac
 800ce5c:	080118fc 	.word	0x080118fc
 800ce60:	08011824 	.word	0x08011824
 800ce64:	080119ac 	.word	0x080119ac
 800ce68:	080119e0 	.word	0x080119e0

0800ce6c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b088      	sub	sp, #32
 800ce70:	af04      	add	r7, sp, #16
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ce88:	2201      	movs	r2, #1
 800ce8a:	9203      	str	r2, [sp, #12]
 800ce8c:	68ba      	ldr	r2, [r7, #8]
 800ce8e:	9202      	str	r2, [sp, #8]
 800ce90:	4a06      	ldr	r2, [pc, #24]	; (800ceac <etharp_request_dst+0x40>)
 800ce92:	9201      	str	r2, [sp, #4]
 800ce94:	9300      	str	r3, [sp, #0]
 800ce96:	4603      	mov	r3, r0
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f7ff ff5a 	bl	800cd54 <etharp_raw>
 800cea0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	bf00      	nop
 800ceac:	08011f68 	.word	0x08011f68

0800ceb0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ceba:	4a05      	ldr	r2, [pc, #20]	; (800ced0 <etharp_request+0x20>)
 800cebc:	6839      	ldr	r1, [r7, #0]
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f7ff ffd4 	bl	800ce6c <etharp_request_dst>
 800cec4:	4603      	mov	r3, r0
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3708      	adds	r7, #8
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop
 800ced0:	08011f60 	.word	0x08011f60

0800ced4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b08e      	sub	sp, #56	; 0x38
 800ced8:	af04      	add	r7, sp, #16
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800cede:	4b78      	ldr	r3, [pc, #480]	; (800d0c0 <icmp_input+0x1ec>)
 800cee0:	689b      	ldr	r3, [r3, #8]
 800cee2:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 800cee4:	6a3b      	ldr	r3, [r7, #32]
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	f003 030f 	and.w	r3, r3, #15
 800ceec:	b2db      	uxtb	r3, r3
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 800cef4:	8bfb      	ldrh	r3, [r7, #30]
 800cef6:	2b13      	cmp	r3, #19
 800cef8:	f240 80cf 	bls.w	800d09a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	895b      	ldrh	r3, [r3, #10]
 800cf00:	2b03      	cmp	r3, #3
 800cf02:	f240 80cc 	bls.w	800d09e <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800cf0e:	7f7b      	ldrb	r3, [r7, #29]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f000 80bb 	beq.w	800d08c <icmp_input+0x1b8>
 800cf16:	2b08      	cmp	r3, #8
 800cf18:	f040 80bb 	bne.w	800d092 <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800cf1c:	4b69      	ldr	r3, [pc, #420]	; (800d0c4 <icmp_input+0x1f0>)
 800cf1e:	627b      	str	r3, [r7, #36]	; 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cf20:	4b67      	ldr	r3, [pc, #412]	; (800d0c0 <icmp_input+0x1ec>)
 800cf22:	695b      	ldr	r3, [r3, #20]
 800cf24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf28:	2be0      	cmp	r3, #224	; 0xe0
 800cf2a:	d102      	bne.n	800cf32 <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	3304      	adds	r3, #4
 800cf30:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cf32:	4b63      	ldr	r3, [pc, #396]	; (800d0c0 <icmp_input+0x1ec>)
 800cf34:	695a      	ldr	r2, [r3, #20]
 800cf36:	4b62      	ldr	r3, [pc, #392]	; (800d0c0 <icmp_input+0x1ec>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	4610      	mov	r0, r2
 800cf3e:	f000 fbe9 	bl	800d714 <ip4_addr_isbroadcast_u32>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d002      	beq.n	800cf4e <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	3304      	adds	r3, #4
 800cf4c:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	891b      	ldrh	r3, [r3, #8]
 800cf52:	2b07      	cmp	r3, #7
 800cf54:	f240 80a5 	bls.w	800d0a2 <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cf58:	8bfb      	ldrh	r3, [r7, #30]
 800cf5a:	330e      	adds	r3, #14
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f7f8 fe4a 	bl	8005bf8 <pbuf_add_header>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d04b      	beq.n	800d002 <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	891a      	ldrh	r2, [r3, #8]
 800cf6e:	8bfb      	ldrh	r3, [r7, #30]
 800cf70:	4413      	add	r3, r2
 800cf72:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	891b      	ldrh	r3, [r3, #8]
 800cf78:	8b7a      	ldrh	r2, [r7, #26]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	f0c0 8096 	bcc.w	800d0ac <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cf80:	8b7b      	ldrh	r3, [r7, #26]
 800cf82:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf86:	4619      	mov	r1, r3
 800cf88:	200e      	movs	r0, #14
 800cf8a:	f7f8 fbeb 	bl	8005764 <pbuf_alloc>
 800cf8e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f000 808c 	beq.w	800d0b0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	895b      	ldrh	r3, [r3, #10]
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	8bfb      	ldrh	r3, [r7, #30]
 800cfa0:	3308      	adds	r3, #8
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d203      	bcs.n	800cfae <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800cfa6:	6978      	ldr	r0, [r7, #20]
 800cfa8:	f7f8 febc 	bl	8005d24 <pbuf_free>
          goto icmperr;
 800cfac:	e081      	b.n	800d0b2 <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	8bfa      	ldrh	r2, [r7, #30]
 800cfb4:	6a39      	ldr	r1, [r7, #32]
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f001 fb2b 	bl	800e612 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cfbc:	8bfb      	ldrh	r3, [r7, #30]
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	6978      	ldr	r0, [r7, #20]
 800cfc2:	f7f8 fe29 	bl	8005c18 <pbuf_remove_header>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d009      	beq.n	800cfe0 <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cfcc:	4b3e      	ldr	r3, [pc, #248]	; (800d0c8 <icmp_input+0x1f4>)
 800cfce:	22b6      	movs	r2, #182	; 0xb6
 800cfd0:	493e      	ldr	r1, [pc, #248]	; (800d0cc <icmp_input+0x1f8>)
 800cfd2:	483f      	ldr	r0, [pc, #252]	; (800d0d0 <icmp_input+0x1fc>)
 800cfd4:	f001 fb30 	bl	800e638 <iprintf>
          pbuf_free(r);
 800cfd8:	6978      	ldr	r0, [r7, #20]
 800cfda:	f7f8 fea3 	bl	8005d24 <pbuf_free>
          goto icmperr;
 800cfde:	e068      	b.n	800d0b2 <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cfe0:	6879      	ldr	r1, [r7, #4]
 800cfe2:	6978      	ldr	r0, [r7, #20]
 800cfe4:	f7f8 ffb6 	bl	8005f54 <pbuf_copy>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d003      	beq.n	800cff6 <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cfee:	6978      	ldr	r0, [r7, #20]
 800cff0:	f7f8 fe98 	bl	8005d24 <pbuf_free>
          goto icmperr;
 800cff4:	e05d      	b.n	800d0b2 <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f7f8 fe94 	bl	8005d24 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	607b      	str	r3, [r7, #4]
 800d000:	e00f      	b.n	800d022 <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d002:	8bfb      	ldrh	r3, [r7, #30]
 800d004:	330e      	adds	r3, #14
 800d006:	4619      	mov	r1, r3
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7f8 fe05 	bl	8005c18 <pbuf_remove_header>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d006      	beq.n	800d022 <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d014:	4b2c      	ldr	r3, [pc, #176]	; (800d0c8 <icmp_input+0x1f4>)
 800d016:	22c7      	movs	r2, #199	; 0xc7
 800d018:	492e      	ldr	r1, [pc, #184]	; (800d0d4 <icmp_input+0x200>)
 800d01a:	482d      	ldr	r0, [pc, #180]	; (800d0d0 <icmp_input+0x1fc>)
 800d01c:	f001 fb0c 	bl	800e638 <iprintf>
          goto icmperr;
 800d020:	e047      	b.n	800d0b2 <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	685b      	ldr	r3, [r3, #4]
 800d026:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d028:	8bfb      	ldrh	r3, [r7, #30]
 800d02a:	4619      	mov	r1, r3
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f7f8 fde3 	bl	8005bf8 <pbuf_add_header>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d12b      	bne.n	800d090 <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d040:	681a      	ldr	r2, [r3, #0]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d046:	4b1e      	ldr	r3, [pc, #120]	; (800d0c0 <icmp_input+0x1ec>)
 800d048:	691a      	ldr	r2, [r3, #16]
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	2200      	movs	r2, #0
 800d052:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	2200      	movs	r2, #0
 800d058:	709a      	strb	r2, [r3, #2]
 800d05a:	2200      	movs	r2, #0
 800d05c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	22ff      	movs	r2, #255	; 0xff
 800d062:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2200      	movs	r2, #0
 800d068:	729a      	strb	r2, [r3, #10]
 800d06a:	2200      	movs	r2, #0
 800d06c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	9302      	str	r3, [sp, #8]
 800d072:	2301      	movs	r3, #1
 800d074:	9301      	str	r3, [sp, #4]
 800d076:	2300      	movs	r3, #0
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	23ff      	movs	r3, #255	; 0xff
 800d07c:	2200      	movs	r2, #0
 800d07e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 fa6f 	bl	800d564 <ip4_output_if>
 800d086:	4603      	mov	r3, r0
 800d088:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d08a:	e001      	b.n	800d090 <icmp_input+0x1bc>
      break;
 800d08c:	bf00      	nop
 800d08e:	e000      	b.n	800d092 <icmp_input+0x1be>
      break;
 800d090:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7f8 fe46 	bl	8005d24 <pbuf_free>
  return;
 800d098:	e00f      	b.n	800d0ba <icmp_input+0x1e6>
    goto lenerr;
 800d09a:	bf00      	nop
 800d09c:	e002      	b.n	800d0a4 <icmp_input+0x1d0>
    goto lenerr;
 800d09e:	bf00      	nop
 800d0a0:	e000      	b.n	800d0a4 <icmp_input+0x1d0>
        goto lenerr;
 800d0a2:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7f8 fe3d 	bl	8005d24 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d0aa:	e006      	b.n	800d0ba <icmp_input+0x1e6>
          goto icmperr;
 800d0ac:	bf00      	nop
 800d0ae:	e000      	b.n	800d0b2 <icmp_input+0x1de>
          goto icmperr;
 800d0b0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f7f8 fe36 	bl	8005d24 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d0b8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d0ba:	3728      	adds	r7, #40	; 0x28
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	200033ec 	.word	0x200033ec
 800d0c4:	20003400 	.word	0x20003400
 800d0c8:	08011a24 	.word	0x08011a24
 800d0cc:	08011a5c 	.word	0x08011a5c
 800d0d0:	08011a94 	.word	0x08011a94
 800d0d4:	08011abc 	.word	0x08011abc

0800d0d8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d0e4:	78fb      	ldrb	r3, [r7, #3]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	2103      	movs	r1, #3
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 f814 	bl	800d118 <icmp_send_response>
}
 800d0f0:	bf00      	nop
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	460b      	mov	r3, r1
 800d102:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d104:	78fb      	ldrb	r3, [r7, #3]
 800d106:	461a      	mov	r2, r3
 800d108:	210b      	movs	r1, #11
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f000 f804 	bl	800d118 <icmp_send_response>
}
 800d110:	bf00      	nop
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08c      	sub	sp, #48	; 0x30
 800d11c:	af04      	add	r7, sp, #16
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	460b      	mov	r3, r1
 800d122:	70fb      	strb	r3, [r7, #3]
 800d124:	4613      	mov	r3, r2
 800d126:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d128:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d12c:	2124      	movs	r1, #36	; 0x24
 800d12e:	2022      	movs	r0, #34	; 0x22
 800d130:	f7f8 fb18 	bl	8005764 <pbuf_alloc>
 800d134:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d04c      	beq.n	800d1d6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	895b      	ldrh	r3, [r3, #10]
 800d140:	2b23      	cmp	r3, #35	; 0x23
 800d142:	d806      	bhi.n	800d152 <icmp_send_response+0x3a>
 800d144:	4b26      	ldr	r3, [pc, #152]	; (800d1e0 <icmp_send_response+0xc8>)
 800d146:	f240 1269 	movw	r2, #361	; 0x169
 800d14a:	4926      	ldr	r1, [pc, #152]	; (800d1e4 <icmp_send_response+0xcc>)
 800d14c:	4826      	ldr	r0, [pc, #152]	; (800d1e8 <icmp_send_response+0xd0>)
 800d14e:	f001 fa73 	bl	800e638 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	78fa      	ldrb	r2, [r7, #3]
 800d162:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	78ba      	ldrb	r2, [r7, #2]
 800d168:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	2200      	movs	r2, #0
 800d16e:	711a      	strb	r2, [r3, #4]
 800d170:	2200      	movs	r2, #0
 800d172:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	2200      	movs	r2, #0
 800d178:	719a      	strb	r2, [r3, #6]
 800d17a:	2200      	movs	r2, #0
 800d17c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d17e:	69fb      	ldr	r3, [r7, #28]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	f103 0008 	add.w	r0, r3, #8
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	685b      	ldr	r3, [r3, #4]
 800d18a:	221c      	movs	r2, #28
 800d18c:	4619      	mov	r1, r3
 800d18e:	f001 fa40 	bl	800e612 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d198:	f107 030c 	add.w	r3, r7, #12
 800d19c:	4618      	mov	r0, r3
 800d19e:	f000 f825 	bl	800d1ec <ip4_route>
 800d1a2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d011      	beq.n	800d1ce <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	709a      	strb	r2, [r3, #2]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d1b4:	f107 020c 	add.w	r2, r7, #12
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	9302      	str	r3, [sp, #8]
 800d1bc:	2301      	movs	r3, #1
 800d1be:	9301      	str	r3, [sp, #4]
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	9300      	str	r3, [sp, #0]
 800d1c4:	23ff      	movs	r3, #255	; 0xff
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	69f8      	ldr	r0, [r7, #28]
 800d1ca:	f000 f9cb 	bl	800d564 <ip4_output_if>
  }
  pbuf_free(q);
 800d1ce:	69f8      	ldr	r0, [r7, #28]
 800d1d0:	f7f8 fda8 	bl	8005d24 <pbuf_free>
 800d1d4:	e000      	b.n	800d1d8 <icmp_send_response+0xc0>
    return;
 800d1d6:	bf00      	nop
}
 800d1d8:	3720      	adds	r7, #32
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	08011a24 	.word	0x08011a24
 800d1e4:	08011af0 	.word	0x08011af0
 800d1e8:	08011a94 	.word	0x08011a94

0800d1ec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d1f4:	4b33      	ldr	r3, [pc, #204]	; (800d2c4 <ip4_route+0xd8>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	60fb      	str	r3, [r7, #12]
 800d1fa:	e036      	b.n	800d26a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d202:	f003 0301 	and.w	r3, r3, #1
 800d206:	b2db      	uxtb	r3, r3
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d02b      	beq.n	800d264 <ip4_route+0x78>
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d212:	089b      	lsrs	r3, r3, #2
 800d214:	f003 0301 	and.w	r3, r3, #1
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d022      	beq.n	800d264 <ip4_route+0x78>
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3304      	adds	r3, #4
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d01d      	beq.n	800d264 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681a      	ldr	r2, [r3, #0]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	3304      	adds	r3, #4
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	405a      	eors	r2, r3
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	3308      	adds	r3, #8
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4013      	ands	r3, r2
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d101      	bne.n	800d244 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	e038      	b.n	800d2b6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d24a:	f003 0302 	and.w	r3, r3, #2
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d108      	bne.n	800d264 <ip4_route+0x78>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	330c      	adds	r3, #12
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d101      	bne.n	800d264 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	e028      	b.n	800d2b6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	60fb      	str	r3, [r7, #12]
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d1c5      	bne.n	800d1fc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d270:	4b15      	ldr	r3, [pc, #84]	; (800d2c8 <ip4_route+0xdc>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d01a      	beq.n	800d2ae <ip4_route+0xc2>
 800d278:	4b13      	ldr	r3, [pc, #76]	; (800d2c8 <ip4_route+0xdc>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d280:	f003 0301 	and.w	r3, r3, #1
 800d284:	2b00      	cmp	r3, #0
 800d286:	d012      	beq.n	800d2ae <ip4_route+0xc2>
 800d288:	4b0f      	ldr	r3, [pc, #60]	; (800d2c8 <ip4_route+0xdc>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d290:	f003 0304 	and.w	r3, r3, #4
 800d294:	2b00      	cmp	r3, #0
 800d296:	d00a      	beq.n	800d2ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d298:	4b0b      	ldr	r3, [pc, #44]	; (800d2c8 <ip4_route+0xdc>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	3304      	adds	r3, #4
 800d29e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d004      	beq.n	800d2ae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	2b7f      	cmp	r3, #127	; 0x7f
 800d2ac:	d101      	bne.n	800d2b2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	e001      	b.n	800d2b6 <ip4_route+0xca>
  }

  return netif_default;
 800d2b2:	4b05      	ldr	r3, [pc, #20]	; (800d2c8 <ip4_route+0xdc>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3714      	adds	r7, #20
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	20006920 	.word	0x20006920
 800d2c8:	20006924 	.word	0x20006924

0800d2cc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d2da:	f003 0301 	and.w	r3, r3, #1
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d016      	beq.n	800d312 <ip4_input_accept+0x46>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	3304      	adds	r3, #4
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d011      	beq.n	800d312 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d2ee:	4b0b      	ldr	r3, [pc, #44]	; (800d31c <ip4_input_accept+0x50>)
 800d2f0:	695a      	ldr	r2, [r3, #20]
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	3304      	adds	r3, #4
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d008      	beq.n	800d30e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d2fc:	4b07      	ldr	r3, [pc, #28]	; (800d31c <ip4_input_accept+0x50>)
 800d2fe:	695b      	ldr	r3, [r3, #20]
 800d300:	6879      	ldr	r1, [r7, #4]
 800d302:	4618      	mov	r0, r3
 800d304:	f000 fa06 	bl	800d714 <ip4_addr_isbroadcast_u32>
 800d308:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d30e:	2301      	movs	r3, #1
 800d310:	e000      	b.n	800d314 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d312:	2300      	movs	r3, #0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	200033ec 	.word	0x200033ec

0800d320 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	091b      	lsrs	r3, r3, #4
 800d336:	b2db      	uxtb	r3, r3
 800d338:	2b04      	cmp	r3, #4
 800d33a:	d004      	beq.n	800d346 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7f8 fcf1 	bl	8005d24 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d342:	2300      	movs	r3, #0
 800d344:	e105      	b.n	800d552 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	f003 030f 	and.w	r3, r3, #15
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	b2db      	uxtb	r3, r3
 800d354:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	885b      	ldrh	r3, [r3, #2]
 800d35a:	b29b      	uxth	r3, r3
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7f7 fa31 	bl	80047c4 <lwip_htons>
 800d362:	4603      	mov	r3, r0
 800d364:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	891b      	ldrh	r3, [r3, #8]
 800d36a:	89ba      	ldrh	r2, [r7, #12]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d204      	bcs.n	800d37a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d370:	89bb      	ldrh	r3, [r7, #12]
 800d372:	4619      	mov	r1, r3
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f7f8 fb4f 	bl	8005a18 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	895b      	ldrh	r3, [r3, #10]
 800d37e:	89fa      	ldrh	r2, [r7, #14]
 800d380:	429a      	cmp	r2, r3
 800d382:	d807      	bhi.n	800d394 <ip4_input+0x74>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	891b      	ldrh	r3, [r3, #8]
 800d388:	89ba      	ldrh	r2, [r7, #12]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d802      	bhi.n	800d394 <ip4_input+0x74>
 800d38e:	89fb      	ldrh	r3, [r7, #14]
 800d390:	2b13      	cmp	r3, #19
 800d392:	d804      	bhi.n	800d39e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7f8 fcc5 	bl	8005d24 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d39a:	2300      	movs	r3, #0
 800d39c:	e0d9      	b.n	800d552 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	4a6e      	ldr	r2, [pc, #440]	; (800d55c <ip4_input+0x23c>)
 800d3a4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	4a6c      	ldr	r2, [pc, #432]	; (800d55c <ip4_input+0x23c>)
 800d3ac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d3ae:	4b6b      	ldr	r3, [pc, #428]	; (800d55c <ip4_input+0x23c>)
 800d3b0:	695b      	ldr	r3, [r3, #20]
 800d3b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3b6:	2be0      	cmp	r3, #224	; 0xe0
 800d3b8:	d112      	bne.n	800d3e0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3c0:	f003 0301 	and.w	r3, r3, #1
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d007      	beq.n	800d3da <ip4_input+0xba>
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	3304      	adds	r3, #4
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d002      	beq.n	800d3da <ip4_input+0xba>
      netif = inp;
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	613b      	str	r3, [r7, #16]
 800d3d8:	e02a      	b.n	800d430 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	613b      	str	r3, [r7, #16]
 800d3de:	e027      	b.n	800d430 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d3e0:	6838      	ldr	r0, [r7, #0]
 800d3e2:	f7ff ff73 	bl	800d2cc <ip4_input_accept>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d002      	beq.n	800d3f2 <ip4_input+0xd2>
      netif = inp;
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	613b      	str	r3, [r7, #16]
 800d3f0:	e01e      	b.n	800d430 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d3f6:	4b59      	ldr	r3, [pc, #356]	; (800d55c <ip4_input+0x23c>)
 800d3f8:	695b      	ldr	r3, [r3, #20]
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	2b7f      	cmp	r3, #127	; 0x7f
 800d3fe:	d017      	beq.n	800d430 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d400:	4b57      	ldr	r3, [pc, #348]	; (800d560 <ip4_input+0x240>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	613b      	str	r3, [r7, #16]
 800d406:	e00e      	b.n	800d426 <ip4_input+0x106>
          if (netif == inp) {
 800d408:	693a      	ldr	r2, [r7, #16]
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d006      	beq.n	800d41e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d410:	6938      	ldr	r0, [r7, #16]
 800d412:	f7ff ff5b 	bl	800d2cc <ip4_input_accept>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d108      	bne.n	800d42e <ip4_input+0x10e>
 800d41c:	e000      	b.n	800d420 <ip4_input+0x100>
            continue;
 800d41e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	613b      	str	r3, [r7, #16]
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1ed      	bne.n	800d408 <ip4_input+0xe8>
 800d42c:	e000      	b.n	800d430 <ip4_input+0x110>
            break;
 800d42e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d430:	4b4a      	ldr	r3, [pc, #296]	; (800d55c <ip4_input+0x23c>)
 800d432:	691b      	ldr	r3, [r3, #16]
 800d434:	6839      	ldr	r1, [r7, #0]
 800d436:	4618      	mov	r0, r3
 800d438:	f000 f96c 	bl	800d714 <ip4_addr_isbroadcast_u32>
 800d43c:	4603      	mov	r3, r0
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d105      	bne.n	800d44e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d442:	4b46      	ldr	r3, [pc, #280]	; (800d55c <ip4_input+0x23c>)
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d44a:	2be0      	cmp	r3, #224	; 0xe0
 800d44c:	d104      	bne.n	800d458 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	f7f8 fc68 	bl	8005d24 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d454:	2300      	movs	r3, #0
 800d456:	e07c      	b.n	800d552 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d104      	bne.n	800d468 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7f8 fc60 	bl	8005d24 <pbuf_free>
    return ERR_OK;
 800d464:	2300      	movs	r3, #0
 800d466:	e074      	b.n	800d552 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	88db      	ldrh	r3, [r3, #6]
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	461a      	mov	r2, r3
 800d470:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d474:	4013      	ands	r3, r2
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00b      	beq.n	800d492 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 fc90 	bl	800dda0 <ip4_reass>
 800d480:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d101      	bne.n	800d48c <ip4_input+0x16c>
      return ERR_OK;
 800d488:	2300      	movs	r3, #0
 800d48a:	e062      	b.n	800d552 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d492:	4a32      	ldr	r2, [pc, #200]	; (800d55c <ip4_input+0x23c>)
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d498:	4a30      	ldr	r2, [pc, #192]	; (800d55c <ip4_input+0x23c>)
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d49e:	4a2f      	ldr	r2, [pc, #188]	; (800d55c <ip4_input+0x23c>)
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	f003 030f 	and.w	r3, r3, #15
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	b29a      	uxth	r2, r3
 800d4b4:	4b29      	ldr	r3, [pc, #164]	; (800d55c <ip4_input+0x23c>)
 800d4b6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d4b8:	89fb      	ldrh	r3, [r7, #14]
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f7f8 fbab 	bl	8005c18 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	7a5b      	ldrb	r3, [r3, #9]
 800d4c6:	2b06      	cmp	r3, #6
 800d4c8:	d009      	beq.n	800d4de <ip4_input+0x1be>
 800d4ca:	2b11      	cmp	r3, #17
 800d4cc:	d002      	beq.n	800d4d4 <ip4_input+0x1b4>
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d00a      	beq.n	800d4e8 <ip4_input+0x1c8>
 800d4d2:	e00e      	b.n	800d4f2 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d4d4:	6839      	ldr	r1, [r7, #0]
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f7fe fc6c 	bl	800bdb4 <udp_input>
        break;
 800d4dc:	e026      	b.n	800d52c <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d4de:	6839      	ldr	r1, [r7, #0]
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f7fa fcdb 	bl	8007e9c <tcp_input>
        break;
 800d4e6:	e021      	b.n	800d52c <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d4e8:	6839      	ldr	r1, [r7, #0]
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f7ff fcf2 	bl	800ced4 <icmp_input>
        break;
 800d4f0:	e01c      	b.n	800d52c <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d4f2:	4b1a      	ldr	r3, [pc, #104]	; (800d55c <ip4_input+0x23c>)
 800d4f4:	695b      	ldr	r3, [r3, #20]
 800d4f6:	6939      	ldr	r1, [r7, #16]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f000 f90b 	bl	800d714 <ip4_addr_isbroadcast_u32>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10f      	bne.n	800d524 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d504:	4b15      	ldr	r3, [pc, #84]	; (800d55c <ip4_input+0x23c>)
 800d506:	695b      	ldr	r3, [r3, #20]
 800d508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d50c:	2be0      	cmp	r3, #224	; 0xe0
 800d50e:	d009      	beq.n	800d524 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d510:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d514:	4619      	mov	r1, r3
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7f8 fbf1 	bl	8005cfe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d51c:	2102      	movs	r1, #2
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f7ff fdda 	bl	800d0d8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f7f8 fbfd 	bl	8005d24 <pbuf_free>
        break;
 800d52a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d52c:	4b0b      	ldr	r3, [pc, #44]	; (800d55c <ip4_input+0x23c>)
 800d52e:	2200      	movs	r2, #0
 800d530:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d532:	4b0a      	ldr	r3, [pc, #40]	; (800d55c <ip4_input+0x23c>)
 800d534:	2200      	movs	r2, #0
 800d536:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d538:	4b08      	ldr	r3, [pc, #32]	; (800d55c <ip4_input+0x23c>)
 800d53a:	2200      	movs	r2, #0
 800d53c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d53e:	4b07      	ldr	r3, [pc, #28]	; (800d55c <ip4_input+0x23c>)
 800d540:	2200      	movs	r2, #0
 800d542:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d544:	4b05      	ldr	r3, [pc, #20]	; (800d55c <ip4_input+0x23c>)
 800d546:	2200      	movs	r2, #0
 800d548:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d54a:	4b04      	ldr	r3, [pc, #16]	; (800d55c <ip4_input+0x23c>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d550:	2300      	movs	r3, #0
}
 800d552:	4618      	mov	r0, r3
 800d554:	3718      	adds	r7, #24
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	200033ec 	.word	0x200033ec
 800d560:	20006920 	.word	0x20006920

0800d564 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b08a      	sub	sp, #40	; 0x28
 800d568:	af04      	add	r7, sp, #16
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
 800d570:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d009      	beq.n	800d590 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d003      	beq.n	800d58a <ip4_output_if+0x26>
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d102      	bne.n	800d590 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58c:	3304      	adds	r3, #4
 800d58e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d590:	78fa      	ldrb	r2, [r7, #3]
 800d592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d594:	9302      	str	r3, [sp, #8]
 800d596:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d59a:	9301      	str	r3, [sp, #4]
 800d59c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d5a0:	9300      	str	r3, [sp, #0]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	6979      	ldr	r1, [r7, #20]
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f000 f805 	bl	800d5b8 <ip4_output_if_src>
 800d5ae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3718      	adds	r7, #24
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}

0800d5b8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b088      	sub	sp, #32
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	607a      	str	r2, [r7, #4]
 800d5c4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	7b9b      	ldrb	r3, [r3, #14]
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d006      	beq.n	800d5dc <ip4_output_if_src+0x24>
 800d5ce:	4b4b      	ldr	r3, [pc, #300]	; (800d6fc <ip4_output_if_src+0x144>)
 800d5d0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d5d4:	494a      	ldr	r1, [pc, #296]	; (800d700 <ip4_output_if_src+0x148>)
 800d5d6:	484b      	ldr	r0, [pc, #300]	; (800d704 <ip4_output_if_src+0x14c>)
 800d5d8:	f001 f82e 	bl	800e638 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d060      	beq.n	800d6a4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d5e2:	2314      	movs	r3, #20
 800d5e4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d5e6:	2114      	movs	r1, #20
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f7f8 fb05 	bl	8005bf8 <pbuf_add_header>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d002      	beq.n	800d5fa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d5f4:	f06f 0301 	mvn.w	r3, #1
 800d5f8:	e07c      	b.n	800d6f4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	895b      	ldrh	r3, [r3, #10]
 800d604:	2b13      	cmp	r3, #19
 800d606:	d806      	bhi.n	800d616 <ip4_output_if_src+0x5e>
 800d608:	4b3c      	ldr	r3, [pc, #240]	; (800d6fc <ip4_output_if_src+0x144>)
 800d60a:	f240 3289 	movw	r2, #905	; 0x389
 800d60e:	493e      	ldr	r1, [pc, #248]	; (800d708 <ip4_output_if_src+0x150>)
 800d610:	483c      	ldr	r0, [pc, #240]	; (800d704 <ip4_output_if_src+0x14c>)
 800d612:	f001 f811 	bl	800e638 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	78fa      	ldrb	r2, [r7, #3]
 800d61a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d61c:	69fb      	ldr	r3, [r7, #28]
 800d61e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d622:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681a      	ldr	r2, [r3, #0]
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d62c:	8b7b      	ldrh	r3, [r7, #26]
 800d62e:	089b      	lsrs	r3, r3, #2
 800d630:	b29b      	uxth	r3, r3
 800d632:	b2db      	uxtb	r3, r3
 800d634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d644:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	891b      	ldrh	r3, [r3, #8]
 800d64a:	4618      	mov	r0, r3
 800d64c:	f7f7 f8ba 	bl	80047c4 <lwip_htons>
 800d650:	4603      	mov	r3, r0
 800d652:	461a      	mov	r2, r3
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	2200      	movs	r2, #0
 800d65c:	719a      	strb	r2, [r3, #6]
 800d65e:	2200      	movs	r2, #0
 800d660:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d662:	4b2a      	ldr	r3, [pc, #168]	; (800d70c <ip4_output_if_src+0x154>)
 800d664:	881b      	ldrh	r3, [r3, #0]
 800d666:	4618      	mov	r0, r3
 800d668:	f7f7 f8ac 	bl	80047c4 <lwip_htons>
 800d66c:	4603      	mov	r3, r0
 800d66e:	461a      	mov	r2, r3
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d674:	4b25      	ldr	r3, [pc, #148]	; (800d70c <ip4_output_if_src+0x154>)
 800d676:	881b      	ldrh	r3, [r3, #0]
 800d678:	3301      	adds	r3, #1
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	4b23      	ldr	r3, [pc, #140]	; (800d70c <ip4_output_if_src+0x154>)
 800d67e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d104      	bne.n	800d690 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d686:	4b22      	ldr	r3, [pc, #136]	; (800d710 <ip4_output_if_src+0x158>)
 800d688:	681a      	ldr	r2, [r3, #0]
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	60da      	str	r2, [r3, #12]
 800d68e:	e003      	b.n	800d698 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	69fb      	ldr	r3, [r7, #28]
 800d696:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	2200      	movs	r2, #0
 800d69c:	729a      	strb	r2, [r3, #10]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	72da      	strb	r2, [r3, #11]
 800d6a2:	e00f      	b.n	800d6c4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	895b      	ldrh	r3, [r3, #10]
 800d6a8:	2b13      	cmp	r3, #19
 800d6aa:	d802      	bhi.n	800d6b2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d6ac:	f06f 0301 	mvn.w	r3, #1
 800d6b0:	e020      	b.n	800d6f4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	691b      	ldr	r3, [r3, #16]
 800d6bc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d6be:	f107 0314 	add.w	r3, r7, #20
 800d6c2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00c      	beq.n	800d6e6 <ip4_output_if_src+0x12e>
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	891a      	ldrh	r2, [r3, #8]
 800d6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d906      	bls.n	800d6e6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	f000 fd4b 	bl	800e178 <ip4_frag>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	e006      	b.n	800d6f4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e8:	695b      	ldr	r3, [r3, #20]
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	68f9      	ldr	r1, [r7, #12]
 800d6ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6f0:	4798      	blx	r3
 800d6f2:	4603      	mov	r3, r0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3720      	adds	r7, #32
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	08011b1c 	.word	0x08011b1c
 800d700:	08011b50 	.word	0x08011b50
 800d704:	08011b5c 	.word	0x08011b5c
 800d708:	08011b84 	.word	0x08011b84
 800d70c:	20000202 	.word	0x20000202
 800d710:	08011f5c 	.word	0x08011f5c

0800d714 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d714:	b480      	push	{r7}
 800d716:	b085      	sub	sp, #20
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d728:	d002      	beq.n	800d730 <ip4_addr_isbroadcast_u32+0x1c>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d101      	bne.n	800d734 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d730:	2301      	movs	r3, #1
 800d732:	e02a      	b.n	800d78a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d73a:	f003 0302 	and.w	r3, r3, #2
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d101      	bne.n	800d746 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d742:	2300      	movs	r3, #0
 800d744:	e021      	b.n	800d78a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	3304      	adds	r3, #4
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d101      	bne.n	800d756 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d752:	2300      	movs	r3, #0
 800d754:	e019      	b.n	800d78a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d756:	68fa      	ldr	r2, [r7, #12]
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	3304      	adds	r3, #4
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	405a      	eors	r2, r3
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	3308      	adds	r3, #8
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4013      	ands	r3, r2
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d10d      	bne.n	800d788 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	3308      	adds	r3, #8
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	43da      	mvns	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	3308      	adds	r3, #8
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d780:	429a      	cmp	r2, r3
 800d782:	d101      	bne.n	800d788 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d784:	2301      	movs	r3, #1
 800d786:	e000      	b.n	800d78a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d788:	2300      	movs	r3, #0
  }
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3714      	adds	r7, #20
 800d78e:	46bd      	mov	sp, r7
 800d790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d794:	4770      	bx	lr
	...

0800d798 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d7a2:	4b12      	ldr	r3, [pc, #72]	; (800d7ec <ip_reass_tmr+0x54>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d7a8:	e018      	b.n	800d7dc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	7fdb      	ldrb	r3, [r3, #31]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00b      	beq.n	800d7ca <ip_reass_tmr+0x32>
      r->timer--;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	7fdb      	ldrb	r3, [r3, #31]
 800d7b6:	3b01      	subs	r3, #1
 800d7b8:	b2da      	uxtb	r2, r3
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	60fb      	str	r3, [r7, #12]
 800d7c8:	e008      	b.n	800d7dc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d7d4:	68b9      	ldr	r1, [r7, #8]
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 f80a 	bl	800d7f0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d1e3      	bne.n	800d7aa <ip_reass_tmr+0x12>
    }
  }
}
 800d7e2:	bf00      	nop
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	20000204 	.word	0x20000204

0800d7f0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b088      	sub	sp, #32
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d7fe:	683a      	ldr	r2, [r7, #0]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	429a      	cmp	r2, r3
 800d804:	d105      	bne.n	800d812 <ip_reass_free_complete_datagram+0x22>
 800d806:	4b45      	ldr	r3, [pc, #276]	; (800d91c <ip_reass_free_complete_datagram+0x12c>)
 800d808:	22ab      	movs	r2, #171	; 0xab
 800d80a:	4945      	ldr	r1, [pc, #276]	; (800d920 <ip_reass_free_complete_datagram+0x130>)
 800d80c:	4845      	ldr	r0, [pc, #276]	; (800d924 <ip_reass_free_complete_datagram+0x134>)
 800d80e:	f000 ff13 	bl	800e638 <iprintf>
  if (prev != NULL) {
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00a      	beq.n	800d82e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d005      	beq.n	800d82e <ip_reass_free_complete_datagram+0x3e>
 800d822:	4b3e      	ldr	r3, [pc, #248]	; (800d91c <ip_reass_free_complete_datagram+0x12c>)
 800d824:	22ad      	movs	r2, #173	; 0xad
 800d826:	4940      	ldr	r1, [pc, #256]	; (800d928 <ip_reass_free_complete_datagram+0x138>)
 800d828:	483e      	ldr	r0, [pc, #248]	; (800d924 <ip_reass_free_complete_datagram+0x134>)
 800d82a:	f000 ff05 	bl	800e638 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	685b      	ldr	r3, [r3, #4]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	889b      	ldrh	r3, [r3, #4]
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d12a      	bne.n	800d896 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	6858      	ldr	r0, [r3, #4]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	3308      	adds	r3, #8
 800d856:	2214      	movs	r2, #20
 800d858:	4619      	mov	r1, r3
 800d85a:	f000 feda 	bl	800e612 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d85e:	2101      	movs	r1, #1
 800d860:	69b8      	ldr	r0, [r7, #24]
 800d862:	f7ff fc49 	bl	800d0f8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d866:	69b8      	ldr	r0, [r7, #24]
 800d868:	f7f8 fae4 	bl	8005e34 <pbuf_clen>
 800d86c:	4603      	mov	r3, r0
 800d86e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d870:	8bfa      	ldrh	r2, [r7, #30]
 800d872:	8a7b      	ldrh	r3, [r7, #18]
 800d874:	4413      	add	r3, r2
 800d876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d87a:	db05      	blt.n	800d888 <ip_reass_free_complete_datagram+0x98>
 800d87c:	4b27      	ldr	r3, [pc, #156]	; (800d91c <ip_reass_free_complete_datagram+0x12c>)
 800d87e:	22bc      	movs	r2, #188	; 0xbc
 800d880:	492a      	ldr	r1, [pc, #168]	; (800d92c <ip_reass_free_complete_datagram+0x13c>)
 800d882:	4828      	ldr	r0, [pc, #160]	; (800d924 <ip_reass_free_complete_datagram+0x134>)
 800d884:	f000 fed8 	bl	800e638 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d888:	8bfa      	ldrh	r2, [r7, #30]
 800d88a:	8a7b      	ldrh	r3, [r7, #18]
 800d88c:	4413      	add	r3, r2
 800d88e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d890:	69b8      	ldr	r0, [r7, #24]
 800d892:	f7f8 fa47 	bl	8005d24 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d89c:	e01f      	b.n	800d8de <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d8a4:	69bb      	ldr	r3, [r7, #24]
 800d8a6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d8ae:	68f8      	ldr	r0, [r7, #12]
 800d8b0:	f7f8 fac0 	bl	8005e34 <pbuf_clen>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d8b8:	8bfa      	ldrh	r2, [r7, #30]
 800d8ba:	8a7b      	ldrh	r3, [r7, #18]
 800d8bc:	4413      	add	r3, r2
 800d8be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8c2:	db05      	blt.n	800d8d0 <ip_reass_free_complete_datagram+0xe0>
 800d8c4:	4b15      	ldr	r3, [pc, #84]	; (800d91c <ip_reass_free_complete_datagram+0x12c>)
 800d8c6:	22cc      	movs	r2, #204	; 0xcc
 800d8c8:	4918      	ldr	r1, [pc, #96]	; (800d92c <ip_reass_free_complete_datagram+0x13c>)
 800d8ca:	4816      	ldr	r0, [pc, #88]	; (800d924 <ip_reass_free_complete_datagram+0x134>)
 800d8cc:	f000 feb4 	bl	800e638 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d8d0:	8bfa      	ldrh	r2, [r7, #30]
 800d8d2:	8a7b      	ldrh	r3, [r7, #18]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f7f8 fa23 	bl	8005d24 <pbuf_free>
  while (p != NULL) {
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1dc      	bne.n	800d89e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d8e4:	6839      	ldr	r1, [r7, #0]
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 f8c2 	bl	800da70 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d8ec:	4b10      	ldr	r3, [pc, #64]	; (800d930 <ip_reass_free_complete_datagram+0x140>)
 800d8ee:	881b      	ldrh	r3, [r3, #0]
 800d8f0:	8bfa      	ldrh	r2, [r7, #30]
 800d8f2:	429a      	cmp	r2, r3
 800d8f4:	d905      	bls.n	800d902 <ip_reass_free_complete_datagram+0x112>
 800d8f6:	4b09      	ldr	r3, [pc, #36]	; (800d91c <ip_reass_free_complete_datagram+0x12c>)
 800d8f8:	22d2      	movs	r2, #210	; 0xd2
 800d8fa:	490e      	ldr	r1, [pc, #56]	; (800d934 <ip_reass_free_complete_datagram+0x144>)
 800d8fc:	4809      	ldr	r0, [pc, #36]	; (800d924 <ip_reass_free_complete_datagram+0x134>)
 800d8fe:	f000 fe9b 	bl	800e638 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d902:	4b0b      	ldr	r3, [pc, #44]	; (800d930 <ip_reass_free_complete_datagram+0x140>)
 800d904:	881a      	ldrh	r2, [r3, #0]
 800d906:	8bfb      	ldrh	r3, [r7, #30]
 800d908:	1ad3      	subs	r3, r2, r3
 800d90a:	b29a      	uxth	r2, r3
 800d90c:	4b08      	ldr	r3, [pc, #32]	; (800d930 <ip_reass_free_complete_datagram+0x140>)
 800d90e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d910:	8bfb      	ldrh	r3, [r7, #30]
}
 800d912:	4618      	mov	r0, r3
 800d914:	3720      	adds	r7, #32
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	08011bb4 	.word	0x08011bb4
 800d920:	08011bf0 	.word	0x08011bf0
 800d924:	08011bfc 	.word	0x08011bfc
 800d928:	08011c24 	.word	0x08011c24
 800d92c:	08011c38 	.word	0x08011c38
 800d930:	20000208 	.word	0x20000208
 800d934:	08011c58 	.word	0x08011c58

0800d938 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b08a      	sub	sp, #40	; 0x28
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d942:	2300      	movs	r3, #0
 800d944:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d946:	2300      	movs	r3, #0
 800d948:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d94a:	2300      	movs	r3, #0
 800d94c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d94e:	2300      	movs	r3, #0
 800d950:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d952:	2300      	movs	r3, #0
 800d954:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d956:	4b28      	ldr	r3, [pc, #160]	; (800d9f8 <ip_reass_remove_oldest_datagram+0xc0>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d95c:	e030      	b.n	800d9c0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d95e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d960:	695a      	ldr	r2, [r3, #20]
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	429a      	cmp	r2, r3
 800d968:	d10c      	bne.n	800d984 <ip_reass_remove_oldest_datagram+0x4c>
 800d96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96c:	699a      	ldr	r2, [r3, #24]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	429a      	cmp	r2, r3
 800d974:	d106      	bne.n	800d984 <ip_reass_remove_oldest_datagram+0x4c>
 800d976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d978:	899a      	ldrh	r2, [r3, #12]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	889b      	ldrh	r3, [r3, #4]
 800d97e:	b29b      	uxth	r3, r3
 800d980:	429a      	cmp	r2, r3
 800d982:	d014      	beq.n	800d9ae <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	3301      	adds	r3, #1
 800d988:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d98a:	6a3b      	ldr	r3, [r7, #32]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d104      	bne.n	800d99a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d992:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	61bb      	str	r3, [r7, #24]
 800d998:	e009      	b.n	800d9ae <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99c:	7fda      	ldrb	r2, [r3, #31]
 800d99e:	6a3b      	ldr	r3, [r7, #32]
 800d9a0:	7fdb      	ldrb	r3, [r3, #31]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d803      	bhi.n	800d9ae <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d001      	beq.n	800d9ba <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d1cb      	bne.n	800d95e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d9c6:	6a3b      	ldr	r3, [r7, #32]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d008      	beq.n	800d9de <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d9cc:	69b9      	ldr	r1, [r7, #24]
 800d9ce:	6a38      	ldr	r0, [r7, #32]
 800d9d0:	f7ff ff0e 	bl	800d7f0 <ip_reass_free_complete_datagram>
 800d9d4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d9d6:	697a      	ldr	r2, [r7, #20]
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	4413      	add	r3, r2
 800d9dc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d9de:	697a      	ldr	r2, [r7, #20]
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	da02      	bge.n	800d9ec <ip_reass_remove_oldest_datagram+0xb4>
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	dcac      	bgt.n	800d946 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d9ec:	697b      	ldr	r3, [r7, #20]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3728      	adds	r7, #40	; 0x28
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	20000204 	.word	0x20000204

0800d9fc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800da06:	2004      	movs	r0, #4
 800da08:	f7f7 fb32 	bl	8005070 <memp_malloc>
 800da0c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d110      	bne.n	800da36 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800da14:	6839      	ldr	r1, [r7, #0]
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7ff ff8e 	bl	800d938 <ip_reass_remove_oldest_datagram>
 800da1c:	4602      	mov	r2, r0
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	4293      	cmp	r3, r2
 800da22:	dc03      	bgt.n	800da2c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800da24:	2004      	movs	r0, #4
 800da26:	f7f7 fb23 	bl	8005070 <memp_malloc>
 800da2a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d101      	bne.n	800da36 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800da32:	2300      	movs	r3, #0
 800da34:	e016      	b.n	800da64 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800da36:	2220      	movs	r2, #32
 800da38:	2100      	movs	r1, #0
 800da3a:	68f8      	ldr	r0, [r7, #12]
 800da3c:	f000 fdf4 	bl	800e628 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	220f      	movs	r2, #15
 800da44:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800da46:	4b09      	ldr	r3, [pc, #36]	; (800da6c <ip_reass_enqueue_new_datagram+0x70>)
 800da48:	681a      	ldr	r2, [r3, #0]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800da4e:	4a07      	ldr	r2, [pc, #28]	; (800da6c <ip_reass_enqueue_new_datagram+0x70>)
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	3308      	adds	r3, #8
 800da58:	2214      	movs	r2, #20
 800da5a:	6879      	ldr	r1, [r7, #4]
 800da5c:	4618      	mov	r0, r3
 800da5e:	f000 fdd8 	bl	800e612 <memcpy>
  return ipr;
 800da62:	68fb      	ldr	r3, [r7, #12]
}
 800da64:	4618      	mov	r0, r3
 800da66:	3710      	adds	r7, #16
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	20000204 	.word	0x20000204

0800da70 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800da7a:	4b10      	ldr	r3, [pc, #64]	; (800dabc <ip_reass_dequeue_datagram+0x4c>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	429a      	cmp	r2, r3
 800da82:	d104      	bne.n	800da8e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a0c      	ldr	r2, [pc, #48]	; (800dabc <ip_reass_dequeue_datagram+0x4c>)
 800da8a:	6013      	str	r3, [r2, #0]
 800da8c:	e00d      	b.n	800daaa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d106      	bne.n	800daa2 <ip_reass_dequeue_datagram+0x32>
 800da94:	4b0a      	ldr	r3, [pc, #40]	; (800dac0 <ip_reass_dequeue_datagram+0x50>)
 800da96:	f240 1245 	movw	r2, #325	; 0x145
 800da9a:	490a      	ldr	r1, [pc, #40]	; (800dac4 <ip_reass_dequeue_datagram+0x54>)
 800da9c:	480a      	ldr	r0, [pc, #40]	; (800dac8 <ip_reass_dequeue_datagram+0x58>)
 800da9e:	f000 fdcb 	bl	800e638 <iprintf>
    prev->next = ipr->next;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800daaa:	6879      	ldr	r1, [r7, #4]
 800daac:	2004      	movs	r0, #4
 800daae:	f7f7 fb2b 	bl	8005108 <memp_free>
}
 800dab2:	bf00      	nop
 800dab4:	3708      	adds	r7, #8
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	20000204 	.word	0x20000204
 800dac0:	08011bb4 	.word	0x08011bb4
 800dac4:	08011c7c 	.word	0x08011c7c
 800dac8:	08011bfc 	.word	0x08011bfc

0800dacc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b08c      	sub	sp, #48	; 0x30
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800dad8:	2300      	movs	r3, #0
 800dada:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800dadc:	2301      	movs	r3, #1
 800dade:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	885b      	ldrh	r3, [r3, #2]
 800daea:	b29b      	uxth	r3, r3
 800daec:	4618      	mov	r0, r3
 800daee:	f7f6 fe69 	bl	80047c4 <lwip_htons>
 800daf2:	4603      	mov	r3, r0
 800daf4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	f003 030f 	and.w	r3, r3, #15
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800db04:	7e7b      	ldrb	r3, [r7, #25]
 800db06:	b29b      	uxth	r3, r3
 800db08:	8b7a      	ldrh	r2, [r7, #26]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d202      	bcs.n	800db14 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800db0e:	f04f 33ff 	mov.w	r3, #4294967295
 800db12:	e135      	b.n	800dd80 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800db14:	7e7b      	ldrb	r3, [r7, #25]
 800db16:	b29b      	uxth	r3, r3
 800db18:	8b7a      	ldrh	r2, [r7, #26]
 800db1a:	1ad3      	subs	r3, r2, r3
 800db1c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	88db      	ldrh	r3, [r3, #6]
 800db22:	b29b      	uxth	r3, r3
 800db24:	4618      	mov	r0, r3
 800db26:	f7f6 fe4d 	bl	80047c4 <lwip_htons>
 800db2a:	4603      	mov	r3, r0
 800db2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db30:	b29b      	uxth	r3, r3
 800db32:	00db      	lsls	r3, r3, #3
 800db34:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800db3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3e:	2200      	movs	r2, #0
 800db40:	701a      	strb	r2, [r3, #0]
 800db42:	2200      	movs	r2, #0
 800db44:	705a      	strb	r2, [r3, #1]
 800db46:	2200      	movs	r2, #0
 800db48:	709a      	strb	r2, [r3, #2]
 800db4a:	2200      	movs	r2, #0
 800db4c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800db4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db50:	8afa      	ldrh	r2, [r7, #22]
 800db52:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800db54:	8afa      	ldrh	r2, [r7, #22]
 800db56:	8b7b      	ldrh	r3, [r7, #26]
 800db58:	4413      	add	r3, r2
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db5e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800db60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db62:	88db      	ldrh	r3, [r3, #6]
 800db64:	b29b      	uxth	r3, r3
 800db66:	8afa      	ldrh	r2, [r7, #22]
 800db68:	429a      	cmp	r2, r3
 800db6a:	d902      	bls.n	800db72 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800db6c:	f04f 33ff 	mov.w	r3, #4294967295
 800db70:	e106      	b.n	800dd80 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	685b      	ldr	r3, [r3, #4]
 800db76:	627b      	str	r3, [r7, #36]	; 0x24
 800db78:	e068      	b.n	800dc4c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800db7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800db80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db82:	889b      	ldrh	r3, [r3, #4]
 800db84:	b29a      	uxth	r2, r3
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	889b      	ldrh	r3, [r3, #4]
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d235      	bcs.n	800dbfc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800db90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db94:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800db96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d020      	beq.n	800dbde <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800db9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9e:	889b      	ldrh	r3, [r3, #4]
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba4:	88db      	ldrh	r3, [r3, #6]
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d307      	bcc.n	800dbbc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800dbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbae:	88db      	ldrh	r3, [r3, #6]
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	889b      	ldrh	r3, [r3, #4]
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d902      	bls.n	800dbc2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800dbc0:	e0de      	b.n	800dd80 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800dbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc4:	68ba      	ldr	r2, [r7, #8]
 800dbc6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800dbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbca:	88db      	ldrh	r3, [r3, #6]
 800dbcc:	b29a      	uxth	r2, r3
 800dbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd0:	889b      	ldrh	r3, [r3, #4]
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d03d      	beq.n	800dc54 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800dbdc:	e03a      	b.n	800dc54 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800dbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe0:	88db      	ldrh	r3, [r3, #6]
 800dbe2:	b29a      	uxth	r2, r3
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	889b      	ldrh	r3, [r3, #4]
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d902      	bls.n	800dbf4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dbee:	f04f 33ff 	mov.w	r3, #4294967295
 800dbf2:	e0c5      	b.n	800dd80 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	68ba      	ldr	r2, [r7, #8]
 800dbf8:	605a      	str	r2, [r3, #4]
      break;
 800dbfa:	e02b      	b.n	800dc54 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800dbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfe:	889b      	ldrh	r3, [r3, #4]
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	889b      	ldrh	r3, [r3, #4]
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d102      	bne.n	800dc12 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dc0c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc10:	e0b6      	b.n	800dd80 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800dc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc14:	889b      	ldrh	r3, [r3, #4]
 800dc16:	b29a      	uxth	r2, r3
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	88db      	ldrh	r3, [r3, #6]
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d202      	bcs.n	800dc28 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dc22:	f04f 33ff 	mov.w	r3, #4294967295
 800dc26:	e0ab      	b.n	800dd80 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800dc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d009      	beq.n	800dc42 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800dc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc30:	88db      	ldrh	r3, [r3, #6]
 800dc32:	b29a      	uxth	r2, r3
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	889b      	ldrh	r3, [r3, #4]
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d001      	beq.n	800dc42 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800dc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d193      	bne.n	800db7a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800dc52:	e000      	b.n	800dc56 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800dc54:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800dc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d12d      	bne.n	800dcb8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800dc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d01c      	beq.n	800dc9c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800dc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc64:	88db      	ldrh	r3, [r3, #6]
 800dc66:	b29a      	uxth	r2, r3
 800dc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6a:	889b      	ldrh	r3, [r3, #4]
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d906      	bls.n	800dc80 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800dc72:	4b45      	ldr	r3, [pc, #276]	; (800dd88 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dc74:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800dc78:	4944      	ldr	r1, [pc, #272]	; (800dd8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dc7a:	4845      	ldr	r0, [pc, #276]	; (800dd90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dc7c:	f000 fcdc 	bl	800e638 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800dc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc82:	68ba      	ldr	r2, [r7, #8]
 800dc84:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800dc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc88:	88db      	ldrh	r3, [r3, #6]
 800dc8a:	b29a      	uxth	r2, r3
 800dc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8e:	889b      	ldrh	r3, [r3, #4]
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d010      	beq.n	800dcb8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800dc96:	2300      	movs	r3, #0
 800dc98:	623b      	str	r3, [r7, #32]
 800dc9a:	e00d      	b.n	800dcb8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d006      	beq.n	800dcb2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800dca4:	4b38      	ldr	r3, [pc, #224]	; (800dd88 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dca6:	f240 12bf 	movw	r2, #447	; 0x1bf
 800dcaa:	493a      	ldr	r1, [pc, #232]	; (800dd94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dcac:	4838      	ldr	r0, [pc, #224]	; (800dd90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dcae:	f000 fcc3 	bl	800e638 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	68ba      	ldr	r2, [r7, #8]
 800dcb6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d105      	bne.n	800dcca <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	7f9b      	ldrb	r3, [r3, #30]
 800dcc2:	f003 0301 	and.w	r3, r3, #1
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d059      	beq.n	800dd7e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800dcca:	6a3b      	ldr	r3, [r7, #32]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d04f      	beq.n	800dd70 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d006      	beq.n	800dce6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	889b      	ldrh	r3, [r3, #4]
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d002      	beq.n	800dcec <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800dce6:	2300      	movs	r3, #0
 800dce8:	623b      	str	r3, [r7, #32]
 800dcea:	e041      	b.n	800dd70 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800dcec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcee:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800dcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dcf6:	e012      	b.n	800dd1e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800dcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd00:	88db      	ldrh	r3, [r3, #6]
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd06:	889b      	ldrh	r3, [r3, #4]
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d002      	beq.n	800dd14 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	623b      	str	r3, [r7, #32]
            break;
 800dd12:	e007      	b.n	800dd24 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800dd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd16:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800dd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d1e9      	bne.n	800dcf8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800dd24:	6a3b      	ldr	r3, [r7, #32]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d022      	beq.n	800dd70 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d106      	bne.n	800dd40 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800dd32:	4b15      	ldr	r3, [pc, #84]	; (800dd88 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dd34:	f240 12df 	movw	r2, #479	; 0x1df
 800dd38:	4917      	ldr	r1, [pc, #92]	; (800dd98 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dd3a:	4815      	ldr	r0, [pc, #84]	; (800dd90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dd3c:	f000 fc7c 	bl	800e638 <iprintf>
          LWIP_ASSERT("sanity check",
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d106      	bne.n	800dd5a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800dd4c:	4b0e      	ldr	r3, [pc, #56]	; (800dd88 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dd4e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800dd52:	4911      	ldr	r1, [pc, #68]	; (800dd98 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dd54:	480e      	ldr	r0, [pc, #56]	; (800dd90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dd56:	f000 fc6f 	bl	800e638 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800dd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d006      	beq.n	800dd70 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800dd62:	4b09      	ldr	r3, [pc, #36]	; (800dd88 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dd64:	f240 12e3 	movw	r2, #483	; 0x1e3
 800dd68:	490c      	ldr	r1, [pc, #48]	; (800dd9c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800dd6a:	4809      	ldr	r0, [pc, #36]	; (800dd90 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dd6c:	f000 fc64 	bl	800e638 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800dd70:	6a3b      	ldr	r3, [r7, #32]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	bf14      	ite	ne
 800dd76:	2301      	movne	r3, #1
 800dd78:	2300      	moveq	r3, #0
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	e000      	b.n	800dd80 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3730      	adds	r7, #48	; 0x30
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	08011bb4 	.word	0x08011bb4
 800dd8c:	08011c98 	.word	0x08011c98
 800dd90:	08011bfc 	.word	0x08011bfc
 800dd94:	08011cb8 	.word	0x08011cb8
 800dd98:	08011cf0 	.word	0x08011cf0
 800dd9c:	08011d00 	.word	0x08011d00

0800dda0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b08e      	sub	sp, #56	; 0x38
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800ddae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	f003 030f 	and.w	r3, r3, #15
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	009b      	lsls	r3, r3, #2
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	2b14      	cmp	r3, #20
 800ddbe:	f040 8167 	bne.w	800e090 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800ddc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc4:	88db      	ldrh	r3, [r3, #6]
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7f6 fcfb 	bl	80047c4 <lwip_htons>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	00db      	lsls	r3, r3, #3
 800ddd8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ddda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dddc:	885b      	ldrh	r3, [r3, #2]
 800ddde:	b29b      	uxth	r3, r3
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7f6 fcef 	bl	80047c4 <lwip_htons>
 800dde6:	4603      	mov	r3, r0
 800dde8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800ddea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	f003 030f 	and.w	r3, r3, #15
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	009b      	lsls	r3, r3, #2
 800ddf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800ddfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ddfe:	b29b      	uxth	r3, r3
 800de00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800de02:	429a      	cmp	r2, r3
 800de04:	f0c0 8146 	bcc.w	800e094 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800de08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800de10:	1ad3      	subs	r3, r2, r3
 800de12:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7f8 f80d 	bl	8005e34 <pbuf_clen>
 800de1a:	4603      	mov	r3, r0
 800de1c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800de1e:	4ba3      	ldr	r3, [pc, #652]	; (800e0ac <ip4_reass+0x30c>)
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	461a      	mov	r2, r3
 800de24:	8c3b      	ldrh	r3, [r7, #32]
 800de26:	4413      	add	r3, r2
 800de28:	2b0a      	cmp	r3, #10
 800de2a:	dd10      	ble.n	800de4e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800de2c:	8c3b      	ldrh	r3, [r7, #32]
 800de2e:	4619      	mov	r1, r3
 800de30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de32:	f7ff fd81 	bl	800d938 <ip_reass_remove_oldest_datagram>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	f000 812d 	beq.w	800e098 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800de3e:	4b9b      	ldr	r3, [pc, #620]	; (800e0ac <ip4_reass+0x30c>)
 800de40:	881b      	ldrh	r3, [r3, #0]
 800de42:	461a      	mov	r2, r3
 800de44:	8c3b      	ldrh	r3, [r7, #32]
 800de46:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800de48:	2b0a      	cmp	r3, #10
 800de4a:	f300 8125 	bgt.w	800e098 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800de4e:	4b98      	ldr	r3, [pc, #608]	; (800e0b0 <ip4_reass+0x310>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	633b      	str	r3, [r7, #48]	; 0x30
 800de54:	e015      	b.n	800de82 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800de56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de58:	695a      	ldr	r2, [r3, #20]
 800de5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d10c      	bne.n	800de7c <ip4_reass+0xdc>
 800de62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de64:	699a      	ldr	r2, [r3, #24]
 800de66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de68:	691b      	ldr	r3, [r3, #16]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d106      	bne.n	800de7c <ip4_reass+0xdc>
 800de6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de70:	899a      	ldrh	r2, [r3, #12]
 800de72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de74:	889b      	ldrh	r3, [r3, #4]
 800de76:	b29b      	uxth	r3, r3
 800de78:	429a      	cmp	r2, r3
 800de7a:	d006      	beq.n	800de8a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800de7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	633b      	str	r3, [r7, #48]	; 0x30
 800de82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de84:	2b00      	cmp	r3, #0
 800de86:	d1e6      	bne.n	800de56 <ip4_reass+0xb6>
 800de88:	e000      	b.n	800de8c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800de8a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800de8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d109      	bne.n	800dea6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800de92:	8c3b      	ldrh	r3, [r7, #32]
 800de94:	4619      	mov	r1, r3
 800de96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de98:	f7ff fdb0 	bl	800d9fc <ip_reass_enqueue_new_datagram>
 800de9c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800de9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d11c      	bne.n	800dede <ip4_reass+0x13e>
      goto nullreturn;
 800dea4:	e0f9      	b.n	800e09a <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea8:	88db      	ldrh	r3, [r3, #6]
 800deaa:	b29b      	uxth	r3, r3
 800deac:	4618      	mov	r0, r3
 800deae:	f7f6 fc89 	bl	80047c4 <lwip_htons>
 800deb2:	4603      	mov	r3, r0
 800deb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d110      	bne.n	800dede <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800debc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800debe:	89db      	ldrh	r3, [r3, #14]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7f6 fc7f 	bl	80047c4 <lwip_htons>
 800dec6:	4603      	mov	r3, r0
 800dec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800decc:	2b00      	cmp	r3, #0
 800dece:	d006      	beq.n	800dede <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ded0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded2:	3308      	adds	r3, #8
 800ded4:	2214      	movs	r2, #20
 800ded6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ded8:	4618      	mov	r0, r3
 800deda:	f000 fb9a 	bl	800e612 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800dede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee0:	88db      	ldrh	r3, [r3, #6]
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	f003 0320 	and.w	r3, r3, #32
 800dee8:	2b00      	cmp	r3, #0
 800deea:	bf0c      	ite	eq
 800deec:	2301      	moveq	r3, #1
 800deee:	2300      	movne	r3, #0
 800def0:	b2db      	uxtb	r3, r3
 800def2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800def4:	69fb      	ldr	r3, [r7, #28]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00e      	beq.n	800df18 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800defa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800defc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800defe:	4413      	add	r3, r2
 800df00:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800df02:	8b7a      	ldrh	r2, [r7, #26]
 800df04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800df06:	429a      	cmp	r2, r3
 800df08:	f0c0 80a0 	bcc.w	800e04c <ip4_reass+0x2ac>
 800df0c:	8b7b      	ldrh	r3, [r7, #26]
 800df0e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800df12:	4293      	cmp	r3, r2
 800df14:	f200 809a 	bhi.w	800e04c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800df18:	69fa      	ldr	r2, [r7, #28]
 800df1a:	6879      	ldr	r1, [r7, #4]
 800df1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800df1e:	f7ff fdd5 	bl	800dacc <ip_reass_chain_frag_into_datagram_and_validate>
 800df22:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df2a:	f000 8091 	beq.w	800e050 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800df2e:	4b5f      	ldr	r3, [pc, #380]	; (800e0ac <ip4_reass+0x30c>)
 800df30:	881a      	ldrh	r2, [r3, #0]
 800df32:	8c3b      	ldrh	r3, [r7, #32]
 800df34:	4413      	add	r3, r2
 800df36:	b29a      	uxth	r2, r3
 800df38:	4b5c      	ldr	r3, [pc, #368]	; (800e0ac <ip4_reass+0x30c>)
 800df3a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d00d      	beq.n	800df5e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800df42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800df44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df46:	4413      	add	r3, r2
 800df48:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800df4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4c:	8a7a      	ldrh	r2, [r7, #18]
 800df4e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800df50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df52:	7f9b      	ldrb	r3, [r3, #30]
 800df54:	f043 0301 	orr.w	r3, r3, #1
 800df58:	b2da      	uxtb	r2, r3
 800df5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df5c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	2b01      	cmp	r3, #1
 800df62:	d171      	bne.n	800e048 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800df64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df66:	8b9b      	ldrh	r3, [r3, #28]
 800df68:	3314      	adds	r3, #20
 800df6a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800df6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6e:	685b      	ldr	r3, [r3, #4]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800df76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800df7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df80:	3308      	adds	r3, #8
 800df82:	2214      	movs	r2, #20
 800df84:	4619      	mov	r1, r3
 800df86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df88:	f000 fb43 	bl	800e612 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800df8c:	8a3b      	ldrh	r3, [r7, #16]
 800df8e:	4618      	mov	r0, r3
 800df90:	f7f6 fc18 	bl	80047c4 <lwip_htons>
 800df94:	4603      	mov	r3, r0
 800df96:	461a      	mov	r2, r3
 800df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800df9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9e:	2200      	movs	r2, #0
 800dfa0:	719a      	strb	r2, [r3, #6]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800dfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	729a      	strb	r2, [r3, #10]
 800dfac:	2200      	movs	r2, #0
 800dfae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800dfb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800dfb6:	e00d      	b.n	800dfd4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800dfb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800dfbe:	2114      	movs	r1, #20
 800dfc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dfc2:	f7f7 fe29 	bl	8005c18 <pbuf_remove_header>
      pbuf_cat(p, r);
 800dfc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7f7 ff6d 	bl	8005ea8 <pbuf_cat>
      r = iprh->next_pbuf;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800dfd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d1ee      	bne.n	800dfb8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800dfda:	4b35      	ldr	r3, [pc, #212]	; (800e0b0 <ip4_reass+0x310>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d102      	bne.n	800dfea <ip4_reass+0x24a>
      ipr_prev = NULL;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dfe8:	e010      	b.n	800e00c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dfea:	4b31      	ldr	r3, [pc, #196]	; (800e0b0 <ip4_reass+0x310>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dff0:	e007      	b.n	800e002 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800dff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d006      	beq.n	800e00a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e004:	2b00      	cmp	r3, #0
 800e006:	d1f4      	bne.n	800dff2 <ip4_reass+0x252>
 800e008:	e000      	b.n	800e00c <ip4_reass+0x26c>
          break;
 800e00a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e00c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e00e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e010:	f7ff fd2e 	bl	800da70 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f7f7 ff0d 	bl	8005e34 <pbuf_clen>
 800e01a:	4603      	mov	r3, r0
 800e01c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e01e:	4b23      	ldr	r3, [pc, #140]	; (800e0ac <ip4_reass+0x30c>)
 800e020:	881b      	ldrh	r3, [r3, #0]
 800e022:	8c3a      	ldrh	r2, [r7, #32]
 800e024:	429a      	cmp	r2, r3
 800e026:	d906      	bls.n	800e036 <ip4_reass+0x296>
 800e028:	4b22      	ldr	r3, [pc, #136]	; (800e0b4 <ip4_reass+0x314>)
 800e02a:	f240 229b 	movw	r2, #667	; 0x29b
 800e02e:	4922      	ldr	r1, [pc, #136]	; (800e0b8 <ip4_reass+0x318>)
 800e030:	4822      	ldr	r0, [pc, #136]	; (800e0bc <ip4_reass+0x31c>)
 800e032:	f000 fb01 	bl	800e638 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e036:	4b1d      	ldr	r3, [pc, #116]	; (800e0ac <ip4_reass+0x30c>)
 800e038:	881a      	ldrh	r2, [r3, #0]
 800e03a:	8c3b      	ldrh	r3, [r7, #32]
 800e03c:	1ad3      	subs	r3, r2, r3
 800e03e:	b29a      	uxth	r2, r3
 800e040:	4b1a      	ldr	r3, [pc, #104]	; (800e0ac <ip4_reass+0x30c>)
 800e042:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	e02c      	b.n	800e0a2 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e048:	2300      	movs	r3, #0
 800e04a:	e02a      	b.n	800e0a2 <ip4_reass+0x302>

nullreturn_ipr:
 800e04c:	bf00      	nop
 800e04e:	e000      	b.n	800e052 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800e050:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e054:	2b00      	cmp	r3, #0
 800e056:	d106      	bne.n	800e066 <ip4_reass+0x2c6>
 800e058:	4b16      	ldr	r3, [pc, #88]	; (800e0b4 <ip4_reass+0x314>)
 800e05a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e05e:	4918      	ldr	r1, [pc, #96]	; (800e0c0 <ip4_reass+0x320>)
 800e060:	4816      	ldr	r0, [pc, #88]	; (800e0bc <ip4_reass+0x31c>)
 800e062:	f000 fae9 	bl	800e638 <iprintf>
  if (ipr->p == NULL) {
 800e066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d114      	bne.n	800e098 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e06e:	4b10      	ldr	r3, [pc, #64]	; (800e0b0 <ip4_reass+0x310>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e074:	429a      	cmp	r2, r3
 800e076:	d006      	beq.n	800e086 <ip4_reass+0x2e6>
 800e078:	4b0e      	ldr	r3, [pc, #56]	; (800e0b4 <ip4_reass+0x314>)
 800e07a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e07e:	4911      	ldr	r1, [pc, #68]	; (800e0c4 <ip4_reass+0x324>)
 800e080:	480e      	ldr	r0, [pc, #56]	; (800e0bc <ip4_reass+0x31c>)
 800e082:	f000 fad9 	bl	800e638 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e086:	2100      	movs	r1, #0
 800e088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e08a:	f7ff fcf1 	bl	800da70 <ip_reass_dequeue_datagram>
 800e08e:	e004      	b.n	800e09a <ip4_reass+0x2fa>
    goto nullreturn;
 800e090:	bf00      	nop
 800e092:	e002      	b.n	800e09a <ip4_reass+0x2fa>
    goto nullreturn;
 800e094:	bf00      	nop
 800e096:	e000      	b.n	800e09a <ip4_reass+0x2fa>
  }

nullreturn:
 800e098:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f7f7 fe42 	bl	8005d24 <pbuf_free>
  return NULL;
 800e0a0:	2300      	movs	r3, #0
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3738      	adds	r7, #56	; 0x38
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	20000208 	.word	0x20000208
 800e0b0:	20000204 	.word	0x20000204
 800e0b4:	08011bb4 	.word	0x08011bb4
 800e0b8:	08011d24 	.word	0x08011d24
 800e0bc:	08011bfc 	.word	0x08011bfc
 800e0c0:	08011d40 	.word	0x08011d40
 800e0c4:	08011d4c 	.word	0x08011d4c

0800e0c8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e0cc:	2005      	movs	r0, #5
 800e0ce:	f7f6 ffcf 	bl	8005070 <memp_malloc>
 800e0d2:	4603      	mov	r3, r0
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d106      	bne.n	800e0f4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e0e6:	4b07      	ldr	r3, [pc, #28]	; (800e104 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e0e8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e0ec:	4906      	ldr	r1, [pc, #24]	; (800e108 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e0ee:	4807      	ldr	r0, [pc, #28]	; (800e10c <ip_frag_free_pbuf_custom_ref+0x34>)
 800e0f0:	f000 faa2 	bl	800e638 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e0f4:	6879      	ldr	r1, [r7, #4]
 800e0f6:	2005      	movs	r0, #5
 800e0f8:	f7f7 f806 	bl	8005108 <memp_free>
}
 800e0fc:	bf00      	nop
 800e0fe:	3708      	adds	r7, #8
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}
 800e104:	08011bb4 	.word	0x08011bb4
 800e108:	08011d6c 	.word	0x08011d6c
 800e10c:	08011bfc 	.word	0x08011bfc

0800e110 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d106      	bne.n	800e130 <ipfrag_free_pbuf_custom+0x20>
 800e122:	4b11      	ldr	r3, [pc, #68]	; (800e168 <ipfrag_free_pbuf_custom+0x58>)
 800e124:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e128:	4910      	ldr	r1, [pc, #64]	; (800e16c <ipfrag_free_pbuf_custom+0x5c>)
 800e12a:	4811      	ldr	r0, [pc, #68]	; (800e170 <ipfrag_free_pbuf_custom+0x60>)
 800e12c:	f000 fa84 	bl	800e638 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	429a      	cmp	r2, r3
 800e136:	d006      	beq.n	800e146 <ipfrag_free_pbuf_custom+0x36>
 800e138:	4b0b      	ldr	r3, [pc, #44]	; (800e168 <ipfrag_free_pbuf_custom+0x58>)
 800e13a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e13e:	490d      	ldr	r1, [pc, #52]	; (800e174 <ipfrag_free_pbuf_custom+0x64>)
 800e140:	480b      	ldr	r0, [pc, #44]	; (800e170 <ipfrag_free_pbuf_custom+0x60>)
 800e142:	f000 fa79 	bl	800e638 <iprintf>
  if (pcr->original != NULL) {
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	695b      	ldr	r3, [r3, #20]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d004      	beq.n	800e158 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	695b      	ldr	r3, [r3, #20]
 800e152:	4618      	mov	r0, r3
 800e154:	f7f7 fde6 	bl	8005d24 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e158:	68f8      	ldr	r0, [r7, #12]
 800e15a:	f7ff ffbd 	bl	800e0d8 <ip_frag_free_pbuf_custom_ref>
}
 800e15e:	bf00      	nop
 800e160:	3710      	adds	r7, #16
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	08011bb4 	.word	0x08011bb4
 800e16c:	08011d78 	.word	0x08011d78
 800e170:	08011bfc 	.word	0x08011bfc
 800e174:	08011d84 	.word	0x08011d84

0800e178 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b094      	sub	sp, #80	; 0x50
 800e17c:	af02      	add	r7, sp, #8
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e184:	2300      	movs	r3, #0
 800e186:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e18e:	3b14      	subs	r3, #20
 800e190:	2b00      	cmp	r3, #0
 800e192:	da00      	bge.n	800e196 <ip4_frag+0x1e>
 800e194:	3307      	adds	r3, #7
 800e196:	10db      	asrs	r3, r3, #3
 800e198:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e19a:	2314      	movs	r3, #20
 800e19c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	685b      	ldr	r3, [r3, #4]
 800e1a2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	f003 030f 	and.w	r3, r3, #15
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	b2db      	uxtb	r3, r3
 800e1b6:	2b14      	cmp	r3, #20
 800e1b8:	d002      	beq.n	800e1c0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e1ba:	f06f 0305 	mvn.w	r3, #5
 800e1be:	e10f      	b.n	800e3e0 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	895b      	ldrh	r3, [r3, #10]
 800e1c4:	2b13      	cmp	r3, #19
 800e1c6:	d809      	bhi.n	800e1dc <ip4_frag+0x64>
 800e1c8:	4b87      	ldr	r3, [pc, #540]	; (800e3e8 <ip4_frag+0x270>)
 800e1ca:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e1ce:	4987      	ldr	r1, [pc, #540]	; (800e3ec <ip4_frag+0x274>)
 800e1d0:	4887      	ldr	r0, [pc, #540]	; (800e3f0 <ip4_frag+0x278>)
 800e1d2:	f000 fa31 	bl	800e638 <iprintf>
 800e1d6:	f06f 0305 	mvn.w	r3, #5
 800e1da:	e101      	b.n	800e3e0 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1de:	88db      	ldrh	r3, [r3, #6]
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7f6 faee 	bl	80047c4 <lwip_htons>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e1ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e1ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e1f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e1f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e1fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	891b      	ldrh	r3, [r3, #8]
 800e202:	3b14      	subs	r3, #20
 800e204:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e208:	e0e0      	b.n	800e3cc <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e20a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e20c:	00db      	lsls	r3, r3, #3
 800e20e:	b29b      	uxth	r3, r3
 800e210:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e214:	4293      	cmp	r3, r2
 800e216:	bf28      	it	cs
 800e218:	4613      	movcs	r3, r2
 800e21a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e21c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e220:	2114      	movs	r1, #20
 800e222:	200e      	movs	r0, #14
 800e224:	f7f7 fa9e 	bl	8005764 <pbuf_alloc>
 800e228:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f000 80d4 	beq.w	800e3da <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e234:	895b      	ldrh	r3, [r3, #10]
 800e236:	2b13      	cmp	r3, #19
 800e238:	d806      	bhi.n	800e248 <ip4_frag+0xd0>
 800e23a:	4b6b      	ldr	r3, [pc, #428]	; (800e3e8 <ip4_frag+0x270>)
 800e23c:	f240 3225 	movw	r2, #805	; 0x325
 800e240:	496c      	ldr	r1, [pc, #432]	; (800e3f4 <ip4_frag+0x27c>)
 800e242:	486b      	ldr	r0, [pc, #428]	; (800e3f0 <ip4_frag+0x278>)
 800e244:	f000 f9f8 	bl	800e638 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24a:	685b      	ldr	r3, [r3, #4]
 800e24c:	2214      	movs	r2, #20
 800e24e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e250:	4618      	mov	r0, r3
 800e252:	f000 f9de 	bl	800e612 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e25c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e25e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e262:	e064      	b.n	800e32e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	895a      	ldrh	r2, [r3, #10]
 800e268:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e26a:	1ad3      	subs	r3, r2, r3
 800e26c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	895b      	ldrh	r3, [r3, #10]
 800e272:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e274:	429a      	cmp	r2, r3
 800e276:	d906      	bls.n	800e286 <ip4_frag+0x10e>
 800e278:	4b5b      	ldr	r3, [pc, #364]	; (800e3e8 <ip4_frag+0x270>)
 800e27a:	f240 322d 	movw	r2, #813	; 0x32d
 800e27e:	495e      	ldr	r1, [pc, #376]	; (800e3f8 <ip4_frag+0x280>)
 800e280:	485b      	ldr	r0, [pc, #364]	; (800e3f0 <ip4_frag+0x278>)
 800e282:	f000 f9d9 	bl	800e638 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e286:	8bfa      	ldrh	r2, [r7, #30]
 800e288:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e28c:	4293      	cmp	r3, r2
 800e28e:	bf28      	it	cs
 800e290:	4613      	movcs	r3, r2
 800e292:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e296:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d105      	bne.n	800e2aa <ip4_frag+0x132>
        poff = 0;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	60fb      	str	r3, [r7, #12]
        continue;
 800e2a8:	e041      	b.n	800e32e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e2aa:	f7ff ff0d 	bl	800e0c8 <ip_frag_alloc_pbuf_custom_ref>
 800e2ae:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e2b0:	69bb      	ldr	r3, [r7, #24]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d103      	bne.n	800e2be <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e2b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2b8:	f7f7 fd34 	bl	8005d24 <pbuf_free>
        goto memerr;
 800e2bc:	e08e      	b.n	800e3dc <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e2be:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e2c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e2c6:	4413      	add	r3, r2
 800e2c8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e2cc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e2d0:	9201      	str	r2, [sp, #4]
 800e2d2:	9300      	str	r3, [sp, #0]
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	2241      	movs	r2, #65	; 0x41
 800e2d8:	2000      	movs	r0, #0
 800e2da:	f7f7 fb69 	bl	80059b0 <pbuf_alloced_custom>
 800e2de:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d106      	bne.n	800e2f4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e2e6:	69b8      	ldr	r0, [r7, #24]
 800e2e8:	f7ff fef6 	bl	800e0d8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e2ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2ee:	f7f7 fd19 	bl	8005d24 <pbuf_free>
        goto memerr;
 800e2f2:	e073      	b.n	800e3dc <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800e2f4:	68f8      	ldr	r0, [r7, #12]
 800e2f6:	f7f7 fdb5 	bl	8005e64 <pbuf_ref>
      pcr->original = p;
 800e2fa:	69bb      	ldr	r3, [r7, #24]
 800e2fc:	68fa      	ldr	r2, [r7, #12]
 800e2fe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e300:	69bb      	ldr	r3, [r7, #24]
 800e302:	4a3e      	ldr	r2, [pc, #248]	; (800e3fc <ip4_frag+0x284>)
 800e304:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e306:	6979      	ldr	r1, [r7, #20]
 800e308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e30a:	f7f7 fdcd 	bl	8005ea8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e30e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e312:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e316:	1ad3      	subs	r3, r2, r3
 800e318:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e31c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e320:	2b00      	cmp	r3, #0
 800e322:	d004      	beq.n	800e32e <ip4_frag+0x1b6>
        poff = 0;
 800e324:	2300      	movs	r3, #0
 800e326:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e32e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e332:	2b00      	cmp	r3, #0
 800e334:	d196      	bne.n	800e264 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e336:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e338:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e33c:	4413      	add	r3, r2
 800e33e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e340:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e348:	3b14      	subs	r3, #20
 800e34a:	429a      	cmp	r2, r3
 800e34c:	bfd4      	ite	le
 800e34e:	2301      	movle	r3, #1
 800e350:	2300      	movgt	r3, #0
 800e352:	b2db      	uxtb	r3, r3
 800e354:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e356:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e35a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e35e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e360:	6a3b      	ldr	r3, [r7, #32]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d002      	beq.n	800e36c <ip4_frag+0x1f4>
 800e366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d003      	beq.n	800e374 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e36c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e36e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e372:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e374:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e376:	4618      	mov	r0, r3
 800e378:	f7f6 fa24 	bl	80047c4 <lwip_htons>
 800e37c:	4603      	mov	r3, r0
 800e37e:	461a      	mov	r2, r3
 800e380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e382:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e384:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e386:	3314      	adds	r3, #20
 800e388:	b29b      	uxth	r3, r3
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7f6 fa1a 	bl	80047c4 <lwip_htons>
 800e390:	4603      	mov	r3, r0
 800e392:	461a      	mov	r2, r3
 800e394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e396:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e39a:	2200      	movs	r2, #0
 800e39c:	729a      	strb	r2, [r3, #10]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	695b      	ldr	r3, [r3, #20]
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3aa:	68b8      	ldr	r0, [r7, #8]
 800e3ac:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e3ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3b0:	f7f7 fcb8 	bl	8005d24 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e3b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e3b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e3ba:	1ad3      	subs	r3, r2, r3
 800e3bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e3c0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e3c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e3c6:	4413      	add	r3, r2
 800e3c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e3cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	f47f af1a 	bne.w	800e20a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e002      	b.n	800e3e0 <ip4_frag+0x268>
      goto memerr;
 800e3da:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e3dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3748      	adds	r7, #72	; 0x48
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	08011bb4 	.word	0x08011bb4
 800e3ec:	08011d90 	.word	0x08011d90
 800e3f0:	08011bfc 	.word	0x08011bfc
 800e3f4:	08011dac 	.word	0x08011dac
 800e3f8:	08011dcc 	.word	0x08011dcc
 800e3fc:	0800e111 	.word	0x0800e111

0800e400 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b086      	sub	sp, #24
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e40a:	230e      	movs	r3, #14
 800e40c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	895b      	ldrh	r3, [r3, #10]
 800e412:	2b0e      	cmp	r3, #14
 800e414:	d96e      	bls.n	800e4f4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	7bdb      	ldrb	r3, [r3, #15]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d106      	bne.n	800e42c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e424:	3301      	adds	r3, #1
 800e426:	b2da      	uxtb	r2, r3
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	7b1a      	ldrb	r2, [r3, #12]
 800e436:	7b5b      	ldrb	r3, [r3, #13]
 800e438:	021b      	lsls	r3, r3, #8
 800e43a:	4313      	orrs	r3, r2
 800e43c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	f003 0301 	and.w	r3, r3, #1
 800e446:	2b00      	cmp	r3, #0
 800e448:	d023      	beq.n	800e492 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d10f      	bne.n	800e472 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	785b      	ldrb	r3, [r3, #1]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d11b      	bne.n	800e492 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e45e:	2b5e      	cmp	r3, #94	; 0x5e
 800e460:	d117      	bne.n	800e492 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	7b5b      	ldrb	r3, [r3, #13]
 800e466:	f043 0310 	orr.w	r3, r3, #16
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	735a      	strb	r2, [r3, #13]
 800e470:	e00f      	b.n	800e492 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	2206      	movs	r2, #6
 800e476:	4928      	ldr	r1, [pc, #160]	; (800e518 <ethernet_input+0x118>)
 800e478:	4618      	mov	r0, r3
 800e47a:	f000 f8bb 	bl	800e5f4 <memcmp>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d106      	bne.n	800e492 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	7b5b      	ldrb	r3, [r3, #13]
 800e488:	f043 0308 	orr.w	r3, r3, #8
 800e48c:	b2da      	uxtb	r2, r3
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e492:	89fb      	ldrh	r3, [r7, #14]
 800e494:	2b08      	cmp	r3, #8
 800e496:	d003      	beq.n	800e4a0 <ethernet_input+0xa0>
 800e498:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e49c:	d014      	beq.n	800e4c8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e49e:	e032      	b.n	800e506 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e4a6:	f003 0308 	and.w	r3, r3, #8
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d024      	beq.n	800e4f8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e4ae:	8afb      	ldrh	r3, [r7, #22]
 800e4b0:	4619      	mov	r1, r3
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f7f7 fbb0 	bl	8005c18 <pbuf_remove_header>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d11e      	bne.n	800e4fc <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e4be:	6839      	ldr	r1, [r7, #0]
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f7fe ff2d 	bl	800d320 <ip4_input>
      break;
 800e4c6:	e013      	b.n	800e4f0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e4ce:	f003 0308 	and.w	r3, r3, #8
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d014      	beq.n	800e500 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e4d6:	8afb      	ldrh	r3, [r7, #22]
 800e4d8:	4619      	mov	r1, r3
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f7f7 fb9c 	bl	8005c18 <pbuf_remove_header>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d10e      	bne.n	800e504 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e4e6:	6839      	ldr	r1, [r7, #0]
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f7fe f8cf 	bl	800c68c <etharp_input>
      break;
 800e4ee:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	e00c      	b.n	800e50e <ethernet_input+0x10e>
    goto free_and_return;
 800e4f4:	bf00      	nop
 800e4f6:	e006      	b.n	800e506 <ethernet_input+0x106>
        goto free_and_return;
 800e4f8:	bf00      	nop
 800e4fa:	e004      	b.n	800e506 <ethernet_input+0x106>
        goto free_and_return;
 800e4fc:	bf00      	nop
 800e4fe:	e002      	b.n	800e506 <ethernet_input+0x106>
        goto free_and_return;
 800e500:	bf00      	nop
 800e502:	e000      	b.n	800e506 <ethernet_input+0x106>
        goto free_and_return;
 800e504:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f7f7 fc0c 	bl	8005d24 <pbuf_free>
  return ERR_OK;
 800e50c:	2300      	movs	r3, #0
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3718      	adds	r7, #24
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	08011f60 	.word	0x08011f60

0800e51c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b086      	sub	sp, #24
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	607a      	str	r2, [r7, #4]
 800e528:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e52a:	8c3b      	ldrh	r3, [r7, #32]
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7f6 f949 	bl	80047c4 <lwip_htons>
 800e532:	4603      	mov	r3, r0
 800e534:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e536:	210e      	movs	r1, #14
 800e538:	68b8      	ldr	r0, [r7, #8]
 800e53a:	f7f7 fb5d 	bl	8005bf8 <pbuf_add_header>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d125      	bne.n	800e590 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	685b      	ldr	r3, [r3, #4]
 800e548:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	8afa      	ldrh	r2, [r7, #22]
 800e54e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	2206      	movs	r2, #6
 800e554:	6839      	ldr	r1, [r7, #0]
 800e556:	4618      	mov	r0, r3
 800e558:	f000 f85b 	bl	800e612 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	3306      	adds	r3, #6
 800e560:	2206      	movs	r2, #6
 800e562:	6879      	ldr	r1, [r7, #4]
 800e564:	4618      	mov	r0, r3
 800e566:	f000 f854 	bl	800e612 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e570:	2b06      	cmp	r3, #6
 800e572:	d006      	beq.n	800e582 <ethernet_output+0x66>
 800e574:	4b0a      	ldr	r3, [pc, #40]	; (800e5a0 <ethernet_output+0x84>)
 800e576:	f240 1233 	movw	r2, #307	; 0x133
 800e57a:	490a      	ldr	r1, [pc, #40]	; (800e5a4 <ethernet_output+0x88>)
 800e57c:	480a      	ldr	r0, [pc, #40]	; (800e5a8 <ethernet_output+0x8c>)
 800e57e:	f000 f85b 	bl	800e638 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	699b      	ldr	r3, [r3, #24]
 800e586:	68b9      	ldr	r1, [r7, #8]
 800e588:	68f8      	ldr	r0, [r7, #12]
 800e58a:	4798      	blx	r3
 800e58c:	4603      	mov	r3, r0
 800e58e:	e002      	b.n	800e596 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e590:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e592:	f06f 0301 	mvn.w	r3, #1
}
 800e596:	4618      	mov	r0, r3
 800e598:	3718      	adds	r7, #24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	08011ddc 	.word	0x08011ddc
 800e5a4:	08011e14 	.word	0x08011e14
 800e5a8:	08011e48 	.word	0x08011e48

0800e5ac <__libc_init_array>:
 800e5ac:	b570      	push	{r4, r5, r6, lr}
 800e5ae:	4e0d      	ldr	r6, [pc, #52]	; (800e5e4 <__libc_init_array+0x38>)
 800e5b0:	4c0d      	ldr	r4, [pc, #52]	; (800e5e8 <__libc_init_array+0x3c>)
 800e5b2:	1ba4      	subs	r4, r4, r6
 800e5b4:	10a4      	asrs	r4, r4, #2
 800e5b6:	2500      	movs	r5, #0
 800e5b8:	42a5      	cmp	r5, r4
 800e5ba:	d109      	bne.n	800e5d0 <__libc_init_array+0x24>
 800e5bc:	4e0b      	ldr	r6, [pc, #44]	; (800e5ec <__libc_init_array+0x40>)
 800e5be:	4c0c      	ldr	r4, [pc, #48]	; (800e5f0 <__libc_init_array+0x44>)
 800e5c0:	f000 ff5a 	bl	800f478 <_init>
 800e5c4:	1ba4      	subs	r4, r4, r6
 800e5c6:	10a4      	asrs	r4, r4, #2
 800e5c8:	2500      	movs	r5, #0
 800e5ca:	42a5      	cmp	r5, r4
 800e5cc:	d105      	bne.n	800e5da <__libc_init_array+0x2e>
 800e5ce:	bd70      	pop	{r4, r5, r6, pc}
 800e5d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e5d4:	4798      	blx	r3
 800e5d6:	3501      	adds	r5, #1
 800e5d8:	e7ee      	b.n	800e5b8 <__libc_init_array+0xc>
 800e5da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e5de:	4798      	blx	r3
 800e5e0:	3501      	adds	r5, #1
 800e5e2:	e7f2      	b.n	800e5ca <__libc_init_array+0x1e>
 800e5e4:	08012010 	.word	0x08012010
 800e5e8:	08012010 	.word	0x08012010
 800e5ec:	08012010 	.word	0x08012010
 800e5f0:	08012014 	.word	0x08012014

0800e5f4 <memcmp>:
 800e5f4:	b530      	push	{r4, r5, lr}
 800e5f6:	2400      	movs	r4, #0
 800e5f8:	42a2      	cmp	r2, r4
 800e5fa:	d101      	bne.n	800e600 <memcmp+0xc>
 800e5fc:	2000      	movs	r0, #0
 800e5fe:	e007      	b.n	800e610 <memcmp+0x1c>
 800e600:	5d03      	ldrb	r3, [r0, r4]
 800e602:	3401      	adds	r4, #1
 800e604:	190d      	adds	r5, r1, r4
 800e606:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800e60a:	42ab      	cmp	r3, r5
 800e60c:	d0f4      	beq.n	800e5f8 <memcmp+0x4>
 800e60e:	1b58      	subs	r0, r3, r5
 800e610:	bd30      	pop	{r4, r5, pc}

0800e612 <memcpy>:
 800e612:	b510      	push	{r4, lr}
 800e614:	1e43      	subs	r3, r0, #1
 800e616:	440a      	add	r2, r1
 800e618:	4291      	cmp	r1, r2
 800e61a:	d100      	bne.n	800e61e <memcpy+0xc>
 800e61c:	bd10      	pop	{r4, pc}
 800e61e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e622:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e626:	e7f7      	b.n	800e618 <memcpy+0x6>

0800e628 <memset>:
 800e628:	4402      	add	r2, r0
 800e62a:	4603      	mov	r3, r0
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d100      	bne.n	800e632 <memset+0xa>
 800e630:	4770      	bx	lr
 800e632:	f803 1b01 	strb.w	r1, [r3], #1
 800e636:	e7f9      	b.n	800e62c <memset+0x4>

0800e638 <iprintf>:
 800e638:	b40f      	push	{r0, r1, r2, r3}
 800e63a:	4b0a      	ldr	r3, [pc, #40]	; (800e664 <iprintf+0x2c>)
 800e63c:	b513      	push	{r0, r1, r4, lr}
 800e63e:	681c      	ldr	r4, [r3, #0]
 800e640:	b124      	cbz	r4, 800e64c <iprintf+0x14>
 800e642:	69a3      	ldr	r3, [r4, #24]
 800e644:	b913      	cbnz	r3, 800e64c <iprintf+0x14>
 800e646:	4620      	mov	r0, r4
 800e648:	f000 f882 	bl	800e750 <__sinit>
 800e64c:	ab05      	add	r3, sp, #20
 800e64e:	9a04      	ldr	r2, [sp, #16]
 800e650:	68a1      	ldr	r1, [r4, #8]
 800e652:	9301      	str	r3, [sp, #4]
 800e654:	4620      	mov	r0, r4
 800e656:	f000 f9df 	bl	800ea18 <_vfiprintf_r>
 800e65a:	b002      	add	sp, #8
 800e65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e660:	b004      	add	sp, #16
 800e662:	4770      	bx	lr
 800e664:	20000014 	.word	0x20000014

0800e668 <rand>:
 800e668:	b538      	push	{r3, r4, r5, lr}
 800e66a:	4b13      	ldr	r3, [pc, #76]	; (800e6b8 <rand+0x50>)
 800e66c:	681c      	ldr	r4, [r3, #0]
 800e66e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e670:	b97b      	cbnz	r3, 800e692 <rand+0x2a>
 800e672:	2018      	movs	r0, #24
 800e674:	f000 f8f6 	bl	800e864 <malloc>
 800e678:	4a10      	ldr	r2, [pc, #64]	; (800e6bc <rand+0x54>)
 800e67a:	4b11      	ldr	r3, [pc, #68]	; (800e6c0 <rand+0x58>)
 800e67c:	63a0      	str	r0, [r4, #56]	; 0x38
 800e67e:	e9c0 2300 	strd	r2, r3, [r0]
 800e682:	4b10      	ldr	r3, [pc, #64]	; (800e6c4 <rand+0x5c>)
 800e684:	6083      	str	r3, [r0, #8]
 800e686:	230b      	movs	r3, #11
 800e688:	8183      	strh	r3, [r0, #12]
 800e68a:	2201      	movs	r2, #1
 800e68c:	2300      	movs	r3, #0
 800e68e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e692:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e694:	480c      	ldr	r0, [pc, #48]	; (800e6c8 <rand+0x60>)
 800e696:	690a      	ldr	r2, [r1, #16]
 800e698:	694b      	ldr	r3, [r1, #20]
 800e69a:	4c0c      	ldr	r4, [pc, #48]	; (800e6cc <rand+0x64>)
 800e69c:	4350      	muls	r0, r2
 800e69e:	fb04 0003 	mla	r0, r4, r3, r0
 800e6a2:	fba2 2304 	umull	r2, r3, r2, r4
 800e6a6:	4403      	add	r3, r0
 800e6a8:	1c54      	adds	r4, r2, #1
 800e6aa:	f143 0500 	adc.w	r5, r3, #0
 800e6ae:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800e6b2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800e6b6:	bd38      	pop	{r3, r4, r5, pc}
 800e6b8:	20000014 	.word	0x20000014
 800e6bc:	abcd330e 	.word	0xabcd330e
 800e6c0:	e66d1234 	.word	0xe66d1234
 800e6c4:	0005deec 	.word	0x0005deec
 800e6c8:	5851f42d 	.word	0x5851f42d
 800e6cc:	4c957f2d 	.word	0x4c957f2d

0800e6d0 <std>:
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	b510      	push	{r4, lr}
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	e9c0 3300 	strd	r3, r3, [r0]
 800e6da:	6083      	str	r3, [r0, #8]
 800e6dc:	8181      	strh	r1, [r0, #12]
 800e6de:	6643      	str	r3, [r0, #100]	; 0x64
 800e6e0:	81c2      	strh	r2, [r0, #14]
 800e6e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e6e6:	6183      	str	r3, [r0, #24]
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	2208      	movs	r2, #8
 800e6ec:	305c      	adds	r0, #92	; 0x5c
 800e6ee:	f7ff ff9b 	bl	800e628 <memset>
 800e6f2:	4b05      	ldr	r3, [pc, #20]	; (800e708 <std+0x38>)
 800e6f4:	6263      	str	r3, [r4, #36]	; 0x24
 800e6f6:	4b05      	ldr	r3, [pc, #20]	; (800e70c <std+0x3c>)
 800e6f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e6fa:	4b05      	ldr	r3, [pc, #20]	; (800e710 <std+0x40>)
 800e6fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e6fe:	4b05      	ldr	r3, [pc, #20]	; (800e714 <std+0x44>)
 800e700:	6224      	str	r4, [r4, #32]
 800e702:	6323      	str	r3, [r4, #48]	; 0x30
 800e704:	bd10      	pop	{r4, pc}
 800e706:	bf00      	nop
 800e708:	0800ef75 	.word	0x0800ef75
 800e70c:	0800ef97 	.word	0x0800ef97
 800e710:	0800efcf 	.word	0x0800efcf
 800e714:	0800eff3 	.word	0x0800eff3

0800e718 <_cleanup_r>:
 800e718:	4901      	ldr	r1, [pc, #4]	; (800e720 <_cleanup_r+0x8>)
 800e71a:	f000 b885 	b.w	800e828 <_fwalk_reent>
 800e71e:	bf00      	nop
 800e720:	0800f2cd 	.word	0x0800f2cd

0800e724 <__sfmoreglue>:
 800e724:	b570      	push	{r4, r5, r6, lr}
 800e726:	1e4a      	subs	r2, r1, #1
 800e728:	2568      	movs	r5, #104	; 0x68
 800e72a:	4355      	muls	r5, r2
 800e72c:	460e      	mov	r6, r1
 800e72e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e732:	f000 f8ed 	bl	800e910 <_malloc_r>
 800e736:	4604      	mov	r4, r0
 800e738:	b140      	cbz	r0, 800e74c <__sfmoreglue+0x28>
 800e73a:	2100      	movs	r1, #0
 800e73c:	e9c0 1600 	strd	r1, r6, [r0]
 800e740:	300c      	adds	r0, #12
 800e742:	60a0      	str	r0, [r4, #8]
 800e744:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e748:	f7ff ff6e 	bl	800e628 <memset>
 800e74c:	4620      	mov	r0, r4
 800e74e:	bd70      	pop	{r4, r5, r6, pc}

0800e750 <__sinit>:
 800e750:	6983      	ldr	r3, [r0, #24]
 800e752:	b510      	push	{r4, lr}
 800e754:	4604      	mov	r4, r0
 800e756:	bb33      	cbnz	r3, 800e7a6 <__sinit+0x56>
 800e758:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e75c:	6503      	str	r3, [r0, #80]	; 0x50
 800e75e:	4b12      	ldr	r3, [pc, #72]	; (800e7a8 <__sinit+0x58>)
 800e760:	4a12      	ldr	r2, [pc, #72]	; (800e7ac <__sinit+0x5c>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	6282      	str	r2, [r0, #40]	; 0x28
 800e766:	4298      	cmp	r0, r3
 800e768:	bf04      	itt	eq
 800e76a:	2301      	moveq	r3, #1
 800e76c:	6183      	streq	r3, [r0, #24]
 800e76e:	f000 f81f 	bl	800e7b0 <__sfp>
 800e772:	6060      	str	r0, [r4, #4]
 800e774:	4620      	mov	r0, r4
 800e776:	f000 f81b 	bl	800e7b0 <__sfp>
 800e77a:	60a0      	str	r0, [r4, #8]
 800e77c:	4620      	mov	r0, r4
 800e77e:	f000 f817 	bl	800e7b0 <__sfp>
 800e782:	2200      	movs	r2, #0
 800e784:	60e0      	str	r0, [r4, #12]
 800e786:	2104      	movs	r1, #4
 800e788:	6860      	ldr	r0, [r4, #4]
 800e78a:	f7ff ffa1 	bl	800e6d0 <std>
 800e78e:	2201      	movs	r2, #1
 800e790:	2109      	movs	r1, #9
 800e792:	68a0      	ldr	r0, [r4, #8]
 800e794:	f7ff ff9c 	bl	800e6d0 <std>
 800e798:	2202      	movs	r2, #2
 800e79a:	2112      	movs	r1, #18
 800e79c:	68e0      	ldr	r0, [r4, #12]
 800e79e:	f7ff ff97 	bl	800e6d0 <std>
 800e7a2:	2301      	movs	r3, #1
 800e7a4:	61a3      	str	r3, [r4, #24]
 800e7a6:	bd10      	pop	{r4, pc}
 800e7a8:	08011f70 	.word	0x08011f70
 800e7ac:	0800e719 	.word	0x0800e719

0800e7b0 <__sfp>:
 800e7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b2:	4b1b      	ldr	r3, [pc, #108]	; (800e820 <__sfp+0x70>)
 800e7b4:	681e      	ldr	r6, [r3, #0]
 800e7b6:	69b3      	ldr	r3, [r6, #24]
 800e7b8:	4607      	mov	r7, r0
 800e7ba:	b913      	cbnz	r3, 800e7c2 <__sfp+0x12>
 800e7bc:	4630      	mov	r0, r6
 800e7be:	f7ff ffc7 	bl	800e750 <__sinit>
 800e7c2:	3648      	adds	r6, #72	; 0x48
 800e7c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e7c8:	3b01      	subs	r3, #1
 800e7ca:	d503      	bpl.n	800e7d4 <__sfp+0x24>
 800e7cc:	6833      	ldr	r3, [r6, #0]
 800e7ce:	b133      	cbz	r3, 800e7de <__sfp+0x2e>
 800e7d0:	6836      	ldr	r6, [r6, #0]
 800e7d2:	e7f7      	b.n	800e7c4 <__sfp+0x14>
 800e7d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e7d8:	b16d      	cbz	r5, 800e7f6 <__sfp+0x46>
 800e7da:	3468      	adds	r4, #104	; 0x68
 800e7dc:	e7f4      	b.n	800e7c8 <__sfp+0x18>
 800e7de:	2104      	movs	r1, #4
 800e7e0:	4638      	mov	r0, r7
 800e7e2:	f7ff ff9f 	bl	800e724 <__sfmoreglue>
 800e7e6:	6030      	str	r0, [r6, #0]
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	d1f1      	bne.n	800e7d0 <__sfp+0x20>
 800e7ec:	230c      	movs	r3, #12
 800e7ee:	603b      	str	r3, [r7, #0]
 800e7f0:	4604      	mov	r4, r0
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7f6:	4b0b      	ldr	r3, [pc, #44]	; (800e824 <__sfp+0x74>)
 800e7f8:	6665      	str	r5, [r4, #100]	; 0x64
 800e7fa:	e9c4 5500 	strd	r5, r5, [r4]
 800e7fe:	60a5      	str	r5, [r4, #8]
 800e800:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e804:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e808:	2208      	movs	r2, #8
 800e80a:	4629      	mov	r1, r5
 800e80c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e810:	f7ff ff0a 	bl	800e628 <memset>
 800e814:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e818:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e81c:	e7e9      	b.n	800e7f2 <__sfp+0x42>
 800e81e:	bf00      	nop
 800e820:	08011f70 	.word	0x08011f70
 800e824:	ffff0001 	.word	0xffff0001

0800e828 <_fwalk_reent>:
 800e828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e82c:	4680      	mov	r8, r0
 800e82e:	4689      	mov	r9, r1
 800e830:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e834:	2600      	movs	r6, #0
 800e836:	b914      	cbnz	r4, 800e83e <_fwalk_reent+0x16>
 800e838:	4630      	mov	r0, r6
 800e83a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e83e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e842:	3f01      	subs	r7, #1
 800e844:	d501      	bpl.n	800e84a <_fwalk_reent+0x22>
 800e846:	6824      	ldr	r4, [r4, #0]
 800e848:	e7f5      	b.n	800e836 <_fwalk_reent+0xe>
 800e84a:	89ab      	ldrh	r3, [r5, #12]
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d907      	bls.n	800e860 <_fwalk_reent+0x38>
 800e850:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e854:	3301      	adds	r3, #1
 800e856:	d003      	beq.n	800e860 <_fwalk_reent+0x38>
 800e858:	4629      	mov	r1, r5
 800e85a:	4640      	mov	r0, r8
 800e85c:	47c8      	blx	r9
 800e85e:	4306      	orrs	r6, r0
 800e860:	3568      	adds	r5, #104	; 0x68
 800e862:	e7ee      	b.n	800e842 <_fwalk_reent+0x1a>

0800e864 <malloc>:
 800e864:	4b02      	ldr	r3, [pc, #8]	; (800e870 <malloc+0xc>)
 800e866:	4601      	mov	r1, r0
 800e868:	6818      	ldr	r0, [r3, #0]
 800e86a:	f000 b851 	b.w	800e910 <_malloc_r>
 800e86e:	bf00      	nop
 800e870:	20000014 	.word	0x20000014

0800e874 <_free_r>:
 800e874:	b538      	push	{r3, r4, r5, lr}
 800e876:	4605      	mov	r5, r0
 800e878:	2900      	cmp	r1, #0
 800e87a:	d045      	beq.n	800e908 <_free_r+0x94>
 800e87c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e880:	1f0c      	subs	r4, r1, #4
 800e882:	2b00      	cmp	r3, #0
 800e884:	bfb8      	it	lt
 800e886:	18e4      	addlt	r4, r4, r3
 800e888:	f000 fdc0 	bl	800f40c <__malloc_lock>
 800e88c:	4a1f      	ldr	r2, [pc, #124]	; (800e90c <_free_r+0x98>)
 800e88e:	6813      	ldr	r3, [r2, #0]
 800e890:	4610      	mov	r0, r2
 800e892:	b933      	cbnz	r3, 800e8a2 <_free_r+0x2e>
 800e894:	6063      	str	r3, [r4, #4]
 800e896:	6014      	str	r4, [r2, #0]
 800e898:	4628      	mov	r0, r5
 800e89a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e89e:	f000 bdb6 	b.w	800f40e <__malloc_unlock>
 800e8a2:	42a3      	cmp	r3, r4
 800e8a4:	d90c      	bls.n	800e8c0 <_free_r+0x4c>
 800e8a6:	6821      	ldr	r1, [r4, #0]
 800e8a8:	1862      	adds	r2, r4, r1
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	bf04      	itt	eq
 800e8ae:	681a      	ldreq	r2, [r3, #0]
 800e8b0:	685b      	ldreq	r3, [r3, #4]
 800e8b2:	6063      	str	r3, [r4, #4]
 800e8b4:	bf04      	itt	eq
 800e8b6:	1852      	addeq	r2, r2, r1
 800e8b8:	6022      	streq	r2, [r4, #0]
 800e8ba:	6004      	str	r4, [r0, #0]
 800e8bc:	e7ec      	b.n	800e898 <_free_r+0x24>
 800e8be:	4613      	mov	r3, r2
 800e8c0:	685a      	ldr	r2, [r3, #4]
 800e8c2:	b10a      	cbz	r2, 800e8c8 <_free_r+0x54>
 800e8c4:	42a2      	cmp	r2, r4
 800e8c6:	d9fa      	bls.n	800e8be <_free_r+0x4a>
 800e8c8:	6819      	ldr	r1, [r3, #0]
 800e8ca:	1858      	adds	r0, r3, r1
 800e8cc:	42a0      	cmp	r0, r4
 800e8ce:	d10b      	bne.n	800e8e8 <_free_r+0x74>
 800e8d0:	6820      	ldr	r0, [r4, #0]
 800e8d2:	4401      	add	r1, r0
 800e8d4:	1858      	adds	r0, r3, r1
 800e8d6:	4282      	cmp	r2, r0
 800e8d8:	6019      	str	r1, [r3, #0]
 800e8da:	d1dd      	bne.n	800e898 <_free_r+0x24>
 800e8dc:	6810      	ldr	r0, [r2, #0]
 800e8de:	6852      	ldr	r2, [r2, #4]
 800e8e0:	605a      	str	r2, [r3, #4]
 800e8e2:	4401      	add	r1, r0
 800e8e4:	6019      	str	r1, [r3, #0]
 800e8e6:	e7d7      	b.n	800e898 <_free_r+0x24>
 800e8e8:	d902      	bls.n	800e8f0 <_free_r+0x7c>
 800e8ea:	230c      	movs	r3, #12
 800e8ec:	602b      	str	r3, [r5, #0]
 800e8ee:	e7d3      	b.n	800e898 <_free_r+0x24>
 800e8f0:	6820      	ldr	r0, [r4, #0]
 800e8f2:	1821      	adds	r1, r4, r0
 800e8f4:	428a      	cmp	r2, r1
 800e8f6:	bf04      	itt	eq
 800e8f8:	6811      	ldreq	r1, [r2, #0]
 800e8fa:	6852      	ldreq	r2, [r2, #4]
 800e8fc:	6062      	str	r2, [r4, #4]
 800e8fe:	bf04      	itt	eq
 800e900:	1809      	addeq	r1, r1, r0
 800e902:	6021      	streq	r1, [r4, #0]
 800e904:	605c      	str	r4, [r3, #4]
 800e906:	e7c7      	b.n	800e898 <_free_r+0x24>
 800e908:	bd38      	pop	{r3, r4, r5, pc}
 800e90a:	bf00      	nop
 800e90c:	2000020c 	.word	0x2000020c

0800e910 <_malloc_r>:
 800e910:	b570      	push	{r4, r5, r6, lr}
 800e912:	1ccd      	adds	r5, r1, #3
 800e914:	f025 0503 	bic.w	r5, r5, #3
 800e918:	3508      	adds	r5, #8
 800e91a:	2d0c      	cmp	r5, #12
 800e91c:	bf38      	it	cc
 800e91e:	250c      	movcc	r5, #12
 800e920:	2d00      	cmp	r5, #0
 800e922:	4606      	mov	r6, r0
 800e924:	db01      	blt.n	800e92a <_malloc_r+0x1a>
 800e926:	42a9      	cmp	r1, r5
 800e928:	d903      	bls.n	800e932 <_malloc_r+0x22>
 800e92a:	230c      	movs	r3, #12
 800e92c:	6033      	str	r3, [r6, #0]
 800e92e:	2000      	movs	r0, #0
 800e930:	bd70      	pop	{r4, r5, r6, pc}
 800e932:	f000 fd6b 	bl	800f40c <__malloc_lock>
 800e936:	4a21      	ldr	r2, [pc, #132]	; (800e9bc <_malloc_r+0xac>)
 800e938:	6814      	ldr	r4, [r2, #0]
 800e93a:	4621      	mov	r1, r4
 800e93c:	b991      	cbnz	r1, 800e964 <_malloc_r+0x54>
 800e93e:	4c20      	ldr	r4, [pc, #128]	; (800e9c0 <_malloc_r+0xb0>)
 800e940:	6823      	ldr	r3, [r4, #0]
 800e942:	b91b      	cbnz	r3, 800e94c <_malloc_r+0x3c>
 800e944:	4630      	mov	r0, r6
 800e946:	f000 fb05 	bl	800ef54 <_sbrk_r>
 800e94a:	6020      	str	r0, [r4, #0]
 800e94c:	4629      	mov	r1, r5
 800e94e:	4630      	mov	r0, r6
 800e950:	f000 fb00 	bl	800ef54 <_sbrk_r>
 800e954:	1c43      	adds	r3, r0, #1
 800e956:	d124      	bne.n	800e9a2 <_malloc_r+0x92>
 800e958:	230c      	movs	r3, #12
 800e95a:	6033      	str	r3, [r6, #0]
 800e95c:	4630      	mov	r0, r6
 800e95e:	f000 fd56 	bl	800f40e <__malloc_unlock>
 800e962:	e7e4      	b.n	800e92e <_malloc_r+0x1e>
 800e964:	680b      	ldr	r3, [r1, #0]
 800e966:	1b5b      	subs	r3, r3, r5
 800e968:	d418      	bmi.n	800e99c <_malloc_r+0x8c>
 800e96a:	2b0b      	cmp	r3, #11
 800e96c:	d90f      	bls.n	800e98e <_malloc_r+0x7e>
 800e96e:	600b      	str	r3, [r1, #0]
 800e970:	50cd      	str	r5, [r1, r3]
 800e972:	18cc      	adds	r4, r1, r3
 800e974:	4630      	mov	r0, r6
 800e976:	f000 fd4a 	bl	800f40e <__malloc_unlock>
 800e97a:	f104 000b 	add.w	r0, r4, #11
 800e97e:	1d23      	adds	r3, r4, #4
 800e980:	f020 0007 	bic.w	r0, r0, #7
 800e984:	1ac3      	subs	r3, r0, r3
 800e986:	d0d3      	beq.n	800e930 <_malloc_r+0x20>
 800e988:	425a      	negs	r2, r3
 800e98a:	50e2      	str	r2, [r4, r3]
 800e98c:	e7d0      	b.n	800e930 <_malloc_r+0x20>
 800e98e:	428c      	cmp	r4, r1
 800e990:	684b      	ldr	r3, [r1, #4]
 800e992:	bf16      	itet	ne
 800e994:	6063      	strne	r3, [r4, #4]
 800e996:	6013      	streq	r3, [r2, #0]
 800e998:	460c      	movne	r4, r1
 800e99a:	e7eb      	b.n	800e974 <_malloc_r+0x64>
 800e99c:	460c      	mov	r4, r1
 800e99e:	6849      	ldr	r1, [r1, #4]
 800e9a0:	e7cc      	b.n	800e93c <_malloc_r+0x2c>
 800e9a2:	1cc4      	adds	r4, r0, #3
 800e9a4:	f024 0403 	bic.w	r4, r4, #3
 800e9a8:	42a0      	cmp	r0, r4
 800e9aa:	d005      	beq.n	800e9b8 <_malloc_r+0xa8>
 800e9ac:	1a21      	subs	r1, r4, r0
 800e9ae:	4630      	mov	r0, r6
 800e9b0:	f000 fad0 	bl	800ef54 <_sbrk_r>
 800e9b4:	3001      	adds	r0, #1
 800e9b6:	d0cf      	beq.n	800e958 <_malloc_r+0x48>
 800e9b8:	6025      	str	r5, [r4, #0]
 800e9ba:	e7db      	b.n	800e974 <_malloc_r+0x64>
 800e9bc:	2000020c 	.word	0x2000020c
 800e9c0:	20000210 	.word	0x20000210

0800e9c4 <__sfputc_r>:
 800e9c4:	6893      	ldr	r3, [r2, #8]
 800e9c6:	3b01      	subs	r3, #1
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	b410      	push	{r4}
 800e9cc:	6093      	str	r3, [r2, #8]
 800e9ce:	da08      	bge.n	800e9e2 <__sfputc_r+0x1e>
 800e9d0:	6994      	ldr	r4, [r2, #24]
 800e9d2:	42a3      	cmp	r3, r4
 800e9d4:	db01      	blt.n	800e9da <__sfputc_r+0x16>
 800e9d6:	290a      	cmp	r1, #10
 800e9d8:	d103      	bne.n	800e9e2 <__sfputc_r+0x1e>
 800e9da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9de:	f000 bb0d 	b.w	800effc <__swbuf_r>
 800e9e2:	6813      	ldr	r3, [r2, #0]
 800e9e4:	1c58      	adds	r0, r3, #1
 800e9e6:	6010      	str	r0, [r2, #0]
 800e9e8:	7019      	strb	r1, [r3, #0]
 800e9ea:	4608      	mov	r0, r1
 800e9ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9f0:	4770      	bx	lr

0800e9f2 <__sfputs_r>:
 800e9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9f4:	4606      	mov	r6, r0
 800e9f6:	460f      	mov	r7, r1
 800e9f8:	4614      	mov	r4, r2
 800e9fa:	18d5      	adds	r5, r2, r3
 800e9fc:	42ac      	cmp	r4, r5
 800e9fe:	d101      	bne.n	800ea04 <__sfputs_r+0x12>
 800ea00:	2000      	movs	r0, #0
 800ea02:	e007      	b.n	800ea14 <__sfputs_r+0x22>
 800ea04:	463a      	mov	r2, r7
 800ea06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	f7ff ffda 	bl	800e9c4 <__sfputc_r>
 800ea10:	1c43      	adds	r3, r0, #1
 800ea12:	d1f3      	bne.n	800e9fc <__sfputs_r+0xa>
 800ea14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea18 <_vfiprintf_r>:
 800ea18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea1c:	460c      	mov	r4, r1
 800ea1e:	b09d      	sub	sp, #116	; 0x74
 800ea20:	4617      	mov	r7, r2
 800ea22:	461d      	mov	r5, r3
 800ea24:	4606      	mov	r6, r0
 800ea26:	b118      	cbz	r0, 800ea30 <_vfiprintf_r+0x18>
 800ea28:	6983      	ldr	r3, [r0, #24]
 800ea2a:	b90b      	cbnz	r3, 800ea30 <_vfiprintf_r+0x18>
 800ea2c:	f7ff fe90 	bl	800e750 <__sinit>
 800ea30:	4b7c      	ldr	r3, [pc, #496]	; (800ec24 <_vfiprintf_r+0x20c>)
 800ea32:	429c      	cmp	r4, r3
 800ea34:	d158      	bne.n	800eae8 <_vfiprintf_r+0xd0>
 800ea36:	6874      	ldr	r4, [r6, #4]
 800ea38:	89a3      	ldrh	r3, [r4, #12]
 800ea3a:	0718      	lsls	r0, r3, #28
 800ea3c:	d55e      	bpl.n	800eafc <_vfiprintf_r+0xe4>
 800ea3e:	6923      	ldr	r3, [r4, #16]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d05b      	beq.n	800eafc <_vfiprintf_r+0xe4>
 800ea44:	2300      	movs	r3, #0
 800ea46:	9309      	str	r3, [sp, #36]	; 0x24
 800ea48:	2320      	movs	r3, #32
 800ea4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea4e:	2330      	movs	r3, #48	; 0x30
 800ea50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea54:	9503      	str	r5, [sp, #12]
 800ea56:	f04f 0b01 	mov.w	fp, #1
 800ea5a:	46b8      	mov	r8, r7
 800ea5c:	4645      	mov	r5, r8
 800ea5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ea62:	b10b      	cbz	r3, 800ea68 <_vfiprintf_r+0x50>
 800ea64:	2b25      	cmp	r3, #37	; 0x25
 800ea66:	d154      	bne.n	800eb12 <_vfiprintf_r+0xfa>
 800ea68:	ebb8 0a07 	subs.w	sl, r8, r7
 800ea6c:	d00b      	beq.n	800ea86 <_vfiprintf_r+0x6e>
 800ea6e:	4653      	mov	r3, sl
 800ea70:	463a      	mov	r2, r7
 800ea72:	4621      	mov	r1, r4
 800ea74:	4630      	mov	r0, r6
 800ea76:	f7ff ffbc 	bl	800e9f2 <__sfputs_r>
 800ea7a:	3001      	adds	r0, #1
 800ea7c:	f000 80c2 	beq.w	800ec04 <_vfiprintf_r+0x1ec>
 800ea80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea82:	4453      	add	r3, sl
 800ea84:	9309      	str	r3, [sp, #36]	; 0x24
 800ea86:	f898 3000 	ldrb.w	r3, [r8]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f000 80ba 	beq.w	800ec04 <_vfiprintf_r+0x1ec>
 800ea90:	2300      	movs	r3, #0
 800ea92:	f04f 32ff 	mov.w	r2, #4294967295
 800ea96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea9a:	9304      	str	r3, [sp, #16]
 800ea9c:	9307      	str	r3, [sp, #28]
 800ea9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eaa2:	931a      	str	r3, [sp, #104]	; 0x68
 800eaa4:	46a8      	mov	r8, r5
 800eaa6:	2205      	movs	r2, #5
 800eaa8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800eaac:	485e      	ldr	r0, [pc, #376]	; (800ec28 <_vfiprintf_r+0x210>)
 800eaae:	f7f1 fbaf 	bl	8000210 <memchr>
 800eab2:	9b04      	ldr	r3, [sp, #16]
 800eab4:	bb78      	cbnz	r0, 800eb16 <_vfiprintf_r+0xfe>
 800eab6:	06d9      	lsls	r1, r3, #27
 800eab8:	bf44      	itt	mi
 800eaba:	2220      	movmi	r2, #32
 800eabc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eac0:	071a      	lsls	r2, r3, #28
 800eac2:	bf44      	itt	mi
 800eac4:	222b      	movmi	r2, #43	; 0x2b
 800eac6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eaca:	782a      	ldrb	r2, [r5, #0]
 800eacc:	2a2a      	cmp	r2, #42	; 0x2a
 800eace:	d02a      	beq.n	800eb26 <_vfiprintf_r+0x10e>
 800ead0:	9a07      	ldr	r2, [sp, #28]
 800ead2:	46a8      	mov	r8, r5
 800ead4:	2000      	movs	r0, #0
 800ead6:	250a      	movs	r5, #10
 800ead8:	4641      	mov	r1, r8
 800eada:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eade:	3b30      	subs	r3, #48	; 0x30
 800eae0:	2b09      	cmp	r3, #9
 800eae2:	d969      	bls.n	800ebb8 <_vfiprintf_r+0x1a0>
 800eae4:	b360      	cbz	r0, 800eb40 <_vfiprintf_r+0x128>
 800eae6:	e024      	b.n	800eb32 <_vfiprintf_r+0x11a>
 800eae8:	4b50      	ldr	r3, [pc, #320]	; (800ec2c <_vfiprintf_r+0x214>)
 800eaea:	429c      	cmp	r4, r3
 800eaec:	d101      	bne.n	800eaf2 <_vfiprintf_r+0xda>
 800eaee:	68b4      	ldr	r4, [r6, #8]
 800eaf0:	e7a2      	b.n	800ea38 <_vfiprintf_r+0x20>
 800eaf2:	4b4f      	ldr	r3, [pc, #316]	; (800ec30 <_vfiprintf_r+0x218>)
 800eaf4:	429c      	cmp	r4, r3
 800eaf6:	bf08      	it	eq
 800eaf8:	68f4      	ldreq	r4, [r6, #12]
 800eafa:	e79d      	b.n	800ea38 <_vfiprintf_r+0x20>
 800eafc:	4621      	mov	r1, r4
 800eafe:	4630      	mov	r0, r6
 800eb00:	f000 fae0 	bl	800f0c4 <__swsetup_r>
 800eb04:	2800      	cmp	r0, #0
 800eb06:	d09d      	beq.n	800ea44 <_vfiprintf_r+0x2c>
 800eb08:	f04f 30ff 	mov.w	r0, #4294967295
 800eb0c:	b01d      	add	sp, #116	; 0x74
 800eb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb12:	46a8      	mov	r8, r5
 800eb14:	e7a2      	b.n	800ea5c <_vfiprintf_r+0x44>
 800eb16:	4a44      	ldr	r2, [pc, #272]	; (800ec28 <_vfiprintf_r+0x210>)
 800eb18:	1a80      	subs	r0, r0, r2
 800eb1a:	fa0b f000 	lsl.w	r0, fp, r0
 800eb1e:	4318      	orrs	r0, r3
 800eb20:	9004      	str	r0, [sp, #16]
 800eb22:	4645      	mov	r5, r8
 800eb24:	e7be      	b.n	800eaa4 <_vfiprintf_r+0x8c>
 800eb26:	9a03      	ldr	r2, [sp, #12]
 800eb28:	1d11      	adds	r1, r2, #4
 800eb2a:	6812      	ldr	r2, [r2, #0]
 800eb2c:	9103      	str	r1, [sp, #12]
 800eb2e:	2a00      	cmp	r2, #0
 800eb30:	db01      	blt.n	800eb36 <_vfiprintf_r+0x11e>
 800eb32:	9207      	str	r2, [sp, #28]
 800eb34:	e004      	b.n	800eb40 <_vfiprintf_r+0x128>
 800eb36:	4252      	negs	r2, r2
 800eb38:	f043 0302 	orr.w	r3, r3, #2
 800eb3c:	9207      	str	r2, [sp, #28]
 800eb3e:	9304      	str	r3, [sp, #16]
 800eb40:	f898 3000 	ldrb.w	r3, [r8]
 800eb44:	2b2e      	cmp	r3, #46	; 0x2e
 800eb46:	d10e      	bne.n	800eb66 <_vfiprintf_r+0x14e>
 800eb48:	f898 3001 	ldrb.w	r3, [r8, #1]
 800eb4c:	2b2a      	cmp	r3, #42	; 0x2a
 800eb4e:	d138      	bne.n	800ebc2 <_vfiprintf_r+0x1aa>
 800eb50:	9b03      	ldr	r3, [sp, #12]
 800eb52:	1d1a      	adds	r2, r3, #4
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	9203      	str	r2, [sp, #12]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	bfb8      	it	lt
 800eb5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb60:	f108 0802 	add.w	r8, r8, #2
 800eb64:	9305      	str	r3, [sp, #20]
 800eb66:	4d33      	ldr	r5, [pc, #204]	; (800ec34 <_vfiprintf_r+0x21c>)
 800eb68:	f898 1000 	ldrb.w	r1, [r8]
 800eb6c:	2203      	movs	r2, #3
 800eb6e:	4628      	mov	r0, r5
 800eb70:	f7f1 fb4e 	bl	8000210 <memchr>
 800eb74:	b140      	cbz	r0, 800eb88 <_vfiprintf_r+0x170>
 800eb76:	2340      	movs	r3, #64	; 0x40
 800eb78:	1b40      	subs	r0, r0, r5
 800eb7a:	fa03 f000 	lsl.w	r0, r3, r0
 800eb7e:	9b04      	ldr	r3, [sp, #16]
 800eb80:	4303      	orrs	r3, r0
 800eb82:	f108 0801 	add.w	r8, r8, #1
 800eb86:	9304      	str	r3, [sp, #16]
 800eb88:	f898 1000 	ldrb.w	r1, [r8]
 800eb8c:	482a      	ldr	r0, [pc, #168]	; (800ec38 <_vfiprintf_r+0x220>)
 800eb8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb92:	2206      	movs	r2, #6
 800eb94:	f108 0701 	add.w	r7, r8, #1
 800eb98:	f7f1 fb3a 	bl	8000210 <memchr>
 800eb9c:	2800      	cmp	r0, #0
 800eb9e:	d037      	beq.n	800ec10 <_vfiprintf_r+0x1f8>
 800eba0:	4b26      	ldr	r3, [pc, #152]	; (800ec3c <_vfiprintf_r+0x224>)
 800eba2:	bb1b      	cbnz	r3, 800ebec <_vfiprintf_r+0x1d4>
 800eba4:	9b03      	ldr	r3, [sp, #12]
 800eba6:	3307      	adds	r3, #7
 800eba8:	f023 0307 	bic.w	r3, r3, #7
 800ebac:	3308      	adds	r3, #8
 800ebae:	9303      	str	r3, [sp, #12]
 800ebb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebb2:	444b      	add	r3, r9
 800ebb4:	9309      	str	r3, [sp, #36]	; 0x24
 800ebb6:	e750      	b.n	800ea5a <_vfiprintf_r+0x42>
 800ebb8:	fb05 3202 	mla	r2, r5, r2, r3
 800ebbc:	2001      	movs	r0, #1
 800ebbe:	4688      	mov	r8, r1
 800ebc0:	e78a      	b.n	800ead8 <_vfiprintf_r+0xc0>
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	f108 0801 	add.w	r8, r8, #1
 800ebc8:	9305      	str	r3, [sp, #20]
 800ebca:	4619      	mov	r1, r3
 800ebcc:	250a      	movs	r5, #10
 800ebce:	4640      	mov	r0, r8
 800ebd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebd4:	3a30      	subs	r2, #48	; 0x30
 800ebd6:	2a09      	cmp	r2, #9
 800ebd8:	d903      	bls.n	800ebe2 <_vfiprintf_r+0x1ca>
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d0c3      	beq.n	800eb66 <_vfiprintf_r+0x14e>
 800ebde:	9105      	str	r1, [sp, #20]
 800ebe0:	e7c1      	b.n	800eb66 <_vfiprintf_r+0x14e>
 800ebe2:	fb05 2101 	mla	r1, r5, r1, r2
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	4680      	mov	r8, r0
 800ebea:	e7f0      	b.n	800ebce <_vfiprintf_r+0x1b6>
 800ebec:	ab03      	add	r3, sp, #12
 800ebee:	9300      	str	r3, [sp, #0]
 800ebf0:	4622      	mov	r2, r4
 800ebf2:	4b13      	ldr	r3, [pc, #76]	; (800ec40 <_vfiprintf_r+0x228>)
 800ebf4:	a904      	add	r1, sp, #16
 800ebf6:	4630      	mov	r0, r6
 800ebf8:	f3af 8000 	nop.w
 800ebfc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ec00:	4681      	mov	r9, r0
 800ec02:	d1d5      	bne.n	800ebb0 <_vfiprintf_r+0x198>
 800ec04:	89a3      	ldrh	r3, [r4, #12]
 800ec06:	065b      	lsls	r3, r3, #25
 800ec08:	f53f af7e 	bmi.w	800eb08 <_vfiprintf_r+0xf0>
 800ec0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec0e:	e77d      	b.n	800eb0c <_vfiprintf_r+0xf4>
 800ec10:	ab03      	add	r3, sp, #12
 800ec12:	9300      	str	r3, [sp, #0]
 800ec14:	4622      	mov	r2, r4
 800ec16:	4b0a      	ldr	r3, [pc, #40]	; (800ec40 <_vfiprintf_r+0x228>)
 800ec18:	a904      	add	r1, sp, #16
 800ec1a:	4630      	mov	r0, r6
 800ec1c:	f000 f888 	bl	800ed30 <_printf_i>
 800ec20:	e7ec      	b.n	800ebfc <_vfiprintf_r+0x1e4>
 800ec22:	bf00      	nop
 800ec24:	08011f94 	.word	0x08011f94
 800ec28:	08011fd4 	.word	0x08011fd4
 800ec2c:	08011fb4 	.word	0x08011fb4
 800ec30:	08011f74 	.word	0x08011f74
 800ec34:	08011fda 	.word	0x08011fda
 800ec38:	08011fde 	.word	0x08011fde
 800ec3c:	00000000 	.word	0x00000000
 800ec40:	0800e9f3 	.word	0x0800e9f3

0800ec44 <_printf_common>:
 800ec44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec48:	4691      	mov	r9, r2
 800ec4a:	461f      	mov	r7, r3
 800ec4c:	688a      	ldr	r2, [r1, #8]
 800ec4e:	690b      	ldr	r3, [r1, #16]
 800ec50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec54:	4293      	cmp	r3, r2
 800ec56:	bfb8      	it	lt
 800ec58:	4613      	movlt	r3, r2
 800ec5a:	f8c9 3000 	str.w	r3, [r9]
 800ec5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec62:	4606      	mov	r6, r0
 800ec64:	460c      	mov	r4, r1
 800ec66:	b112      	cbz	r2, 800ec6e <_printf_common+0x2a>
 800ec68:	3301      	adds	r3, #1
 800ec6a:	f8c9 3000 	str.w	r3, [r9]
 800ec6e:	6823      	ldr	r3, [r4, #0]
 800ec70:	0699      	lsls	r1, r3, #26
 800ec72:	bf42      	ittt	mi
 800ec74:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ec78:	3302      	addmi	r3, #2
 800ec7a:	f8c9 3000 	strmi.w	r3, [r9]
 800ec7e:	6825      	ldr	r5, [r4, #0]
 800ec80:	f015 0506 	ands.w	r5, r5, #6
 800ec84:	d107      	bne.n	800ec96 <_printf_common+0x52>
 800ec86:	f104 0a19 	add.w	sl, r4, #25
 800ec8a:	68e3      	ldr	r3, [r4, #12]
 800ec8c:	f8d9 2000 	ldr.w	r2, [r9]
 800ec90:	1a9b      	subs	r3, r3, r2
 800ec92:	42ab      	cmp	r3, r5
 800ec94:	dc28      	bgt.n	800ece8 <_printf_common+0xa4>
 800ec96:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ec9a:	6822      	ldr	r2, [r4, #0]
 800ec9c:	3300      	adds	r3, #0
 800ec9e:	bf18      	it	ne
 800eca0:	2301      	movne	r3, #1
 800eca2:	0692      	lsls	r2, r2, #26
 800eca4:	d42d      	bmi.n	800ed02 <_printf_common+0xbe>
 800eca6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecaa:	4639      	mov	r1, r7
 800ecac:	4630      	mov	r0, r6
 800ecae:	47c0      	blx	r8
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	d020      	beq.n	800ecf6 <_printf_common+0xb2>
 800ecb4:	6823      	ldr	r3, [r4, #0]
 800ecb6:	68e5      	ldr	r5, [r4, #12]
 800ecb8:	f8d9 2000 	ldr.w	r2, [r9]
 800ecbc:	f003 0306 	and.w	r3, r3, #6
 800ecc0:	2b04      	cmp	r3, #4
 800ecc2:	bf08      	it	eq
 800ecc4:	1aad      	subeq	r5, r5, r2
 800ecc6:	68a3      	ldr	r3, [r4, #8]
 800ecc8:	6922      	ldr	r2, [r4, #16]
 800ecca:	bf0c      	ite	eq
 800eccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ecd0:	2500      	movne	r5, #0
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	bfc4      	itt	gt
 800ecd6:	1a9b      	subgt	r3, r3, r2
 800ecd8:	18ed      	addgt	r5, r5, r3
 800ecda:	f04f 0900 	mov.w	r9, #0
 800ecde:	341a      	adds	r4, #26
 800ece0:	454d      	cmp	r5, r9
 800ece2:	d11a      	bne.n	800ed1a <_printf_common+0xd6>
 800ece4:	2000      	movs	r0, #0
 800ece6:	e008      	b.n	800ecfa <_printf_common+0xb6>
 800ece8:	2301      	movs	r3, #1
 800ecea:	4652      	mov	r2, sl
 800ecec:	4639      	mov	r1, r7
 800ecee:	4630      	mov	r0, r6
 800ecf0:	47c0      	blx	r8
 800ecf2:	3001      	adds	r0, #1
 800ecf4:	d103      	bne.n	800ecfe <_printf_common+0xba>
 800ecf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ecfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecfe:	3501      	adds	r5, #1
 800ed00:	e7c3      	b.n	800ec8a <_printf_common+0x46>
 800ed02:	18e1      	adds	r1, r4, r3
 800ed04:	1c5a      	adds	r2, r3, #1
 800ed06:	2030      	movs	r0, #48	; 0x30
 800ed08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed0c:	4422      	add	r2, r4
 800ed0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed12:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed16:	3302      	adds	r3, #2
 800ed18:	e7c5      	b.n	800eca6 <_printf_common+0x62>
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	4622      	mov	r2, r4
 800ed1e:	4639      	mov	r1, r7
 800ed20:	4630      	mov	r0, r6
 800ed22:	47c0      	blx	r8
 800ed24:	3001      	adds	r0, #1
 800ed26:	d0e6      	beq.n	800ecf6 <_printf_common+0xb2>
 800ed28:	f109 0901 	add.w	r9, r9, #1
 800ed2c:	e7d8      	b.n	800ece0 <_printf_common+0x9c>
	...

0800ed30 <_printf_i>:
 800ed30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed34:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ed38:	460c      	mov	r4, r1
 800ed3a:	7e09      	ldrb	r1, [r1, #24]
 800ed3c:	b085      	sub	sp, #20
 800ed3e:	296e      	cmp	r1, #110	; 0x6e
 800ed40:	4617      	mov	r7, r2
 800ed42:	4606      	mov	r6, r0
 800ed44:	4698      	mov	r8, r3
 800ed46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed48:	f000 80b3 	beq.w	800eeb2 <_printf_i+0x182>
 800ed4c:	d822      	bhi.n	800ed94 <_printf_i+0x64>
 800ed4e:	2963      	cmp	r1, #99	; 0x63
 800ed50:	d036      	beq.n	800edc0 <_printf_i+0x90>
 800ed52:	d80a      	bhi.n	800ed6a <_printf_i+0x3a>
 800ed54:	2900      	cmp	r1, #0
 800ed56:	f000 80b9 	beq.w	800eecc <_printf_i+0x19c>
 800ed5a:	2958      	cmp	r1, #88	; 0x58
 800ed5c:	f000 8083 	beq.w	800ee66 <_printf_i+0x136>
 800ed60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ed68:	e032      	b.n	800edd0 <_printf_i+0xa0>
 800ed6a:	2964      	cmp	r1, #100	; 0x64
 800ed6c:	d001      	beq.n	800ed72 <_printf_i+0x42>
 800ed6e:	2969      	cmp	r1, #105	; 0x69
 800ed70:	d1f6      	bne.n	800ed60 <_printf_i+0x30>
 800ed72:	6820      	ldr	r0, [r4, #0]
 800ed74:	6813      	ldr	r3, [r2, #0]
 800ed76:	0605      	lsls	r5, r0, #24
 800ed78:	f103 0104 	add.w	r1, r3, #4
 800ed7c:	d52a      	bpl.n	800edd4 <_printf_i+0xa4>
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	6011      	str	r1, [r2, #0]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	da03      	bge.n	800ed8e <_printf_i+0x5e>
 800ed86:	222d      	movs	r2, #45	; 0x2d
 800ed88:	425b      	negs	r3, r3
 800ed8a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ed8e:	486f      	ldr	r0, [pc, #444]	; (800ef4c <_printf_i+0x21c>)
 800ed90:	220a      	movs	r2, #10
 800ed92:	e039      	b.n	800ee08 <_printf_i+0xd8>
 800ed94:	2973      	cmp	r1, #115	; 0x73
 800ed96:	f000 809d 	beq.w	800eed4 <_printf_i+0x1a4>
 800ed9a:	d808      	bhi.n	800edae <_printf_i+0x7e>
 800ed9c:	296f      	cmp	r1, #111	; 0x6f
 800ed9e:	d020      	beq.n	800ede2 <_printf_i+0xb2>
 800eda0:	2970      	cmp	r1, #112	; 0x70
 800eda2:	d1dd      	bne.n	800ed60 <_printf_i+0x30>
 800eda4:	6823      	ldr	r3, [r4, #0]
 800eda6:	f043 0320 	orr.w	r3, r3, #32
 800edaa:	6023      	str	r3, [r4, #0]
 800edac:	e003      	b.n	800edb6 <_printf_i+0x86>
 800edae:	2975      	cmp	r1, #117	; 0x75
 800edb0:	d017      	beq.n	800ede2 <_printf_i+0xb2>
 800edb2:	2978      	cmp	r1, #120	; 0x78
 800edb4:	d1d4      	bne.n	800ed60 <_printf_i+0x30>
 800edb6:	2378      	movs	r3, #120	; 0x78
 800edb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800edbc:	4864      	ldr	r0, [pc, #400]	; (800ef50 <_printf_i+0x220>)
 800edbe:	e055      	b.n	800ee6c <_printf_i+0x13c>
 800edc0:	6813      	ldr	r3, [r2, #0]
 800edc2:	1d19      	adds	r1, r3, #4
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	6011      	str	r1, [r2, #0]
 800edc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800edd0:	2301      	movs	r3, #1
 800edd2:	e08c      	b.n	800eeee <_printf_i+0x1be>
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	6011      	str	r1, [r2, #0]
 800edd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800eddc:	bf18      	it	ne
 800edde:	b21b      	sxthne	r3, r3
 800ede0:	e7cf      	b.n	800ed82 <_printf_i+0x52>
 800ede2:	6813      	ldr	r3, [r2, #0]
 800ede4:	6825      	ldr	r5, [r4, #0]
 800ede6:	1d18      	adds	r0, r3, #4
 800ede8:	6010      	str	r0, [r2, #0]
 800edea:	0628      	lsls	r0, r5, #24
 800edec:	d501      	bpl.n	800edf2 <_printf_i+0xc2>
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	e002      	b.n	800edf8 <_printf_i+0xc8>
 800edf2:	0668      	lsls	r0, r5, #25
 800edf4:	d5fb      	bpl.n	800edee <_printf_i+0xbe>
 800edf6:	881b      	ldrh	r3, [r3, #0]
 800edf8:	4854      	ldr	r0, [pc, #336]	; (800ef4c <_printf_i+0x21c>)
 800edfa:	296f      	cmp	r1, #111	; 0x6f
 800edfc:	bf14      	ite	ne
 800edfe:	220a      	movne	r2, #10
 800ee00:	2208      	moveq	r2, #8
 800ee02:	2100      	movs	r1, #0
 800ee04:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee08:	6865      	ldr	r5, [r4, #4]
 800ee0a:	60a5      	str	r5, [r4, #8]
 800ee0c:	2d00      	cmp	r5, #0
 800ee0e:	f2c0 8095 	blt.w	800ef3c <_printf_i+0x20c>
 800ee12:	6821      	ldr	r1, [r4, #0]
 800ee14:	f021 0104 	bic.w	r1, r1, #4
 800ee18:	6021      	str	r1, [r4, #0]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d13d      	bne.n	800ee9a <_printf_i+0x16a>
 800ee1e:	2d00      	cmp	r5, #0
 800ee20:	f040 808e 	bne.w	800ef40 <_printf_i+0x210>
 800ee24:	4665      	mov	r5, ip
 800ee26:	2a08      	cmp	r2, #8
 800ee28:	d10b      	bne.n	800ee42 <_printf_i+0x112>
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	07db      	lsls	r3, r3, #31
 800ee2e:	d508      	bpl.n	800ee42 <_printf_i+0x112>
 800ee30:	6923      	ldr	r3, [r4, #16]
 800ee32:	6862      	ldr	r2, [r4, #4]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	bfde      	ittt	le
 800ee38:	2330      	movle	r3, #48	; 0x30
 800ee3a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ee3e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ee42:	ebac 0305 	sub.w	r3, ip, r5
 800ee46:	6123      	str	r3, [r4, #16]
 800ee48:	f8cd 8000 	str.w	r8, [sp]
 800ee4c:	463b      	mov	r3, r7
 800ee4e:	aa03      	add	r2, sp, #12
 800ee50:	4621      	mov	r1, r4
 800ee52:	4630      	mov	r0, r6
 800ee54:	f7ff fef6 	bl	800ec44 <_printf_common>
 800ee58:	3001      	adds	r0, #1
 800ee5a:	d14d      	bne.n	800eef8 <_printf_i+0x1c8>
 800ee5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee60:	b005      	add	sp, #20
 800ee62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee66:	4839      	ldr	r0, [pc, #228]	; (800ef4c <_printf_i+0x21c>)
 800ee68:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ee6c:	6813      	ldr	r3, [r2, #0]
 800ee6e:	6821      	ldr	r1, [r4, #0]
 800ee70:	1d1d      	adds	r5, r3, #4
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	6015      	str	r5, [r2, #0]
 800ee76:	060a      	lsls	r2, r1, #24
 800ee78:	d50b      	bpl.n	800ee92 <_printf_i+0x162>
 800ee7a:	07ca      	lsls	r2, r1, #31
 800ee7c:	bf44      	itt	mi
 800ee7e:	f041 0120 	orrmi.w	r1, r1, #32
 800ee82:	6021      	strmi	r1, [r4, #0]
 800ee84:	b91b      	cbnz	r3, 800ee8e <_printf_i+0x15e>
 800ee86:	6822      	ldr	r2, [r4, #0]
 800ee88:	f022 0220 	bic.w	r2, r2, #32
 800ee8c:	6022      	str	r2, [r4, #0]
 800ee8e:	2210      	movs	r2, #16
 800ee90:	e7b7      	b.n	800ee02 <_printf_i+0xd2>
 800ee92:	064d      	lsls	r5, r1, #25
 800ee94:	bf48      	it	mi
 800ee96:	b29b      	uxthmi	r3, r3
 800ee98:	e7ef      	b.n	800ee7a <_printf_i+0x14a>
 800ee9a:	4665      	mov	r5, ip
 800ee9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800eea0:	fb02 3311 	mls	r3, r2, r1, r3
 800eea4:	5cc3      	ldrb	r3, [r0, r3]
 800eea6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800eeaa:	460b      	mov	r3, r1
 800eeac:	2900      	cmp	r1, #0
 800eeae:	d1f5      	bne.n	800ee9c <_printf_i+0x16c>
 800eeb0:	e7b9      	b.n	800ee26 <_printf_i+0xf6>
 800eeb2:	6813      	ldr	r3, [r2, #0]
 800eeb4:	6825      	ldr	r5, [r4, #0]
 800eeb6:	6961      	ldr	r1, [r4, #20]
 800eeb8:	1d18      	adds	r0, r3, #4
 800eeba:	6010      	str	r0, [r2, #0]
 800eebc:	0628      	lsls	r0, r5, #24
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	d501      	bpl.n	800eec6 <_printf_i+0x196>
 800eec2:	6019      	str	r1, [r3, #0]
 800eec4:	e002      	b.n	800eecc <_printf_i+0x19c>
 800eec6:	066a      	lsls	r2, r5, #25
 800eec8:	d5fb      	bpl.n	800eec2 <_printf_i+0x192>
 800eeca:	8019      	strh	r1, [r3, #0]
 800eecc:	2300      	movs	r3, #0
 800eece:	6123      	str	r3, [r4, #16]
 800eed0:	4665      	mov	r5, ip
 800eed2:	e7b9      	b.n	800ee48 <_printf_i+0x118>
 800eed4:	6813      	ldr	r3, [r2, #0]
 800eed6:	1d19      	adds	r1, r3, #4
 800eed8:	6011      	str	r1, [r2, #0]
 800eeda:	681d      	ldr	r5, [r3, #0]
 800eedc:	6862      	ldr	r2, [r4, #4]
 800eede:	2100      	movs	r1, #0
 800eee0:	4628      	mov	r0, r5
 800eee2:	f7f1 f995 	bl	8000210 <memchr>
 800eee6:	b108      	cbz	r0, 800eeec <_printf_i+0x1bc>
 800eee8:	1b40      	subs	r0, r0, r5
 800eeea:	6060      	str	r0, [r4, #4]
 800eeec:	6863      	ldr	r3, [r4, #4]
 800eeee:	6123      	str	r3, [r4, #16]
 800eef0:	2300      	movs	r3, #0
 800eef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eef6:	e7a7      	b.n	800ee48 <_printf_i+0x118>
 800eef8:	6923      	ldr	r3, [r4, #16]
 800eefa:	462a      	mov	r2, r5
 800eefc:	4639      	mov	r1, r7
 800eefe:	4630      	mov	r0, r6
 800ef00:	47c0      	blx	r8
 800ef02:	3001      	adds	r0, #1
 800ef04:	d0aa      	beq.n	800ee5c <_printf_i+0x12c>
 800ef06:	6823      	ldr	r3, [r4, #0]
 800ef08:	079b      	lsls	r3, r3, #30
 800ef0a:	d413      	bmi.n	800ef34 <_printf_i+0x204>
 800ef0c:	68e0      	ldr	r0, [r4, #12]
 800ef0e:	9b03      	ldr	r3, [sp, #12]
 800ef10:	4298      	cmp	r0, r3
 800ef12:	bfb8      	it	lt
 800ef14:	4618      	movlt	r0, r3
 800ef16:	e7a3      	b.n	800ee60 <_printf_i+0x130>
 800ef18:	2301      	movs	r3, #1
 800ef1a:	464a      	mov	r2, r9
 800ef1c:	4639      	mov	r1, r7
 800ef1e:	4630      	mov	r0, r6
 800ef20:	47c0      	blx	r8
 800ef22:	3001      	adds	r0, #1
 800ef24:	d09a      	beq.n	800ee5c <_printf_i+0x12c>
 800ef26:	3501      	adds	r5, #1
 800ef28:	68e3      	ldr	r3, [r4, #12]
 800ef2a:	9a03      	ldr	r2, [sp, #12]
 800ef2c:	1a9b      	subs	r3, r3, r2
 800ef2e:	42ab      	cmp	r3, r5
 800ef30:	dcf2      	bgt.n	800ef18 <_printf_i+0x1e8>
 800ef32:	e7eb      	b.n	800ef0c <_printf_i+0x1dc>
 800ef34:	2500      	movs	r5, #0
 800ef36:	f104 0919 	add.w	r9, r4, #25
 800ef3a:	e7f5      	b.n	800ef28 <_printf_i+0x1f8>
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d1ac      	bne.n	800ee9a <_printf_i+0x16a>
 800ef40:	7803      	ldrb	r3, [r0, #0]
 800ef42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef46:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef4a:	e76c      	b.n	800ee26 <_printf_i+0xf6>
 800ef4c:	08011fe5 	.word	0x08011fe5
 800ef50:	08011ff6 	.word	0x08011ff6

0800ef54 <_sbrk_r>:
 800ef54:	b538      	push	{r3, r4, r5, lr}
 800ef56:	4c06      	ldr	r4, [pc, #24]	; (800ef70 <_sbrk_r+0x1c>)
 800ef58:	2300      	movs	r3, #0
 800ef5a:	4605      	mov	r5, r0
 800ef5c:	4608      	mov	r0, r1
 800ef5e:	6023      	str	r3, [r4, #0]
 800ef60:	f7f1 fefe 	bl	8000d60 <_sbrk>
 800ef64:	1c43      	adds	r3, r0, #1
 800ef66:	d102      	bne.n	800ef6e <_sbrk_r+0x1a>
 800ef68:	6823      	ldr	r3, [r4, #0]
 800ef6a:	b103      	cbz	r3, 800ef6e <_sbrk_r+0x1a>
 800ef6c:	602b      	str	r3, [r5, #0]
 800ef6e:	bd38      	pop	{r3, r4, r5, pc}
 800ef70:	2000694c 	.word	0x2000694c

0800ef74 <__sread>:
 800ef74:	b510      	push	{r4, lr}
 800ef76:	460c      	mov	r4, r1
 800ef78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef7c:	f000 fa48 	bl	800f410 <_read_r>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	bfab      	itete	ge
 800ef84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef86:	89a3      	ldrhlt	r3, [r4, #12]
 800ef88:	181b      	addge	r3, r3, r0
 800ef8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef8e:	bfac      	ite	ge
 800ef90:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef92:	81a3      	strhlt	r3, [r4, #12]
 800ef94:	bd10      	pop	{r4, pc}

0800ef96 <__swrite>:
 800ef96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef9a:	461f      	mov	r7, r3
 800ef9c:	898b      	ldrh	r3, [r1, #12]
 800ef9e:	05db      	lsls	r3, r3, #23
 800efa0:	4605      	mov	r5, r0
 800efa2:	460c      	mov	r4, r1
 800efa4:	4616      	mov	r6, r2
 800efa6:	d505      	bpl.n	800efb4 <__swrite+0x1e>
 800efa8:	2302      	movs	r3, #2
 800efaa:	2200      	movs	r2, #0
 800efac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efb0:	f000 f9b6 	bl	800f320 <_lseek_r>
 800efb4:	89a3      	ldrh	r3, [r4, #12]
 800efb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efbe:	81a3      	strh	r3, [r4, #12]
 800efc0:	4632      	mov	r2, r6
 800efc2:	463b      	mov	r3, r7
 800efc4:	4628      	mov	r0, r5
 800efc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efca:	f000 b869 	b.w	800f0a0 <_write_r>

0800efce <__sseek>:
 800efce:	b510      	push	{r4, lr}
 800efd0:	460c      	mov	r4, r1
 800efd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efd6:	f000 f9a3 	bl	800f320 <_lseek_r>
 800efda:	1c43      	adds	r3, r0, #1
 800efdc:	89a3      	ldrh	r3, [r4, #12]
 800efde:	bf15      	itete	ne
 800efe0:	6560      	strne	r0, [r4, #84]	; 0x54
 800efe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800efe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800efea:	81a3      	strheq	r3, [r4, #12]
 800efec:	bf18      	it	ne
 800efee:	81a3      	strhne	r3, [r4, #12]
 800eff0:	bd10      	pop	{r4, pc}

0800eff2 <__sclose>:
 800eff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eff6:	f000 b8d3 	b.w	800f1a0 <_close_r>
	...

0800effc <__swbuf_r>:
 800effc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800effe:	460e      	mov	r6, r1
 800f000:	4614      	mov	r4, r2
 800f002:	4605      	mov	r5, r0
 800f004:	b118      	cbz	r0, 800f00e <__swbuf_r+0x12>
 800f006:	6983      	ldr	r3, [r0, #24]
 800f008:	b90b      	cbnz	r3, 800f00e <__swbuf_r+0x12>
 800f00a:	f7ff fba1 	bl	800e750 <__sinit>
 800f00e:	4b21      	ldr	r3, [pc, #132]	; (800f094 <__swbuf_r+0x98>)
 800f010:	429c      	cmp	r4, r3
 800f012:	d12a      	bne.n	800f06a <__swbuf_r+0x6e>
 800f014:	686c      	ldr	r4, [r5, #4]
 800f016:	69a3      	ldr	r3, [r4, #24]
 800f018:	60a3      	str	r3, [r4, #8]
 800f01a:	89a3      	ldrh	r3, [r4, #12]
 800f01c:	071a      	lsls	r2, r3, #28
 800f01e:	d52e      	bpl.n	800f07e <__swbuf_r+0x82>
 800f020:	6923      	ldr	r3, [r4, #16]
 800f022:	b363      	cbz	r3, 800f07e <__swbuf_r+0x82>
 800f024:	6923      	ldr	r3, [r4, #16]
 800f026:	6820      	ldr	r0, [r4, #0]
 800f028:	1ac0      	subs	r0, r0, r3
 800f02a:	6963      	ldr	r3, [r4, #20]
 800f02c:	b2f6      	uxtb	r6, r6
 800f02e:	4283      	cmp	r3, r0
 800f030:	4637      	mov	r7, r6
 800f032:	dc04      	bgt.n	800f03e <__swbuf_r+0x42>
 800f034:	4621      	mov	r1, r4
 800f036:	4628      	mov	r0, r5
 800f038:	f000 f948 	bl	800f2cc <_fflush_r>
 800f03c:	bb28      	cbnz	r0, 800f08a <__swbuf_r+0x8e>
 800f03e:	68a3      	ldr	r3, [r4, #8]
 800f040:	3b01      	subs	r3, #1
 800f042:	60a3      	str	r3, [r4, #8]
 800f044:	6823      	ldr	r3, [r4, #0]
 800f046:	1c5a      	adds	r2, r3, #1
 800f048:	6022      	str	r2, [r4, #0]
 800f04a:	701e      	strb	r6, [r3, #0]
 800f04c:	6963      	ldr	r3, [r4, #20]
 800f04e:	3001      	adds	r0, #1
 800f050:	4283      	cmp	r3, r0
 800f052:	d004      	beq.n	800f05e <__swbuf_r+0x62>
 800f054:	89a3      	ldrh	r3, [r4, #12]
 800f056:	07db      	lsls	r3, r3, #31
 800f058:	d519      	bpl.n	800f08e <__swbuf_r+0x92>
 800f05a:	2e0a      	cmp	r6, #10
 800f05c:	d117      	bne.n	800f08e <__swbuf_r+0x92>
 800f05e:	4621      	mov	r1, r4
 800f060:	4628      	mov	r0, r5
 800f062:	f000 f933 	bl	800f2cc <_fflush_r>
 800f066:	b190      	cbz	r0, 800f08e <__swbuf_r+0x92>
 800f068:	e00f      	b.n	800f08a <__swbuf_r+0x8e>
 800f06a:	4b0b      	ldr	r3, [pc, #44]	; (800f098 <__swbuf_r+0x9c>)
 800f06c:	429c      	cmp	r4, r3
 800f06e:	d101      	bne.n	800f074 <__swbuf_r+0x78>
 800f070:	68ac      	ldr	r4, [r5, #8]
 800f072:	e7d0      	b.n	800f016 <__swbuf_r+0x1a>
 800f074:	4b09      	ldr	r3, [pc, #36]	; (800f09c <__swbuf_r+0xa0>)
 800f076:	429c      	cmp	r4, r3
 800f078:	bf08      	it	eq
 800f07a:	68ec      	ldreq	r4, [r5, #12]
 800f07c:	e7cb      	b.n	800f016 <__swbuf_r+0x1a>
 800f07e:	4621      	mov	r1, r4
 800f080:	4628      	mov	r0, r5
 800f082:	f000 f81f 	bl	800f0c4 <__swsetup_r>
 800f086:	2800      	cmp	r0, #0
 800f088:	d0cc      	beq.n	800f024 <__swbuf_r+0x28>
 800f08a:	f04f 37ff 	mov.w	r7, #4294967295
 800f08e:	4638      	mov	r0, r7
 800f090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f092:	bf00      	nop
 800f094:	08011f94 	.word	0x08011f94
 800f098:	08011fb4 	.word	0x08011fb4
 800f09c:	08011f74 	.word	0x08011f74

0800f0a0 <_write_r>:
 800f0a0:	b538      	push	{r3, r4, r5, lr}
 800f0a2:	4c07      	ldr	r4, [pc, #28]	; (800f0c0 <_write_r+0x20>)
 800f0a4:	4605      	mov	r5, r0
 800f0a6:	4608      	mov	r0, r1
 800f0a8:	4611      	mov	r1, r2
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	6022      	str	r2, [r4, #0]
 800f0ae:	461a      	mov	r2, r3
 800f0b0:	f7f1 fe05 	bl	8000cbe <_write>
 800f0b4:	1c43      	adds	r3, r0, #1
 800f0b6:	d102      	bne.n	800f0be <_write_r+0x1e>
 800f0b8:	6823      	ldr	r3, [r4, #0]
 800f0ba:	b103      	cbz	r3, 800f0be <_write_r+0x1e>
 800f0bc:	602b      	str	r3, [r5, #0]
 800f0be:	bd38      	pop	{r3, r4, r5, pc}
 800f0c0:	2000694c 	.word	0x2000694c

0800f0c4 <__swsetup_r>:
 800f0c4:	4b32      	ldr	r3, [pc, #200]	; (800f190 <__swsetup_r+0xcc>)
 800f0c6:	b570      	push	{r4, r5, r6, lr}
 800f0c8:	681d      	ldr	r5, [r3, #0]
 800f0ca:	4606      	mov	r6, r0
 800f0cc:	460c      	mov	r4, r1
 800f0ce:	b125      	cbz	r5, 800f0da <__swsetup_r+0x16>
 800f0d0:	69ab      	ldr	r3, [r5, #24]
 800f0d2:	b913      	cbnz	r3, 800f0da <__swsetup_r+0x16>
 800f0d4:	4628      	mov	r0, r5
 800f0d6:	f7ff fb3b 	bl	800e750 <__sinit>
 800f0da:	4b2e      	ldr	r3, [pc, #184]	; (800f194 <__swsetup_r+0xd0>)
 800f0dc:	429c      	cmp	r4, r3
 800f0de:	d10f      	bne.n	800f100 <__swsetup_r+0x3c>
 800f0e0:	686c      	ldr	r4, [r5, #4]
 800f0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0e6:	b29a      	uxth	r2, r3
 800f0e8:	0715      	lsls	r5, r2, #28
 800f0ea:	d42c      	bmi.n	800f146 <__swsetup_r+0x82>
 800f0ec:	06d0      	lsls	r0, r2, #27
 800f0ee:	d411      	bmi.n	800f114 <__swsetup_r+0x50>
 800f0f0:	2209      	movs	r2, #9
 800f0f2:	6032      	str	r2, [r6, #0]
 800f0f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0f8:	81a3      	strh	r3, [r4, #12]
 800f0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f0fe:	e03e      	b.n	800f17e <__swsetup_r+0xba>
 800f100:	4b25      	ldr	r3, [pc, #148]	; (800f198 <__swsetup_r+0xd4>)
 800f102:	429c      	cmp	r4, r3
 800f104:	d101      	bne.n	800f10a <__swsetup_r+0x46>
 800f106:	68ac      	ldr	r4, [r5, #8]
 800f108:	e7eb      	b.n	800f0e2 <__swsetup_r+0x1e>
 800f10a:	4b24      	ldr	r3, [pc, #144]	; (800f19c <__swsetup_r+0xd8>)
 800f10c:	429c      	cmp	r4, r3
 800f10e:	bf08      	it	eq
 800f110:	68ec      	ldreq	r4, [r5, #12]
 800f112:	e7e6      	b.n	800f0e2 <__swsetup_r+0x1e>
 800f114:	0751      	lsls	r1, r2, #29
 800f116:	d512      	bpl.n	800f13e <__swsetup_r+0x7a>
 800f118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f11a:	b141      	cbz	r1, 800f12e <__swsetup_r+0x6a>
 800f11c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f120:	4299      	cmp	r1, r3
 800f122:	d002      	beq.n	800f12a <__swsetup_r+0x66>
 800f124:	4630      	mov	r0, r6
 800f126:	f7ff fba5 	bl	800e874 <_free_r>
 800f12a:	2300      	movs	r3, #0
 800f12c:	6363      	str	r3, [r4, #52]	; 0x34
 800f12e:	89a3      	ldrh	r3, [r4, #12]
 800f130:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f134:	81a3      	strh	r3, [r4, #12]
 800f136:	2300      	movs	r3, #0
 800f138:	6063      	str	r3, [r4, #4]
 800f13a:	6923      	ldr	r3, [r4, #16]
 800f13c:	6023      	str	r3, [r4, #0]
 800f13e:	89a3      	ldrh	r3, [r4, #12]
 800f140:	f043 0308 	orr.w	r3, r3, #8
 800f144:	81a3      	strh	r3, [r4, #12]
 800f146:	6923      	ldr	r3, [r4, #16]
 800f148:	b94b      	cbnz	r3, 800f15e <__swsetup_r+0x9a>
 800f14a:	89a3      	ldrh	r3, [r4, #12]
 800f14c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f154:	d003      	beq.n	800f15e <__swsetup_r+0x9a>
 800f156:	4621      	mov	r1, r4
 800f158:	4630      	mov	r0, r6
 800f15a:	f000 f917 	bl	800f38c <__smakebuf_r>
 800f15e:	89a2      	ldrh	r2, [r4, #12]
 800f160:	f012 0301 	ands.w	r3, r2, #1
 800f164:	d00c      	beq.n	800f180 <__swsetup_r+0xbc>
 800f166:	2300      	movs	r3, #0
 800f168:	60a3      	str	r3, [r4, #8]
 800f16a:	6963      	ldr	r3, [r4, #20]
 800f16c:	425b      	negs	r3, r3
 800f16e:	61a3      	str	r3, [r4, #24]
 800f170:	6923      	ldr	r3, [r4, #16]
 800f172:	b953      	cbnz	r3, 800f18a <__swsetup_r+0xc6>
 800f174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f178:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f17c:	d1ba      	bne.n	800f0f4 <__swsetup_r+0x30>
 800f17e:	bd70      	pop	{r4, r5, r6, pc}
 800f180:	0792      	lsls	r2, r2, #30
 800f182:	bf58      	it	pl
 800f184:	6963      	ldrpl	r3, [r4, #20]
 800f186:	60a3      	str	r3, [r4, #8]
 800f188:	e7f2      	b.n	800f170 <__swsetup_r+0xac>
 800f18a:	2000      	movs	r0, #0
 800f18c:	e7f7      	b.n	800f17e <__swsetup_r+0xba>
 800f18e:	bf00      	nop
 800f190:	20000014 	.word	0x20000014
 800f194:	08011f94 	.word	0x08011f94
 800f198:	08011fb4 	.word	0x08011fb4
 800f19c:	08011f74 	.word	0x08011f74

0800f1a0 <_close_r>:
 800f1a0:	b538      	push	{r3, r4, r5, lr}
 800f1a2:	4c06      	ldr	r4, [pc, #24]	; (800f1bc <_close_r+0x1c>)
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	4605      	mov	r5, r0
 800f1a8:	4608      	mov	r0, r1
 800f1aa:	6023      	str	r3, [r4, #0]
 800f1ac:	f7f1 fda3 	bl	8000cf6 <_close>
 800f1b0:	1c43      	adds	r3, r0, #1
 800f1b2:	d102      	bne.n	800f1ba <_close_r+0x1a>
 800f1b4:	6823      	ldr	r3, [r4, #0]
 800f1b6:	b103      	cbz	r3, 800f1ba <_close_r+0x1a>
 800f1b8:	602b      	str	r3, [r5, #0]
 800f1ba:	bd38      	pop	{r3, r4, r5, pc}
 800f1bc:	2000694c 	.word	0x2000694c

0800f1c0 <__sflush_r>:
 800f1c0:	898a      	ldrh	r2, [r1, #12]
 800f1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c6:	4605      	mov	r5, r0
 800f1c8:	0710      	lsls	r0, r2, #28
 800f1ca:	460c      	mov	r4, r1
 800f1cc:	d458      	bmi.n	800f280 <__sflush_r+0xc0>
 800f1ce:	684b      	ldr	r3, [r1, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	dc05      	bgt.n	800f1e0 <__sflush_r+0x20>
 800f1d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	dc02      	bgt.n	800f1e0 <__sflush_r+0x20>
 800f1da:	2000      	movs	r0, #0
 800f1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1e2:	2e00      	cmp	r6, #0
 800f1e4:	d0f9      	beq.n	800f1da <__sflush_r+0x1a>
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1ec:	682f      	ldr	r7, [r5, #0]
 800f1ee:	6a21      	ldr	r1, [r4, #32]
 800f1f0:	602b      	str	r3, [r5, #0]
 800f1f2:	d032      	beq.n	800f25a <__sflush_r+0x9a>
 800f1f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1f6:	89a3      	ldrh	r3, [r4, #12]
 800f1f8:	075a      	lsls	r2, r3, #29
 800f1fa:	d505      	bpl.n	800f208 <__sflush_r+0x48>
 800f1fc:	6863      	ldr	r3, [r4, #4]
 800f1fe:	1ac0      	subs	r0, r0, r3
 800f200:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f202:	b10b      	cbz	r3, 800f208 <__sflush_r+0x48>
 800f204:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f206:	1ac0      	subs	r0, r0, r3
 800f208:	2300      	movs	r3, #0
 800f20a:	4602      	mov	r2, r0
 800f20c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f20e:	6a21      	ldr	r1, [r4, #32]
 800f210:	4628      	mov	r0, r5
 800f212:	47b0      	blx	r6
 800f214:	1c43      	adds	r3, r0, #1
 800f216:	89a3      	ldrh	r3, [r4, #12]
 800f218:	d106      	bne.n	800f228 <__sflush_r+0x68>
 800f21a:	6829      	ldr	r1, [r5, #0]
 800f21c:	291d      	cmp	r1, #29
 800f21e:	d848      	bhi.n	800f2b2 <__sflush_r+0xf2>
 800f220:	4a29      	ldr	r2, [pc, #164]	; (800f2c8 <__sflush_r+0x108>)
 800f222:	40ca      	lsrs	r2, r1
 800f224:	07d6      	lsls	r6, r2, #31
 800f226:	d544      	bpl.n	800f2b2 <__sflush_r+0xf2>
 800f228:	2200      	movs	r2, #0
 800f22a:	6062      	str	r2, [r4, #4]
 800f22c:	04d9      	lsls	r1, r3, #19
 800f22e:	6922      	ldr	r2, [r4, #16]
 800f230:	6022      	str	r2, [r4, #0]
 800f232:	d504      	bpl.n	800f23e <__sflush_r+0x7e>
 800f234:	1c42      	adds	r2, r0, #1
 800f236:	d101      	bne.n	800f23c <__sflush_r+0x7c>
 800f238:	682b      	ldr	r3, [r5, #0]
 800f23a:	b903      	cbnz	r3, 800f23e <__sflush_r+0x7e>
 800f23c:	6560      	str	r0, [r4, #84]	; 0x54
 800f23e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f240:	602f      	str	r7, [r5, #0]
 800f242:	2900      	cmp	r1, #0
 800f244:	d0c9      	beq.n	800f1da <__sflush_r+0x1a>
 800f246:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f24a:	4299      	cmp	r1, r3
 800f24c:	d002      	beq.n	800f254 <__sflush_r+0x94>
 800f24e:	4628      	mov	r0, r5
 800f250:	f7ff fb10 	bl	800e874 <_free_r>
 800f254:	2000      	movs	r0, #0
 800f256:	6360      	str	r0, [r4, #52]	; 0x34
 800f258:	e7c0      	b.n	800f1dc <__sflush_r+0x1c>
 800f25a:	2301      	movs	r3, #1
 800f25c:	4628      	mov	r0, r5
 800f25e:	47b0      	blx	r6
 800f260:	1c41      	adds	r1, r0, #1
 800f262:	d1c8      	bne.n	800f1f6 <__sflush_r+0x36>
 800f264:	682b      	ldr	r3, [r5, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d0c5      	beq.n	800f1f6 <__sflush_r+0x36>
 800f26a:	2b1d      	cmp	r3, #29
 800f26c:	d001      	beq.n	800f272 <__sflush_r+0xb2>
 800f26e:	2b16      	cmp	r3, #22
 800f270:	d101      	bne.n	800f276 <__sflush_r+0xb6>
 800f272:	602f      	str	r7, [r5, #0]
 800f274:	e7b1      	b.n	800f1da <__sflush_r+0x1a>
 800f276:	89a3      	ldrh	r3, [r4, #12]
 800f278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f27c:	81a3      	strh	r3, [r4, #12]
 800f27e:	e7ad      	b.n	800f1dc <__sflush_r+0x1c>
 800f280:	690f      	ldr	r7, [r1, #16]
 800f282:	2f00      	cmp	r7, #0
 800f284:	d0a9      	beq.n	800f1da <__sflush_r+0x1a>
 800f286:	0793      	lsls	r3, r2, #30
 800f288:	680e      	ldr	r6, [r1, #0]
 800f28a:	bf08      	it	eq
 800f28c:	694b      	ldreq	r3, [r1, #20]
 800f28e:	600f      	str	r7, [r1, #0]
 800f290:	bf18      	it	ne
 800f292:	2300      	movne	r3, #0
 800f294:	eba6 0807 	sub.w	r8, r6, r7
 800f298:	608b      	str	r3, [r1, #8]
 800f29a:	f1b8 0f00 	cmp.w	r8, #0
 800f29e:	dd9c      	ble.n	800f1da <__sflush_r+0x1a>
 800f2a0:	4643      	mov	r3, r8
 800f2a2:	463a      	mov	r2, r7
 800f2a4:	6a21      	ldr	r1, [r4, #32]
 800f2a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f2a8:	4628      	mov	r0, r5
 800f2aa:	47b0      	blx	r6
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	dc06      	bgt.n	800f2be <__sflush_r+0xfe>
 800f2b0:	89a3      	ldrh	r3, [r4, #12]
 800f2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2b6:	81a3      	strh	r3, [r4, #12]
 800f2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2bc:	e78e      	b.n	800f1dc <__sflush_r+0x1c>
 800f2be:	4407      	add	r7, r0
 800f2c0:	eba8 0800 	sub.w	r8, r8, r0
 800f2c4:	e7e9      	b.n	800f29a <__sflush_r+0xda>
 800f2c6:	bf00      	nop
 800f2c8:	20400001 	.word	0x20400001

0800f2cc <_fflush_r>:
 800f2cc:	b538      	push	{r3, r4, r5, lr}
 800f2ce:	690b      	ldr	r3, [r1, #16]
 800f2d0:	4605      	mov	r5, r0
 800f2d2:	460c      	mov	r4, r1
 800f2d4:	b1db      	cbz	r3, 800f30e <_fflush_r+0x42>
 800f2d6:	b118      	cbz	r0, 800f2e0 <_fflush_r+0x14>
 800f2d8:	6983      	ldr	r3, [r0, #24]
 800f2da:	b90b      	cbnz	r3, 800f2e0 <_fflush_r+0x14>
 800f2dc:	f7ff fa38 	bl	800e750 <__sinit>
 800f2e0:	4b0c      	ldr	r3, [pc, #48]	; (800f314 <_fflush_r+0x48>)
 800f2e2:	429c      	cmp	r4, r3
 800f2e4:	d109      	bne.n	800f2fa <_fflush_r+0x2e>
 800f2e6:	686c      	ldr	r4, [r5, #4]
 800f2e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2ec:	b17b      	cbz	r3, 800f30e <_fflush_r+0x42>
 800f2ee:	4621      	mov	r1, r4
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2f6:	f7ff bf63 	b.w	800f1c0 <__sflush_r>
 800f2fa:	4b07      	ldr	r3, [pc, #28]	; (800f318 <_fflush_r+0x4c>)
 800f2fc:	429c      	cmp	r4, r3
 800f2fe:	d101      	bne.n	800f304 <_fflush_r+0x38>
 800f300:	68ac      	ldr	r4, [r5, #8]
 800f302:	e7f1      	b.n	800f2e8 <_fflush_r+0x1c>
 800f304:	4b05      	ldr	r3, [pc, #20]	; (800f31c <_fflush_r+0x50>)
 800f306:	429c      	cmp	r4, r3
 800f308:	bf08      	it	eq
 800f30a:	68ec      	ldreq	r4, [r5, #12]
 800f30c:	e7ec      	b.n	800f2e8 <_fflush_r+0x1c>
 800f30e:	2000      	movs	r0, #0
 800f310:	bd38      	pop	{r3, r4, r5, pc}
 800f312:	bf00      	nop
 800f314:	08011f94 	.word	0x08011f94
 800f318:	08011fb4 	.word	0x08011fb4
 800f31c:	08011f74 	.word	0x08011f74

0800f320 <_lseek_r>:
 800f320:	b538      	push	{r3, r4, r5, lr}
 800f322:	4c07      	ldr	r4, [pc, #28]	; (800f340 <_lseek_r+0x20>)
 800f324:	4605      	mov	r5, r0
 800f326:	4608      	mov	r0, r1
 800f328:	4611      	mov	r1, r2
 800f32a:	2200      	movs	r2, #0
 800f32c:	6022      	str	r2, [r4, #0]
 800f32e:	461a      	mov	r2, r3
 800f330:	f7f1 fd08 	bl	8000d44 <_lseek>
 800f334:	1c43      	adds	r3, r0, #1
 800f336:	d102      	bne.n	800f33e <_lseek_r+0x1e>
 800f338:	6823      	ldr	r3, [r4, #0]
 800f33a:	b103      	cbz	r3, 800f33e <_lseek_r+0x1e>
 800f33c:	602b      	str	r3, [r5, #0]
 800f33e:	bd38      	pop	{r3, r4, r5, pc}
 800f340:	2000694c 	.word	0x2000694c

0800f344 <__swhatbuf_r>:
 800f344:	b570      	push	{r4, r5, r6, lr}
 800f346:	460e      	mov	r6, r1
 800f348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f34c:	2900      	cmp	r1, #0
 800f34e:	b096      	sub	sp, #88	; 0x58
 800f350:	4614      	mov	r4, r2
 800f352:	461d      	mov	r5, r3
 800f354:	da07      	bge.n	800f366 <__swhatbuf_r+0x22>
 800f356:	2300      	movs	r3, #0
 800f358:	602b      	str	r3, [r5, #0]
 800f35a:	89b3      	ldrh	r3, [r6, #12]
 800f35c:	061a      	lsls	r2, r3, #24
 800f35e:	d410      	bmi.n	800f382 <__swhatbuf_r+0x3e>
 800f360:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f364:	e00e      	b.n	800f384 <__swhatbuf_r+0x40>
 800f366:	466a      	mov	r2, sp
 800f368:	f000 f864 	bl	800f434 <_fstat_r>
 800f36c:	2800      	cmp	r0, #0
 800f36e:	dbf2      	blt.n	800f356 <__swhatbuf_r+0x12>
 800f370:	9a01      	ldr	r2, [sp, #4]
 800f372:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f376:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f37a:	425a      	negs	r2, r3
 800f37c:	415a      	adcs	r2, r3
 800f37e:	602a      	str	r2, [r5, #0]
 800f380:	e7ee      	b.n	800f360 <__swhatbuf_r+0x1c>
 800f382:	2340      	movs	r3, #64	; 0x40
 800f384:	2000      	movs	r0, #0
 800f386:	6023      	str	r3, [r4, #0]
 800f388:	b016      	add	sp, #88	; 0x58
 800f38a:	bd70      	pop	{r4, r5, r6, pc}

0800f38c <__smakebuf_r>:
 800f38c:	898b      	ldrh	r3, [r1, #12]
 800f38e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f390:	079d      	lsls	r5, r3, #30
 800f392:	4606      	mov	r6, r0
 800f394:	460c      	mov	r4, r1
 800f396:	d507      	bpl.n	800f3a8 <__smakebuf_r+0x1c>
 800f398:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f39c:	6023      	str	r3, [r4, #0]
 800f39e:	6123      	str	r3, [r4, #16]
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	6163      	str	r3, [r4, #20]
 800f3a4:	b002      	add	sp, #8
 800f3a6:	bd70      	pop	{r4, r5, r6, pc}
 800f3a8:	ab01      	add	r3, sp, #4
 800f3aa:	466a      	mov	r2, sp
 800f3ac:	f7ff ffca 	bl	800f344 <__swhatbuf_r>
 800f3b0:	9900      	ldr	r1, [sp, #0]
 800f3b2:	4605      	mov	r5, r0
 800f3b4:	4630      	mov	r0, r6
 800f3b6:	f7ff faab 	bl	800e910 <_malloc_r>
 800f3ba:	b948      	cbnz	r0, 800f3d0 <__smakebuf_r+0x44>
 800f3bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3c0:	059a      	lsls	r2, r3, #22
 800f3c2:	d4ef      	bmi.n	800f3a4 <__smakebuf_r+0x18>
 800f3c4:	f023 0303 	bic.w	r3, r3, #3
 800f3c8:	f043 0302 	orr.w	r3, r3, #2
 800f3cc:	81a3      	strh	r3, [r4, #12]
 800f3ce:	e7e3      	b.n	800f398 <__smakebuf_r+0xc>
 800f3d0:	4b0d      	ldr	r3, [pc, #52]	; (800f408 <__smakebuf_r+0x7c>)
 800f3d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3d4:	89a3      	ldrh	r3, [r4, #12]
 800f3d6:	6020      	str	r0, [r4, #0]
 800f3d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3dc:	81a3      	strh	r3, [r4, #12]
 800f3de:	9b00      	ldr	r3, [sp, #0]
 800f3e0:	6163      	str	r3, [r4, #20]
 800f3e2:	9b01      	ldr	r3, [sp, #4]
 800f3e4:	6120      	str	r0, [r4, #16]
 800f3e6:	b15b      	cbz	r3, 800f400 <__smakebuf_r+0x74>
 800f3e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	f000 f833 	bl	800f458 <_isatty_r>
 800f3f2:	b128      	cbz	r0, 800f400 <__smakebuf_r+0x74>
 800f3f4:	89a3      	ldrh	r3, [r4, #12]
 800f3f6:	f023 0303 	bic.w	r3, r3, #3
 800f3fa:	f043 0301 	orr.w	r3, r3, #1
 800f3fe:	81a3      	strh	r3, [r4, #12]
 800f400:	89a3      	ldrh	r3, [r4, #12]
 800f402:	431d      	orrs	r5, r3
 800f404:	81a5      	strh	r5, [r4, #12]
 800f406:	e7cd      	b.n	800f3a4 <__smakebuf_r+0x18>
 800f408:	0800e719 	.word	0x0800e719

0800f40c <__malloc_lock>:
 800f40c:	4770      	bx	lr

0800f40e <__malloc_unlock>:
 800f40e:	4770      	bx	lr

0800f410 <_read_r>:
 800f410:	b538      	push	{r3, r4, r5, lr}
 800f412:	4c07      	ldr	r4, [pc, #28]	; (800f430 <_read_r+0x20>)
 800f414:	4605      	mov	r5, r0
 800f416:	4608      	mov	r0, r1
 800f418:	4611      	mov	r1, r2
 800f41a:	2200      	movs	r2, #0
 800f41c:	6022      	str	r2, [r4, #0]
 800f41e:	461a      	mov	r2, r3
 800f420:	f7f1 fc30 	bl	8000c84 <_read>
 800f424:	1c43      	adds	r3, r0, #1
 800f426:	d102      	bne.n	800f42e <_read_r+0x1e>
 800f428:	6823      	ldr	r3, [r4, #0]
 800f42a:	b103      	cbz	r3, 800f42e <_read_r+0x1e>
 800f42c:	602b      	str	r3, [r5, #0]
 800f42e:	bd38      	pop	{r3, r4, r5, pc}
 800f430:	2000694c 	.word	0x2000694c

0800f434 <_fstat_r>:
 800f434:	b538      	push	{r3, r4, r5, lr}
 800f436:	4c07      	ldr	r4, [pc, #28]	; (800f454 <_fstat_r+0x20>)
 800f438:	2300      	movs	r3, #0
 800f43a:	4605      	mov	r5, r0
 800f43c:	4608      	mov	r0, r1
 800f43e:	4611      	mov	r1, r2
 800f440:	6023      	str	r3, [r4, #0]
 800f442:	f7f1 fc64 	bl	8000d0e <_fstat>
 800f446:	1c43      	adds	r3, r0, #1
 800f448:	d102      	bne.n	800f450 <_fstat_r+0x1c>
 800f44a:	6823      	ldr	r3, [r4, #0]
 800f44c:	b103      	cbz	r3, 800f450 <_fstat_r+0x1c>
 800f44e:	602b      	str	r3, [r5, #0]
 800f450:	bd38      	pop	{r3, r4, r5, pc}
 800f452:	bf00      	nop
 800f454:	2000694c 	.word	0x2000694c

0800f458 <_isatty_r>:
 800f458:	b538      	push	{r3, r4, r5, lr}
 800f45a:	4c06      	ldr	r4, [pc, #24]	; (800f474 <_isatty_r+0x1c>)
 800f45c:	2300      	movs	r3, #0
 800f45e:	4605      	mov	r5, r0
 800f460:	4608      	mov	r0, r1
 800f462:	6023      	str	r3, [r4, #0]
 800f464:	f7f1 fc63 	bl	8000d2e <_isatty>
 800f468:	1c43      	adds	r3, r0, #1
 800f46a:	d102      	bne.n	800f472 <_isatty_r+0x1a>
 800f46c:	6823      	ldr	r3, [r4, #0]
 800f46e:	b103      	cbz	r3, 800f472 <_isatty_r+0x1a>
 800f470:	602b      	str	r3, [r5, #0]
 800f472:	bd38      	pop	{r3, r4, r5, pc}
 800f474:	2000694c 	.word	0x2000694c

0800f478 <_init>:
 800f478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f47a:	bf00      	nop
 800f47c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f47e:	bc08      	pop	{r3}
 800f480:	469e      	mov	lr, r3
 800f482:	4770      	bx	lr

0800f484 <_fini>:
 800f484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f486:	bf00      	nop
 800f488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f48a:	bc08      	pop	{r3}
 800f48c:	469e      	mov	lr, r3
 800f48e:	4770      	bx	lr
