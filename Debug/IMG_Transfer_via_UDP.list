
IMG_Transfer_via_UDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b020  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001828  0800b1f0  0800b1f0  0001b1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca18  0800ca18  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca18  0800ca18  0001ca18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca20  0800ca20  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca20  0800ca20  0001ca20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca24  0800ca24  0001ca24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ca28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006694  20000074  0800ca9c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20006708  0800ca9c  00026708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033d80  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a89  00000000  00000000  00053e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  0005a8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001828  00000000  00000000  0005c368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035026  00000000  00000000  0005db90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002eacb  00000000  00000000  00092bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e2a5  00000000  00000000  000c1681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cf926  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074e0  00000000  00000000  001cf97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b1d8 	.word	0x0800b1d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800b1d8 	.word	0x0800b1d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <Image_Control_Init>:
extern uint32_t udp_buffer[BUF_SIZE];

static frame_step_t Image_Step(uint32_t seq_num);

void Image_Control_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0

	UDP_Server_Init();
 80005ac:	f000 f85a 	bl	8000664 <UDP_Server_Init>
	Display_Fill_Black();
 80005b0:	f000 fa04 	bl	80009bc <Display_Fill_Black>

}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <Image_Control_Runtime>:


void Image_Control_Runtime(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af02      	add	r7, sp, #8

	static uint32_t seq_num = 1;
	static frame_step_t frame_step;

	UDP_Server_Runtime_Task();
 80005be:	f000 f867 	bl	8000690 <UDP_Server_Runtime_Task>
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <Image_Control_Runtime+0x44>)
 80005c4:	681b      	ldr	r3, [r3, #0]

	memcpy(&seq_num, udp_buffer, 4);
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <Image_Control_Runtime+0x48>)
 80005c8:	6013      	str	r3, [r2, #0]

	frame_step = Image_Step(seq_num);
 80005ca:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <Image_Control_Runtime+0x48>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 f81c 	bl	800060c <Image_Step>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <Image_Control_Runtime+0x4c>)
 80005d8:	6013      	str	r3, [r2, #0]

	Display_Draw_Image(BUF_X*frame_step.x_step, BUF_Y*frame_step.y_step, BUF_X, BUF_Y,(uint32_t *)&udp_buffer[1]);
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <Image_Control_Runtime+0x4c>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	011b      	lsls	r3, r3, #4
 80005e0:	b298      	uxth	r0, r3
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <Image_Control_Runtime+0x4c>)
 80005e4:	885b      	ldrh	r3, [r3, #2]
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	b299      	uxth	r1, r3
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <Image_Control_Runtime+0x50>)
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2308      	movs	r3, #8
 80005f0:	2210      	movs	r2, #16
 80005f2:	f000 fa03 	bl	80009fc <Display_Draw_Image>

}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200001dc 	.word	0x200001dc
 8000600:	20000000 	.word	0x20000000
 8000604:	20000090 	.word	0x20000090
 8000608:	200001e0 	.word	0x200001e0

0800060c <Image_Step>:

static frame_step_t Image_Step(uint32_t seq_num)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	frame_step_t frame_step;

	frame_step.x_step = seq_num%30;
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <Image_Step+0x54>)
 8000618:	fba3 2301 	umull	r2, r3, r3, r1
 800061c:	091a      	lsrs	r2, r3, #4
 800061e:	4613      	mov	r3, r2
 8000620:	011b      	lsls	r3, r3, #4
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	1aca      	subs	r2, r1, r3
 8000628:	b293      	uxth	r3, r2
 800062a:	813b      	strh	r3, [r7, #8]
	frame_step.y_step = ((uint16_t)(seq_num-frame_step.x_step)/30);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	b29a      	uxth	r2, r3
 8000630:	893b      	ldrh	r3, [r7, #8]
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	b29b      	uxth	r3, r3
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <Image_Step+0x54>)
 8000638:	fba2 2303 	umull	r2, r3, r2, r3
 800063c:	091b      	lsrs	r3, r3, #4
 800063e:	b29b      	uxth	r3, r3
 8000640:	817b      	strh	r3, [r7, #10]

	return frame_step;
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	2300      	movs	r3, #0
 8000648:	89ba      	ldrh	r2, [r7, #12]
 800064a:	f362 030f 	bfi	r3, r2, #0, #16
 800064e:	89fa      	ldrh	r2, [r7, #14]
 8000650:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000654:	4618      	mov	r0, r3
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	88888889 	.word	0x88888889

08000664 <UDP_Server_Init>:

static void UDP_Receive(void *arg, struct udp_pcb *pcb, struct pbuf *p,
	                    const ip_addr_t *addr, u16_t port);

void UDP_Server_Init()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0

	udp_controller = udp_new();
 8000668:	f007 fa4c 	bl	8007b04 <udp_new>
 800066c:	4603      	mov	r3, r0
 800066e:	4a06      	ldr	r2, [pc, #24]	; (8000688 <UDP_Server_Init+0x24>)
 8000670:	6013      	str	r3, [r2, #0]
    udp_bind(udp_controller, IP_ADDR_ANY, 1234);
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <UDP_Server_Init+0x24>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f240 42d2 	movw	r2, #1234	; 0x4d2
 800067a:	4904      	ldr	r1, [pc, #16]	; (800068c <UDP_Server_Init+0x28>)
 800067c:	4618      	mov	r0, r3
 800067e:	f007 f999 	bl	80079b4 <udp_bind>

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000094 	.word	0x20000094
 800068c:	0800c8b8 	.word	0x0800c8b8

08000690 <UDP_Server_Runtime_Task>:

void UDP_Server_Runtime_Task()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	udp_recv(udp_controller, UDP_Receive, NULL);
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <UDP_Server_Runtime_Task+0x18>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2200      	movs	r2, #0
 800069a:	4904      	ldr	r1, [pc, #16]	; (80006ac <UDP_Server_Runtime_Task+0x1c>)
 800069c:	4618      	mov	r0, r3
 800069e:	f007 fa11 	bl	8007ac4 <udp_recv>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000094 	.word	0x20000094
 80006ac:	080006b1 	.word	0x080006b1

080006b0 <UDP_Receive>:

static void UDP_Receive(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	603b      	str	r3, [r7, #0]

	if(p->len <= BUF_SIZE*4)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	895b      	ldrh	r3, [r3, #10]
 80006c2:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 80006c6:	d807      	bhi.n	80006d8 <UDP_Receive+0x28>
	{
		memcpy(udp_buffer, (uint32_t *)p->payload, p->len);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6859      	ldr	r1, [r3, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	895b      	ldrh	r3, [r3, #10]
 80006d0:	461a      	mov	r2, r3
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <UDP_Receive+0x38>)
 80006d4:	f009 fd58 	bl	800a188 <memcpy>
	}

	pbuf_free(p);
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f006 fb7f 	bl	8006ddc <pbuf_free>

}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200001dc 	.word	0x200001dc

080006ec <SDRAM_Init>:
static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *sdram_handle, FMC_SDRAM_CommandTypeDef *command);

SDRAM_HandleTypeDef hsdram1;

void SDRAM_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0


	FMC_SDRAM_CommandTypeDef   command;
    FMC_SDRAM_TimingTypeDef    SdramTiming = {0};
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	615a      	str	r2, [r3, #20]
 8000702:	619a      	str	r2, [r3, #24]

  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SDRAM_Init+0x9c>)
 8000706:	4a21      	ldr	r2, [pc, #132]	; (800078c <SDRAM_Init+0xa0>)
 8000708:	601a      	str	r2, [r3, #0]

  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800070a:	4b1f      	ldr	r3, [pc, #124]	; (8000788 <SDRAM_Init+0x9c>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000710:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <SDRAM_Init+0x9c>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000716:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <SDRAM_Init+0x9c>)
 8000718:	2204      	movs	r2, #4
 800071a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <SDRAM_Init+0x9c>)
 800071e:	2210      	movs	r2, #16
 8000720:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000722:	4b19      	ldr	r3, [pc, #100]	; (8000788 <SDRAM_Init+0x9c>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <SDRAM_Init+0x9c>)
 800072a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800072e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <SDRAM_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <SDRAM_Init+0x9c>)
 8000738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800073c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <SDRAM_Init+0x9c>)
 8000740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000744:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <SDRAM_Init+0x9c>)
 8000748:	2200      	movs	r2, #0
 800074a:	629a      	str	r2, [r3, #40]	; 0x28


  SdramTiming.LoadToActiveDelay = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000750:	2306      	movs	r3, #6
 8000752:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000754:	2304      	movs	r3, #4
 8000756:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000758:	2306      	movs	r3, #6
 800075a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000760:	2302      	movs	r3, #2
 8000762:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	61fb      	str	r3, [r7, #28]

  HAL_SDRAM_Init(&hsdram1, &SdramTiming);
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	4619      	mov	r1, r3
 800076c:	4806      	ldr	r0, [pc, #24]	; (8000788 <SDRAM_Init+0x9c>)
 800076e:	f003 ffad 	bl	80046cc <HAL_SDRAM_Init>
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	4619      	mov	r1, r3
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <SDRAM_Init+0x9c>)
 800077a:	f000 f809 	bl	8000790 <SDRAM_Initialization_Sequence>

}
 800077e:	bf00      	nop
 8000780:	3730      	adds	r7, #48	; 0x30
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200003e0 	.word	0x200003e0
 800078c:	a0000140 	.word	0xa0000140

08000790 <SDRAM_Initialization_Sequence>:

static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *sdram_handle, FMC_SDRAM_CommandTypeDef *command)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  volatile uint32_t temp_val;

  command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	2201      	movs	r2, #1
 800079e:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	2210      	movs	r2, #16
 80007a4:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 1;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	2201      	movs	r2, #1
 80007aa:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = 0;
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 80007b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b6:	6839      	ldr	r1, [r7, #0]
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f003 ffbb 	bl	8004734 <HAL_SDRAM_SendCommand>

  HAL_Delay(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 fee2 	bl	8001588 <HAL_Delay>

  command->CommandMode = FMC_SDRAM_CMD_PALL;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	2202      	movs	r2, #2
 80007c8:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2210      	movs	r2, #16
 80007ce:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 1;
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	2201      	movs	r2, #1
 80007d4:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = 0;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	2200      	movs	r2, #0
 80007da:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 80007dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e0:	6839      	ldr	r1, [r7, #0]
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f003 ffa6 	bl	8004734 <HAL_SDRAM_SendCommand>

  command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	2203      	movs	r2, #3
 80007ec:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	2210      	movs	r2, #16
 80007f2:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 8;
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	2208      	movs	r2, #8
 80007f8:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = 0;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 8000800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000804:	6839      	ldr	r1, [r7, #0]
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f003 ff94 	bl	8004734 <HAL_SDRAM_SendCommand>

  temp_val = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800080c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000810:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	2204      	movs	r2, #4
 8000816:	601a      	str	r2, [r3, #0]
  command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	2210      	movs	r2, #16
 800081c:	605a      	str	r2, [r3, #4]
  command->AutoRefreshNumber = 1;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	2201      	movs	r2, #1
 8000822:	609a      	str	r2, [r3, #8]
  command->ModeRegisterDefinition = temp_val;
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	60da      	str	r2, [r3, #12]

  HAL_SDRAM_SendCommand(sdram_handle, command, SDRAM_TIMEOUT);
 800082a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800082e:	6839      	ldr	r1, [r7, #0]
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f003 ff7f 	bl	8004734 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SetAutoRefreshNumber(&hsdram1, SDRAM_REFRESH_TIME);
 8000836:	f240 6103 	movw	r1, #1539	; 0x603
 800083a:	4803      	ldr	r0, [pc, #12]	; (8000848 <SDRAM_Initialization_Sequence+0xb8>)
 800083c:	f003 ffa5 	bl	800478a <HAL_SDRAM_SetAutoRefreshNumber>

}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200003e0 	.word	0x200003e0

0800084c <Displayer_Init>:
 * retval: none.
 * brief : This function gets displayer ready to be driven.
 */

void Displayer_Init()
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

	LCD_BACKLIGHT_STATE(1);
 8000850:	2201      	movs	r2, #1
 8000852:	2108      	movs	r1, #8
 8000854:	4823      	ldr	r0, [pc, #140]	; (80008e4 <Displayer_Init+0x98>)
 8000856:	f002 fb4f 	bl	8002ef8 <HAL_GPIO_WritePin>
	LCD_DISP_STATE(1);
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000860:	4821      	ldr	r0, [pc, #132]	; (80008e8 <Displayer_Init+0x9c>)
 8000862:	f002 fb49 	bl	8002ef8 <HAL_GPIO_WritePin>

	lcd_handle.Instance = LTDC;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <Displayer_Init+0xa0>)
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <Displayer_Init+0xa4>)
 800086a:	601a      	str	r2, [r3, #0]
	lcd_handle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <Displayer_Init+0xa0>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
	lcd_handle.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <Displayer_Init+0xa0>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
	lcd_handle.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <Displayer_Init+0xa0>)
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
	lcd_handle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800087e:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <Displayer_Init+0xa0>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
	lcd_handle.Init.HorizontalSync = (DISPLAYER_HSYNC - 1);
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <Displayer_Init+0xa0>)
 8000886:	2228      	movs	r2, #40	; 0x28
 8000888:	615a      	str	r2, [r3, #20]
	lcd_handle.Init.VerticalSync = (DISPLAYER_VSYNC - 1);
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <Displayer_Init+0xa0>)
 800088c:	2209      	movs	r2, #9
 800088e:	619a      	str	r2, [r3, #24]
	lcd_handle.Init.AccumulatedHBP = (DISPLAYER_HSYNC + DISPLAYER_HBP - 1);
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <Displayer_Init+0xa0>)
 8000892:	2235      	movs	r2, #53	; 0x35
 8000894:	61da      	str	r2, [r3, #28]
	lcd_handle.Init.AccumulatedVBP = (DISPLAYER_VSYNC + DISPLAYER_VBP - 1);
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <Displayer_Init+0xa0>)
 8000898:	220b      	movs	r2, #11
 800089a:	621a      	str	r2, [r3, #32]
	lcd_handle.Init.AccumulatedActiveH = (DISPLAYER_HEIGHT + DISPLAYER_VSYNC
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <Displayer_Init+0xa0>)
 800089e:	f240 121b 	movw	r2, #283	; 0x11b
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
			+ DISPLAYER_VBP - 1);
	lcd_handle.Init.AccumulatedActiveW = (DISPLAYER_WIDTH + DISPLAYER_HSYNC
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <Displayer_Init+0xa0>)
 80008a6:	f240 2215 	movw	r2, #533	; 0x215
 80008aa:	625a      	str	r2, [r3, #36]	; 0x24
			+ DISPLAYER_HBP - 1);
	lcd_handle.Init.TotalHeigh = (DISPLAYER_HEIGHT + DISPLAYER_VSYNC
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <Displayer_Init+0xa0>)
 80008ae:	f240 121d 	movw	r2, #285	; 0x11d
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
			+ DISPLAYER_VBP + DISPLAYER_VFP - 1);
	lcd_handle.Init.TotalWidth = (DISPLAYER_WIDTH + DISPLAYER_HSYNC
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <Displayer_Init+0xa0>)
 80008b6:	f240 2235 	movw	r2, #565	; 0x235
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
			+ DISPLAYER_HBP + DISPLAYER_HFP - 1);
	lcd_handle.Init.Backcolor.Blue = 0;
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <Displayer_Init+0xa0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	lcd_handle.Init.Backcolor.Green = 0;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <Displayer_Init+0xa0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	lcd_handle.Init.Backcolor.Red = 0;
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <Displayer_Init+0xa0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	HAL_LTDC_Init(&lcd_handle);
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <Displayer_Init+0xa0>)
 80008d6:	f002 fb43 	bl	8002f60 <HAL_LTDC_Init>
	Displayer_Layer_Init();
 80008da:	f000 f80b 	bl	80008f4 <Displayer_Layer_Init>

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40022800 	.word	0x40022800
 80008e8:	40022000 	.word	0x40022000
 80008ec:	20000414 	.word	0x20000414
 80008f0:	40016800 	.word	0x40016800

080008f4 <Displayer_Layer_Init>:
 * brief : This function initialises first layer.
 */


static void Displayer_Layer_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

	lcd_handle.LayerCfg[0].WindowX0 = 0;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <Displayer_Layer_Init+0x84>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	639a      	str	r2, [r3, #56]	; 0x38
	lcd_handle.LayerCfg[0].WindowX1 = DISPLAYER_WIDTH;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <Displayer_Layer_Init+0x84>)
 8000900:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000904:	63da      	str	r2, [r3, #60]	; 0x3c
	lcd_handle.LayerCfg[0].WindowY0 = 0;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <Displayer_Layer_Init+0x84>)
 8000908:	2200      	movs	r2, #0
 800090a:	641a      	str	r2, [r3, #64]	; 0x40
	lcd_handle.LayerCfg[0].WindowY1 = DISPLAYER_HEIGHT;
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <Displayer_Layer_Init+0x84>)
 800090e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000912:	645a      	str	r2, [r3, #68]	; 0x44
	lcd_handle.LayerCfg[0].PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <Displayer_Layer_Init+0x84>)
 8000916:	2200      	movs	r2, #0
 8000918:	649a      	str	r2, [r3, #72]	; 0x48
	lcd_handle.LayerCfg[0].Alpha = 255;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <Displayer_Layer_Init+0x84>)
 800091c:	22ff      	movs	r2, #255	; 0xff
 800091e:	64da      	str	r2, [r3, #76]	; 0x4c
	lcd_handle.LayerCfg[0].Alpha0 = 0;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <Displayer_Layer_Init+0x84>)
 8000922:	2200      	movs	r2, #0
 8000924:	651a      	str	r2, [r3, #80]	; 0x50
	lcd_handle.LayerCfg[0].BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <Displayer_Layer_Init+0x84>)
 8000928:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800092c:	655a      	str	r2, [r3, #84]	; 0x54
	lcd_handle.LayerCfg[0].BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <Displayer_Layer_Init+0x84>)
 8000930:	2207      	movs	r2, #7
 8000932:	659a      	str	r2, [r3, #88]	; 0x58

	lcd_handle.LayerCfg[0].ImageWidth = DISPLAYER_WIDTH;
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <Displayer_Layer_Init+0x84>)
 8000936:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800093a:	661a      	str	r2, [r3, #96]	; 0x60
	lcd_handle.LayerCfg[0].ImageHeight = DISPLAYER_HEIGHT;
 800093c:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <Displayer_Layer_Init+0x84>)
 800093e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8000942:	665a      	str	r2, [r3, #100]	; 0x64
	lcd_handle.LayerCfg[0].Backcolor.Blue = 0;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <Displayer_Layer_Init+0x84>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	lcd_handle.LayerCfg[0].Backcolor.Green = 0;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <Displayer_Layer_Init+0x84>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	lcd_handle.LayerCfg[0].Backcolor.Red = 0;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <Displayer_Layer_Init+0x84>)
 8000956:	2200      	movs	r2, #0
 8000958:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

	HAL_LTDC_SetAddress(&lcd_handle, FB_START_ADDRRESS, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000962:	4805      	ldr	r0, [pc, #20]	; (8000978 <Displayer_Layer_Init+0x84>)
 8000964:	f002 fc0a 	bl	800317c <HAL_LTDC_SetAddress>
    HAL_LTDC_ConfigLayer(&lcd_handle, &lcd_handle.LayerCfg[0], 1);
 8000968:	2201      	movs	r2, #1
 800096a:	4904      	ldr	r1, [pc, #16]	; (800097c <Displayer_Layer_Init+0x88>)
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <Displayer_Layer_Init+0x84>)
 800096e:	f002 fbc7 	bl	8003100 <HAL_LTDC_ConfigLayer>

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000414 	.word	0x20000414
 800097c:	2000044c 	.word	0x2000044c

08000980 <Display_Draw_Pixel>:
 * brief   : This function draws a pixel to spesific position.
 * XXX: This function defined non-statically, It may be used with lvgl in the future.
 */

void Display_Draw_Pixel (uint16_t pos_x, uint16_t pos_y, uint32_t color)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	603a      	str	r2, [r7, #0]
 800098a:	80fb      	strh	r3, [r7, #6]
 800098c:	460b      	mov	r3, r1
 800098e:	80bb      	strh	r3, [r7, #4]
	*(volatile uint32_t *)(lcd_handle.LayerCfg[0].FBStartAdress+(4*(pos_y*lcd_handle.LayerCfg[0].ImageWidth+pos_x))) = color;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <Display_Draw_Pixel+0x38>)
 8000992:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000994:	88bb      	ldrh	r3, [r7, #4]
 8000996:	4908      	ldr	r1, [pc, #32]	; (80009b8 <Display_Draw_Pixel+0x38>)
 8000998:	6e09      	ldr	r1, [r1, #96]	; 0x60
 800099a:	fb01 f103 	mul.w	r1, r1, r3
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	440b      	add	r3, r1
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4413      	add	r3, r2
 80009a6:	461a      	mov	r2, r3
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	20000414 	.word	0x20000414

080009bc <Display_Fill_Black>:
 * retval  : none.
 * brief   : This function fills the screen with black so that initial RAM buffer does not ruin the screen.
 */

void Display_Fill_Black(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0

	 for(uint32_t i = 0; i < DISPLAYER_WIDTH*DISPLAYER_HEIGHT; i++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	e00b      	b.n	80009e0 <Display_Fill_Black+0x24>
	 {
		 *(volatile uint32_t *)(lcd_handle.LayerCfg[0].FBStartAdress+(i*4)) = 0xFF000000; /* Black in ARGB8888*/
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <Display_Fill_Black+0x3c>)
 80009ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	4413      	add	r3, r2
 80009d2:	461a      	mov	r2, r3
 80009d4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80009d8:	6013      	str	r3, [r2, #0]
	 for(uint32_t i = 0; i < DISPLAYER_WIDTH*DISPLAYER_HEIGHT; i++)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3301      	adds	r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f5b3 3fff 	cmp.w	r3, #130560	; 0x1fe00
 80009e6:	d3ef      	bcc.n	80009c8 <Display_Fill_Black+0xc>
	 }
}
 80009e8:	bf00      	nop
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000414 	.word	0x20000414

080009fc <Display_Draw_Image>:
 * param5 : image buffer.
 * brief  : This function draws an image to screen with spesified position.
 */

void Display_Draw_Image(uint16_t pos_x, uint16_t pos_y, uint16_t width, uint16_t height,volatile uint32_t *image)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4604      	mov	r4, r0
 8000a04:	4608      	mov	r0, r1
 8000a06:	4611      	mov	r1, r2
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4623      	mov	r3, r4
 8000a0c:	80fb      	strh	r3, [r7, #6]
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80bb      	strh	r3, [r7, #4]
 8000a12:	460b      	mov	r3, r1
 8000a14:	807b      	strh	r3, [r7, #2]
 8000a16:	4613      	mov	r3, r2
 8000a18:	803b      	strh	r3, [r7, #0]
	if(image == NULL)
 8000a1a:	6a3b      	ldr	r3, [r7, #32]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d021      	beq.n	8000a64 <Display_Draw_Image+0x68>
	{
		return;
	}

	for(uint16_t i = pos_y; i < pos_y+height; i++)
 8000a20:	88bb      	ldrh	r3, [r7, #4]
 8000a22:	81fb      	strh	r3, [r7, #14]
 8000a24:	e017      	b.n	8000a56 <Display_Draw_Image+0x5a>
	{
		for(uint16_t j = pos_x; j < pos_x+width; j++)
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	81bb      	strh	r3, [r7, #12]
 8000a2a:	e00b      	b.n	8000a44 <Display_Draw_Image+0x48>
		{
			Display_Draw_Pixel(j, i, *image++);
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	1d1a      	adds	r2, r3, #4
 8000a30:	623a      	str	r2, [r7, #32]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	89f9      	ldrh	r1, [r7, #14]
 8000a36:	89bb      	ldrh	r3, [r7, #12]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ffa1 	bl	8000980 <Display_Draw_Pixel>
		for(uint16_t j = pos_x; j < pos_x+width; j++)
 8000a3e:	89bb      	ldrh	r3, [r7, #12]
 8000a40:	3301      	adds	r3, #1
 8000a42:	81bb      	strh	r3, [r7, #12]
 8000a44:	89ba      	ldrh	r2, [r7, #12]
 8000a46:	88f9      	ldrh	r1, [r7, #6]
 8000a48:	887b      	ldrh	r3, [r7, #2]
 8000a4a:	440b      	add	r3, r1
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dbed      	blt.n	8000a2c <Display_Draw_Image+0x30>
	for(uint16_t i = pos_y; i < pos_y+height; i++)
 8000a50:	89fb      	ldrh	r3, [r7, #14]
 8000a52:	3301      	adds	r3, #1
 8000a54:	81fb      	strh	r3, [r7, #14]
 8000a56:	89fa      	ldrh	r2, [r7, #14]
 8000a58:	88b9      	ldrh	r1, [r7, #4]
 8000a5a:	883b      	ldrh	r3, [r7, #0]
 8000a5c:	440b      	add	r3, r1
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	dbe1      	blt.n	8000a26 <Display_Draw_Image+0x2a>
 8000a62:	e000      	b.n	8000a66 <Display_Draw_Image+0x6a>
		return;
 8000a64:	bf00      	nop
		}
	}

}
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd90      	pop	{r4, r7, pc}

08000a6c <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a80:	4b3a      	ldr	r3, [pc, #232]	; (8000b6c <HAL_FMC_MspInit+0x100>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d16d      	bne.n	8000b64 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a88:	4b38      	ldr	r3, [pc, #224]	; (8000b6c <HAL_FMC_MspInit+0x100>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a8e:	4b38      	ldr	r3, [pc, #224]	; (8000b70 <HAL_FMC_MspInit+0x104>)
 8000a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a92:	4a37      	ldr	r2, [pc, #220]	; (8000b70 <HAL_FMC_MspInit+0x104>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6393      	str	r3, [r2, #56]	; 0x38
 8000a9a:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <HAL_FMC_MspInit+0x104>)
 8000a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8000aa6:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000aaa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aac:	2302      	movs	r3, #2
 8000aae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ab8:	230c      	movs	r3, #12
 8000aba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	482c      	ldr	r0, [pc, #176]	; (8000b74 <HAL_FMC_MspInit+0x108>)
 8000ac2:	f002 f86d 	bl	8002ba0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8000ac6:	f248 1313 	movw	r3, #33043	; 0x8113
 8000aca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ad8:	230c      	movs	r3, #12
 8000ada:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4825      	ldr	r0, [pc, #148]	; (8000b78 <HAL_FMC_MspInit+0x10c>)
 8000ae2:	f002 f85d 	bl	8002ba0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8000ae6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000aea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000af8:	230c      	movs	r3, #12
 8000afa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	4619      	mov	r1, r3
 8000b00:	481e      	ldr	r0, [pc, #120]	; (8000b7c <HAL_FMC_MspInit+0x110>)
 8000b02:	f002 f84d 	bl	8002ba0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000b06:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b0a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4817      	ldr	r0, [pc, #92]	; (8000b80 <HAL_FMC_MspInit+0x114>)
 8000b22:	f002 f83d 	bl	8002ba0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8000b26:	2328      	movs	r3, #40	; 0x28
 8000b28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b36:	230c      	movs	r3, #12
 8000b38:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4811      	ldr	r0, [pc, #68]	; (8000b84 <HAL_FMC_MspInit+0x118>)
 8000b40:	f002 f82e 	bl	8002ba0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b44:	2308      	movs	r3, #8
 8000b46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b54:	230c      	movs	r3, #12
 8000b56:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <HAL_FMC_MspInit+0x11c>)
 8000b5e:	f002 f81f 	bl	8002ba0 <HAL_GPIO_Init>
 8000b62:	e000      	b.n	8000b66 <HAL_FMC_MspInit+0xfa>
    return;
 8000b64:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000098 	.word	0x20000098
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40021800 	.word	0x40021800
 8000b7c:	40020c00 	.word	0x40020c00
 8000b80:	40021400 	.word	0x40021400
 8000b84:	40021c00 	.word	0x40021c00
 8000b88:	40020800 	.word	0x40020800

08000b8c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b94:	f7ff ff6a 	bl	8000a6c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b090      	sub	sp, #64	; 0x40
 8000ba4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb6:	4b58      	ldr	r3, [pc, #352]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a57      	ldr	r2, [pc, #348]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bce:	4b52      	ldr	r3, [pc, #328]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a51      	ldr	r2, [pc, #324]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b4f      	ldr	r3, [pc, #316]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b4c      	ldr	r3, [pc, #304]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a4b      	ldr	r2, [pc, #300]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b49      	ldr	r3, [pc, #292]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	623b      	str	r3, [r7, #32]
 8000bfc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000bfe:	4b46      	ldr	r3, [pc, #280]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a45      	ldr	r2, [pc, #276]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b43      	ldr	r3, [pc, #268]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c12:	61fb      	str	r3, [r7, #28]
 8000c14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a3f      	ldr	r2, [pc, #252]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b3d      	ldr	r3, [pc, #244]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	61bb      	str	r3, [r7, #24]
 8000c2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c2e:	4b3a      	ldr	r3, [pc, #232]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a39      	ldr	r2, [pc, #228]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b37      	ldr	r3, [pc, #220]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b34      	ldr	r3, [pc, #208]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a33      	ldr	r2, [pc, #204]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b31      	ldr	r3, [pc, #196]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a2d      	ldr	r2, [pc, #180]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c64:	f043 0320 	orr.w	r3, r3, #32
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0320 	and.w	r3, r3, #32
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c76:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a27      	ldr	r2, [pc, #156]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a21      	ldr	r2, [pc, #132]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2108      	movs	r1, #8
 8000caa:	481c      	ldr	r0, [pc, #112]	; (8000d1c <MX_GPIO_Init+0x17c>)
 8000cac:	f002 f924 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1|GPIO_PIN_12, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f241 0102 	movw	r1, #4098	; 0x1002
 8000cb6:	481a      	ldr	r0, [pc, #104]	; (8000d20 <MX_GPIO_Init+0x180>)
 8000cb8:	f002 f91e 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_Detect_Pin;
 8000cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_Detect_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4814      	ldr	r0, [pc, #80]	; (8000d24 <MX_GPIO_Init+0x184>)
 8000cd2:	f001 ff65 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PK3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cea:	4619      	mov	r1, r3
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <MX_GPIO_Init+0x17c>)
 8000cee:	f001 ff57 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8000cf2:	f241 0302 	movw	r3, #4098	; 0x1002
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_GPIO_Init+0x180>)
 8000d0c:	f001 ff48 	bl	8002ba0 <HAL_GPIO_Init>

}
 8000d10:	bf00      	nop
 8000d12:	3740      	adds	r7, #64	; 0x40
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40022800 	.word	0x40022800
 8000d20:	40022000 	.word	0x40022000
 8000d24:	40020800 	.word	0x40020800

08000d28 <HAL_LTDC_MspInit>:
  /* USER CODE END LTDC_Init 2 */

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	; 0x38
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a51      	ldr	r2, [pc, #324]	; (8000e8c <HAL_LTDC_MspInit+0x164>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	f040 809b 	bne.w	8000e82 <HAL_LTDC_MspInit+0x15a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d4c:	4b50      	ldr	r3, [pc, #320]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	4a4f      	ldr	r2, [pc, #316]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000d52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d56:	6453      	str	r3, [r2, #68]	; 0x44
 8000d58:	4b4d      	ldr	r3, [pc, #308]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d60:	623b      	str	r3, [r7, #32]
 8000d62:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d64:	4b4a      	ldr	r3, [pc, #296]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	4a49      	ldr	r2, [pc, #292]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000d6a:	f043 0310 	orr.w	r3, r3, #16
 8000d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d70:	4b47      	ldr	r3, [pc, #284]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	f003 0310 	and.w	r3, r3, #16
 8000d78:	61fb      	str	r3, [r7, #28]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d7c:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a43      	ldr	r2, [pc, #268]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b41      	ldr	r3, [pc, #260]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d94:	4b3e      	ldr	r3, [pc, #248]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a3d      	ldr	r2, [pc, #244]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b3b      	ldr	r3, [pc, #236]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da8:	617b      	str	r3, [r7, #20]
 8000daa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dac:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4a37      	ldr	r2, [pc, #220]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db6:	6313      	str	r3, [r2, #48]	; 0x30
 8000db8:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dc4:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4a31      	ldr	r2, [pc, #196]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd0:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <HAL_LTDC_MspInit+0x168>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ddc:	2310      	movs	r3, #16
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000dec:	230e      	movs	r3, #14
 8000dee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	4619      	mov	r1, r3
 8000df6:	4827      	ldr	r0, [pc, #156]	; (8000e94 <HAL_LTDC_MspInit+0x16c>)
 8000df8:	f001 fed2 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_11
 8000dfc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7|GPIO_PIN_9
                          |GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3
                          |GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e0e:	230e      	movs	r3, #14
 8000e10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e16:	4619      	mov	r1, r3
 8000e18:	481f      	ldr	r0, [pc, #124]	; (8000e98 <HAL_LTDC_MspInit+0x170>)
 8000e1a:	f001 fec1 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 8000e1e:	23f7      	movs	r3, #247	; 0xf7
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e2e:	230e      	movs	r3, #14
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4818      	ldr	r0, [pc, #96]	; (8000e9c <HAL_LTDC_MspInit+0x174>)
 8000e3a:	f001 feb1 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e50:	2309      	movs	r3, #9
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <HAL_LTDC_MspInit+0x178>)
 8000e5c:	f001 fea0 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8000e60:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e72:	230e      	movs	r3, #14
 8000e74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <HAL_LTDC_MspInit+0x17c>)
 8000e7e:	f001 fe8f 	bl	8002ba0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	; 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40016800 	.word	0x40016800
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40022400 	.word	0x40022400
 8000e9c:	40022800 	.word	0x40022800
 8000ea0:	40021800 	.word	0x40021800
 8000ea4:	40022000 	.word	0x40022000

08000ea8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000eac:	f3bf 8f4f 	dsb	sy
}
 8000eb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb2:	f3bf 8f6f 	isb	sy
}
 8000eb6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <SCB_EnableICache+0x48>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ec0:	f3bf 8f4f 	dsb	sy
}
 8000ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ec6:	f3bf 8f6f 	isb	sy
}
 8000eca:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <SCB_EnableICache+0x48>)
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <SCB_EnableICache+0x48>)
 8000ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed8:	f3bf 8f4f 	dsb	sy
}
 8000edc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ede:	f3bf 8f6f 	isb	sy
}
 8000ee2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000efa:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <SCB_EnableDCache+0x84>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f02:	f3bf 8f4f 	dsb	sy
}
 8000f06:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <SCB_EnableDCache+0x84>)
 8000f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f0e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	0b5b      	lsrs	r3, r3, #13
 8000f14:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f18:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	08db      	lsrs	r3, r3, #3
 8000f1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f22:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	015a      	lsls	r2, r3, #5
 8000f28:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000f2c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f32:	4911      	ldr	r1, [pc, #68]	; (8000f78 <SCB_EnableDCache+0x84>)
 8000f34:	4313      	orrs	r3, r2
 8000f36:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1e5a      	subs	r2, r3, #1
 8000f3e:	60ba      	str	r2, [r7, #8]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1ef      	bne.n	8000f24 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	1e5a      	subs	r2, r3, #1
 8000f48:	60fa      	str	r2, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1e5      	bne.n	8000f1a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4e:	f3bf 8f4f 	dsb	sy
}
 8000f52:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <SCB_EnableDCache+0x84>)
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	4a07      	ldr	r2, [pc, #28]	; (8000f78 <SCB_EnableDCache+0x84>)
 8000f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f60:	f3bf 8f4f 	dsb	sy
}
 8000f64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f66:	f3bf 8f6f 	isb	sy
}
 8000f6a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0


  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000f80:	f000 f8b4 	bl	80010ec <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000f84:	f7ff ff90 	bl	8000ea8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000f88:	f7ff ffb4 	bl	8000ef4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f000 facf 	bl	800152e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 f810 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f94:	f7ff fe04 	bl	8000ba0 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000f98:	f004 f820 	bl	8004fdc <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */


  SDRAM_Init();
 8000f9c:	f7ff fba6 	bl	80006ec <SDRAM_Init>
  Displayer_Init();
 8000fa0:	f7ff fc54 	bl	800084c <Displayer_Init>

  Image_Control_Init();
 8000fa4:	f7ff fb00 	bl	80005a8 <Image_Control_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 8000fa8:	f004 f94a 	bl	8005240 <MX_LWIP_Process>
	  Image_Control_Runtime();
 8000fac:	f7ff fb04 	bl	80005b8 <Image_Control_Runtime>
	  MX_LWIP_Process();
 8000fb0:	e7fa      	b.n	8000fa8 <main+0x2c>
	...

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0b4      	sub	sp, #208	; 0xd0
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fbe:	2230      	movs	r2, #48	; 0x30
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f009 f8ee 	bl	800a1a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	2284      	movs	r2, #132	; 0x84
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f009 f8df 	bl	800a1a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	4b3e      	ldr	r3, [pc, #248]	; (80010e0 <SystemClock_Config+0x12c>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a3d      	ldr	r2, [pc, #244]	; (80010e0 <SystemClock_Config+0x12c>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <SystemClock_Config+0x12c>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ffe:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <SystemClock_Config+0x130>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a38      	ldr	r2, [pc, #224]	; (80010e4 <SystemClock_Config+0x130>)
 8001004:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <SystemClock_Config+0x130>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001012:	603b      	str	r3, [r7, #0]
 8001014:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001016:	2301      	movs	r3, #1
 8001018:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800101c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001020:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001024:	2302      	movs	r3, #2
 8001026:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800102e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001032:	230f      	movs	r3, #15
 8001034:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001038:	23f0      	movs	r3, #240	; 0xf0
 800103a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001044:	2309      	movs	r3, #9
 8001046:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fab4 	bl	80035bc <HAL_RCC_OscConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800105a:	f000 f893 	bl	8001184 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800105e:	f002 fa5d 	bl	800351c <HAL_PWREx_EnableOverDrive>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001068:	f000 f88c 	bl	8001184 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106c:	230f      	movs	r3, #15
 800106e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800107e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001082:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800108e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001092:	2106      	movs	r1, #6
 8001094:	4618      	mov	r0, r3
 8001096:	f002 fd35 	bl	8003b04 <HAL_RCC_ClockConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80010a0:	f000 f870 	bl	8001184 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_I2C3;
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <SystemClock_Config+0x134>)
 80010a6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 80010a8:	2360      	movs	r3, #96	; 0x60
 80010aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80010ac:	2305      	movs	r3, #5
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80010b4:	2303      	movs	r3, #3
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80010b8:	2301      	movs	r3, #1
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80010bc:	2300      	movs	r3, #0
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	4618      	mov	r0, r3
 80010ca:	f002 ff0f 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x124>
  {
    Error_Handler();
 80010d4:	f000 f856 	bl	8001184 <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	37d0      	adds	r7, #208	; 0xd0
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40007000 	.word	0x40007000
 80010e8:	00010008 	.word	0x00010008

080010ec <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80010fe:	f000 fb49 	bl	8001794 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001102:	2301      	movs	r3, #1
 8001104:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001106:	2300      	movs	r3, #0
 8001108:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xC0000000;
 800110a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800110e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4MB;
 8001110:	2315      	movs	r3, #21
 8001112:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001114:	2300      	movs	r3, #0
 8001116:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001118:	2300      	movs	r3, #0
 800111a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800111c:	2303      	movs	r3, #3
 800111e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001128:	2301      	movs	r3, #1
 800112a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001130:	463b      	mov	r3, r7
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fb66 	bl	8001804 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001138:	2301      	movs	r3, #1
 800113a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20010000;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <MPU_Config+0x70>)
 800113e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001140:	2311      	movs	r3, #17
 8001142:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001144:	463b      	mov	r3, r7
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fb5c 	bl	8001804 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800114c:	2004      	movs	r0, #4
 800114e:	f000 fb39 	bl	80017c4 <HAL_MPU_Enable>

}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20010000 	.word	0x20010000

08001160 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001172:	f000 f9e9 	bl	8001548 <HAL_IncTick>

  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40010000 	.word	0x40010000

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118c:	e7fe      	b.n	800118c <Error_Handler+0x8>
	...

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_MspInit+0x44>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_MspInit+0x44>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	6413      	str	r3, [r2, #64]	; 0x40
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_MspInit+0x44>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_MspInit+0x44>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_MspInit+0x44>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_MspInit+0x44>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800

080011d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	2019      	movs	r0, #25
 80011ee:	f000 faa7 	bl	8001740 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011f2:	2019      	movs	r0, #25
 80011f4:	f000 fac0 	bl	8001778 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <HAL_InitTick+0xa0>)
 80011fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fc:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <HAL_InitTick+0xa0>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6453      	str	r3, [r2, #68]	; 0x44
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <HAL_InitTick+0xa0>)
 8001206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001210:	f107 0210 	add.w	r2, r7, #16
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f002 fe34 	bl	8003e88 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001220:	f002 fe1e 	bl	8003e60 <HAL_RCC_GetPCLK2Freq>
 8001224:	4603      	mov	r3, r0
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800122a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122c:	4a13      	ldr	r2, [pc, #76]	; (800127c <HAL_InitTick+0xa4>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	0c9b      	lsrs	r3, r3, #18
 8001234:	3b01      	subs	r3, #1
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_InitTick+0xa8>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <HAL_InitTick+0xac>)
 800123c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_InitTick+0xa8>)
 8001240:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001244:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <HAL_InitTick+0xa8>)
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HAL_InitTick+0xa8>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <HAL_InitTick+0xa8>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <HAL_InitTick+0xa8>)
 800125a:	f003 fab6 	bl	80047ca <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d104      	bne.n	800126e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001264:	4806      	ldr	r0, [pc, #24]	; (8001280 <HAL_InitTick+0xa8>)
 8001266:	f003 fb11 	bl	800488c <HAL_TIM_Base_Start_IT>
 800126a:	4603      	mov	r3, r0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3730      	adds	r7, #48	; 0x30
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800
 800127c:	431bde83 	.word	0x431bde83
 8001280:	20000508 	.word	0x20000508
 8001284:	40010000 	.word	0x40010000

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800128c:	e7fe      	b.n	800128c <NMI_Handler+0x4>

0800128e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <MemManage_Handler+0x4>

0800129a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012e6:	f003 fb49 	bl	800497c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000508 	.word	0x20000508

080012f4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <ETH_IRQHandler+0x10>)
 80012fa:	f000 fea5 	bl	8002048 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20001e74 	.word	0x20001e74

08001308 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <I2C3_EV_IRQHandler+0x10>)
 800130e:	f001 fe0c 	bl	8002f2a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200004bc 	.word	0x200004bc

0800131c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
	return 1;
 8001320:	2301      	movs	r3, #1
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_kill>:

int _kill(int pid, int sig)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <_kill+0x20>)
 8001338:	2216      	movs	r2, #22
 800133a:	601a      	str	r2, [r3, #0]
	return -1;
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	200066f8 	.word	0x200066f8

08001350 <_exit>:

void _exit (int status)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ffe5 	bl	800132c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001362:	e7fe      	b.n	8001362 <_exit+0x12>

08001364 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	e00a      	b.n	800138c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001376:	f3af 8000 	nop.w
 800137a:	4601      	mov	r1, r0
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	60ba      	str	r2, [r7, #8]
 8001382:	b2ca      	uxtb	r2, r1
 8001384:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	429a      	cmp	r2, r3
 8001392:	dbf0      	blt.n	8001376 <_read+0x12>
	}

return len;
 8001394:	687b      	ldr	r3, [r7, #4]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e009      	b.n	80013c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	60ba      	str	r2, [r7, #8]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3301      	adds	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dbf1      	blt.n	80013b0 <_write+0x12>
	}
	return len;
 80013cc:	687b      	ldr	r3, [r7, #4]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <_close>:

int _close(int file)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
	return -1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <_isatty>:

int _isatty(int file)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
	return 1;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
	return 0;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <_sbrk+0x5c>)
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <_sbrk+0x60>)
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <_sbrk+0x64>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <_sbrk+0x68>)
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d205      	bcs.n	800147c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001470:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <_sbrk+0x6c>)
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e009      	b.n	8001490 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	371c      	adds	r7, #28
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	20050000 	.word	0x20050000
 80014a0:	00004000 	.word	0x00004000
 80014a4:	2000009c 	.word	0x2000009c
 80014a8:	20006708 	.word	0x20006708
 80014ac:	200066f8 	.word	0x200066f8

080014b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <SystemInit+0x28>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ba:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <SystemInit+0x28>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <SystemInit+0x28>)
 80014c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014ca:	609a      	str	r2, [r3, #8]
#endif
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001514 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014e2:	e003      	b.n	80014ec <LoopCopyDataInit>

080014e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80014e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80014e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80014ea:	3104      	adds	r1, #4

080014ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80014ec:	480b      	ldr	r0, [pc, #44]	; (800151c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80014f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80014f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80014f4:	d3f6      	bcc.n	80014e4 <CopyDataInit>
  ldr  r2, =_sbss
 80014f6:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014f8:	e002      	b.n	8001500 <LoopFillZerobss>

080014fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014fc:	f842 3b04 	str.w	r3, [r2], #4

08001500 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001502:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001504:	d3f9      	bcc.n	80014fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001506:	f7ff ffd3 	bl	80014b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800150a:	f008 fe03 	bl	800a114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7ff fd35 	bl	8000f7c <main>
  bx  lr    
 8001512:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001514:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001518:	0800ca28 	.word	0x0800ca28
  ldr  r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001520:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001524:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001528:	20006708 	.word	0x20006708

0800152c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <ADC_IRQHandler>

0800152e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001532:	2003      	movs	r0, #3
 8001534:	f000 f8f9 	bl	800172a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff fe4d 	bl	80011d8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800153e:	f7ff fe27 	bl	8001190 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	2000000c 	.word	0x2000000c
 800156c:	20000554 	.word	0x20000554

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000554 	.word	0x20000554

08001588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff ffee 	bl	8001570 <HAL_GetTick>
 8001594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d005      	beq.n	80015ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_Delay+0x44>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ae:	bf00      	nop
 80015b0:	f7ff ffde 	bl	8001570 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d8f7      	bhi.n	80015b0 <HAL_Delay+0x28>
  {
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000000c 	.word	0x2000000c

080015d0 <__NVIC_SetPriorityGrouping>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x40>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000ed00 	.word	0xe000ed00
 8001614:	05fa0000 	.word	0x05fa0000

08001618 <__NVIC_GetPriorityGrouping>:
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <__NVIC_GetPriorityGrouping+0x18>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	f003 0307 	and.w	r3, r3, #7
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <__NVIC_EnableIRQ>:
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4907      	ldr	r1, [pc, #28]	; (800166c <__NVIC_EnableIRQ+0x38>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	; (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	; 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	; 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ff4c 	bl	80015d0 <__NVIC_SetPriorityGrouping>
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001752:	f7ff ff61 	bl	8001618 <__NVIC_GetPriorityGrouping>
 8001756:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	68b9      	ldr	r1, [r7, #8]
 800175c:	6978      	ldr	r0, [r7, #20]
 800175e:	f7ff ffb1 	bl	80016c4 <NVIC_EncodePriority>
 8001762:	4602      	mov	r2, r0
 8001764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001768:	4611      	mov	r1, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff ff80 	bl	8001670 <__NVIC_SetPriority>
}
 8001770:	bf00      	nop
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff54 	bl	8001634 <__NVIC_EnableIRQ>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001798:	f3bf 8f5f 	dmb	sy
}
 800179c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_MPU_Disable+0x28>)
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	4a06      	ldr	r2, [pc, #24]	; (80017bc <HAL_MPU_Disable+0x28>)
 80017a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a8:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_MPU_Disable+0x2c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	e000ed90 	.word	0xe000ed90

080017c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017cc:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <HAL_MPU_Enable+0x38>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_MPU_Enable+0x3c>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	4a09      	ldr	r2, [pc, #36]	; (8001800 <HAL_MPU_Enable+0x3c>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017e2:	f3bf 8f4f 	dsb	sy
}
 80017e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017e8:	f3bf 8f6f 	isb	sy
}
 80017ec:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed90 	.word	0xe000ed90
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	785a      	ldrb	r2, [r3, #1]
 8001810:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <HAL_MPU_ConfigRegion+0x84>)
 8001812:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d029      	beq.n	8001870 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800181c:	4a1a      	ldr	r2, [pc, #104]	; (8001888 <HAL_MPU_ConfigRegion+0x84>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7b1b      	ldrb	r3, [r3, #12]
 8001828:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7adb      	ldrb	r3, [r3, #11]
 800182e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001830:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7a9b      	ldrb	r3, [r3, #10]
 8001836:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001838:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7b5b      	ldrb	r3, [r3, #13]
 800183e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001840:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7b9b      	ldrb	r3, [r3, #14]
 8001846:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001848:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7bdb      	ldrb	r3, [r3, #15]
 800184e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001850:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7a5b      	ldrb	r3, [r3, #9]
 8001856:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001858:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	7a1b      	ldrb	r3, [r3, #8]
 800185e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001860:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800186a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800186c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800186e:	e005      	b.n	800187c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_MPU_ConfigRegion+0x84>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <HAL_MPU_ConfigRegion+0x84>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed90 	.word	0xe000ed90

0800188c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 800189c:	4ba9      	ldr	r3, [pc, #676]	; (8001b44 <HAL_ETH_Init+0x2b8>)
 800189e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80018a4:	2300      	movs	r3, #0
 80018a6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e181      	b.n	8001bb6 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d106      	bne.n	80018cc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f003 fcc6 	bl	8005258 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018cc:	4b9e      	ldr	r3, [pc, #632]	; (8001b48 <HAL_ETH_Init+0x2bc>)
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	4a9d      	ldr	r2, [pc, #628]	; (8001b48 <HAL_ETH_Init+0x2bc>)
 80018d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d6:	6453      	str	r3, [r2, #68]	; 0x44
 80018d8:	4b9b      	ldr	r3, [pc, #620]	; (8001b48 <HAL_ETH_Init+0x2bc>)
 80018da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80018e4:	4b99      	ldr	r3, [pc, #612]	; (8001b4c <HAL_ETH_Init+0x2c0>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	4a98      	ldr	r2, [pc, #608]	; (8001b4c <HAL_ETH_Init+0x2c0>)
 80018ea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018ee:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018f0:	4b96      	ldr	r3, [pc, #600]	; (8001b4c <HAL_ETH_Init+0x2c0>)
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4994      	ldr	r1, [pc, #592]	; (8001b4c <HAL_ETH_Init+0x2c0>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0201 	orr.w	r2, r2, #1
 8001910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001914:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001916:	f7ff fe2b 	bl	8001570 <HAL_GetTick>
 800191a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800191c:	e011      	b.n	8001942 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800191e:	f7ff fe27 	bl	8001570 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800192c:	d909      	bls.n	8001942 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2203      	movs	r2, #3
 8001932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e139      	b.n	8001bb6 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1e4      	bne.n	800191e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f023 031c 	bic.w	r3, r3, #28
 8001962:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001964:	f002 fa70 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8001968:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	4a78      	ldr	r2, [pc, #480]	; (8001b50 <HAL_ETH_Init+0x2c4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d908      	bls.n	8001984 <HAL_ETH_Init+0xf8>
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	4a77      	ldr	r2, [pc, #476]	; (8001b54 <HAL_ETH_Init+0x2c8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d804      	bhi.n	8001984 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	f043 0308 	orr.w	r3, r3, #8
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	e027      	b.n	80019d4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	4a73      	ldr	r2, [pc, #460]	; (8001b54 <HAL_ETH_Init+0x2c8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d908      	bls.n	800199e <HAL_ETH_Init+0x112>
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	4a6d      	ldr	r2, [pc, #436]	; (8001b44 <HAL_ETH_Init+0x2b8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d204      	bcs.n	800199e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f043 030c 	orr.w	r3, r3, #12
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	e01a      	b.n	80019d4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4a68      	ldr	r2, [pc, #416]	; (8001b44 <HAL_ETH_Init+0x2b8>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d303      	bcc.n	80019ae <HAL_ETH_Init+0x122>
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4a6b      	ldr	r2, [pc, #428]	; (8001b58 <HAL_ETH_Init+0x2cc>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d911      	bls.n	80019d2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4a69      	ldr	r2, [pc, #420]	; (8001b58 <HAL_ETH_Init+0x2cc>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d908      	bls.n	80019c8 <HAL_ETH_Init+0x13c>
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4a68      	ldr	r2, [pc, #416]	; (8001b5c <HAL_ETH_Init+0x2d0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d804      	bhi.n	80019c8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e005      	b.n	80019d4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f043 0310 	orr.w	r3, r3, #16
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	e000      	b.n	80019d4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80019d2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80019dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019e0:	2100      	movs	r1, #0
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fc1d 	bl	8002222 <HAL_ETH_WritePHYRegister>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80019f2:	6939      	ldr	r1, [r7, #16]
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fdd3 	bl	80025a0 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0d7      	b.n	8001bb6 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001a06:	20ff      	movs	r0, #255	; 0xff
 8001a08:	f7ff fdbe 	bl	8001588 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80a5 	beq.w	8001b60 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a16:	f7ff fdab 	bl	8001570 <HAL_GetTick>
 8001a1a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001a1c:	f107 030c 	add.w	r3, r7, #12
 8001a20:	461a      	mov	r2, r3
 8001a22:	2101      	movs	r1, #1
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 fb94 	bl	8002152 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001a2a:	f7ff fda1 	bl	8001570 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d90f      	bls.n	8001a5c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001a40:	6939      	ldr	r1, [r7, #16]
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 fdac 	bl	80025a0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e0ac      	b.n	8001bb6 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0da      	beq.n	8001a1c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001a66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 fbd8 	bl	8002222 <HAL_ETH_WritePHYRegister>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00b      	beq.n	8001a90 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001a7c:	6939      	ldr	r1, [r7, #16]
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fd8e 	bl	80025a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e092      	b.n	8001bb6 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001a90:	f7ff fd6e 	bl	8001570 <HAL_GetTick>
 8001a94:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fb57 	bl	8002152 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001aa4:	f7ff fd64 	bl	8001570 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d90f      	bls.n	8001ad6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001aba:	6939      	ldr	r1, [r7, #16]
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fd6f 	bl	80025a0 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e06f      	b.n	8001bb6 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0da      	beq.n	8001a96 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2110      	movs	r1, #16
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fb32 	bl	8002152 <HAL_ETH_ReadPHYRegister>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00b      	beq.n	8001b0c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001af8:	6939      	ldr	r1, [r7, #16]
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 fd50 	bl	80025a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e054      	b.n	8001bb6 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d004      	beq.n	8001b20 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	e002      	b.n	8001b26 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	e035      	b.n	8001ba4 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	e030      	b.n	8001ba4 <HAL_ETH_Init+0x318>
 8001b42:	bf00      	nop
 8001b44:	03938700 	.word	0x03938700
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40013800 	.word	0x40013800
 8001b50:	01312cff 	.word	0x01312cff
 8001b54:	02160ebf 	.word	0x02160ebf
 8001b58:	05f5e0ff 	.word	0x05f5e0ff
 8001b5c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	085b      	lsrs	r3, r3, #1
 8001b6e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001b70:	4313      	orrs	r3, r2
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	2100      	movs	r1, #0
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fb52 	bl	8002222 <HAL_ETH_WritePHYRegister>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00b      	beq.n	8001b9c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001b88:	6939      	ldr	r1, [r7, #16]
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 fd08 	bl	80025a0 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e00c      	b.n	8001bb6 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001b9c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001ba0:	f7ff fcf2 	bl	8001588 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001ba4:	6939      	ldr	r1, [r7, #16]
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 fcfa 	bl	80025a0 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop

08001bc0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_ETH_DMATxDescListInit+0x20>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e052      	b.n	8001c86 <HAL_ETH_DMATxDescListInit+0xc6>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e030      	b.n	8001c5e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	015b      	lsls	r3, r3, #5
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	4413      	add	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c0c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c14:	fb02 f303 	mul.w	r3, r2, r3
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d105      	bne.n	8001c36 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d208      	bcs.n	8001c52 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	3301      	adds	r3, #1
 8001c44:	015b      	lsls	r3, r3, #5
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	4413      	add	r3, r2
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	e002      	b.n	8001c58 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d3ca      	bcc.n	8001bfc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6819      	ldr	r1, [r3, #0]
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f241 0310 	movw	r3, #4112	; 0x1010
 8001c70:	440b      	add	r3, r1
 8001c72:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b087      	sub	sp, #28
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_ETH_DMARxDescListInit+0x20>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e056      	b.n	8001d60 <HAL_ETH_DMARxDescListInit+0xce>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	e034      	b.n	8001d38 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	015b      	lsls	r3, r3, #5
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001cde:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001ce6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d208      	bcs.n	8001d2c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	015b      	lsls	r3, r3, #5
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	4413      	add	r3, r2
 8001d24:	461a      	mov	r2, r3
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	e002      	b.n	8001d32 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3301      	adds	r3, #1
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d3c6      	bcc.n	8001cce <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6819      	ldr	r1, [r3, #0]
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	f241 030c 	movw	r3, #4108	; 0x100c
 8001d4a:	440b      	add	r3, r1
 8001d4c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2201      	movs	r2, #1
 8001d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	371c      	adds	r7, #28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d101      	bne.n	8001d90 <HAL_ETH_TransmitFrame+0x24>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e0cd      	b.n	8001f2c <HAL_ETH_TransmitFrame+0x1c0>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d109      	bne.n	8001dba <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001db6:	2301      	movs	r3, #1
 8001db8:	e0b8      	b.n	8001f2c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da09      	bge.n	8001dd8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2212      	movs	r2, #18
 8001dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0a9      	b.n	8001f2c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d915      	bls.n	8001e0e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	4a54      	ldr	r2, [pc, #336]	; (8001f38 <HAL_ETH_TransmitFrame+0x1cc>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	0a9b      	lsrs	r3, r3, #10
 8001dec:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	4b51      	ldr	r3, [pc, #324]	; (8001f38 <HAL_ETH_TransmitFrame+0x1cc>)
 8001df2:	fba3 1302 	umull	r1, r3, r3, r2
 8001df6:	0a9b      	lsrs	r3, r3, #10
 8001df8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001dfc:	fb01 f303 	mul.w	r3, r1, r3
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d005      	beq.n	8001e12 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e001      	b.n	8001e12 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d11c      	bne.n	8001e52 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001e26:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001e32:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e42:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e50:	e04b      	b.n	8001eea <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	e044      	b.n	8001ee2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e62:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e66:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d107      	bne.n	8001e7e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e7c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e86:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d116      	bne.n	8001ec0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001ea0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	4a25      	ldr	r2, [pc, #148]	; (8001f3c <HAL_ETH_TransmitFrame+0x1d0>)
 8001ea6:	fb02 f203 	mul.w	r2, r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	4413      	add	r3, r2
 8001eae:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001eb2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001ebe:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ece:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d3b6      	bcc.n	8001e58 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	f241 0314 	movw	r3, #4116	; 0x1014
 8001ef2:	4413      	add	r3, r2
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00d      	beq.n	8001f1a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	f241 0314 	movw	r3, #4116	; 0x1014
 8001f06:	4413      	add	r3, r2
 8001f08:	2204      	movs	r2, #4
 8001f0a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	f241 0304 	movw	r3, #4100	; 0x1004
 8001f14:	4413      	add	r3, r2
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	371c      	adds	r7, #28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	ac02b00b 	.word	0xac02b00b
 8001f3c:	fffffa0c 	.word	0xfffffa0c

08001f40 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_ETH_GetReceivedFrame+0x1a>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e070      	b.n	800203c <HAL_ETH_GetReceivedFrame+0xfc>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2202      	movs	r2, #2
 8001f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db5a      	blt.n	800202a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d030      	beq.n	8001fe4 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d103      	bne.n	8001f9c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	0c1b      	lsrs	r3, r3, #16
 8001fac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001fb0:	3b04      	subs	r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e02b      	b.n	800203c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d010      	beq.n	8002014 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	461a      	mov	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	629a      	str	r2, [r3, #40]	; 0x28
 8002012:	e00a      	b.n	800202a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	461a      	mov	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	f241 0314 	movw	r3, #4116	; 0x1014
 8002058:	4413      	add	r3, r2
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002060:	2b40      	cmp	r3, #64	; 0x40
 8002062:	d112      	bne.n	800208a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f860 	bl	800212a <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002072:	4413      	add	r3, r2
 8002074:	2240      	movs	r2, #64	; 0x40
 8002076:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002088:	e01b      	b.n	80020c2 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002092:	4413      	add	r3, r2
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d111      	bne.n	80020c2 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f839 	bl	8002116 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	f241 0314 	movw	r3, #4116	; 0x1014
 80020ac:	4413      	add	r3, r2
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	f241 0314 	movw	r3, #4116	; 0x1014
 80020ca:	4413      	add	r3, r2
 80020cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020d0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f241 0314 	movw	r3, #4116	; 0x1014
 80020da:	4413      	add	r3, r2
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e6:	d112      	bne.n	800210e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f828 	bl	800213e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f241 0314 	movw	r3, #4116	; 0x1014
 80020f6:	4413      	add	r3, r2
 80020f8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020fc:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */ 
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	460b      	mov	r3, r1
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b82      	cmp	r3, #130	; 0x82
 8002172:	d101      	bne.n	8002178 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002174:	2302      	movs	r3, #2
 8002176:	e050      	b.n	800221a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2282      	movs	r2, #130	; 0x82
 800217c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f003 031c 	and.w	r3, r3, #28
 800218e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8a1b      	ldrh	r3, [r3, #16]
 8002194:	02db      	lsls	r3, r3, #11
 8002196:	b29b      	uxth	r3, r3
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	4313      	orrs	r3, r2
 800219c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800219e:	897b      	ldrh	r3, [r7, #10]
 80021a0:	019b      	lsls	r3, r3, #6
 80021a2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f023 0302 	bic.w	r3, r3, #2
 80021b2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80021c4:	f7ff f9d4 	bl	8001570 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021ca:	e015      	b.n	80021f8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80021cc:	f7ff f9d0 	bl	8001570 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021da:	d309      	bcc.n	80021f0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e014      	b.n	800221a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1e4      	bne.n	80021cc <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	b29b      	uxth	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	460b      	mov	r3, r1
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b42      	cmp	r3, #66	; 0x42
 8002242:	d101      	bne.n	8002248 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002244:	2302      	movs	r3, #2
 8002246:	e04e      	b.n	80022e6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2242      	movs	r2, #66	; 0x42
 800224c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f003 031c 	and.w	r3, r3, #28
 800225e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8a1b      	ldrh	r3, [r3, #16]
 8002264:	02db      	lsls	r3, r3, #11
 8002266:	b29b      	uxth	r3, r3
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	4313      	orrs	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800226e:	897b      	ldrh	r3, [r7, #10]
 8002270:	019b      	lsls	r3, r3, #6
 8002272:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f043 0302 	orr.w	r3, r3, #2
 8002282:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800229e:	f7ff f967 	bl	8001570 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022a4:	e015      	b.n	80022d2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80022a6:	f7ff f963 	bl	8001570 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d309      	bcc.n	80022ca <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e00d      	b.n	80022e6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e4      	bne.n	80022a6 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_ETH_Start+0x16>
 8002300:	2302      	movs	r3, #2
 8002302:	e01f      	b.n	8002344 <HAL_ETH_Start+0x56>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 fb45 	bl	80029a4 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fb7c 	bl	8002a18 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fc13 	bl	8002b4c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fbb0 	bl	8002a8c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fbdd 	bl	8002aec <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_ETH_Stop+0x16>
 800235e:	2302      	movs	r3, #2
 8002360:	e01f      	b.n	80023a2 <HAL_ETH_Stop+0x56>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2202      	movs	r2, #2
 800236e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fba2 	bl	8002abc <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 fbcf 	bl	8002b1c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fb67 	bl	8002a52 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 fbe1 	bl	8002b4c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 fb27 	bl	80029de <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d101      	bne.n	80023c8 <HAL_ETH_ConfigMAC+0x1c>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e0e4      	b.n	8002592 <HAL_ETH_ConfigMAC+0x1e6>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80b1 	beq.w	8002542 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4b6c      	ldr	r3, [pc, #432]	; (800259c <HAL_ETH_ConfigMAC+0x1f0>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80023f8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80023fe:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002404:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800240a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002410:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002416:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800241c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002422:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002428:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800242e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002434:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800243a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002452:	2001      	movs	r0, #1
 8002454:	f7ff f898 	bl	8001588 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002468:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800246e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002474:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800247a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002480:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002486:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002492:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002494:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800249e:	2001      	movs	r0, #1
 80024a0:	f7ff f872 	bl	8001588 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024b4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024be:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	f64f 7341 	movw	r3, #65345	; 0xff41
 80024ce:	4013      	ands	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80024dc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80024e2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80024e8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80024ee:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80024f4:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800250c:	2001      	movs	r0, #1
 800250e:	f7ff f83b 	bl	8001588 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69db      	ldr	r3, [r3, #28]
 8002530:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002532:	2001      	movs	r0, #1
 8002534:	f7ff f828 	bl	8001588 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	61da      	str	r2, [r3, #28]
 8002540:	e01e      	b.n	8002580 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002550:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002572:	2001      	movs	r0, #1
 8002574:	f7ff f808 	bl	8001588 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	ff20810f 	.word	0xff20810f

080025a0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b0b0      	sub	sp, #192	; 0xc0
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025bc:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80025ce:	2300      	movs	r3, #0
 80025d0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80025e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ea:	663b      	str	r3, [r7, #96]	; 0x60
 80025ec:	e001      	b.n	80025f2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80025f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025f6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80025f8:	2300      	movs	r3, #0
 80025fa:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80025fc:	2300      	movs	r3, #0
 80025fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800260c:	2340      	movs	r3, #64	; 0x40
 800260e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002610:	2300      	movs	r3, #0
 8002612:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002616:	2300      	movs	r3, #0
 8002618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002628:	2300      	movs	r3, #0
 800262a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002634:	2300      	movs	r3, #0
 8002636:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800263a:	2300      	movs	r3, #0
 800263c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002640:	2380      	movs	r3, #128	; 0x80
 8002642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002646:	2300      	movs	r3, #0
 8002648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002674:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002678:	4bab      	ldr	r3, [pc, #684]	; (8002928 <ETH_MACDMAConfig+0x388>)
 800267a:	4013      	ands	r3, r2
 800267c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002680:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002684:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002688:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800268a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800268c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002692:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002696:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800269a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80026a0:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80026a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80026a4:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80026a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80026a8:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80026aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80026ac:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80026ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80026b0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80026b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80026b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80026b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026c8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026d4:	2001      	movs	r0, #1
 80026d6:	f7fe ff57 	bl	8001588 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026e2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80026e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80026e8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80026ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80026ec:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80026ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80026f2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80026f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80026f8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80026fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80026fe:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002700:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002704:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002708:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002710:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002712:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800271e:	2001      	movs	r0, #1
 8002720:	f7fe ff32 	bl	8001588 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800272c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002736:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002740:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800274c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002750:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002754:	4013      	ands	r3, r2
 8002756:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800275a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800275e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002760:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002764:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002766:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800276a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800276c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002770:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002776:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002778:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800277c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800277e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002790:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800279c:	2001      	movs	r0, #1
 800279e:	f7fe fef3 	bl	8001588 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027aa:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80027ac:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80027b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027c6:	2001      	movs	r0, #1
 80027c8:	f7fe fede 	bl	8001588 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027d4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80027da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027de:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80027e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027e8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80027fa:	2304      	movs	r3, #4
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80027fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002804:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002808:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800280a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800280e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002814:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800281a:	2300      	movs	r3, #0
 800281c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800281e:	2300      	movs	r3, #0
 8002820:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	f241 0318 	movw	r3, #4120	; 0x1018
 800282a:	4413      	add	r3, r2
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002832:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002836:	4b3d      	ldr	r3, [pc, #244]	; (800292c <ETH_MACDMAConfig+0x38c>)
 8002838:	4013      	ands	r3, r2
 800283a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800283e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002840:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002842:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002844:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002846:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002848:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800284a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800284c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800284e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002850:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002852:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002854:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002856:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800285a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800285c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800285e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002860:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002872:	4413      	add	r3, r2
 8002874:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002878:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002882:	4413      	add	r3, r2
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800288a:	2001      	movs	r0, #1
 800288c:	f7fe fe7c 	bl	8001588 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	f241 0318 	movw	r3, #4120	; 0x1018
 8002898:	4413      	add	r3, r2
 800289a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800289e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80028a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80028a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80028a4:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80028a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80028a8:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80028ac:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80028ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80028b0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80028b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80028b6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80028b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80028ba:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80028c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80028d8:	2001      	movs	r0, #1
 80028da:	f7fe fe55 	bl	8001588 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80028ea:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d10d      	bne.n	8002910 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	f241 031c 	movw	r3, #4124	; 0x101c
 80028fc:	4413      	add	r3, r2
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6811      	ldr	r1, [r2, #0]
 8002904:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <ETH_MACDMAConfig+0x390>)
 8002906:	431a      	orrs	r2, r3
 8002908:	f241 031c 	movw	r3, #4124	; 0x101c
 800290c:	440b      	add	r3, r1
 800290e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	461a      	mov	r2, r3
 8002916:	2100      	movs	r1, #0
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f80b 	bl	8002934 <ETH_MACAddressConfig>
}
 800291e:	bf00      	nop
 8002920:	37c0      	adds	r7, #192	; 0xc0
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	ff20810f 	.word	0xff20810f
 800292c:	f8de3f23 	.word	0xf8de3f23
 8002930:	00010040 	.word	0x00010040

08002934 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002934:	b480      	push	{r7}
 8002936:	b087      	sub	sp, #28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3305      	adds	r3, #5
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	3204      	adds	r2, #4
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	4b11      	ldr	r3, [pc, #68]	; (800299c <ETH_MACAddressConfig+0x68>)
 8002956:	4413      	add	r3, r2
 8002958:	461a      	mov	r2, r3
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3303      	adds	r3, #3
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	061a      	lsls	r2, r3, #24
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3302      	adds	r3, #2
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3301      	adds	r3, #1
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	4313      	orrs	r3, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	7812      	ldrb	r2, [r2, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <ETH_MACAddressConfig+0x6c>)
 8002986:	4413      	add	r3, r2
 8002988:	461a      	mov	r2, r3
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	6013      	str	r3, [r2, #0]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40028040 	.word	0x40028040
 80029a0:	40028044 	.word	0x40028044

080029a4 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0208 	orr.w	r2, r2, #8
 80029be:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029c8:	2001      	movs	r0, #1
 80029ca:	f7fe fddd 	bl	8001588 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	601a      	str	r2, [r3, #0]
}
 80029d6:	bf00      	nop
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0208 	bic.w	r2, r2, #8
 80029f8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a02:	2001      	movs	r0, #1
 8002a04:	f7fe fdc0 	bl	8001588 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	601a      	str	r2, [r3, #0]
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0204 	orr.w	r2, r2, #4
 8002a32:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	f7fe fda3 	bl	8001588 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	601a      	str	r2, [r3, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0204 	bic.w	r2, r2, #4
 8002a6c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f7fe fd86 	bl	8001588 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	601a      	str	r2, [r3, #0]
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a9c:	4413      	add	r3, r2
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6811      	ldr	r1, [r2, #0]
 8002aa4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002aa8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002aac:	440b      	add	r3, r1
 8002aae:	601a      	str	r2, [r3, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002acc:	4413      	add	r3, r2
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6811      	ldr	r1, [r2, #0]
 8002ad4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ad8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002adc:	440b      	add	r3, r1
 8002ade:	601a      	str	r2, [r3, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002afc:	4413      	add	r3, r2
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6811      	ldr	r1, [r2, #0]
 8002b04:	f043 0202 	orr.w	r2, r3, #2
 8002b08:	f241 0318 	movw	r3, #4120	; 0x1018
 8002b0c:	440b      	add	r3, r1
 8002b0e:	601a      	str	r2, [r3, #0]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	f241 0318 	movw	r3, #4120	; 0x1018
 8002b2c:	4413      	add	r3, r2
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6811      	ldr	r1, [r2, #0]
 8002b34:	f023 0202 	bic.w	r2, r3, #2
 8002b38:	f241 0318 	movw	r3, #4120	; 0x1018
 8002b3c:	440b      	add	r3, r1
 8002b3e:	601a      	str	r2, [r3, #0]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002b60:	4413      	add	r3, r2
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6811      	ldr	r1, [r2, #0]
 8002b68:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b6c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002b70:	440b      	add	r3, r1
 8002b72:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	f241 0318 	movw	r3, #4120	; 0x1018
 8002b7c:	4413      	add	r3, r2
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b82:	2001      	movs	r0, #1
 8002b84:	f7fe fd00 	bl	8001588 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002b92:	440b      	add	r3, r1
 8002b94:	601a      	str	r2, [r3, #0]
}
 8002b96:	bf00      	nop
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	e175      	b.n	8002eac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	f040 8164 	bne.w	8002ea6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d00b      	beq.n	8002bfe <HAL_GPIO_Init+0x5e>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d007      	beq.n	8002bfe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bf2:	2b11      	cmp	r3, #17
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b12      	cmp	r3, #18
 8002bfc:	d130      	bne.n	8002c60 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	2203      	movs	r2, #3
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c34:	2201      	movs	r2, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	091b      	lsrs	r3, r3, #4
 8002c4a:	f003 0201 	and.w	r2, r3, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x100>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b12      	cmp	r3, #18
 8002c9e:	d123      	bne.n	8002ce8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	08da      	lsrs	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3208      	adds	r2, #8
 8002ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	220f      	movs	r2, #15
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	08da      	lsrs	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3208      	adds	r2, #8
 8002ce2:	69b9      	ldr	r1, [r7, #24]
 8002ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0203 	and.w	r2, r3, #3
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80be 	beq.w	8002ea6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2a:	4b66      	ldr	r3, [pc, #408]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a65      	ldr	r2, [pc, #404]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <HAL_GPIO_Init+0x324>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d42:	4a61      	ldr	r2, [pc, #388]	; (8002ec8 <HAL_GPIO_Init+0x328>)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	220f      	movs	r2, #15
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a58      	ldr	r2, [pc, #352]	; (8002ecc <HAL_GPIO_Init+0x32c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d037      	beq.n	8002dde <HAL_GPIO_Init+0x23e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a57      	ldr	r2, [pc, #348]	; (8002ed0 <HAL_GPIO_Init+0x330>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d031      	beq.n	8002dda <HAL_GPIO_Init+0x23a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a56      	ldr	r2, [pc, #344]	; (8002ed4 <HAL_GPIO_Init+0x334>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d02b      	beq.n	8002dd6 <HAL_GPIO_Init+0x236>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a55      	ldr	r2, [pc, #340]	; (8002ed8 <HAL_GPIO_Init+0x338>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d025      	beq.n	8002dd2 <HAL_GPIO_Init+0x232>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a54      	ldr	r2, [pc, #336]	; (8002edc <HAL_GPIO_Init+0x33c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01f      	beq.n	8002dce <HAL_GPIO_Init+0x22e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a53      	ldr	r2, [pc, #332]	; (8002ee0 <HAL_GPIO_Init+0x340>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d019      	beq.n	8002dca <HAL_GPIO_Init+0x22a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a52      	ldr	r2, [pc, #328]	; (8002ee4 <HAL_GPIO_Init+0x344>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_GPIO_Init+0x226>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a51      	ldr	r2, [pc, #324]	; (8002ee8 <HAL_GPIO_Init+0x348>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_GPIO_Init+0x222>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a50      	ldr	r2, [pc, #320]	; (8002eec <HAL_GPIO_Init+0x34c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <HAL_GPIO_Init+0x21e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4f      	ldr	r2, [pc, #316]	; (8002ef0 <HAL_GPIO_Init+0x350>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_GPIO_Init+0x21a>
 8002db6:	2309      	movs	r3, #9
 8002db8:	e012      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dba:	230a      	movs	r3, #10
 8002dbc:	e010      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	e00e      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dc2:	2307      	movs	r3, #7
 8002dc4:	e00c      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dc6:	2306      	movs	r3, #6
 8002dc8:	e00a      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dca:	2305      	movs	r3, #5
 8002dcc:	e008      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dce:	2304      	movs	r3, #4
 8002dd0:	e006      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e004      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e002      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e000      	b.n	8002de0 <HAL_GPIO_Init+0x240>
 8002dde:	2300      	movs	r3, #0
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	f002 0203 	and.w	r2, r2, #3
 8002de6:	0092      	lsls	r2, r2, #2
 8002de8:	4093      	lsls	r3, r2
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002df0:	4935      	ldr	r1, [pc, #212]	; (8002ec8 <HAL_GPIO_Init+0x328>)
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e22:	4a34      	ldr	r2, [pc, #208]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e28:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e4c:	4a29      	ldr	r2, [pc, #164]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e52:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	43db      	mvns	r3, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d003      	beq.n	8002e76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e76:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <HAL_GPIO_Init+0x354>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b0f      	cmp	r3, #15
 8002eb0:	f67f ae86 	bls.w	8002bc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3724      	adds	r7, #36	; 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40013800 	.word	0x40013800
 8002ecc:	40020000 	.word	0x40020000
 8002ed0:	40020400 	.word	0x40020400
 8002ed4:	40020800 	.word	0x40020800
 8002ed8:	40020c00 	.word	0x40020c00
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40021400 	.word	0x40021400
 8002ee4:	40021800 	.word	0x40021800
 8002ee8:	40021c00 	.word	0x40021c00
 8002eec:	40022000 	.word	0x40022000
 8002ef0:	40022400 	.word	0x40022400
 8002ef4:	40013c00 	.word	0x40013c00

08002ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
 8002f04:	4613      	mov	r3, r2
 8002f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f08:	787b      	ldrb	r3, [r7, #1]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f14:	e003      	b.n	8002f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f16:	887b      	ldrh	r3, [r7, #2]
 8002f18:	041a      	lsls	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	619a      	str	r2, [r3, #24]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	68f9      	ldr	r1, [r7, #12]
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	4798      	blx	r3
  }
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0bf      	b.n	80030f2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fd fece 	bl	8000d28 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002fa2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6999      	ldr	r1, [r3, #24]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002fb8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6899      	ldr	r1, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4b4a      	ldr	r3, [pc, #296]	; (80030fc <HAL_LTDC_Init+0x19c>)
 8002fd4:	400b      	ands	r3, r1
 8002fd6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	041b      	lsls	r3, r3, #16
 8002fde:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6899      	ldr	r1, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68d9      	ldr	r1, [r3, #12]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b3e      	ldr	r3, [pc, #248]	; (80030fc <HAL_LTDC_Init+0x19c>)
 8003002:	400b      	ands	r3, r1
 8003004:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	041b      	lsls	r3, r3, #16
 800300c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68d9      	ldr	r1, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1a      	ldr	r2, [r3, #32]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6919      	ldr	r1, [r3, #16]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	4b33      	ldr	r3, [pc, #204]	; (80030fc <HAL_LTDC_Init+0x19c>)
 8003030:	400b      	ands	r3, r1
 8003032:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6919      	ldr	r1, [r3, #16]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6959      	ldr	r1, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b27      	ldr	r3, [pc, #156]	; (80030fc <HAL_LTDC_Init+0x19c>)
 800305e:	400b      	ands	r3, r1
 8003060:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	041b      	lsls	r3, r3, #16
 8003068:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6959      	ldr	r1, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003090:	041b      	lsls	r3, r3, #16
 8003092:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0206 	orr.w	r2, r2, #6
 80030ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	f000f800 	.word	0xf000f800

08003100 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_LTDC_ConfigLayer+0x1a>
 8003116:	2302      	movs	r3, #2
 8003118:	e02c      	b.n	8003174 <HAL_LTDC_ConfigLayer+0x74>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2202      	movs	r2, #2
 8003126:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2134      	movs	r1, #52	; 0x34
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	4413      	add	r3, r2
 8003136:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4614      	mov	r4, r2
 800313e:	461d      	mov	r5, r3
 8003140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800314a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800314c:	682b      	ldr	r3, [r5, #0]
 800314e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f847 	bl	80031e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2201      	movs	r2, #1
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bdb0      	pop	{r4, r5, r7, pc}

0800317c <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <HAL_LTDC_SetAddress+0x1a>
 8003192:	2302      	movs	r3, #2
 8003194:	e024      	b.n	80031e0 <HAL_LTDC_SetAddress+0x64>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2202      	movs	r2, #2
 80031a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2234      	movs	r2, #52	; 0x34
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	3338      	adds	r3, #56	; 0x38
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6979      	ldr	r1, [r7, #20]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 f811 	bl	80031e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2201      	movs	r2, #1
 80031cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b089      	sub	sp, #36	; 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	0c1b      	lsrs	r3, r3, #16
 8003200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003204:	4413      	add	r3, r2
 8003206:	041b      	lsls	r3, r3, #16
 8003208:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	01db      	lsls	r3, r3, #7
 8003214:	4413      	add	r3, r2
 8003216:	3384      	adds	r3, #132	; 0x84
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	6812      	ldr	r2, [r2, #0]
 800321e:	4611      	mov	r1, r2
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	01d2      	lsls	r2, r2, #7
 8003224:	440a      	add	r2, r1
 8003226:	3284      	adds	r2, #132	; 0x84
 8003228:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800322c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	0c1b      	lsrs	r3, r3, #16
 800323a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323e:	4413      	add	r3, r2
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4619      	mov	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	01db      	lsls	r3, r3, #7
 800324c:	440b      	add	r3, r1
 800324e:	3384      	adds	r3, #132	; 0x84
 8003250:	4619      	mov	r1, r3
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	4313      	orrs	r3, r2
 8003256:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003266:	4413      	add	r3, r2
 8003268:	041b      	lsls	r3, r3, #16
 800326a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	01db      	lsls	r3, r3, #7
 8003276:	4413      	add	r3, r2
 8003278:	3384      	adds	r3, #132	; 0x84
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	4611      	mov	r1, r2
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	01d2      	lsls	r2, r2, #7
 8003286:	440a      	add	r2, r1
 8003288:	3284      	adds	r2, #132	; 0x84
 800328a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800328e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800329e:	4413      	add	r3, r2
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4619      	mov	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	01db      	lsls	r3, r3, #7
 80032ac:	440b      	add	r3, r1
 80032ae:	3384      	adds	r3, #132	; 0x84
 80032b0:	4619      	mov	r1, r3
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	01db      	lsls	r3, r3, #7
 80032c2:	4413      	add	r3, r2
 80032c4:	3384      	adds	r3, #132	; 0x84
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	4611      	mov	r1, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	01d2      	lsls	r2, r2, #7
 80032d2:	440a      	add	r2, r1
 80032d4:	3284      	adds	r2, #132	; 0x84
 80032d6:	f023 0307 	bic.w	r3, r3, #7
 80032da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	01db      	lsls	r3, r3, #7
 80032e6:	4413      	add	r3, r2
 80032e8:	3384      	adds	r3, #132	; 0x84
 80032ea:	461a      	mov	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80032f8:	021b      	lsls	r3, r3, #8
 80032fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	061b      	lsls	r3, r3, #24
 800330c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	01db      	lsls	r3, r3, #7
 8003318:	4413      	add	r3, r2
 800331a:	3384      	adds	r3, #132	; 0x84
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	01db      	lsls	r3, r3, #7
 8003328:	4413      	add	r3, r2
 800332a:	3384      	adds	r3, #132	; 0x84
 800332c:	461a      	mov	r2, r3
 800332e:	2300      	movs	r3, #0
 8003330:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003338:	461a      	mov	r2, r3
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	431a      	orrs	r2, r3
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	431a      	orrs	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4619      	mov	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	01db      	lsls	r3, r3, #7
 800334c:	440b      	add	r3, r1
 800334e:	3384      	adds	r3, #132	; 0x84
 8003350:	4619      	mov	r1, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	01db      	lsls	r3, r3, #7
 8003362:	4413      	add	r3, r2
 8003364:	3384      	adds	r3, #132	; 0x84
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	4611      	mov	r1, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	01d2      	lsls	r2, r2, #7
 8003372:	440a      	add	r2, r1
 8003374:	3284      	adds	r2, #132	; 0x84
 8003376:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800337a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	01db      	lsls	r3, r3, #7
 8003386:	4413      	add	r3, r2
 8003388:	3384      	adds	r3, #132	; 0x84
 800338a:	461a      	mov	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	01db      	lsls	r3, r3, #7
 800339c:	4413      	add	r3, r2
 800339e:	3384      	adds	r3, #132	; 0x84
 80033a0:	69da      	ldr	r2, [r3, #28]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4619      	mov	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	01db      	lsls	r3, r3, #7
 80033ac:	440b      	add	r3, r1
 80033ae:	3384      	adds	r3, #132	; 0x84
 80033b0:	4619      	mov	r1, r3
 80033b2:	4b58      	ldr	r3, [pc, #352]	; (8003514 <LTDC_SetConfig+0x32c>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	68f9      	ldr	r1, [r7, #12]
 80033c2:	6809      	ldr	r1, [r1, #0]
 80033c4:	4608      	mov	r0, r1
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	01c9      	lsls	r1, r1, #7
 80033ca:	4401      	add	r1, r0
 80033cc:	3184      	adds	r1, #132	; 0x84
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	01db      	lsls	r3, r3, #7
 80033dc:	4413      	add	r3, r2
 80033de:	3384      	adds	r3, #132	; 0x84
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	01db      	lsls	r3, r3, #7
 80033ec:	4413      	add	r3, r2
 80033ee:	3384      	adds	r3, #132	; 0x84
 80033f0:	461a      	mov	r2, r3
 80033f2:	2300      	movs	r3, #0
 80033f4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	01db      	lsls	r3, r3, #7
 8003400:	4413      	add	r3, r2
 8003402:	3384      	adds	r3, #132	; 0x84
 8003404:	461a      	mov	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d102      	bne.n	800341a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003414:	2304      	movs	r3, #4
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	e01b      	b.n	8003452 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d102      	bne.n	8003428 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003422:	2303      	movs	r3, #3
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	e014      	b.n	8003452 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	2b04      	cmp	r3, #4
 800342e:	d00b      	beq.n	8003448 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003434:	2b02      	cmp	r3, #2
 8003436:	d007      	beq.n	8003448 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800343c:	2b03      	cmp	r3, #3
 800343e:	d003      	beq.n	8003448 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003444:	2b07      	cmp	r3, #7
 8003446:	d102      	bne.n	800344e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003448:	2302      	movs	r3, #2
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	e001      	b.n	8003452 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800344e:	2301      	movs	r3, #1
 8003450:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	01db      	lsls	r3, r3, #7
 800345c:	4413      	add	r3, r2
 800345e:	3384      	adds	r3, #132	; 0x84
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	4611      	mov	r1, r2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	01d2      	lsls	r2, r2, #7
 800346c:	440a      	add	r2, r1
 800346e:	3284      	adds	r2, #132	; 0x84
 8003470:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003474:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	fb02 f303 	mul.w	r3, r2, r3
 8003480:	041a      	lsls	r2, r3, #16
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	1acb      	subs	r3, r1, r3
 800348c:	69f9      	ldr	r1, [r7, #28]
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	3303      	adds	r3, #3
 8003494:	68f9      	ldr	r1, [r7, #12]
 8003496:	6809      	ldr	r1, [r1, #0]
 8003498:	4608      	mov	r0, r1
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	01c9      	lsls	r1, r1, #7
 800349e:	4401      	add	r1, r0
 80034a0:	3184      	adds	r1, #132	; 0x84
 80034a2:	4313      	orrs	r3, r2
 80034a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	01db      	lsls	r3, r3, #7
 80034b0:	4413      	add	r3, r2
 80034b2:	3384      	adds	r3, #132	; 0x84
 80034b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4619      	mov	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	01db      	lsls	r3, r3, #7
 80034c0:	440b      	add	r3, r1
 80034c2:	3384      	adds	r3, #132	; 0x84
 80034c4:	4619      	mov	r1, r3
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <LTDC_SetConfig+0x330>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	01db      	lsls	r3, r3, #7
 80034d6:	4413      	add	r3, r2
 80034d8:	3384      	adds	r3, #132	; 0x84
 80034da:	461a      	mov	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	01db      	lsls	r3, r3, #7
 80034ec:	4413      	add	r3, r2
 80034ee:	3384      	adds	r3, #132	; 0x84
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	6812      	ldr	r2, [r2, #0]
 80034f6:	4611      	mov	r1, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	01d2      	lsls	r2, r2, #7
 80034fc:	440a      	add	r2, r1
 80034fe:	3284      	adds	r2, #132	; 0x84
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6013      	str	r3, [r2, #0]
}
 8003506:	bf00      	nop
 8003508:	3724      	adds	r7, #36	; 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	fffff8f8 	.word	0xfffff8f8
 8003518:	fffff800 	.word	0xfffff800

0800351c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	4a22      	ldr	r2, [pc, #136]	; (80035b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800353e:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003548:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800354a:	f7fe f811 	bl	8001570 <HAL_GetTick>
 800354e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003550:	e009      	b.n	8003566 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003552:	f7fe f80d 	bl	8001570 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003560:	d901      	bls.n	8003566 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e022      	b.n	80035ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003566:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003572:	d1ee      	bne.n	8003552 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003574:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a0f      	ldr	r2, [pc, #60]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800357a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800357e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003580:	f7fd fff6 	bl	8001570 <HAL_GetTick>
 8003584:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003586:	e009      	b.n	800359c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003588:	f7fd fff2 	bl	8001570 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003596:	d901      	bls.n	800359c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e007      	b.n	80035ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035a8:	d1ee      	bne.n	8003588 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40007000 	.word	0x40007000

080035bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035c4:	2300      	movs	r3, #0
 80035c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e291      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8087 	beq.w	80036ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e0:	4b96      	ldr	r3, [pc, #600]	; (800383c <HAL_RCC_OscConfig+0x280>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d00c      	beq.n	8003606 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ec:	4b93      	ldr	r3, [pc, #588]	; (800383c <HAL_RCC_OscConfig+0x280>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d112      	bne.n	800361e <HAL_RCC_OscConfig+0x62>
 80035f8:	4b90      	ldr	r3, [pc, #576]	; (800383c <HAL_RCC_OscConfig+0x280>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003604:	d10b      	bne.n	800361e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003606:	4b8d      	ldr	r3, [pc, #564]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d06c      	beq.n	80036ec <HAL_RCC_OscConfig+0x130>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d168      	bne.n	80036ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e26b      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003626:	d106      	bne.n	8003636 <HAL_RCC_OscConfig+0x7a>
 8003628:	4b84      	ldr	r3, [pc, #528]	; (800383c <HAL_RCC_OscConfig+0x280>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a83      	ldr	r2, [pc, #524]	; (800383c <HAL_RCC_OscConfig+0x280>)
 800362e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	e02e      	b.n	8003694 <HAL_RCC_OscConfig+0xd8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10c      	bne.n	8003658 <HAL_RCC_OscConfig+0x9c>
 800363e:	4b7f      	ldr	r3, [pc, #508]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a7e      	ldr	r2, [pc, #504]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	4b7c      	ldr	r3, [pc, #496]	; (800383c <HAL_RCC_OscConfig+0x280>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a7b      	ldr	r2, [pc, #492]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e01d      	b.n	8003694 <HAL_RCC_OscConfig+0xd8>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0xc0>
 8003662:	4b76      	ldr	r3, [pc, #472]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a75      	ldr	r2, [pc, #468]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b73      	ldr	r3, [pc, #460]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a72      	ldr	r2, [pc, #456]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e00b      	b.n	8003694 <HAL_RCC_OscConfig+0xd8>
 800367c:	4b6f      	ldr	r3, [pc, #444]	; (800383c <HAL_RCC_OscConfig+0x280>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a6e      	ldr	r2, [pc, #440]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	4b6c      	ldr	r3, [pc, #432]	; (800383c <HAL_RCC_OscConfig+0x280>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a6b      	ldr	r2, [pc, #428]	; (800383c <HAL_RCC_OscConfig+0x280>)
 800368e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d013      	beq.n	80036c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fd ff68 	bl	8001570 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a4:	f7fd ff64 	bl	8001570 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	; 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e21f      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b61      	ldr	r3, [pc, #388]	; (800383c <HAL_RCC_OscConfig+0x280>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0xe8>
 80036c2:	e014      	b.n	80036ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fd ff54 	bl	8001570 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036cc:	f7fd ff50 	bl	8001570 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e20b      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	4b57      	ldr	r3, [pc, #348]	; (800383c <HAL_RCC_OscConfig+0x280>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x110>
 80036ea:	e000      	b.n	80036ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d069      	beq.n	80037ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036fa:	4b50      	ldr	r3, [pc, #320]	; (800383c <HAL_RCC_OscConfig+0x280>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003706:	4b4d      	ldr	r3, [pc, #308]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b08      	cmp	r3, #8
 8003710:	d11c      	bne.n	800374c <HAL_RCC_OscConfig+0x190>
 8003712:	4b4a      	ldr	r3, [pc, #296]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d116      	bne.n	800374c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371e:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_RCC_OscConfig+0x17a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d001      	beq.n	8003736 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e1df      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003736:	4b41      	ldr	r3, [pc, #260]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	493d      	ldr	r1, [pc, #244]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374a:	e040      	b.n	80037ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d023      	beq.n	800379c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003754:	4b39      	ldr	r3, [pc, #228]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a38      	ldr	r2, [pc, #224]	; (800383c <HAL_RCC_OscConfig+0x280>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fd ff06 	bl	8001570 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003768:	f7fd ff02 	bl	8001570 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e1bd      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377a:	4b30      	ldr	r3, [pc, #192]	; (800383c <HAL_RCC_OscConfig+0x280>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003786:	4b2d      	ldr	r3, [pc, #180]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4929      	ldr	r1, [pc, #164]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003796:	4313      	orrs	r3, r2
 8003798:	600b      	str	r3, [r1, #0]
 800379a:	e018      	b.n	80037ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800379c:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_OscConfig+0x280>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a26      	ldr	r2, [pc, #152]	; (800383c <HAL_RCC_OscConfig+0x280>)
 80037a2:	f023 0301 	bic.w	r3, r3, #1
 80037a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fd fee2 	bl	8001570 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b0:	f7fd fede 	bl	8001570 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e199      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c2:	4b1e      	ldr	r3, [pc, #120]	; (800383c <HAL_RCC_OscConfig+0x280>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d038      	beq.n	800384c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d019      	beq.n	8003816 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e2:	4b16      	ldr	r3, [pc, #88]	; (800383c <HAL_RCC_OscConfig+0x280>)
 80037e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e6:	4a15      	ldr	r2, [pc, #84]	; (800383c <HAL_RCC_OscConfig+0x280>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ee:	f7fd febf 	bl	8001570 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f6:	f7fd febb 	bl	8001570 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e176      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <HAL_RCC_OscConfig+0x280>)
 800380a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x23a>
 8003814:	e01a      	b.n	800384c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003816:	4b09      	ldr	r3, [pc, #36]	; (800383c <HAL_RCC_OscConfig+0x280>)
 8003818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381a:	4a08      	ldr	r2, [pc, #32]	; (800383c <HAL_RCC_OscConfig+0x280>)
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003822:	f7fd fea5 	bl	8001570 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003828:	e00a      	b.n	8003840 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382a:	f7fd fea1 	bl	8001570 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d903      	bls.n	8003840 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e15c      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
 800383c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003840:	4b91      	ldr	r3, [pc, #580]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ee      	bne.n	800382a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80a4 	beq.w	80039a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385a:	4b8b      	ldr	r3, [pc, #556]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10d      	bne.n	8003882 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003866:	4b88      	ldr	r3, [pc, #544]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	4a87      	ldr	r2, [pc, #540]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 800386c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003870:	6413      	str	r3, [r2, #64]	; 0x40
 8003872:	4b85      	ldr	r3, [pc, #532]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800387e:	2301      	movs	r3, #1
 8003880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003882:	4b82      	ldr	r3, [pc, #520]	; (8003a8c <HAL_RCC_OscConfig+0x4d0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d118      	bne.n	80038c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800388e:	4b7f      	ldr	r3, [pc, #508]	; (8003a8c <HAL_RCC_OscConfig+0x4d0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7e      	ldr	r2, [pc, #504]	; (8003a8c <HAL_RCC_OscConfig+0x4d0>)
 8003894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389a:	f7fd fe69 	bl	8001570 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a2:	f7fd fe65 	bl	8001570 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b64      	cmp	r3, #100	; 0x64
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e120      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b4:	4b75      	ldr	r3, [pc, #468]	; (8003a8c <HAL_RCC_OscConfig+0x4d0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d106      	bne.n	80038d6 <HAL_RCC_OscConfig+0x31a>
 80038c8:	4b6f      	ldr	r3, [pc, #444]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038cc:	4a6e      	ldr	r2, [pc, #440]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6713      	str	r3, [r2, #112]	; 0x70
 80038d4:	e02d      	b.n	8003932 <HAL_RCC_OscConfig+0x376>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x33c>
 80038de:	4b6a      	ldr	r3, [pc, #424]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 80038e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e2:	4a69      	ldr	r2, [pc, #420]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	6713      	str	r3, [r2, #112]	; 0x70
 80038ea:	4b67      	ldr	r3, [pc, #412]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	4a66      	ldr	r2, [pc, #408]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 80038f0:	f023 0304 	bic.w	r3, r3, #4
 80038f4:	6713      	str	r3, [r2, #112]	; 0x70
 80038f6:	e01c      	b.n	8003932 <HAL_RCC_OscConfig+0x376>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b05      	cmp	r3, #5
 80038fe:	d10c      	bne.n	800391a <HAL_RCC_OscConfig+0x35e>
 8003900:	4b61      	ldr	r3, [pc, #388]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	4a60      	ldr	r2, [pc, #384]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003906:	f043 0304 	orr.w	r3, r3, #4
 800390a:	6713      	str	r3, [r2, #112]	; 0x70
 800390c:	4b5e      	ldr	r3, [pc, #376]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 800390e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003910:	4a5d      	ldr	r2, [pc, #372]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003912:	f043 0301 	orr.w	r3, r3, #1
 8003916:	6713      	str	r3, [r2, #112]	; 0x70
 8003918:	e00b      	b.n	8003932 <HAL_RCC_OscConfig+0x376>
 800391a:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	4a5a      	ldr	r2, [pc, #360]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	6713      	str	r3, [r2, #112]	; 0x70
 8003926:	4b58      	ldr	r3, [pc, #352]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	4a57      	ldr	r2, [pc, #348]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 800392c:	f023 0304 	bic.w	r3, r3, #4
 8003930:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d015      	beq.n	8003966 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fd fe19 	bl	8001570 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003942:	f7fd fe15 	bl	8001570 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e0ce      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003958:	4b4b      	ldr	r3, [pc, #300]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0ee      	beq.n	8003942 <HAL_RCC_OscConfig+0x386>
 8003964:	e014      	b.n	8003990 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003966:	f7fd fe03 	bl	8001570 <HAL_GetTick>
 800396a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396c:	e00a      	b.n	8003984 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396e:	f7fd fdff 	bl	8001570 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	f241 3288 	movw	r2, #5000	; 0x1388
 800397c:	4293      	cmp	r3, r2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e0b8      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003984:	4b40      	ldr	r3, [pc, #256]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ee      	bne.n	800396e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003990:	7dfb      	ldrb	r3, [r7, #23]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d105      	bne.n	80039a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003996:	4b3c      	ldr	r3, [pc, #240]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	4a3b      	ldr	r2, [pc, #236]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 800399c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 80a4 	beq.w	8003af4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039ac:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 030c 	and.w	r3, r3, #12
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d06b      	beq.n	8003a90 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d149      	bne.n	8003a54 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c0:	4b31      	ldr	r3, [pc, #196]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a30      	ldr	r2, [pc, #192]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 80039c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fd fdd0 	bl	8001570 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d4:	f7fd fdcc 	bl	8001570 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e087      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69da      	ldr	r2, [r3, #28]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	019b      	lsls	r3, r3, #6
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	041b      	lsls	r3, r3, #16
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	061b      	lsls	r3, r3, #24
 8003a16:	4313      	orrs	r3, r2
 8003a18:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003a1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a1e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a20:	4b19      	ldr	r3, [pc, #100]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a18      	ldr	r2, [pc, #96]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fd fda0 	bl	8001570 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fd fd9c 	bl	8001570 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e057      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x478>
 8003a52:	e04f      	b.n	8003af4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0b      	ldr	r2, [pc, #44]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fd fd86 	bl	8001570 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fd fd82 	bl	8001570 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e03d      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a7a:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <HAL_RCC_OscConfig+0x4cc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x4ac>
 8003a86:	e035      	b.n	8003af4 <HAL_RCC_OscConfig+0x538>
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a90:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_RCC_OscConfig+0x544>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d028      	beq.n	8003af0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d121      	bne.n	8003af0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d11a      	bne.n	8003af0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ac6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d111      	bne.n	8003af0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	085b      	lsrs	r3, r3, #1
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d107      	bne.n	8003af0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d001      	beq.n	8003af4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3718      	adds	r7, #24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800

08003b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0d0      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b6a      	ldr	r3, [pc, #424]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d910      	bls.n	8003b4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2a:	4b67      	ldr	r3, [pc, #412]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 020f 	bic.w	r2, r3, #15
 8003b32:	4965      	ldr	r1, [pc, #404]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b3a:	4b63      	ldr	r3, [pc, #396]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d001      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0b8      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d020      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b64:	4b59      	ldr	r3, [pc, #356]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4a58      	ldr	r2, [pc, #352]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003b6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b7c:	4b53      	ldr	r3, [pc, #332]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	4a52      	ldr	r2, [pc, #328]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003b82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b88:	4b50      	ldr	r3, [pc, #320]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	494d      	ldr	r1, [pc, #308]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d040      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d107      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bae:	4b47      	ldr	r3, [pc, #284]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d115      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e07f      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d107      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc6:	4b41      	ldr	r3, [pc, #260]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e073      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e06b      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003be6:	4b39      	ldr	r3, [pc, #228]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f023 0203 	bic.w	r2, r3, #3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	4936      	ldr	r1, [pc, #216]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf8:	f7fd fcba 	bl	8001570 <HAL_GetTick>
 8003bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfe:	e00a      	b.n	8003c16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c00:	f7fd fcb6 	bl	8001570 <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e053      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c16:	4b2d      	ldr	r3, [pc, #180]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 020c 	and.w	r2, r3, #12
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d1eb      	bne.n	8003c00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c28:	4b27      	ldr	r3, [pc, #156]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d210      	bcs.n	8003c58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c36:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 020f 	bic.w	r2, r3, #15
 8003c3e:	4922      	ldr	r1, [pc, #136]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e032      	b.n	8003cbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d008      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c64:	4b19      	ldr	r3, [pc, #100]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	4916      	ldr	r1, [pc, #88]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c82:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	490e      	ldr	r1, [pc, #56]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c96:	f000 f821 	bl	8003cdc <HAL_RCC_GetSysClockFreq>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_RCC_ClockConfig+0x1c8>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	490a      	ldr	r1, [pc, #40]	; (8003cd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003ca8:	5ccb      	ldrb	r3, [r1, r3]
 8003caa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <HAL_RCC_ClockConfig+0x1d4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fd fa8e 	bl	80011d8 <HAL_InitTick>

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023c00 	.word	0x40023c00
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	0800c820 	.word	0x0800c820
 8003cd4:	20000004 	.word	0x20000004
 8003cd8:	20000008 	.word	0x20000008

08003cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cdc:	b5b0      	push	{r4, r5, r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	6079      	str	r1, [r7, #4]
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	60f9      	str	r1, [r7, #12]
 8003cea:	2100      	movs	r1, #0
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003cee:	2100      	movs	r1, #0
 8003cf0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cf2:	4952      	ldr	r1, [pc, #328]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003cf4:	6889      	ldr	r1, [r1, #8]
 8003cf6:	f001 010c 	and.w	r1, r1, #12
 8003cfa:	2908      	cmp	r1, #8
 8003cfc:	d00d      	beq.n	8003d1a <HAL_RCC_GetSysClockFreq+0x3e>
 8003cfe:	2908      	cmp	r1, #8
 8003d00:	f200 8094 	bhi.w	8003e2c <HAL_RCC_GetSysClockFreq+0x150>
 8003d04:	2900      	cmp	r1, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_RCC_GetSysClockFreq+0x32>
 8003d08:	2904      	cmp	r1, #4
 8003d0a:	d003      	beq.n	8003d14 <HAL_RCC_GetSysClockFreq+0x38>
 8003d0c:	e08e      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d0e:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x164>)
 8003d10:	60bb      	str	r3, [r7, #8]
      break;
 8003d12:	e08e      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d14:	4b4b      	ldr	r3, [pc, #300]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d16:	60bb      	str	r3, [r7, #8]
      break;
 8003d18:	e08b      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d1a:	4948      	ldr	r1, [pc, #288]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d1c:	6849      	ldr	r1, [r1, #4]
 8003d1e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003d22:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d24:	4945      	ldr	r1, [pc, #276]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d26:	6849      	ldr	r1, [r1, #4]
 8003d28:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003d2c:	2900      	cmp	r1, #0
 8003d2e:	d024      	beq.n	8003d7a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d30:	4942      	ldr	r1, [pc, #264]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d32:	6849      	ldr	r1, [r1, #4]
 8003d34:	0989      	lsrs	r1, r1, #6
 8003d36:	4608      	mov	r0, r1
 8003d38:	f04f 0100 	mov.w	r1, #0
 8003d3c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003d40:	f04f 0500 	mov.w	r5, #0
 8003d44:	ea00 0204 	and.w	r2, r0, r4
 8003d48:	ea01 0305 	and.w	r3, r1, r5
 8003d4c:	493d      	ldr	r1, [pc, #244]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d4e:	fb01 f003 	mul.w	r0, r1, r3
 8003d52:	2100      	movs	r1, #0
 8003d54:	fb01 f102 	mul.w	r1, r1, r2
 8003d58:	1844      	adds	r4, r0, r1
 8003d5a:	493a      	ldr	r1, [pc, #232]	; (8003e44 <HAL_RCC_GetSysClockFreq+0x168>)
 8003d5c:	fba2 0101 	umull	r0, r1, r2, r1
 8003d60:	1863      	adds	r3, r4, r1
 8003d62:	4619      	mov	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	f7fc faa0 	bl	80002b0 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	e04a      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7a:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	099b      	lsrs	r3, r3, #6
 8003d80:	461a      	mov	r2, r3
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d8a:	f04f 0100 	mov.w	r1, #0
 8003d8e:	ea02 0400 	and.w	r4, r2, r0
 8003d92:	ea03 0501 	and.w	r5, r3, r1
 8003d96:	4620      	mov	r0, r4
 8003d98:	4629      	mov	r1, r5
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	014b      	lsls	r3, r1, #5
 8003da4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003da8:	0142      	lsls	r2, r0, #5
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	1b00      	subs	r0, r0, r4
 8003db0:	eb61 0105 	sbc.w	r1, r1, r5
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	018b      	lsls	r3, r1, #6
 8003dbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dc2:	0182      	lsls	r2, r0, #6
 8003dc4:	1a12      	subs	r2, r2, r0
 8003dc6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dca:	f04f 0000 	mov.w	r0, #0
 8003dce:	f04f 0100 	mov.w	r1, #0
 8003dd2:	00d9      	lsls	r1, r3, #3
 8003dd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dd8:	00d0      	lsls	r0, r2, #3
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	1912      	adds	r2, r2, r4
 8003de0:	eb45 0303 	adc.w	r3, r5, r3
 8003de4:	f04f 0000 	mov.w	r0, #0
 8003de8:	f04f 0100 	mov.w	r1, #0
 8003dec:	0299      	lsls	r1, r3, #10
 8003dee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003df2:	0290      	lsls	r0, r2, #10
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4610      	mov	r0, r2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	f7fc fa54 	bl	80002b0 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e10:	4b0a      	ldr	r3, [pc, #40]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	0c1b      	lsrs	r3, r3, #16
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	60bb      	str	r3, [r7, #8]
      break;
 8003e2a:	e002      	b.n	8003e32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e2c:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e2e:	60bb      	str	r3, [r7, #8]
      break;
 8003e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e32:	68bb      	ldr	r3, [r7, #8]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	00f42400 	.word	0x00f42400
 8003e44:	017d7840 	.word	0x017d7840

08003e48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	20000004 	.word	0x20000004

08003e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e64:	f7ff fff0 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	0b5b      	lsrs	r3, r3, #13
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	4903      	ldr	r1, [pc, #12]	; (8003e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40023800 	.word	0x40023800
 8003e84:	0800c830 	.word	0x0800c830

08003e88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	220f      	movs	r2, #15
 8003e96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 0203 	and.w	r2, r3, #3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ebc:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <HAL_RCC_GetClockConfig+0x5c>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	08db      	lsrs	r3, r3, #3
 8003ec2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003eca:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <HAL_RCC_GetClockConfig+0x60>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 020f 	and.w	r2, r3, #15
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	601a      	str	r2, [r3, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40023c00 	.word	0x40023c00

08003eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d012      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f14:	4b69      	ldr	r3, [pc, #420]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a68      	ldr	r2, [pc, #416]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f1e:	6093      	str	r3, [r2, #8]
 8003f20:	4b66      	ldr	r3, [pc, #408]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	4964      	ldr	r1, [pc, #400]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f36:	2301      	movs	r3, #1
 8003f38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d017      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f46:	4b5d      	ldr	r3, [pc, #372]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	4959      	ldr	r1, [pc, #356]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f64:	d101      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f66:	2301      	movs	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f72:	2301      	movs	r3, #1
 8003f74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d017      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f82:	4b4e      	ldr	r3, [pc, #312]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	494a      	ldr	r1, [pc, #296]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 808b 	beq.w	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4b3a      	ldr	r3, [pc, #232]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	4a39      	ldr	r2, [pc, #228]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6413      	str	r3, [r2, #64]	; 0x40
 8003fdc:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fe8:	4b35      	ldr	r3, [pc, #212]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a34      	ldr	r2, [pc, #208]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff4:	f7fd fabc 	bl	8001570 <HAL_GetTick>
 8003ff8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffc:	f7fd fab8 	bl	8001570 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e357      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800400e:	4b2c      	ldr	r3, [pc, #176]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800401a:	4b28      	ldr	r3, [pc, #160]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004022:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d035      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	429a      	cmp	r2, r3
 8004036:	d02e      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004038:	4b20      	ldr	r3, [pc, #128]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004040:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004042:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	4a1d      	ldr	r2, [pc, #116]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800404e:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	4a1a      	ldr	r2, [pc, #104]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004058:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800405a:	4a18      	ldr	r2, [pc, #96]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004060:	4b16      	ldr	r3, [pc, #88]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d114      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd fa80 	bl	8001570 <HAL_GetTick>
 8004070:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004072:	e00a      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004074:	f7fd fa7c 	bl	8001570 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e319      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0ee      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a2:	d111      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040b0:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040b2:	400b      	ands	r3, r1
 80040b4:	4901      	ldr	r1, [pc, #4]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
 80040ba:	e00b      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40007000 	.word	0x40007000
 80040c4:	0ffffcff 	.word	0x0ffffcff
 80040c8:	4bb1      	ldr	r3, [pc, #708]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4ab0      	ldr	r2, [pc, #704]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040d2:	6093      	str	r3, [r2, #8]
 80040d4:	4bae      	ldr	r3, [pc, #696]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e0:	49ab      	ldr	r1, [pc, #684]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d010      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040f2:	4ba7      	ldr	r3, [pc, #668]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f8:	4aa5      	ldr	r2, [pc, #660]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80040fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004102:	4ba3      	ldr	r3, [pc, #652]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004104:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	49a0      	ldr	r1, [pc, #640]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004120:	4b9b      	ldr	r3, [pc, #620]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412e:	4998      	ldr	r1, [pc, #608]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004142:	4b93      	ldr	r3, [pc, #588]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004150:	498f      	ldr	r1, [pc, #572]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004164:	4b8a      	ldr	r3, [pc, #552]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004172:	4987      	ldr	r1, [pc, #540]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004186:	4b82      	ldr	r3, [pc, #520]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004194:	497e      	ldr	r1, [pc, #504]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a8:	4b79      	ldr	r3, [pc, #484]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	4976      	ldr	r1, [pc, #472]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041ca:	4b71      	ldr	r3, [pc, #452]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d0:	f023 020c 	bic.w	r2, r3, #12
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d8:	496d      	ldr	r1, [pc, #436]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041ec:	4b68      	ldr	r3, [pc, #416]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	4965      	ldr	r1, [pc, #404]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800420e:	4b60      	ldr	r3, [pc, #384]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421c:	495c      	ldr	r1, [pc, #368]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004230:	4b57      	ldr	r3, [pc, #348]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	4954      	ldr	r1, [pc, #336]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004252:	4b4f      	ldr	r3, [pc, #316]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	494b      	ldr	r1, [pc, #300]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004274:	4b46      	ldr	r3, [pc, #280]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004282:	4943      	ldr	r1, [pc, #268]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004296:	4b3e      	ldr	r3, [pc, #248]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a4:	493a      	ldr	r1, [pc, #232]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042b8:	4b35      	ldr	r3, [pc, #212]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c6:	4932      	ldr	r1, [pc, #200]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d011      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042da:	4b2d      	ldr	r3, [pc, #180]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e8:	4929      	ldr	r1, [pc, #164]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f8:	d101      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042fa:	2301      	movs	r3, #1
 80042fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800431a:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004320:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004328:	4919      	ldr	r1, [pc, #100]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800433c:	4b14      	ldr	r3, [pc, #80]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800434c:	4910      	ldr	r1, [pc, #64]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d006      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 80d9 	beq.w	800451a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004368:	4b09      	ldr	r3, [pc, #36]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a08      	ldr	r2, [pc, #32]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800436e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004374:	f7fd f8fc 	bl	8001570 <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800437a:	e00b      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800437c:	f7fd f8f8 	bl	8001570 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d904      	bls.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e197      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004394:	4b6c      	ldr	r3, [pc, #432]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1ed      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d021      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d11d      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043b4:	4b64      	ldr	r3, [pc, #400]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ba:	0c1b      	lsrs	r3, r3, #16
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043c2:	4b61      	ldr	r3, [pc, #388]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c8:	0e1b      	lsrs	r3, r3, #24
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	019a      	lsls	r2, r3, #6
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	431a      	orrs	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	061b      	lsls	r3, r3, #24
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	071b      	lsls	r3, r3, #28
 80043e8:	4957      	ldr	r1, [pc, #348]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d004      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800440e:	2b00      	cmp	r3, #0
 8004410:	d02e      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800441a:	d129      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800441c:	4b4a      	ldr	r3, [pc, #296]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800441e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004422:	0c1b      	lsrs	r3, r3, #16
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800442a:	4b47      	ldr	r3, [pc, #284]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800442c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004430:	0f1b      	lsrs	r3, r3, #28
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	019a      	lsls	r2, r3, #6
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	041b      	lsls	r3, r3, #16
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	431a      	orrs	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	071b      	lsls	r3, r3, #28
 8004450:	493d      	ldr	r1, [pc, #244]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004452:	4313      	orrs	r3, r2
 8004454:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004458:	4b3b      	ldr	r3, [pc, #236]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800445a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800445e:	f023 021f 	bic.w	r2, r3, #31
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	3b01      	subs	r3, #1
 8004468:	4937      	ldr	r1, [pc, #220]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01d      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800447c:	4b32      	ldr	r3, [pc, #200]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800447e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004482:	0e1b      	lsrs	r3, r3, #24
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800448a:	4b2f      	ldr	r3, [pc, #188]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800448c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004490:	0f1b      	lsrs	r3, r3, #28
 8004492:	f003 0307 	and.w	r3, r3, #7
 8004496:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	019a      	lsls	r2, r3, #6
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	041b      	lsls	r3, r3, #16
 80044a4:	431a      	orrs	r2, r3
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	061b      	lsls	r3, r3, #24
 80044aa:	431a      	orrs	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	071b      	lsls	r3, r3, #28
 80044b0:	4925      	ldr	r1, [pc, #148]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d011      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	019a      	lsls	r2, r3, #6
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	041b      	lsls	r3, r3, #16
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	061b      	lsls	r3, r3, #24
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	071b      	lsls	r3, r3, #28
 80044e0:	4919      	ldr	r1, [pc, #100]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044e8:	4b17      	ldr	r3, [pc, #92]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a16      	ldr	r2, [pc, #88]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f4:	f7fd f83c 	bl	8001570 <HAL_GetTick>
 80044f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044fc:	f7fd f838 	bl	8001570 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e0d7      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800450e:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2b01      	cmp	r3, #1
 800451e:	f040 80cd 	bne.w	80046bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004522:	4b09      	ldr	r3, [pc, #36]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a08      	ldr	r2, [pc, #32]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452e:	f7fd f81f 	bl	8001570 <HAL_GetTick>
 8004532:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004536:	f7fd f81b 	bl	8001570 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b64      	cmp	r3, #100	; 0x64
 8004542:	d903      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e0ba      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004548:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800454c:	4b5e      	ldr	r3, [pc, #376]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004558:	d0ed      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004576:	2b00      	cmp	r3, #0
 8004578:	d02e      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d12a      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004582:	4b51      	ldr	r3, [pc, #324]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004590:	4b4d      	ldr	r3, [pc, #308]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	0f1b      	lsrs	r3, r3, #28
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	019a      	lsls	r2, r3, #6
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	041b      	lsls	r3, r3, #16
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	061b      	lsls	r3, r3, #24
 80045b0:	431a      	orrs	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	071b      	lsls	r3, r3, #28
 80045b6:	4944      	ldr	r1, [pc, #272]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045be:	4b42      	ldr	r3, [pc, #264]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	3b01      	subs	r3, #1
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	493d      	ldr	r1, [pc, #244]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d022      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045ec:	d11d      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045ee:	4b36      	ldr	r3, [pc, #216]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f4:	0e1b      	lsrs	r3, r3, #24
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045fc:	4b32      	ldr	r3, [pc, #200]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	0f1b      	lsrs	r3, r3, #28
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	019a      	lsls	r2, r3, #6
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	041b      	lsls	r3, r3, #16
 8004616:	431a      	orrs	r2, r3
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	431a      	orrs	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	071b      	lsls	r3, r3, #28
 8004622:	4929      	ldr	r1, [pc, #164]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d028      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004636:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	0e1b      	lsrs	r3, r3, #24
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004644:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	0c1b      	lsrs	r3, r3, #16
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	019a      	lsls	r2, r3, #6
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	041b      	lsls	r3, r3, #16
 800465c:	431a      	orrs	r2, r3
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	061b      	lsls	r3, r3, #24
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	69db      	ldr	r3, [r3, #28]
 8004668:	071b      	lsls	r3, r3, #28
 800466a:	4917      	ldr	r1, [pc, #92]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004672:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004678:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	4911      	ldr	r1, [pc, #68]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a0e      	ldr	r2, [pc, #56]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800468e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004694:	f7fc ff6c 	bl	8001570 <HAL_GetTick>
 8004698:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800469c:	f7fc ff68 	bl	8001570 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b64      	cmp	r3, #100	; 0x64
 80046a8:	d901      	bls.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e007      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046ae:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ba:	d1ef      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3720      	adds	r7, #32
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800

080046cc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e025      	b.n	800472c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7fc fa49 	bl	8000b8c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	4610      	mov	r0, r2
 800470e:	f000 fb3b 	bl	8004d88 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	461a      	mov	r2, r3
 800471c:	6839      	ldr	r1, [r7, #0]
 800471e:	f000 fba5 	bl	8004e6c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d101      	bne.n	8004750 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800474c:	2302      	movs	r3, #2
 800474e:	e018      	b.n	8004782 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fc03 	bl	8004f6c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d104      	bne.n	8004778 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2205      	movs	r2, #5
 8004772:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004776:	e003      	b.n	8004780 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_SDRAM_SetAutoRefreshNumber>:
  *                the configuration information for SDRAM module.  
  * @param  AutoRefreshNumber The SDRAM auto Refresh number       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SetAutoRefreshNumber(SDRAM_HandleTypeDef *hsdram, uint32_t AutoRefreshNumber)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d101      	bne.n	80047a4 <HAL_SDRAM_SetAutoRefreshNumber+0x1a>
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
 80047a2:	e00e      	b.n	80047c2 <HAL_SDRAM_SetAutoRefreshNumber+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Set the Auto-Refresh number */
  FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance ,AutoRefreshNumber);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fbfe 	bl	8004fb4 <FMC_SDRAM_SetAutoRefreshNumber>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e049      	b.n	8004870 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 f841 	bl	8004878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3304      	adds	r3, #4
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f000 f9ff 	bl	8004c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d001      	beq.n	80048a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e054      	b.n	800494e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a26      	ldr	r2, [pc, #152]	; (800495c <HAL_TIM_Base_Start_IT+0xd0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d022      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d01d      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a22      	ldr	r2, [pc, #136]	; (8004960 <HAL_TIM_Base_Start_IT+0xd4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d018      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a21      	ldr	r2, [pc, #132]	; (8004964 <HAL_TIM_Base_Start_IT+0xd8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d013      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a1f      	ldr	r2, [pc, #124]	; (8004968 <HAL_TIM_Base_Start_IT+0xdc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00e      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1e      	ldr	r2, [pc, #120]	; (800496c <HAL_TIM_Base_Start_IT+0xe0>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d009      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1c      	ldr	r2, [pc, #112]	; (8004970 <HAL_TIM_Base_Start_IT+0xe4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d004      	beq.n	800490c <HAL_TIM_Base_Start_IT+0x80>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a1b      	ldr	r2, [pc, #108]	; (8004974 <HAL_TIM_Base_Start_IT+0xe8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d115      	bne.n	8004938 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_TIM_Base_Start_IT+0xec>)
 8004914:	4013      	ands	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b06      	cmp	r3, #6
 800491c:	d015      	beq.n	800494a <HAL_TIM_Base_Start_IT+0xbe>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004924:	d011      	beq.n	800494a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004936:	e008      	b.n	800494a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e000      	b.n	800494c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40010000 	.word	0x40010000
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800
 8004968:	40000c00 	.word	0x40000c00
 800496c:	40010400 	.word	0x40010400
 8004970:	40014000 	.word	0x40014000
 8004974:	40001800 	.word	0x40001800
 8004978:	00010007 	.word	0x00010007

0800497c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	d122      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b02      	cmp	r3, #2
 800499e:	d11b      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0202 	mvn.w	r2, #2
 80049a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f905 	bl	8004bce <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f8f7 	bl	8004bba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f908 	bl	8004be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d122      	bne.n	8004a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d11b      	bne.n	8004a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0204 	mvn.w	r2, #4
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f8db 	bl	8004bce <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f8cd 	bl	8004bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f8de 	bl	8004be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0208 	mvn.w	r2, #8
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2204      	movs	r2, #4
 8004a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f8b1 	bl	8004bce <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f8a3 	bl	8004bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f8b4 	bl	8004be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0210 	mvn.w	r2, #16
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2208      	movs	r2, #8
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f887 	bl	8004bce <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f879 	bl	8004bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f88a 	bl	8004be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d10e      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d107      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0201 	mvn.w	r2, #1
 8004af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fc fb30 	bl	8001160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b80      	cmp	r3, #128	; 0x80
 8004b0c:	d10e      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d107      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f91a 	bl	8004d60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	d10e      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b46:	2b80      	cmp	r3, #128	; 0x80
 8004b48:	d107      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f90d 	bl	8004d74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b40      	cmp	r3, #64	; 0x40
 8004b66:	d10e      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b72:	2b40      	cmp	r3, #64	; 0x40
 8004b74:	d107      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f838 	bl	8004bf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d10e      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	d107      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f06f 0220 	mvn.w	r2, #32
 8004baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f8cd 	bl	8004d4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
	...

08004c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a40      	ldr	r2, [pc, #256]	; (8004d20 <TIM_Base_SetConfig+0x114>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d013      	beq.n	8004c4c <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2a:	d00f      	beq.n	8004c4c <TIM_Base_SetConfig+0x40>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a3d      	ldr	r2, [pc, #244]	; (8004d24 <TIM_Base_SetConfig+0x118>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00b      	beq.n	8004c4c <TIM_Base_SetConfig+0x40>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a3c      	ldr	r2, [pc, #240]	; (8004d28 <TIM_Base_SetConfig+0x11c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d007      	beq.n	8004c4c <TIM_Base_SetConfig+0x40>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a3b      	ldr	r2, [pc, #236]	; (8004d2c <TIM_Base_SetConfig+0x120>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d003      	beq.n	8004c4c <TIM_Base_SetConfig+0x40>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a3a      	ldr	r2, [pc, #232]	; (8004d30 <TIM_Base_SetConfig+0x124>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d108      	bne.n	8004c5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2f      	ldr	r2, [pc, #188]	; (8004d20 <TIM_Base_SetConfig+0x114>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d02b      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6c:	d027      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a2c      	ldr	r2, [pc, #176]	; (8004d24 <TIM_Base_SetConfig+0x118>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d023      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a2b      	ldr	r2, [pc, #172]	; (8004d28 <TIM_Base_SetConfig+0x11c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d01f      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a2a      	ldr	r2, [pc, #168]	; (8004d2c <TIM_Base_SetConfig+0x120>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01b      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a29      	ldr	r2, [pc, #164]	; (8004d30 <TIM_Base_SetConfig+0x124>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d017      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a28      	ldr	r2, [pc, #160]	; (8004d34 <TIM_Base_SetConfig+0x128>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a27      	ldr	r2, [pc, #156]	; (8004d38 <TIM_Base_SetConfig+0x12c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00f      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a26      	ldr	r2, [pc, #152]	; (8004d3c <TIM_Base_SetConfig+0x130>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00b      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a25      	ldr	r2, [pc, #148]	; (8004d40 <TIM_Base_SetConfig+0x134>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d007      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a24      	ldr	r2, [pc, #144]	; (8004d44 <TIM_Base_SetConfig+0x138>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d003      	beq.n	8004cbe <TIM_Base_SetConfig+0xb2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a23      	ldr	r2, [pc, #140]	; (8004d48 <TIM_Base_SetConfig+0x13c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d108      	bne.n	8004cd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <TIM_Base_SetConfig+0x114>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d003      	beq.n	8004d04 <TIM_Base_SetConfig+0xf8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <TIM_Base_SetConfig+0x124>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d103      	bne.n	8004d0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	615a      	str	r2, [r3, #20]
}
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40010000 	.word	0x40010000
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40010400 	.word	0x40010400
 8004d34:	40014000 	.word	0x40014000
 8004d38:	40014400 	.word	0x40014400
 8004d3c:	40014800 	.word	0x40014800
 8004d40:	40001800 	.word	0x40001800
 8004d44:	40001c00 	.word	0x40001c00
 8004d48:	40002000 	.word	0x40002000

08004d4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d027      	beq.n	8004df2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4b2f      	ldr	r3, [pc, #188]	; (8004e68 <FMC_SDRAM_Init+0xe0>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004db8:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8004dbe:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8004dc4:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8004dca:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8004dd0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8004dd6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8004ddc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004de2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e032      	b.n	8004e58 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dfe:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004e08:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004e0e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <FMC_SDRAM_Init+0xe0>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004e2c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8004e32:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8004e38:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8004e3e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8004e44:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68ba      	ldr	r2, [r7, #8]
 8004e56:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	ffff8000 	.word	0xffff8000

08004e6c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d02e      	beq.n	8004ee4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004e92:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004ea2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004eac:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004eb6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8004ec0:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004eca:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	609a      	str	r2, [r3, #8]
 8004ee2:	e039      	b.n	8004f58 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4b1e      	ldr	r3, [pc, #120]	; (8004f68 <FMC_SDRAM_Timing_Init+0xfc>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004f02:	4313      	orrs	r3, r2
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004f16:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004f26:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004f30:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8004f3a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004f44:	4313      	orrs	r3, r2
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	ff0f0fff 	.word	0xff0f0fff

08004f6c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <FMC_SDRAM_SendCommand+0x44>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	6811      	ldr	r1, [r2, #0]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	6852      	ldr	r2, [r2, #4]
 8004f88:	4311      	orrs	r1, r2
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	6892      	ldr	r2, [r2, #8]
 8004f8e:	3a01      	subs	r2, #1
 8004f90:	0152      	lsls	r2, r2, #5
 8004f92:	4311      	orrs	r1, r2
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	68d2      	ldr	r2, [r2, #12]
 8004f98:	0252      	lsls	r2, r2, #9
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	ffc00000 	.word	0xffc00000

08004fb4 <FMC_SDRAM_SetAutoRefreshNumber>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  AutoRefreshNumber Specifies the auto Refresh number.       
  * @retval None
  */
HAL_StatusTypeDef FMC_SDRAM_SetAutoRefreshNumber(FMC_SDRAM_TypeDef *Device, uint32_t AutoRefreshNumber)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(AutoRefreshNumber));
  
  /* Set the Auto-refresh number in command register */
  Device->SDCMR |= (AutoRefreshNumber << 5); 
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691a      	ldr	r2, [r3, #16]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	015b      	lsls	r3, r3, #5
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	611a      	str	r2, [r3, #16]

  return HAL_OK;  
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004fe2:	4b8d      	ldr	r3, [pc, #564]	; (8005218 <MX_LWIP_Init+0x23c>)
 8004fe4:	22c0      	movs	r2, #192	; 0xc0
 8004fe6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004fe8:	4b8b      	ldr	r3, [pc, #556]	; (8005218 <MX_LWIP_Init+0x23c>)
 8004fea:	22a8      	movs	r2, #168	; 0xa8
 8004fec:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004fee:	4b8a      	ldr	r3, [pc, #552]	; (8005218 <MX_LWIP_Init+0x23c>)
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 68;
 8004ff4:	4b88      	ldr	r3, [pc, #544]	; (8005218 <MX_LWIP_Init+0x23c>)
 8004ff6:	2244      	movs	r2, #68	; 0x44
 8004ff8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004ffa:	4b88      	ldr	r3, [pc, #544]	; (800521c <MX_LWIP_Init+0x240>)
 8004ffc:	22ff      	movs	r2, #255	; 0xff
 8004ffe:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005000:	4b86      	ldr	r3, [pc, #536]	; (800521c <MX_LWIP_Init+0x240>)
 8005002:	22ff      	movs	r2, #255	; 0xff
 8005004:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005006:	4b85      	ldr	r3, [pc, #532]	; (800521c <MX_LWIP_Init+0x240>)
 8005008:	22ff      	movs	r2, #255	; 0xff
 800500a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800500c:	4b83      	ldr	r3, [pc, #524]	; (800521c <MX_LWIP_Init+0x240>)
 800500e:	2200      	movs	r2, #0
 8005010:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005012:	4b83      	ldr	r3, [pc, #524]	; (8005220 <MX_LWIP_Init+0x244>)
 8005014:	22c0      	movs	r2, #192	; 0xc0
 8005016:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005018:	4b81      	ldr	r3, [pc, #516]	; (8005220 <MX_LWIP_Init+0x244>)
 800501a:	22a8      	movs	r2, #168	; 0xa8
 800501c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800501e:	4b80      	ldr	r3, [pc, #512]	; (8005220 <MX_LWIP_Init+0x244>)
 8005020:	2201      	movs	r2, #1
 8005022:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005024:	4b7e      	ldr	r3, [pc, #504]	; (8005220 <MX_LWIP_Init+0x244>)
 8005026:	2201      	movs	r2, #1
 8005028:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800502a:	f000 fca8 	bl	800597e <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800502e:	4b7a      	ldr	r3, [pc, #488]	; (8005218 <MX_LWIP_Init+0x23c>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	061a      	lsls	r2, r3, #24
 8005034:	4b78      	ldr	r3, [pc, #480]	; (8005218 <MX_LWIP_Init+0x23c>)
 8005036:	785b      	ldrb	r3, [r3, #1]
 8005038:	041b      	lsls	r3, r3, #16
 800503a:	431a      	orrs	r2, r3
 800503c:	4b76      	ldr	r3, [pc, #472]	; (8005218 <MX_LWIP_Init+0x23c>)
 800503e:	789b      	ldrb	r3, [r3, #2]
 8005040:	021b      	lsls	r3, r3, #8
 8005042:	4313      	orrs	r3, r2
 8005044:	4a74      	ldr	r2, [pc, #464]	; (8005218 <MX_LWIP_Init+0x23c>)
 8005046:	78d2      	ldrb	r2, [r2, #3]
 8005048:	4313      	orrs	r3, r2
 800504a:	061a      	lsls	r2, r3, #24
 800504c:	4b72      	ldr	r3, [pc, #456]	; (8005218 <MX_LWIP_Init+0x23c>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	0619      	lsls	r1, r3, #24
 8005052:	4b71      	ldr	r3, [pc, #452]	; (8005218 <MX_LWIP_Init+0x23c>)
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	4319      	orrs	r1, r3
 800505a:	4b6f      	ldr	r3, [pc, #444]	; (8005218 <MX_LWIP_Init+0x23c>)
 800505c:	789b      	ldrb	r3, [r3, #2]
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	430b      	orrs	r3, r1
 8005062:	496d      	ldr	r1, [pc, #436]	; (8005218 <MX_LWIP_Init+0x23c>)
 8005064:	78c9      	ldrb	r1, [r1, #3]
 8005066:	430b      	orrs	r3, r1
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800506e:	431a      	orrs	r2, r3
 8005070:	4b69      	ldr	r3, [pc, #420]	; (8005218 <MX_LWIP_Init+0x23c>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	0619      	lsls	r1, r3, #24
 8005076:	4b68      	ldr	r3, [pc, #416]	; (8005218 <MX_LWIP_Init+0x23c>)
 8005078:	785b      	ldrb	r3, [r3, #1]
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	4319      	orrs	r1, r3
 800507e:	4b66      	ldr	r3, [pc, #408]	; (8005218 <MX_LWIP_Init+0x23c>)
 8005080:	789b      	ldrb	r3, [r3, #2]
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	430b      	orrs	r3, r1
 8005086:	4964      	ldr	r1, [pc, #400]	; (8005218 <MX_LWIP_Init+0x23c>)
 8005088:	78c9      	ldrb	r1, [r1, #3]
 800508a:	430b      	orrs	r3, r1
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005092:	431a      	orrs	r2, r3
 8005094:	4b60      	ldr	r3, [pc, #384]	; (8005218 <MX_LWIP_Init+0x23c>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	0619      	lsls	r1, r3, #24
 800509a:	4b5f      	ldr	r3, [pc, #380]	; (8005218 <MX_LWIP_Init+0x23c>)
 800509c:	785b      	ldrb	r3, [r3, #1]
 800509e:	041b      	lsls	r3, r3, #16
 80050a0:	4319      	orrs	r1, r3
 80050a2:	4b5d      	ldr	r3, [pc, #372]	; (8005218 <MX_LWIP_Init+0x23c>)
 80050a4:	789b      	ldrb	r3, [r3, #2]
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	430b      	orrs	r3, r1
 80050aa:	495b      	ldr	r1, [pc, #364]	; (8005218 <MX_LWIP_Init+0x23c>)
 80050ac:	78c9      	ldrb	r1, [r1, #3]
 80050ae:	430b      	orrs	r3, r1
 80050b0:	0e1b      	lsrs	r3, r3, #24
 80050b2:	4313      	orrs	r3, r2
 80050b4:	4a5b      	ldr	r2, [pc, #364]	; (8005224 <MX_LWIP_Init+0x248>)
 80050b6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80050b8:	4b58      	ldr	r3, [pc, #352]	; (800521c <MX_LWIP_Init+0x240>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	061a      	lsls	r2, r3, #24
 80050be:	4b57      	ldr	r3, [pc, #348]	; (800521c <MX_LWIP_Init+0x240>)
 80050c0:	785b      	ldrb	r3, [r3, #1]
 80050c2:	041b      	lsls	r3, r3, #16
 80050c4:	431a      	orrs	r2, r3
 80050c6:	4b55      	ldr	r3, [pc, #340]	; (800521c <MX_LWIP_Init+0x240>)
 80050c8:	789b      	ldrb	r3, [r3, #2]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	4313      	orrs	r3, r2
 80050ce:	4a53      	ldr	r2, [pc, #332]	; (800521c <MX_LWIP_Init+0x240>)
 80050d0:	78d2      	ldrb	r2, [r2, #3]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	061a      	lsls	r2, r3, #24
 80050d6:	4b51      	ldr	r3, [pc, #324]	; (800521c <MX_LWIP_Init+0x240>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	0619      	lsls	r1, r3, #24
 80050dc:	4b4f      	ldr	r3, [pc, #316]	; (800521c <MX_LWIP_Init+0x240>)
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	041b      	lsls	r3, r3, #16
 80050e2:	4319      	orrs	r1, r3
 80050e4:	4b4d      	ldr	r3, [pc, #308]	; (800521c <MX_LWIP_Init+0x240>)
 80050e6:	789b      	ldrb	r3, [r3, #2]
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	430b      	orrs	r3, r1
 80050ec:	494b      	ldr	r1, [pc, #300]	; (800521c <MX_LWIP_Init+0x240>)
 80050ee:	78c9      	ldrb	r1, [r1, #3]
 80050f0:	430b      	orrs	r3, r1
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050f8:	431a      	orrs	r2, r3
 80050fa:	4b48      	ldr	r3, [pc, #288]	; (800521c <MX_LWIP_Init+0x240>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	0619      	lsls	r1, r3, #24
 8005100:	4b46      	ldr	r3, [pc, #280]	; (800521c <MX_LWIP_Init+0x240>)
 8005102:	785b      	ldrb	r3, [r3, #1]
 8005104:	041b      	lsls	r3, r3, #16
 8005106:	4319      	orrs	r1, r3
 8005108:	4b44      	ldr	r3, [pc, #272]	; (800521c <MX_LWIP_Init+0x240>)
 800510a:	789b      	ldrb	r3, [r3, #2]
 800510c:	021b      	lsls	r3, r3, #8
 800510e:	430b      	orrs	r3, r1
 8005110:	4942      	ldr	r1, [pc, #264]	; (800521c <MX_LWIP_Init+0x240>)
 8005112:	78c9      	ldrb	r1, [r1, #3]
 8005114:	430b      	orrs	r3, r1
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800511c:	431a      	orrs	r2, r3
 800511e:	4b3f      	ldr	r3, [pc, #252]	; (800521c <MX_LWIP_Init+0x240>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	0619      	lsls	r1, r3, #24
 8005124:	4b3d      	ldr	r3, [pc, #244]	; (800521c <MX_LWIP_Init+0x240>)
 8005126:	785b      	ldrb	r3, [r3, #1]
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	4319      	orrs	r1, r3
 800512c:	4b3b      	ldr	r3, [pc, #236]	; (800521c <MX_LWIP_Init+0x240>)
 800512e:	789b      	ldrb	r3, [r3, #2]
 8005130:	021b      	lsls	r3, r3, #8
 8005132:	430b      	orrs	r3, r1
 8005134:	4939      	ldr	r1, [pc, #228]	; (800521c <MX_LWIP_Init+0x240>)
 8005136:	78c9      	ldrb	r1, [r1, #3]
 8005138:	430b      	orrs	r3, r1
 800513a:	0e1b      	lsrs	r3, r3, #24
 800513c:	4313      	orrs	r3, r2
 800513e:	4a3a      	ldr	r2, [pc, #232]	; (8005228 <MX_LWIP_Init+0x24c>)
 8005140:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005142:	4b37      	ldr	r3, [pc, #220]	; (8005220 <MX_LWIP_Init+0x244>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	061a      	lsls	r2, r3, #24
 8005148:	4b35      	ldr	r3, [pc, #212]	; (8005220 <MX_LWIP_Init+0x244>)
 800514a:	785b      	ldrb	r3, [r3, #1]
 800514c:	041b      	lsls	r3, r3, #16
 800514e:	431a      	orrs	r2, r3
 8005150:	4b33      	ldr	r3, [pc, #204]	; (8005220 <MX_LWIP_Init+0x244>)
 8005152:	789b      	ldrb	r3, [r3, #2]
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	4313      	orrs	r3, r2
 8005158:	4a31      	ldr	r2, [pc, #196]	; (8005220 <MX_LWIP_Init+0x244>)
 800515a:	78d2      	ldrb	r2, [r2, #3]
 800515c:	4313      	orrs	r3, r2
 800515e:	061a      	lsls	r2, r3, #24
 8005160:	4b2f      	ldr	r3, [pc, #188]	; (8005220 <MX_LWIP_Init+0x244>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	0619      	lsls	r1, r3, #24
 8005166:	4b2e      	ldr	r3, [pc, #184]	; (8005220 <MX_LWIP_Init+0x244>)
 8005168:	785b      	ldrb	r3, [r3, #1]
 800516a:	041b      	lsls	r3, r3, #16
 800516c:	4319      	orrs	r1, r3
 800516e:	4b2c      	ldr	r3, [pc, #176]	; (8005220 <MX_LWIP_Init+0x244>)
 8005170:	789b      	ldrb	r3, [r3, #2]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	430b      	orrs	r3, r1
 8005176:	492a      	ldr	r1, [pc, #168]	; (8005220 <MX_LWIP_Init+0x244>)
 8005178:	78c9      	ldrb	r1, [r1, #3]
 800517a:	430b      	orrs	r3, r1
 800517c:	021b      	lsls	r3, r3, #8
 800517e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005182:	431a      	orrs	r2, r3
 8005184:	4b26      	ldr	r3, [pc, #152]	; (8005220 <MX_LWIP_Init+0x244>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	0619      	lsls	r1, r3, #24
 800518a:	4b25      	ldr	r3, [pc, #148]	; (8005220 <MX_LWIP_Init+0x244>)
 800518c:	785b      	ldrb	r3, [r3, #1]
 800518e:	041b      	lsls	r3, r3, #16
 8005190:	4319      	orrs	r1, r3
 8005192:	4b23      	ldr	r3, [pc, #140]	; (8005220 <MX_LWIP_Init+0x244>)
 8005194:	789b      	ldrb	r3, [r3, #2]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	430b      	orrs	r3, r1
 800519a:	4921      	ldr	r1, [pc, #132]	; (8005220 <MX_LWIP_Init+0x244>)
 800519c:	78c9      	ldrb	r1, [r1, #3]
 800519e:	430b      	orrs	r3, r1
 80051a0:	0a1b      	lsrs	r3, r3, #8
 80051a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80051a6:	431a      	orrs	r2, r3
 80051a8:	4b1d      	ldr	r3, [pc, #116]	; (8005220 <MX_LWIP_Init+0x244>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	0619      	lsls	r1, r3, #24
 80051ae:	4b1c      	ldr	r3, [pc, #112]	; (8005220 <MX_LWIP_Init+0x244>)
 80051b0:	785b      	ldrb	r3, [r3, #1]
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	4319      	orrs	r1, r3
 80051b6:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <MX_LWIP_Init+0x244>)
 80051b8:	789b      	ldrb	r3, [r3, #2]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	430b      	orrs	r3, r1
 80051be:	4918      	ldr	r1, [pc, #96]	; (8005220 <MX_LWIP_Init+0x244>)
 80051c0:	78c9      	ldrb	r1, [r1, #3]
 80051c2:	430b      	orrs	r3, r1
 80051c4:	0e1b      	lsrs	r3, r3, #24
 80051c6:	4313      	orrs	r3, r2
 80051c8:	4a18      	ldr	r2, [pc, #96]	; (800522c <MX_LWIP_Init+0x250>)
 80051ca:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80051cc:	4b18      	ldr	r3, [pc, #96]	; (8005230 <MX_LWIP_Init+0x254>)
 80051ce:	9302      	str	r3, [sp, #8]
 80051d0:	4b18      	ldr	r3, [pc, #96]	; (8005234 <MX_LWIP_Init+0x258>)
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	2300      	movs	r3, #0
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	4b14      	ldr	r3, [pc, #80]	; (800522c <MX_LWIP_Init+0x250>)
 80051da:	4a13      	ldr	r2, [pc, #76]	; (8005228 <MX_LWIP_Init+0x24c>)
 80051dc:	4911      	ldr	r1, [pc, #68]	; (8005224 <MX_LWIP_Init+0x248>)
 80051de:	4816      	ldr	r0, [pc, #88]	; (8005238 <MX_LWIP_Init+0x25c>)
 80051e0:	f001 f870 	bl	80062c4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80051e4:	4814      	ldr	r0, [pc, #80]	; (8005238 <MX_LWIP_Init+0x25c>)
 80051e6:	f001 fa1f 	bl	8006628 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80051ea:	4b13      	ldr	r3, [pc, #76]	; (8005238 <MX_LWIP_Init+0x25c>)
 80051ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80051f0:	089b      	lsrs	r3, r3, #2
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80051fc:	480e      	ldr	r0, [pc, #56]	; (8005238 <MX_LWIP_Init+0x25c>)
 80051fe:	f001 fa23 	bl	8006648 <netif_set_up>
 8005202:	e002      	b.n	800520a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005204:	480c      	ldr	r0, [pc, #48]	; (8005238 <MX_LWIP_Init+0x25c>)
 8005206:	f001 fa8b 	bl	8006720 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800520a:	490c      	ldr	r1, [pc, #48]	; (800523c <MX_LWIP_Init+0x260>)
 800520c:	480a      	ldr	r0, [pc, #40]	; (8005238 <MX_LWIP_Init+0x25c>)
 800520e:	f001 fab9 	bl	8006784 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005212:	bf00      	nop
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000598 	.word	0x20000598
 800521c:	20000594 	.word	0x20000594
 8005220:	20000558 	.word	0x20000558
 8005224:	20000590 	.word	0x20000590
 8005228:	2000059c 	.word	0x2000059c
 800522c:	200005a0 	.word	0x200005a0
 8005230:	08009f69 	.word	0x08009f69
 8005234:	080057dd 	.word	0x080057dd
 8005238:	2000055c 	.word	0x2000055c
 800523c:	08005849 	.word	0x08005849

08005240 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005244:	4803      	ldr	r0, [pc, #12]	; (8005254 <MX_LWIP_Process+0x14>)
 8005246:	f000 faa9 	bl	800579c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800524a:	f002 f9b7 	bl	80075bc <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800524e:	bf00      	nop
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	2000055c 	.word	0x2000055c

08005258 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08e      	sub	sp, #56	; 0x38
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	605a      	str	r2, [r3, #4]
 800526a:	609a      	str	r2, [r3, #8]
 800526c:	60da      	str	r2, [r3, #12]
 800526e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a44      	ldr	r2, [pc, #272]	; (8005388 <HAL_ETH_MspInit+0x130>)
 8005276:	4293      	cmp	r3, r2
 8005278:	f040 8081 	bne.w	800537e <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800527c:	4b43      	ldr	r3, [pc, #268]	; (800538c <HAL_ETH_MspInit+0x134>)
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	4a42      	ldr	r2, [pc, #264]	; (800538c <HAL_ETH_MspInit+0x134>)
 8005282:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005286:	6313      	str	r3, [r2, #48]	; 0x30
 8005288:	4b40      	ldr	r3, [pc, #256]	; (800538c <HAL_ETH_MspInit+0x134>)
 800528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	4b3d      	ldr	r3, [pc, #244]	; (800538c <HAL_ETH_MspInit+0x134>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	4a3c      	ldr	r2, [pc, #240]	; (800538c <HAL_ETH_MspInit+0x134>)
 800529a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800529e:	6313      	str	r3, [r2, #48]	; 0x30
 80052a0:	4b3a      	ldr	r3, [pc, #232]	; (800538c <HAL_ETH_MspInit+0x134>)
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052a8:	61fb      	str	r3, [r7, #28]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4b37      	ldr	r3, [pc, #220]	; (800538c <HAL_ETH_MspInit+0x134>)
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	4a36      	ldr	r2, [pc, #216]	; (800538c <HAL_ETH_MspInit+0x134>)
 80052b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052b6:	6313      	str	r3, [r2, #48]	; 0x30
 80052b8:	4b34      	ldr	r3, [pc, #208]	; (800538c <HAL_ETH_MspInit+0x134>)
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80052c4:	4b31      	ldr	r3, [pc, #196]	; (800538c <HAL_ETH_MspInit+0x134>)
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	4a30      	ldr	r2, [pc, #192]	; (800538c <HAL_ETH_MspInit+0x134>)
 80052ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ce:	6313      	str	r3, [r2, #48]	; 0x30
 80052d0:	4b2e      	ldr	r3, [pc, #184]	; (800538c <HAL_ETH_MspInit+0x134>)
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052dc:	4b2b      	ldr	r3, [pc, #172]	; (800538c <HAL_ETH_MspInit+0x134>)
 80052de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e0:	4a2a      	ldr	r2, [pc, #168]	; (800538c <HAL_ETH_MspInit+0x134>)
 80052e2:	f043 0304 	orr.w	r3, r3, #4
 80052e6:	6313      	str	r3, [r2, #48]	; 0x30
 80052e8:	4b28      	ldr	r3, [pc, #160]	; (800538c <HAL_ETH_MspInit+0x134>)
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	f003 0304 	and.w	r3, r3, #4
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052f4:	4b25      	ldr	r3, [pc, #148]	; (800538c <HAL_ETH_MspInit+0x134>)
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	4a24      	ldr	r2, [pc, #144]	; (800538c <HAL_ETH_MspInit+0x134>)
 80052fa:	f043 0301 	orr.w	r3, r3, #1
 80052fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005300:	4b22      	ldr	r3, [pc, #136]	; (800538c <HAL_ETH_MspInit+0x134>)
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	f003 0301 	and.w	r3, r3, #1
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 800530c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005312:	2302      	movs	r3, #2
 8005314:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005316:	2300      	movs	r3, #0
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800531a:	2303      	movs	r3, #3
 800531c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800531e:	230b      	movs	r3, #11
 8005320:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005326:	4619      	mov	r1, r3
 8005328:	4819      	ldr	r0, [pc, #100]	; (8005390 <HAL_ETH_MspInit+0x138>)
 800532a:	f7fd fc39 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800532e:	2332      	movs	r3, #50	; 0x32
 8005330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005332:	2302      	movs	r3, #2
 8005334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005336:	2300      	movs	r3, #0
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800533a:	2303      	movs	r3, #3
 800533c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800533e:	230b      	movs	r3, #11
 8005340:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005346:	4619      	mov	r1, r3
 8005348:	4812      	ldr	r0, [pc, #72]	; (8005394 <HAL_ETH_MspInit+0x13c>)
 800534a:	f7fd fc29 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800534e:	2386      	movs	r3, #134	; 0x86
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005352:	2302      	movs	r3, #2
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005356:	2300      	movs	r3, #0
 8005358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800535a:	2303      	movs	r3, #3
 800535c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800535e:	230b      	movs	r3, #11
 8005360:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005366:	4619      	mov	r1, r3
 8005368:	480b      	ldr	r0, [pc, #44]	; (8005398 <HAL_ETH_MspInit+0x140>)
 800536a:	f7fd fc19 	bl	8002ba0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800536e:	2200      	movs	r2, #0
 8005370:	2100      	movs	r1, #0
 8005372:	203d      	movs	r0, #61	; 0x3d
 8005374:	f7fc f9e4 	bl	8001740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005378:	203d      	movs	r0, #61	; 0x3d
 800537a:	f7fc f9fd 	bl	8001778 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800537e:	bf00      	nop
 8005380:	3738      	adds	r7, #56	; 0x38
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40028000 	.word	0x40028000
 800538c:	40023800 	.word	0x40023800
 8005390:	40021800 	.word	0x40021800
 8005394:	40020800 	.word	0x40020800
 8005398:	40020000 	.word	0x40020000

0800539c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80053a8:	4b4d      	ldr	r3, [pc, #308]	; (80054e0 <low_level_init+0x144>)
 80053aa:	4a4e      	ldr	r2, [pc, #312]	; (80054e4 <low_level_init+0x148>)
 80053ac:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80053ae:	4b4c      	ldr	r3, [pc, #304]	; (80054e0 <low_level_init+0x144>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80053b4:	4b4a      	ldr	r3, [pc, #296]	; (80054e0 <low_level_init+0x144>)
 80053b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053ba:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80053bc:	4b48      	ldr	r3, [pc, #288]	; (80054e0 <low_level_init+0x144>)
 80053be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053c2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80053c4:	4b46      	ldr	r3, [pc, #280]	; (80054e0 <low_level_init+0x144>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80053ca:	2300      	movs	r3, #0
 80053cc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80053ce:	2380      	movs	r3, #128	; 0x80
 80053d0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80053d2:	23e1      	movs	r3, #225	; 0xe1
 80053d4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x23;
 80053d6:	2323      	movs	r3, #35	; 0x23
 80053d8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x45;
 80053da:	2345      	movs	r3, #69	; 0x45
 80053dc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x67;
 80053de:	2367      	movs	r3, #103	; 0x67
 80053e0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80053e2:	4a3f      	ldr	r2, [pc, #252]	; (80054e0 <low_level_init+0x144>)
 80053e4:	f107 0308 	add.w	r3, r7, #8
 80053e8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80053ea:	4b3d      	ldr	r3, [pc, #244]	; (80054e0 <low_level_init+0x144>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80053f0:	4b3b      	ldr	r3, [pc, #236]	; (80054e0 <low_level_init+0x144>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80053f6:	4b3a      	ldr	r3, [pc, #232]	; (80054e0 <low_level_init+0x144>)
 80053f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80053fc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80053fe:	4838      	ldr	r0, [pc, #224]	; (80054e0 <low_level_init+0x144>)
 8005400:	f7fc fa44 	bl	800188c <HAL_ETH_Init>
 8005404:	4603      	mov	r3, r0
 8005406:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8005408:	7dfb      	ldrb	r3, [r7, #23]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d108      	bne.n	8005420 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005414:	f043 0304 	orr.w	r3, r3, #4
 8005418:	b2da      	uxtb	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005420:	2304      	movs	r3, #4
 8005422:	4a31      	ldr	r2, [pc, #196]	; (80054e8 <low_level_init+0x14c>)
 8005424:	4931      	ldr	r1, [pc, #196]	; (80054ec <low_level_init+0x150>)
 8005426:	482e      	ldr	r0, [pc, #184]	; (80054e0 <low_level_init+0x144>)
 8005428:	f7fc fbca 	bl	8001bc0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800542c:	2304      	movs	r3, #4
 800542e:	4a30      	ldr	r2, [pc, #192]	; (80054f0 <low_level_init+0x154>)
 8005430:	4930      	ldr	r1, [pc, #192]	; (80054f4 <low_level_init+0x158>)
 8005432:	482b      	ldr	r0, [pc, #172]	; (80054e0 <low_level_init+0x144>)
 8005434:	f7fc fc2d 	bl	8001c92 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2206      	movs	r2, #6
 800543c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005440:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <low_level_init+0x144>)
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	781a      	ldrb	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800544c:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <low_level_init+0x144>)
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	785a      	ldrb	r2, [r3, #1]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005458:	4b21      	ldr	r3, [pc, #132]	; (80054e0 <low_level_init+0x144>)
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	789a      	ldrb	r2, [r3, #2]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005464:	4b1e      	ldr	r3, [pc, #120]	; (80054e0 <low_level_init+0x144>)
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	78da      	ldrb	r2, [r3, #3]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005470:	4b1b      	ldr	r3, [pc, #108]	; (80054e0 <low_level_init+0x144>)
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	791a      	ldrb	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800547c:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <low_level_init+0x144>)
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	795a      	ldrb	r2, [r3, #5]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800548e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005496:	f043 030a 	orr.w	r3, r3, #10
 800549a:	b2da      	uxtb	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80054a2:	480f      	ldr	r0, [pc, #60]	; (80054e0 <low_level_init+0x144>)
 80054a4:	f7fc ff23 	bl	80022ee <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80054a8:	f107 0310 	add.w	r3, r7, #16
 80054ac:	461a      	mov	r2, r3
 80054ae:	211d      	movs	r1, #29
 80054b0:	480b      	ldr	r0, [pc, #44]	; (80054e0 <low_level_init+0x144>)
 80054b2:	f7fc fe4e 	bl	8002152 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f043 030b 	orr.w	r3, r3, #11
 80054bc:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	461a      	mov	r2, r3
 80054c2:	211d      	movs	r1, #29
 80054c4:	4806      	ldr	r0, [pc, #24]	; (80054e0 <low_level_init+0x144>)
 80054c6:	f7fc feac 	bl	8002222 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80054ca:	f107 0310 	add.w	r3, r7, #16
 80054ce:	461a      	mov	r2, r3
 80054d0:	211d      	movs	r1, #29
 80054d2:	4803      	ldr	r0, [pc, #12]	; (80054e0 <low_level_init+0x144>)
 80054d4:	f7fc fe3d 	bl	8002152 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80054d8:	bf00      	nop
 80054da:	3718      	adds	r7, #24
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	20001e74 	.word	0x20001e74
 80054e4:	40028000 	.word	0x40028000
 80054e8:	20001ebc 	.word	0x20001ebc
 80054ec:	200005a4 	.word	0x200005a4
 80054f0:	20000624 	.word	0x20000624
 80054f4:	20001df4 	.word	0x20001df4

080054f8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08a      	sub	sp, #40	; 0x28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005502:	4b4b      	ldr	r3, [pc, #300]	; (8005630 <low_level_output+0x138>)
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800550e:	2300      	movs	r3, #0
 8005510:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800551a:	4b45      	ldr	r3, [pc, #276]	; (8005630 <low_level_output+0x138>)
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	623b      	str	r3, [r7, #32]
 8005528:	e05a      	b.n	80055e0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	da03      	bge.n	800553a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005532:	23f8      	movs	r3, #248	; 0xf8
 8005534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005538:	e05c      	b.n	80055f4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	895b      	ldrh	r3, [r3, #10]
 800553e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005544:	e02f      	b.n	80055a6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	18d0      	adds	r0, r2, r3
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	18d1      	adds	r1, r2, r3
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	461a      	mov	r2, r3
 800555e:	f004 fe13 	bl	800a188 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	da03      	bge.n	8005578 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005570:	23f8      	movs	r3, #248	; 0xf8
 8005572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005576:	e03d      	b.n	80055f4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005588:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005594:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80055a0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80055a2:	2300      	movs	r3, #0
 80055a4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4413      	add	r3, r2
 80055ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d8c8      	bhi.n	8005546 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80055b4:	69fa      	ldr	r2, [r7, #28]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	18d0      	adds	r0, r2, r3
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4413      	add	r3, r2
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4619      	mov	r1, r3
 80055c6:	f004 fddf 	bl	800a188 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	623b      	str	r3, [r7, #32]
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1a1      	bne.n	800552a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80055e6:	6979      	ldr	r1, [r7, #20]
 80055e8:	4811      	ldr	r0, [pc, #68]	; (8005630 <low_level_output+0x138>)
 80055ea:	f7fc fbbf 	bl	8001d6c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80055f4:	4b0e      	ldr	r3, [pc, #56]	; (8005630 <low_level_output+0x138>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	f241 0314 	movw	r3, #4116	; 0x1014
 80055fc:	4413      	add	r3, r2
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00d      	beq.n	8005624 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005608:	4b09      	ldr	r3, [pc, #36]	; (8005630 <low_level_output+0x138>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005610:	4413      	add	r3, r2
 8005612:	2220      	movs	r2, #32
 8005614:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005616:	4b06      	ldr	r3, [pc, #24]	; (8005630 <low_level_output+0x138>)
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	f241 0304 	movw	r3, #4100	; 0x1004
 800561e:	4413      	add	r3, r2
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005624:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005628:	4618      	mov	r0, r3
 800562a:	3728      	adds	r7, #40	; 0x28
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20001e74 	.word	0x20001e74

08005634 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08c      	sub	sp, #48	; 0x30
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800563c:	2300      	movs	r3, #0
 800563e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005640:	2300      	movs	r3, #0
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005650:	2300      	movs	r3, #0
 8005652:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8005658:	484f      	ldr	r0, [pc, #316]	; (8005798 <low_level_input+0x164>)
 800565a:	f7fc fc71 	bl	8001f40 <HAL_ETH_GetReceivedFrame>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <low_level_input+0x34>

    return NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	e092      	b.n	800578e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005668:	4b4b      	ldr	r3, [pc, #300]	; (8005798 <low_level_input+0x164>)
 800566a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800566e:	4b4a      	ldr	r3, [pc, #296]	; (8005798 <low_level_input+0x164>)
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005674:	89fb      	ldrh	r3, [r7, #14]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d007      	beq.n	800568a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800567a:	89fb      	ldrh	r3, [r7, #14]
 800567c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005680:	4619      	mov	r1, r3
 8005682:	2000      	movs	r0, #0
 8005684:	f001 f8c8 	bl	8006818 <pbuf_alloc>
 8005688:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	2b00      	cmp	r3, #0
 800568e:	d04b      	beq.n	8005728 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005690:	4b41      	ldr	r3, [pc, #260]	; (8005798 <low_level_input+0x164>)
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005696:	2300      	movs	r3, #0
 8005698:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800569a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569c:	62bb      	str	r3, [r7, #40]	; 0x28
 800569e:	e040      	b.n	8005722 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	895b      	ldrh	r3, [r3, #10]
 80056a4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80056aa:	e021      	b.n	80056f0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	18d0      	adds	r0, r2, r3
 80056b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	18d1      	adds	r1, r2, r3
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	461a      	mov	r2, r3
 80056c4:	f004 fd60 	bl	800a188 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80056c8:	6a3b      	ldr	r3, [r7, #32]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	4413      	add	r3, r2
 80056da:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80056de:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80056ea:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80056ec:	2300      	movs	r3, #0
 80056ee:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d8d6      	bhi.n	80056ac <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	18d0      	adds	r0, r2, r3
 8005706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	4413      	add	r3, r2
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4619      	mov	r1, r3
 8005710:	f004 fd3a 	bl	800a188 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	4413      	add	r3, r2
 800571a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	62bb      	str	r3, [r7, #40]	; 0x28
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1bb      	bne.n	80056a0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005728:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <low_level_input+0x164>)
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800572e:	2300      	movs	r3, #0
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	e00b      	b.n	800574c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	3301      	adds	r3, #1
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	4b12      	ldr	r3, [pc, #72]	; (8005798 <low_level_input+0x164>)
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	429a      	cmp	r2, r3
 8005754:	d3ee      	bcc.n	8005734 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <low_level_input+0x164>)
 8005758:	2200      	movs	r2, #0
 800575a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800575c:	4b0e      	ldr	r3, [pc, #56]	; (8005798 <low_level_input+0x164>)
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	f241 0314 	movw	r3, #4116	; 0x1014
 8005764:	4413      	add	r3, r2
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00d      	beq.n	800578c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005770:	4b09      	ldr	r3, [pc, #36]	; (8005798 <low_level_input+0x164>)
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	f241 0314 	movw	r3, #4116	; 0x1014
 8005778:	4413      	add	r3, r2
 800577a:	2280      	movs	r2, #128	; 0x80
 800577c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800577e:	4b06      	ldr	r3, [pc, #24]	; (8005798 <low_level_input+0x164>)
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	f241 0308 	movw	r3, #4104	; 0x1008
 8005786:	4413      	add	r3, r2
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800578e:	4618      	mov	r0, r3
 8005790:	3730      	adds	r7, #48	; 0x30
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20001e74 	.word	0x20001e74

0800579c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff ff45 	bl	8005634 <low_level_input>
 80057aa:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d010      	beq.n	80057d4 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	4798      	blx	r3
 80057bc:	4603      	mov	r3, r0
 80057be:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 80057c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d006      	beq.n	80057d6 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f001 fb07 	bl	8006ddc <pbuf_free>
    p = NULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	e000      	b.n	80057d6 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80057d4:	bf00      	nop
  }
}
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <ethernetif_init+0x1c>
 80057ea:	4b0e      	ldr	r3, [pc, #56]	; (8005824 <ethernetif_init+0x48>)
 80057ec:	f240 220d 	movw	r2, #525	; 0x20d
 80057f0:	490d      	ldr	r1, [pc, #52]	; (8005828 <ethernetif_init+0x4c>)
 80057f2:	480e      	ldr	r0, [pc, #56]	; (800582c <ethernetif_init+0x50>)
 80057f4:	f004 fd88 	bl	800a308 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2273      	movs	r2, #115	; 0x73
 80057fc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2274      	movs	r2, #116	; 0x74
 8005804:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a09      	ldr	r2, [pc, #36]	; (8005830 <ethernetif_init+0x54>)
 800580c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a08      	ldr	r2, [pc, #32]	; (8005834 <ethernetif_init+0x58>)
 8005812:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff fdc1 	bl	800539c <low_level_init>

  return ERR_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	0800b1f0 	.word	0x0800b1f0
 8005828:	0800b20c 	.word	0x0800b20c
 800582c:	0800b21c 	.word	0x0800b21c
 8005830:	0800842d 	.word	0x0800842d
 8005834:	080054f9 	.word	0x080054f9

08005838 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800583c:	f7fb fe98 	bl	8001570 <HAL_GetTick>
 8005840:	4603      	mov	r3, r0
}
 8005842:	4618      	mov	r0, r3
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800585e:	089b      	lsrs	r3, r3, #2
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d05d      	beq.n	8005926 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800586a:	4b34      	ldr	r3, [pc, #208]	; (800593c <ethernetif_update_config+0xf4>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d03f      	beq.n	80058f2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005872:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005876:	2100      	movs	r1, #0
 8005878:	4830      	ldr	r0, [pc, #192]	; (800593c <ethernetif_update_config+0xf4>)
 800587a:	f7fc fcd2 	bl	8002222 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800587e:	f7fb fe77 	bl	8001570 <HAL_GetTick>
 8005882:	4603      	mov	r3, r0
 8005884:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005886:	f107 0308 	add.w	r3, r7, #8
 800588a:	461a      	mov	r2, r3
 800588c:	2101      	movs	r1, #1
 800588e:	482b      	ldr	r0, [pc, #172]	; (800593c <ethernetif_update_config+0xf4>)
 8005890:	f7fc fc5f 	bl	8002152 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005894:	f7fb fe6c 	bl	8001570 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058a2:	d828      	bhi.n	80058f6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f003 0320 	and.w	r3, r3, #32
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0eb      	beq.n	8005886 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80058ae:	f107 0308 	add.w	r3, r7, #8
 80058b2:	461a      	mov	r2, r3
 80058b4:	2110      	movs	r1, #16
 80058b6:	4821      	ldr	r0, [pc, #132]	; (800593c <ethernetif_update_config+0xf4>)
 80058b8:	f7fc fc4b 	bl	8002152 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d004      	beq.n	80058d0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80058c6:	4b1d      	ldr	r3, [pc, #116]	; (800593c <ethernetif_update_config+0xf4>)
 80058c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058cc:	60da      	str	r2, [r3, #12]
 80058ce:	e002      	b.n	80058d6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80058d0:	4b1a      	ldr	r3, [pc, #104]	; (800593c <ethernetif_update_config+0xf4>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80058e0:	4b16      	ldr	r3, [pc, #88]	; (800593c <ethernetif_update_config+0xf4>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	609a      	str	r2, [r3, #8]
 80058e6:	e016      	b.n	8005916 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80058e8:	4b14      	ldr	r3, [pc, #80]	; (800593c <ethernetif_update_config+0xf4>)
 80058ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80058ee:	609a      	str	r2, [r3, #8]
 80058f0:	e011      	b.n	8005916 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80058f2:	bf00      	nop
 80058f4:	e000      	b.n	80058f8 <ethernetif_update_config+0xb0>
          goto error;
 80058f6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80058f8:	4b10      	ldr	r3, [pc, #64]	; (800593c <ethernetif_update_config+0xf4>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	08db      	lsrs	r3, r3, #3
 80058fe:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005900:	4b0e      	ldr	r3, [pc, #56]	; (800593c <ethernetif_update_config+0xf4>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	085b      	lsrs	r3, r3, #1
 8005906:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005908:	4313      	orrs	r3, r2
 800590a:	b29b      	uxth	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	2100      	movs	r1, #0
 8005910:	480a      	ldr	r0, [pc, #40]	; (800593c <ethernetif_update_config+0xf4>)
 8005912:	f7fc fc86 	bl	8002222 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005916:	2100      	movs	r1, #0
 8005918:	4808      	ldr	r0, [pc, #32]	; (800593c <ethernetif_update_config+0xf4>)
 800591a:	f7fc fd47 	bl	80023ac <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800591e:	4807      	ldr	r0, [pc, #28]	; (800593c <ethernetif_update_config+0xf4>)
 8005920:	f7fc fce5 	bl	80022ee <HAL_ETH_Start>
 8005924:	e002      	b.n	800592c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005926:	4805      	ldr	r0, [pc, #20]	; (800593c <ethernetif_update_config+0xf4>)
 8005928:	f7fc fd10 	bl	800234c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f807 	bl	8005940 <ethernetif_notify_conn_changed>
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20001e74 	.word	0x20001e74

08005940 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	b21a      	sxth	r2, r3
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	0a1b      	lsrs	r3, r3, #8
 8005968:	b29b      	uxth	r3, r3
 800596a:	b21b      	sxth	r3, r3
 800596c:	4313      	orrs	r3, r2
 800596e:	b21b      	sxth	r3, r3
 8005970:	b29b      	uxth	r3, r3
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005984:	2300      	movs	r3, #0
 8005986:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005988:	f000 f8d2 	bl	8005b30 <mem_init>
  memp_init();
 800598c:	f000 fbd8 	bl	8006140 <memp_init>
  pbuf_init();
  netif_init();
 8005990:	f000 fc90 	bl	80062b4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005994:	f001 fe4c 	bl	8007630 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005998:	f001 fdc8 	bl	800752c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80059ae:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <ptr_to_mem+0x20>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	88fb      	ldrh	r3, [r7, #6]
 80059b4:	4413      	add	r3, r2
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	200000a0 	.word	0x200000a0

080059c8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <mem_to_ptr+0x20>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	b29b      	uxth	r3, r3
}
 80059da:	4618      	mov	r0, r3
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	200000a0 	.word	0x200000a0

080059ec <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80059ec:	b590      	push	{r4, r7, lr}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80059f4:	4b45      	ldr	r3, [pc, #276]	; (8005b0c <plug_holes+0x120>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d206      	bcs.n	8005a0c <plug_holes+0x20>
 80059fe:	4b44      	ldr	r3, [pc, #272]	; (8005b10 <plug_holes+0x124>)
 8005a00:	f240 12df 	movw	r2, #479	; 0x1df
 8005a04:	4943      	ldr	r1, [pc, #268]	; (8005b14 <plug_holes+0x128>)
 8005a06:	4844      	ldr	r0, [pc, #272]	; (8005b18 <plug_holes+0x12c>)
 8005a08:	f004 fc7e 	bl	800a308 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005a0c:	4b43      	ldr	r3, [pc, #268]	; (8005b1c <plug_holes+0x130>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d306      	bcc.n	8005a24 <plug_holes+0x38>
 8005a16:	4b3e      	ldr	r3, [pc, #248]	; (8005b10 <plug_holes+0x124>)
 8005a18:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005a1c:	4940      	ldr	r1, [pc, #256]	; (8005b20 <plug_holes+0x134>)
 8005a1e:	483e      	ldr	r0, [pc, #248]	; (8005b18 <plug_holes+0x12c>)
 8005a20:	f004 fc72 	bl	800a308 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	791b      	ldrb	r3, [r3, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d006      	beq.n	8005a3a <plug_holes+0x4e>
 8005a2c:	4b38      	ldr	r3, [pc, #224]	; (8005b10 <plug_holes+0x124>)
 8005a2e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005a32:	493c      	ldr	r1, [pc, #240]	; (8005b24 <plug_holes+0x138>)
 8005a34:	4838      	ldr	r0, [pc, #224]	; (8005b18 <plug_holes+0x12c>)
 8005a36:	f004 fc67 	bl	800a308 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a42:	d906      	bls.n	8005a52 <plug_holes+0x66>
 8005a44:	4b32      	ldr	r3, [pc, #200]	; (8005b10 <plug_holes+0x124>)
 8005a46:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005a4a:	4937      	ldr	r1, [pc, #220]	; (8005b28 <plug_holes+0x13c>)
 8005a4c:	4832      	ldr	r0, [pc, #200]	; (8005b18 <plug_holes+0x12c>)
 8005a4e:	f004 fc5b 	bl	800a308 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	881b      	ldrh	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff ffa4 	bl	80059a4 <ptr_to_mem>
 8005a5c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d024      	beq.n	8005ab0 <plug_holes+0xc4>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	791b      	ldrb	r3, [r3, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d120      	bne.n	8005ab0 <plug_holes+0xc4>
 8005a6e:	4b2b      	ldr	r3, [pc, #172]	; (8005b1c <plug_holes+0x130>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d01b      	beq.n	8005ab0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005a78:	4b2c      	ldr	r3, [pc, #176]	; (8005b2c <plug_holes+0x140>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d102      	bne.n	8005a88 <plug_holes+0x9c>
      lfree = mem;
 8005a82:	4a2a      	ldr	r2, [pc, #168]	; (8005b2c <plug_holes+0x140>)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	881a      	ldrh	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a98:	d00a      	beq.n	8005ab0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff ff80 	bl	80059a4 <ptr_to_mem>
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff ff8e 	bl	80059c8 <mem_to_ptr>
 8005aac:	4603      	mov	r3, r0
 8005aae:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	885b      	ldrh	r3, [r3, #2]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7ff ff75 	bl	80059a4 <ptr_to_mem>
 8005aba:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d01f      	beq.n	8005b04 <plug_holes+0x118>
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	791b      	ldrb	r3, [r3, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d11b      	bne.n	8005b04 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005acc:	4b17      	ldr	r3, [pc, #92]	; (8005b2c <plug_holes+0x140>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d102      	bne.n	8005adc <plug_holes+0xf0>
      lfree = pmem;
 8005ad6:	4a15      	ldr	r2, [pc, #84]	; (8005b2c <plug_holes+0x140>)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	881a      	ldrh	r2, [r3, #0]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005aec:	d00a      	beq.n	8005b04 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff ff56 	bl	80059a4 <ptr_to_mem>
 8005af8:	4604      	mov	r4, r0
 8005afa:	68b8      	ldr	r0, [r7, #8]
 8005afc:	f7ff ff64 	bl	80059c8 <mem_to_ptr>
 8005b00:	4603      	mov	r3, r0
 8005b02:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005b04:	bf00      	nop
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd90      	pop	{r4, r7, pc}
 8005b0c:	200000a0 	.word	0x200000a0
 8005b10:	0800b244 	.word	0x0800b244
 8005b14:	0800b274 	.word	0x0800b274
 8005b18:	0800b28c 	.word	0x0800b28c
 8005b1c:	200000a4 	.word	0x200000a4
 8005b20:	0800b2b4 	.word	0x0800b2b4
 8005b24:	0800b2d0 	.word	0x0800b2d0
 8005b28:	0800b2ec 	.word	0x0800b2ec
 8005b2c:	200000a8 	.word	0x200000a8

08005b30 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005b36:	4b18      	ldr	r3, [pc, #96]	; (8005b98 <mem_init+0x68>)
 8005b38:	3303      	adds	r3, #3
 8005b3a:	f023 0303 	bic.w	r3, r3, #3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	4b16      	ldr	r3, [pc, #88]	; (8005b9c <mem_init+0x6c>)
 8005b42:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005b44:	4b15      	ldr	r3, [pc, #84]	; (8005b9c <mem_init+0x6c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005b50:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005b5e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005b62:	f7ff ff1f 	bl	80059a4 <ptr_to_mem>
 8005b66:	4603      	mov	r3, r0
 8005b68:	4a0d      	ldr	r2, [pc, #52]	; (8005ba0 <mem_init+0x70>)
 8005b6a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <mem_init+0x70>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2201      	movs	r2, #1
 8005b72:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005b74:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <mem_init+0x70>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005b7c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005b7e:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <mem_init+0x70>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005b86:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005b88:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <mem_init+0x6c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a05      	ldr	r2, [pc, #20]	; (8005ba4 <mem_init+0x74>)
 8005b8e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	200036a4 	.word	0x200036a4
 8005b9c:	200000a0 	.word	0x200000a0
 8005ba0:	200000a4 	.word	0x200000a4
 8005ba4:	200000a8 	.word	0x200000a8

08005ba8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff ff09 	bl	80059c8 <mem_to_ptr>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff fef0 	bl	80059a4 <ptr_to_mem>
 8005bc4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	885b      	ldrh	r3, [r3, #2]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff feea 	bl	80059a4 <ptr_to_mem>
 8005bd0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005bda:	d818      	bhi.n	8005c0e <mem_link_valid+0x66>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	885b      	ldrh	r3, [r3, #2]
 8005be0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005be4:	d813      	bhi.n	8005c0e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005bea:	8afa      	ldrh	r2, [r7, #22]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d004      	beq.n	8005bfa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	8afa      	ldrh	r2, [r7, #22]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d109      	bne.n	8005c0e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005bfa:	4b08      	ldr	r3, [pc, #32]	; (8005c1c <mem_link_valid+0x74>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d006      	beq.n	8005c12 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	885b      	ldrh	r3, [r3, #2]
 8005c08:	8afa      	ldrh	r2, [r7, #22]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d001      	beq.n	8005c12 <mem_link_valid+0x6a>
    return 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e000      	b.n	8005c14 <mem_link_valid+0x6c>
  }
  return 1;
 8005c12:	2301      	movs	r3, #1
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	200000a4 	.word	0x200000a4

08005c20 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d04c      	beq.n	8005cc8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005c38:	4b25      	ldr	r3, [pc, #148]	; (8005cd0 <mem_free+0xb0>)
 8005c3a:	f240 2273 	movw	r2, #627	; 0x273
 8005c3e:	4925      	ldr	r1, [pc, #148]	; (8005cd4 <mem_free+0xb4>)
 8005c40:	4825      	ldr	r0, [pc, #148]	; (8005cd8 <mem_free+0xb8>)
 8005c42:	f004 fb61 	bl	800a308 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005c46:	e040      	b.n	8005cca <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3b08      	subs	r3, #8
 8005c4c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005c4e:	4b23      	ldr	r3, [pc, #140]	; (8005cdc <mem_free+0xbc>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d306      	bcc.n	8005c66 <mem_free+0x46>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f103 020c 	add.w	r2, r3, #12
 8005c5e:	4b20      	ldr	r3, [pc, #128]	; (8005ce0 <mem_free+0xc0>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d907      	bls.n	8005c76 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005c66:	4b1a      	ldr	r3, [pc, #104]	; (8005cd0 <mem_free+0xb0>)
 8005c68:	f240 227f 	movw	r2, #639	; 0x27f
 8005c6c:	491d      	ldr	r1, [pc, #116]	; (8005ce4 <mem_free+0xc4>)
 8005c6e:	481a      	ldr	r0, [pc, #104]	; (8005cd8 <mem_free+0xb8>)
 8005c70:	f004 fb4a 	bl	800a308 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005c74:	e029      	b.n	8005cca <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	791b      	ldrb	r3, [r3, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d107      	bne.n	8005c8e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005c7e:	4b14      	ldr	r3, [pc, #80]	; (8005cd0 <mem_free+0xb0>)
 8005c80:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005c84:	4918      	ldr	r1, [pc, #96]	; (8005ce8 <mem_free+0xc8>)
 8005c86:	4814      	ldr	r0, [pc, #80]	; (8005cd8 <mem_free+0xb8>)
 8005c88:	f004 fb3e 	bl	800a308 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005c8c:	e01d      	b.n	8005cca <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f7ff ff8a 	bl	8005ba8 <mem_link_valid>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d107      	bne.n	8005caa <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005c9a:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <mem_free+0xb0>)
 8005c9c:	f240 2295 	movw	r2, #661	; 0x295
 8005ca0:	4912      	ldr	r1, [pc, #72]	; (8005cec <mem_free+0xcc>)
 8005ca2:	480d      	ldr	r0, [pc, #52]	; (8005cd8 <mem_free+0xb8>)
 8005ca4:	f004 fb30 	bl	800a308 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005ca8:	e00f      	b.n	8005cca <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005cb0:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <mem_free+0xd0>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d202      	bcs.n	8005cc0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005cba:	4a0d      	ldr	r2, [pc, #52]	; (8005cf0 <mem_free+0xd0>)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7ff fe93 	bl	80059ec <plug_holes>
 8005cc6:	e000      	b.n	8005cca <mem_free+0xaa>
    return;
 8005cc8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	0800b244 	.word	0x0800b244
 8005cd4:	0800b318 	.word	0x0800b318
 8005cd8:	0800b28c 	.word	0x0800b28c
 8005cdc:	200000a0 	.word	0x200000a0
 8005ce0:	200000a4 	.word	0x200000a4
 8005ce4:	0800b33c 	.word	0x0800b33c
 8005ce8:	0800b358 	.word	0x0800b358
 8005cec:	0800b380 	.word	0x0800b380
 8005cf0:	200000a8 	.word	0x200000a8

08005cf4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005d00:	887b      	ldrh	r3, [r7, #2]
 8005d02:	3303      	adds	r3, #3
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	f023 0303 	bic.w	r3, r3, #3
 8005d0a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005d0c:	8bfb      	ldrh	r3, [r7, #30]
 8005d0e:	2b0b      	cmp	r3, #11
 8005d10:	d801      	bhi.n	8005d16 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005d12:	230c      	movs	r3, #12
 8005d14:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005d16:	8bfb      	ldrh	r3, [r7, #30]
 8005d18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d1c:	d803      	bhi.n	8005d26 <mem_trim+0x32>
 8005d1e:	8bfa      	ldrh	r2, [r7, #30]
 8005d20:	887b      	ldrh	r3, [r7, #2]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d201      	bcs.n	8005d2a <mem_trim+0x36>
    return NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	e0cc      	b.n	8005ec4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005d2a:	4b68      	ldr	r3, [pc, #416]	; (8005ecc <mem_trim+0x1d8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d304      	bcc.n	8005d3e <mem_trim+0x4a>
 8005d34:	4b66      	ldr	r3, [pc, #408]	; (8005ed0 <mem_trim+0x1dc>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d306      	bcc.n	8005d4c <mem_trim+0x58>
 8005d3e:	4b65      	ldr	r3, [pc, #404]	; (8005ed4 <mem_trim+0x1e0>)
 8005d40:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005d44:	4964      	ldr	r1, [pc, #400]	; (8005ed8 <mem_trim+0x1e4>)
 8005d46:	4865      	ldr	r0, [pc, #404]	; (8005edc <mem_trim+0x1e8>)
 8005d48:	f004 fade 	bl	800a308 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005d4c:	4b5f      	ldr	r3, [pc, #380]	; (8005ecc <mem_trim+0x1d8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d304      	bcc.n	8005d60 <mem_trim+0x6c>
 8005d56:	4b5e      	ldr	r3, [pc, #376]	; (8005ed0 <mem_trim+0x1dc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d301      	bcc.n	8005d64 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	e0af      	b.n	8005ec4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	3b08      	subs	r3, #8
 8005d68:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005d6a:	69b8      	ldr	r0, [r7, #24]
 8005d6c:	f7ff fe2c 	bl	80059c8 <mem_to_ptr>
 8005d70:	4603      	mov	r3, r0
 8005d72:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	881a      	ldrh	r2, [r3, #0]
 8005d78:	8afb      	ldrh	r3, [r7, #22]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	3b08      	subs	r3, #8
 8005d80:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005d82:	8bfa      	ldrh	r2, [r7, #30]
 8005d84:	8abb      	ldrh	r3, [r7, #20]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d906      	bls.n	8005d98 <mem_trim+0xa4>
 8005d8a:	4b52      	ldr	r3, [pc, #328]	; (8005ed4 <mem_trim+0x1e0>)
 8005d8c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005d90:	4953      	ldr	r1, [pc, #332]	; (8005ee0 <mem_trim+0x1ec>)
 8005d92:	4852      	ldr	r0, [pc, #328]	; (8005edc <mem_trim+0x1e8>)
 8005d94:	f004 fab8 	bl	800a308 <iprintf>
  if (newsize > size) {
 8005d98:	8bfa      	ldrh	r2, [r7, #30]
 8005d9a:	8abb      	ldrh	r3, [r7, #20]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d901      	bls.n	8005da4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005da0:	2300      	movs	r3, #0
 8005da2:	e08f      	b.n	8005ec4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005da4:	8bfa      	ldrh	r2, [r7, #30]
 8005da6:	8abb      	ldrh	r3, [r7, #20]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d101      	bne.n	8005db0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	e089      	b.n	8005ec4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff fdf5 	bl	80059a4 <ptr_to_mem>
 8005dba:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	791b      	ldrb	r3, [r3, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d13f      	bne.n	8005e44 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005dcc:	d106      	bne.n	8005ddc <mem_trim+0xe8>
 8005dce:	4b41      	ldr	r3, [pc, #260]	; (8005ed4 <mem_trim+0x1e0>)
 8005dd0:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005dd4:	4943      	ldr	r1, [pc, #268]	; (8005ee4 <mem_trim+0x1f0>)
 8005dd6:	4841      	ldr	r0, [pc, #260]	; (8005edc <mem_trim+0x1e8>)
 8005dd8:	f004 fa96 	bl	800a308 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	881b      	ldrh	r3, [r3, #0]
 8005de0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005de2:	8afa      	ldrh	r2, [r7, #22]
 8005de4:	8bfb      	ldrh	r3, [r7, #30]
 8005de6:	4413      	add	r3, r2
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	3308      	adds	r3, #8
 8005dec:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005dee:	4b3e      	ldr	r3, [pc, #248]	; (8005ee8 <mem_trim+0x1f4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d106      	bne.n	8005e06 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005df8:	89fb      	ldrh	r3, [r7, #14]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff fdd2 	bl	80059a4 <ptr_to_mem>
 8005e00:	4603      	mov	r3, r0
 8005e02:	4a39      	ldr	r2, [pc, #228]	; (8005ee8 <mem_trim+0x1f4>)
 8005e04:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005e06:	89fb      	ldrh	r3, [r7, #14]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff fdcb 	bl	80059a4 <ptr_to_mem>
 8005e0e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2200      	movs	r2, #0
 8005e14:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	89ba      	ldrh	r2, [r7, #12]
 8005e1a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	8afa      	ldrh	r2, [r7, #22]
 8005e20:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	89fa      	ldrh	r2, [r7, #14]
 8005e26:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005e30:	d047      	beq.n	8005ec2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff fdb4 	bl	80059a4 <ptr_to_mem>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	89fb      	ldrh	r3, [r7, #14]
 8005e40:	8053      	strh	r3, [r2, #2]
 8005e42:	e03e      	b.n	8005ec2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005e44:	8bfb      	ldrh	r3, [r7, #30]
 8005e46:	f103 0214 	add.w	r2, r3, #20
 8005e4a:	8abb      	ldrh	r3, [r7, #20]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d838      	bhi.n	8005ec2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005e50:	8afa      	ldrh	r2, [r7, #22]
 8005e52:	8bfb      	ldrh	r3, [r7, #30]
 8005e54:	4413      	add	r3, r2
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3308      	adds	r3, #8
 8005e5a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005e64:	d106      	bne.n	8005e74 <mem_trim+0x180>
 8005e66:	4b1b      	ldr	r3, [pc, #108]	; (8005ed4 <mem_trim+0x1e0>)
 8005e68:	f240 3216 	movw	r2, #790	; 0x316
 8005e6c:	491d      	ldr	r1, [pc, #116]	; (8005ee4 <mem_trim+0x1f0>)
 8005e6e:	481b      	ldr	r0, [pc, #108]	; (8005edc <mem_trim+0x1e8>)
 8005e70:	f004 fa4a 	bl	800a308 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005e74:	89fb      	ldrh	r3, [r7, #14]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff fd94 	bl	80059a4 <ptr_to_mem>
 8005e7c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005e7e:	4b1a      	ldr	r3, [pc, #104]	; (8005ee8 <mem_trim+0x1f4>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d202      	bcs.n	8005e8e <mem_trim+0x19a>
      lfree = mem2;
 8005e88:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <mem_trim+0x1f4>)
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2200      	movs	r2, #0
 8005e92:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	881a      	ldrh	r2, [r3, #0]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	8afa      	ldrh	r2, [r7, #22]
 8005ea0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	89fa      	ldrh	r2, [r7, #14]
 8005ea6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005eb0:	d007      	beq.n	8005ec2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff fd74 	bl	80059a4 <ptr_to_mem>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	89fb      	ldrh	r3, [r7, #14]
 8005ec0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005ec2:	687b      	ldr	r3, [r7, #4]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3720      	adds	r7, #32
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	200000a0 	.word	0x200000a0
 8005ed0:	200000a4 	.word	0x200000a4
 8005ed4:	0800b244 	.word	0x0800b244
 8005ed8:	0800b3b4 	.word	0x0800b3b4
 8005edc:	0800b28c 	.word	0x0800b28c
 8005ee0:	0800b3cc 	.word	0x0800b3cc
 8005ee4:	0800b3ec 	.word	0x0800b3ec
 8005ee8:	200000a8 	.word	0x200000a8

08005eec <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005ef6:	88fb      	ldrh	r3, [r7, #6]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <mem_malloc+0x14>
    return NULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e0d9      	b.n	80060b4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005f00:	88fb      	ldrh	r3, [r7, #6]
 8005f02:	3303      	adds	r3, #3
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f023 0303 	bic.w	r3, r3, #3
 8005f0a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005f0c:	8bbb      	ldrh	r3, [r7, #28]
 8005f0e:	2b0b      	cmp	r3, #11
 8005f10:	d801      	bhi.n	8005f16 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005f12:	230c      	movs	r3, #12
 8005f14:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005f16:	8bbb      	ldrh	r3, [r7, #28]
 8005f18:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005f1c:	d803      	bhi.n	8005f26 <mem_malloc+0x3a>
 8005f1e:	8bba      	ldrh	r2, [r7, #28]
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d201      	bcs.n	8005f2a <mem_malloc+0x3e>
    return NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	e0c4      	b.n	80060b4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005f2a:	4b64      	ldr	r3, [pc, #400]	; (80060bc <mem_malloc+0x1d0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff fd4a 	bl	80059c8 <mem_to_ptr>
 8005f34:	4603      	mov	r3, r0
 8005f36:	83fb      	strh	r3, [r7, #30]
 8005f38:	e0b4      	b.n	80060a4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005f3a:	8bfb      	ldrh	r3, [r7, #30]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff fd31 	bl	80059a4 <ptr_to_mem>
 8005f42:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	791b      	ldrb	r3, [r3, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f040 80a4 	bne.w	8006096 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	8bfb      	ldrh	r3, [r7, #30]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	f1a3 0208 	sub.w	r2, r3, #8
 8005f5c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	f0c0 8099 	bcc.w	8006096 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	8bfb      	ldrh	r3, [r7, #30]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	f1a3 0208 	sub.w	r2, r3, #8
 8005f72:	8bbb      	ldrh	r3, [r7, #28]
 8005f74:	3314      	adds	r3, #20
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d333      	bcc.n	8005fe2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005f7a:	8bfa      	ldrh	r2, [r7, #30]
 8005f7c:	8bbb      	ldrh	r3, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3308      	adds	r3, #8
 8005f84:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005f86:	8a7b      	ldrh	r3, [r7, #18]
 8005f88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005f8c:	d106      	bne.n	8005f9c <mem_malloc+0xb0>
 8005f8e:	4b4c      	ldr	r3, [pc, #304]	; (80060c0 <mem_malloc+0x1d4>)
 8005f90:	f240 3287 	movw	r2, #903	; 0x387
 8005f94:	494b      	ldr	r1, [pc, #300]	; (80060c4 <mem_malloc+0x1d8>)
 8005f96:	484c      	ldr	r0, [pc, #304]	; (80060c8 <mem_malloc+0x1dc>)
 8005f98:	f004 f9b6 	bl	800a308 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005f9c:	8a7b      	ldrh	r3, [r7, #18]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fd00 	bl	80059a4 <ptr_to_mem>
 8005fa4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	881a      	ldrh	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8bfa      	ldrh	r2, [r7, #30]
 8005fb8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	8a7a      	ldrh	r2, [r7, #18]
 8005fbe:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005fce:	d00b      	beq.n	8005fe8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff fce5 	bl	80059a4 <ptr_to_mem>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	8a7b      	ldrh	r3, [r7, #18]
 8005fde:	8053      	strh	r3, [r2, #2]
 8005fe0:	e002      	b.n	8005fe8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005fe8:	4b34      	ldr	r3, [pc, #208]	; (80060bc <mem_malloc+0x1d0>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d127      	bne.n	8006042 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005ff2:	4b32      	ldr	r3, [pc, #200]	; (80060bc <mem_malloc+0x1d0>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005ff8:	e005      	b.n	8006006 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff fcd0 	bl	80059a4 <ptr_to_mem>
 8006004:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	791b      	ldrb	r3, [r3, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d004      	beq.n	8006018 <mem_malloc+0x12c>
 800600e:	4b2f      	ldr	r3, [pc, #188]	; (80060cc <mem_malloc+0x1e0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	429a      	cmp	r2, r3
 8006016:	d1f0      	bne.n	8005ffa <mem_malloc+0x10e>
          }
          lfree = cur;
 8006018:	4a28      	ldr	r2, [pc, #160]	; (80060bc <mem_malloc+0x1d0>)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800601e:	4b27      	ldr	r3, [pc, #156]	; (80060bc <mem_malloc+0x1d0>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b2a      	ldr	r3, [pc, #168]	; (80060cc <mem_malloc+0x1e0>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d00b      	beq.n	8006042 <mem_malloc+0x156>
 800602a:	4b24      	ldr	r3, [pc, #144]	; (80060bc <mem_malloc+0x1d0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	791b      	ldrb	r3, [r3, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d006      	beq.n	8006042 <mem_malloc+0x156>
 8006034:	4b22      	ldr	r3, [pc, #136]	; (80060c0 <mem_malloc+0x1d4>)
 8006036:	f240 32b5 	movw	r2, #949	; 0x3b5
 800603a:	4925      	ldr	r1, [pc, #148]	; (80060d0 <mem_malloc+0x1e4>)
 800603c:	4822      	ldr	r0, [pc, #136]	; (80060c8 <mem_malloc+0x1dc>)
 800603e:	f004 f963 	bl	800a308 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006042:	8bba      	ldrh	r2, [r7, #28]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	4413      	add	r3, r2
 8006048:	3308      	adds	r3, #8
 800604a:	4a20      	ldr	r2, [pc, #128]	; (80060cc <mem_malloc+0x1e0>)
 800604c:	6812      	ldr	r2, [r2, #0]
 800604e:	4293      	cmp	r3, r2
 8006050:	d906      	bls.n	8006060 <mem_malloc+0x174>
 8006052:	4b1b      	ldr	r3, [pc, #108]	; (80060c0 <mem_malloc+0x1d4>)
 8006054:	f240 32b9 	movw	r2, #953	; 0x3b9
 8006058:	491e      	ldr	r1, [pc, #120]	; (80060d4 <mem_malloc+0x1e8>)
 800605a:	481b      	ldr	r0, [pc, #108]	; (80060c8 <mem_malloc+0x1dc>)
 800605c:	f004 f954 	bl	800a308 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d006      	beq.n	8006078 <mem_malloc+0x18c>
 800606a:	4b15      	ldr	r3, [pc, #84]	; (80060c0 <mem_malloc+0x1d4>)
 800606c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8006070:	4919      	ldr	r1, [pc, #100]	; (80060d8 <mem_malloc+0x1ec>)
 8006072:	4815      	ldr	r0, [pc, #84]	; (80060c8 <mem_malloc+0x1dc>)
 8006074:	f004 f948 	bl	800a308 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d006      	beq.n	8006090 <mem_malloc+0x1a4>
 8006082:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <mem_malloc+0x1d4>)
 8006084:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006088:	4914      	ldr	r1, [pc, #80]	; (80060dc <mem_malloc+0x1f0>)
 800608a:	480f      	ldr	r0, [pc, #60]	; (80060c8 <mem_malloc+0x1dc>)
 800608c:	f004 f93c 	bl	800a308 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	3308      	adds	r3, #8
 8006094:	e00e      	b.n	80060b4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006096:	8bfb      	ldrh	r3, [r7, #30]
 8006098:	4618      	mov	r0, r3
 800609a:	f7ff fc83 	bl	80059a4 <ptr_to_mem>
 800609e:	4603      	mov	r3, r0
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80060a4:	8bfa      	ldrh	r2, [r7, #30]
 80060a6:	8bbb      	ldrh	r3, [r7, #28]
 80060a8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80060ac:	429a      	cmp	r2, r3
 80060ae:	f4ff af44 	bcc.w	8005f3a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3720      	adds	r7, #32
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	200000a8 	.word	0x200000a8
 80060c0:	0800b244 	.word	0x0800b244
 80060c4:	0800b3ec 	.word	0x0800b3ec
 80060c8:	0800b28c 	.word	0x0800b28c
 80060cc:	200000a4 	.word	0x200000a4
 80060d0:	0800b400 	.word	0x0800b400
 80060d4:	0800b41c 	.word	0x0800b41c
 80060d8:	0800b44c 	.word	0x0800b44c
 80060dc:	0800b47c 	.word	0x0800b47c

080060e0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	3303      	adds	r3, #3
 80060f6:	f023 0303 	bic.w	r3, r3, #3
 80060fa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	e011      	b.n	8006126 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	4413      	add	r3, r2
 800611e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	3301      	adds	r3, #1
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	885b      	ldrh	r3, [r3, #2]
 800612a:	461a      	mov	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4293      	cmp	r3, r2
 8006130:	dbe7      	blt.n	8006102 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006146:	2300      	movs	r3, #0
 8006148:	80fb      	strh	r3, [r7, #6]
 800614a:	e009      	b.n	8006160 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800614c:	88fb      	ldrh	r3, [r7, #6]
 800614e:	4a08      	ldr	r2, [pc, #32]	; (8006170 <memp_init+0x30>)
 8006150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff ffc3 	bl	80060e0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	3301      	adds	r3, #1
 800615e:	80fb      	strh	r3, [r7, #6]
 8006160:	88fb      	ldrh	r3, [r7, #6]
 8006162:	2b06      	cmp	r3, #6
 8006164:	d9f2      	bls.n	800614c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006166:	bf00      	nop
 8006168:	bf00      	nop
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	0800c88c 	.word	0x0800c88c

08006174 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d012      	beq.n	80061b0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d006      	beq.n	80061ac <do_memp_malloc_pool+0x38>
 800619e:	4b07      	ldr	r3, [pc, #28]	; (80061bc <do_memp_malloc_pool+0x48>)
 80061a0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80061a4:	4906      	ldr	r1, [pc, #24]	; (80061c0 <do_memp_malloc_pool+0x4c>)
 80061a6:	4807      	ldr	r0, [pc, #28]	; (80061c4 <do_memp_malloc_pool+0x50>)
 80061a8:	f004 f8ae 	bl	800a308 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	e000      	b.n	80061b2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	0800b4a0 	.word	0x0800b4a0
 80061c0:	0800b4d0 	.word	0x0800b4d0
 80061c4:	0800b4f4 	.word	0x0800b4f4

080061c8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	4603      	mov	r3, r0
 80061d0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	2b06      	cmp	r3, #6
 80061d6:	d908      	bls.n	80061ea <memp_malloc+0x22>
 80061d8:	4b0a      	ldr	r3, [pc, #40]	; (8006204 <memp_malloc+0x3c>)
 80061da:	f240 1257 	movw	r2, #343	; 0x157
 80061de:	490a      	ldr	r1, [pc, #40]	; (8006208 <memp_malloc+0x40>)
 80061e0:	480a      	ldr	r0, [pc, #40]	; (800620c <memp_malloc+0x44>)
 80061e2:	f004 f891 	bl	800a308 <iprintf>
 80061e6:	2300      	movs	r3, #0
 80061e8:	e008      	b.n	80061fc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	4a08      	ldr	r2, [pc, #32]	; (8006210 <memp_malloc+0x48>)
 80061ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff ffbe 	bl	8006174 <do_memp_malloc_pool>
 80061f8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80061fa:	68fb      	ldr	r3, [r7, #12]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	0800b4a0 	.word	0x0800b4a0
 8006208:	0800b530 	.word	0x0800b530
 800620c:	0800b4f4 	.word	0x0800b4f4
 8006210:	0800c88c 	.word	0x0800c88c

08006214 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d006      	beq.n	8006236 <do_memp_free_pool+0x22>
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <do_memp_free_pool+0x40>)
 800622a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800622e:	490a      	ldr	r1, [pc, #40]	; (8006258 <do_memp_free_pool+0x44>)
 8006230:	480a      	ldr	r0, [pc, #40]	; (800625c <do_memp_free_pool+0x48>)
 8006232:	f004 f869 	bl	800a308 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	0800b4a0 	.word	0x0800b4a0
 8006258:	0800b550 	.word	0x0800b550
 800625c:	0800b4f4 	.word	0x0800b4f4

08006260 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	6039      	str	r1, [r7, #0]
 800626a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	2b06      	cmp	r3, #6
 8006270:	d907      	bls.n	8006282 <memp_free+0x22>
 8006272:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <memp_free+0x44>)
 8006274:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006278:	490b      	ldr	r1, [pc, #44]	; (80062a8 <memp_free+0x48>)
 800627a:	480c      	ldr	r0, [pc, #48]	; (80062ac <memp_free+0x4c>)
 800627c:	f004 f844 	bl	800a308 <iprintf>
 8006280:	e00c      	b.n	800629c <memp_free+0x3c>

  if (mem == NULL) {
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d008      	beq.n	800629a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	4a09      	ldr	r2, [pc, #36]	; (80062b0 <memp_free+0x50>)
 800628c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff ffbe 	bl	8006214 <do_memp_free_pool>
 8006298:	e000      	b.n	800629c <memp_free+0x3c>
    return;
 800629a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	0800b4a0 	.word	0x0800b4a0
 80062a8:	0800b570 	.word	0x0800b570
 80062ac:	0800b4f4 	.word	0x0800b4f4
 80062b0:	0800c88c 	.word	0x0800c88c

080062b4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80062b8:	bf00      	nop
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
	...

080062c4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d108      	bne.n	80062ea <netif_add+0x26>
 80062d8:	4b57      	ldr	r3, [pc, #348]	; (8006438 <netif_add+0x174>)
 80062da:	f240 1227 	movw	r2, #295	; 0x127
 80062de:	4957      	ldr	r1, [pc, #348]	; (800643c <netif_add+0x178>)
 80062e0:	4857      	ldr	r0, [pc, #348]	; (8006440 <netif_add+0x17c>)
 80062e2:	f004 f811 	bl	800a308 <iprintf>
 80062e6:	2300      	movs	r3, #0
 80062e8:	e0a2      	b.n	8006430 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d108      	bne.n	8006302 <netif_add+0x3e>
 80062f0:	4b51      	ldr	r3, [pc, #324]	; (8006438 <netif_add+0x174>)
 80062f2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80062f6:	4953      	ldr	r1, [pc, #332]	; (8006444 <netif_add+0x180>)
 80062f8:	4851      	ldr	r0, [pc, #324]	; (8006440 <netif_add+0x17c>)
 80062fa:	f004 f805 	bl	800a308 <iprintf>
 80062fe:	2300      	movs	r3, #0
 8006300:	e096      	b.n	8006430 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006308:	4b4f      	ldr	r3, [pc, #316]	; (8006448 <netif_add+0x184>)
 800630a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006312:	4b4d      	ldr	r3, [pc, #308]	; (8006448 <netif_add+0x184>)
 8006314:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800631c:	4b4a      	ldr	r3, [pc, #296]	; (8006448 <netif_add+0x184>)
 800631e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4a45      	ldr	r2, [pc, #276]	; (800644c <netif_add+0x188>)
 8006336:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a3a      	ldr	r2, [r7, #32]
 8006350:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006352:	4b3f      	ldr	r3, [pc, #252]	; (8006450 <netif_add+0x18c>)
 8006354:	781a      	ldrb	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006360:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f913 	bl	8006594 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	4798      	blx	r3
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <netif_add+0xba>
    return NULL;
 800637a:	2300      	movs	r3, #0
 800637c:	e058      	b.n	8006430 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006384:	2bff      	cmp	r3, #255	; 0xff
 8006386:	d103      	bne.n	8006390 <netif_add+0xcc>
        netif->num = 0;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006394:	4b2f      	ldr	r3, [pc, #188]	; (8006454 <netif_add+0x190>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	617b      	str	r3, [r7, #20]
 800639a:	e02b      	b.n	80063f4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d106      	bne.n	80063b2 <netif_add+0xee>
 80063a4:	4b24      	ldr	r3, [pc, #144]	; (8006438 <netif_add+0x174>)
 80063a6:	f240 128b 	movw	r2, #395	; 0x18b
 80063aa:	492b      	ldr	r1, [pc, #172]	; (8006458 <netif_add+0x194>)
 80063ac:	4824      	ldr	r0, [pc, #144]	; (8006440 <netif_add+0x17c>)
 80063ae:	f003 ffab 	bl	800a308 <iprintf>
        num_netifs++;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	3301      	adds	r3, #1
 80063b6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2bff      	cmp	r3, #255	; 0xff
 80063bc:	dd06      	ble.n	80063cc <netif_add+0x108>
 80063be:	4b1e      	ldr	r3, [pc, #120]	; (8006438 <netif_add+0x174>)
 80063c0:	f240 128d 	movw	r2, #397	; 0x18d
 80063c4:	4925      	ldr	r1, [pc, #148]	; (800645c <netif_add+0x198>)
 80063c6:	481e      	ldr	r0, [pc, #120]	; (8006440 <netif_add+0x17c>)
 80063c8:	f003 ff9e 	bl	800a308 <iprintf>
        if (netif2->num == netif->num) {
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063d8:	429a      	cmp	r2, r3
 80063da:	d108      	bne.n	80063ee <netif_add+0x12a>
          netif->num++;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80063e2:	3301      	adds	r3, #1
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80063ec:	e005      	b.n	80063fa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1d0      	bne.n	800639c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1be      	bne.n	800637e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006406:	2bfe      	cmp	r3, #254	; 0xfe
 8006408:	d103      	bne.n	8006412 <netif_add+0x14e>
    netif_num = 0;
 800640a:	4b11      	ldr	r3, [pc, #68]	; (8006450 <netif_add+0x18c>)
 800640c:	2200      	movs	r2, #0
 800640e:	701a      	strb	r2, [r3, #0]
 8006410:	e006      	b.n	8006420 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006418:	3301      	adds	r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <netif_add+0x18c>)
 800641e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006420:	4b0c      	ldr	r3, [pc, #48]	; (8006454 <netif_add+0x190>)
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006428:	4a0a      	ldr	r2, [pc, #40]	; (8006454 <netif_add+0x190>)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800642e:	68fb      	ldr	r3, [r7, #12]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	0800b58c 	.word	0x0800b58c
 800643c:	0800b620 	.word	0x0800b620
 8006440:	0800b5dc 	.word	0x0800b5dc
 8006444:	0800b63c 	.word	0x0800b63c
 8006448:	0800c8b8 	.word	0x0800c8b8
 800644c:	080067a7 	.word	0x080067a7
 8006450:	200000c8 	.word	0x200000c8
 8006454:	200066ec 	.word	0x200066ec
 8006458:	0800b660 	.word	0x0800b660
 800645c:	0800b674 	.word	0x0800b674

08006460 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 fb61 	bl	8007b34 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 ff89 	bl	800738c <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
}
 800647a:	bf00      	nop
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d106      	bne.n	80064a4 <netif_do_set_ipaddr+0x20>
 8006496:	4b1d      	ldr	r3, [pc, #116]	; (800650c <netif_do_set_ipaddr+0x88>)
 8006498:	f240 12cb 	movw	r2, #459	; 0x1cb
 800649c:	491c      	ldr	r1, [pc, #112]	; (8006510 <netif_do_set_ipaddr+0x8c>)
 800649e:	481d      	ldr	r0, [pc, #116]	; (8006514 <netif_do_set_ipaddr+0x90>)
 80064a0:	f003 ff32 	bl	800a308 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <netif_do_set_ipaddr+0x34>
 80064aa:	4b18      	ldr	r3, [pc, #96]	; (800650c <netif_do_set_ipaddr+0x88>)
 80064ac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80064b0:	4917      	ldr	r1, [pc, #92]	; (8006510 <netif_do_set_ipaddr+0x8c>)
 80064b2:	4818      	ldr	r0, [pc, #96]	; (8006514 <netif_do_set_ipaddr+0x90>)
 80064b4:	f003 ff28 	bl	800a308 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3304      	adds	r3, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d01c      	beq.n	8006500 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3304      	adds	r3, #4
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80064d6:	f107 0314 	add.w	r3, r7, #20
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f7ff ffbf 	bl	8006460 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <netif_do_set_ipaddr+0x6a>
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	e000      	b.n	80064f0 <netif_do_set_ipaddr+0x6c>
 80064ee:	2300      	movs	r3, #0
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80064f4:	2101      	movs	r1, #1
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f000 f8d2 	bl	80066a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80064fc:	2301      	movs	r3, #1
 80064fe:	e000      	b.n	8006502 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	0800b58c 	.word	0x0800b58c
 8006510:	0800b6a4 	.word	0x0800b6a4
 8006514:	0800b5dc 	.word	0x0800b5dc

08006518 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	3308      	adds	r3, #8
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d00a      	beq.n	8006548 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <netif_do_set_netmask+0x26>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	e000      	b.n	8006540 <netif_do_set_netmask+0x28>
 800653e:	2300      	movs	r3, #0
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	60f8      	str	r0, [r7, #12]
 800655e:	60b9      	str	r1, [r7, #8]
 8006560:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	330c      	adds	r3, #12
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	429a      	cmp	r2, r3
 800656e:	d00a      	beq.n	8006586 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <netif_do_set_gw+0x26>
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	e000      	b.n	800657e <netif_do_set_gw+0x28>
 800657c:	2300      	movs	r3, #0
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80065b0:	4b1c      	ldr	r3, [pc, #112]	; (8006624 <netif_set_addr+0x90>)
 80065b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80065ba:	4b1a      	ldr	r3, [pc, #104]	; (8006624 <netif_set_addr+0x90>)
 80065bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80065c4:	4b17      	ldr	r3, [pc, #92]	; (8006624 <netif_set_addr+0x90>)
 80065c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <netif_set_addr+0x42>
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <netif_set_addr+0x46>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <netif_set_addr+0x48>
 80065da:	2300      	movs	r3, #0
 80065dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d006      	beq.n	80065f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80065e4:	f107 0310 	add.w	r3, r7, #16
 80065e8:	461a      	mov	r2, r3
 80065ea:	68b9      	ldr	r1, [r7, #8]
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7ff ff49 	bl	8006484 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80065f2:	69fa      	ldr	r2, [r7, #28]
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7ff ff8e 	bl	8006518 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f7ff ffa8 	bl	8006556 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d106      	bne.n	800661a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800660c:	f107 0310 	add.w	r3, r7, #16
 8006610:	461a      	mov	r2, r3
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f7ff ff35 	bl	8006484 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800661a:	bf00      	nop
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	0800c8b8 	.word	0x0800c8b8

08006628 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006630:	4a04      	ldr	r2, [pc, #16]	; (8006644 <netif_set_default+0x1c>)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	200066f0 	.word	0x200066f0

08006648 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d107      	bne.n	8006666 <netif_set_up+0x1e>
 8006656:	4b0f      	ldr	r3, [pc, #60]	; (8006694 <netif_set_up+0x4c>)
 8006658:	f44f 7254 	mov.w	r2, #848	; 0x350
 800665c:	490e      	ldr	r1, [pc, #56]	; (8006698 <netif_set_up+0x50>)
 800665e:	480f      	ldr	r0, [pc, #60]	; (800669c <netif_set_up+0x54>)
 8006660:	f003 fe52 	bl	800a308 <iprintf>
 8006664:	e013      	b.n	800668e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10c      	bne.n	800668e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800667a:	f043 0301 	orr.w	r3, r3, #1
 800667e:	b2da      	uxtb	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006686:	2103      	movs	r1, #3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f809 	bl	80066a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	0800b58c 	.word	0x0800b58c
 8006698:	0800b714 	.word	0x0800b714
 800669c:	0800b5dc 	.word	0x0800b5dc

080066a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	460b      	mov	r3, r1
 80066aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <netif_issue_reports+0x20>
 80066b2:	4b18      	ldr	r3, [pc, #96]	; (8006714 <netif_issue_reports+0x74>)
 80066b4:	f240 326d 	movw	r2, #877	; 0x36d
 80066b8:	4917      	ldr	r1, [pc, #92]	; (8006718 <netif_issue_reports+0x78>)
 80066ba:	4818      	ldr	r0, [pc, #96]	; (800671c <netif_issue_reports+0x7c>)
 80066bc:	f003 fe24 	bl	800a308 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01e      	beq.n	800670c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d017      	beq.n	800670c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80066dc:	78fb      	ldrb	r3, [r7, #3]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d013      	beq.n	800670e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3304      	adds	r3, #4
 80066ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00e      	beq.n	800670e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066f6:	f003 0308 	and.w	r3, r3, #8
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d007      	beq.n	800670e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	3304      	adds	r3, #4
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f002 f97f 	bl	8008a08 <etharp_request>
 800670a:	e000      	b.n	800670e <netif_issue_reports+0x6e>
    return;
 800670c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	0800b58c 	.word	0x0800b58c
 8006718:	0800b730 	.word	0x0800b730
 800671c:	0800b5dc 	.word	0x0800b5dc

08006720 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d107      	bne.n	800673e <netif_set_down+0x1e>
 800672e:	4b12      	ldr	r3, [pc, #72]	; (8006778 <netif_set_down+0x58>)
 8006730:	f240 329b 	movw	r2, #923	; 0x39b
 8006734:	4911      	ldr	r1, [pc, #68]	; (800677c <netif_set_down+0x5c>)
 8006736:	4812      	ldr	r0, [pc, #72]	; (8006780 <netif_set_down+0x60>)
 8006738:	f003 fde6 	bl	800a308 <iprintf>
 800673c:	e019      	b.n	8006772 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d012      	beq.n	8006772 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006752:	f023 0301 	bic.w	r3, r3, #1
 8006756:	b2da      	uxtb	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006764:	f003 0308 	and.w	r3, r3, #8
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f001 fd09 	bl	8008184 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	0800b58c 	.word	0x0800b58c
 800677c:	0800b754 	.word	0x0800b754
 8006780:	0800b5dc 	.word	0x0800b5dc

08006784 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d002      	beq.n	800679a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	61da      	str	r2, [r3, #28]
  }
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80067b2:	f06f 030b 	mvn.w	r3, #11
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b085      	sub	sp, #20
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	60f8      	str	r0, [r7, #12]
 80067ca:	60b9      	str	r1, [r7, #8]
 80067cc:	4611      	mov	r1, r2
 80067ce:	461a      	mov	r2, r3
 80067d0:	460b      	mov	r3, r1
 80067d2:	80fb      	strh	r3, [r7, #6]
 80067d4:	4613      	mov	r3, r2
 80067d6:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	88fa      	ldrh	r2, [r7, #6]
 80067e8:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	88ba      	ldrh	r2, [r7, #4]
 80067ee:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80067f0:	8b3b      	ldrh	r3, [r7, #24]
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	7f3a      	ldrb	r2, [r7, #28]
 80067fc:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	73da      	strb	r2, [r3, #15]
}
 800680a:	bf00      	nop
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
	...

08006818 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08c      	sub	sp, #48	; 0x30
 800681c:	af02      	add	r7, sp, #8
 800681e:	4603      	mov	r3, r0
 8006820:	71fb      	strb	r3, [r7, #7]
 8006822:	460b      	mov	r3, r1
 8006824:	80bb      	strh	r3, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800682e:	887b      	ldrh	r3, [r7, #2]
 8006830:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006834:	d07d      	beq.n	8006932 <pbuf_alloc+0x11a>
 8006836:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800683a:	f300 80c6 	bgt.w	80069ca <pbuf_alloc+0x1b2>
 800683e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006842:	d010      	beq.n	8006866 <pbuf_alloc+0x4e>
 8006844:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006848:	f300 80bf 	bgt.w	80069ca <pbuf_alloc+0x1b2>
 800684c:	2b01      	cmp	r3, #1
 800684e:	d002      	beq.n	8006856 <pbuf_alloc+0x3e>
 8006850:	2b41      	cmp	r3, #65	; 0x41
 8006852:	f040 80ba 	bne.w	80069ca <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006856:	887a      	ldrh	r2, [r7, #2]
 8006858:	88bb      	ldrh	r3, [r7, #4]
 800685a:	4619      	mov	r1, r3
 800685c:	2000      	movs	r0, #0
 800685e:	f000 f8cf 	bl	8006a00 <pbuf_alloc_reference>
 8006862:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006864:	e0bb      	b.n	80069de <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800686e:	88bb      	ldrh	r3, [r7, #4]
 8006870:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006872:	2006      	movs	r0, #6
 8006874:	f7ff fca8 	bl	80061c8 <memp_malloc>
 8006878:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d107      	bne.n	8006890 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <pbuf_alloc+0x74>
            pbuf_free(p);
 8006886:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006888:	f000 faa8 	bl	8006ddc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800688c:	2300      	movs	r3, #0
 800688e:	e0a7      	b.n	80069e0 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006890:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006892:	3303      	adds	r3, #3
 8006894:	b29b      	uxth	r3, r3
 8006896:	f023 0303 	bic.w	r3, r3, #3
 800689a:	b29b      	uxth	r3, r3
 800689c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	8b7a      	ldrh	r2, [r7, #26]
 80068a4:	4293      	cmp	r3, r2
 80068a6:	bf28      	it	cs
 80068a8:	4613      	movcs	r3, r2
 80068aa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80068ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068ae:	3310      	adds	r3, #16
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4413      	add	r3, r2
 80068b4:	3303      	adds	r3, #3
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	4618      	mov	r0, r3
 80068bc:	89f9      	ldrh	r1, [r7, #14]
 80068be:	8b7a      	ldrh	r2, [r7, #26]
 80068c0:	2300      	movs	r3, #0
 80068c2:	9301      	str	r3, [sp, #4]
 80068c4:	887b      	ldrh	r3, [r7, #2]
 80068c6:	9300      	str	r3, [sp, #0]
 80068c8:	460b      	mov	r3, r1
 80068ca:	4601      	mov	r1, r0
 80068cc:	6938      	ldr	r0, [r7, #16]
 80068ce:	f7ff ff78 	bl	80067c2 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f003 0303 	and.w	r3, r3, #3
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d006      	beq.n	80068ec <pbuf_alloc+0xd4>
 80068de:	4b42      	ldr	r3, [pc, #264]	; (80069e8 <pbuf_alloc+0x1d0>)
 80068e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068e4:	4941      	ldr	r1, [pc, #260]	; (80069ec <pbuf_alloc+0x1d4>)
 80068e6:	4842      	ldr	r0, [pc, #264]	; (80069f0 <pbuf_alloc+0x1d8>)
 80068e8:	f003 fd0e 	bl	800a308 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80068ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068ee:	3303      	adds	r3, #3
 80068f0:	f023 0303 	bic.w	r3, r3, #3
 80068f4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80068f8:	d106      	bne.n	8006908 <pbuf_alloc+0xf0>
 80068fa:	4b3b      	ldr	r3, [pc, #236]	; (80069e8 <pbuf_alloc+0x1d0>)
 80068fc:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006900:	493c      	ldr	r1, [pc, #240]	; (80069f4 <pbuf_alloc+0x1dc>)
 8006902:	483b      	ldr	r0, [pc, #236]	; (80069f0 <pbuf_alloc+0x1d8>)
 8006904:	f003 fd00 	bl	800a308 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	2b00      	cmp	r3, #0
 800690c:	d102      	bne.n	8006914 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	627b      	str	r3, [r7, #36]	; 0x24
 8006912:	e002      	b.n	800691a <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800691e:	8b7a      	ldrh	r2, [r7, #26]
 8006920:	89fb      	ldrh	r3, [r7, #14]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800692a:	8b7b      	ldrh	r3, [r7, #26]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1a0      	bne.n	8006872 <pbuf_alloc+0x5a>
      break;
 8006930:	e055      	b.n	80069de <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006932:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006934:	3303      	adds	r3, #3
 8006936:	b29b      	uxth	r3, r3
 8006938:	f023 0303 	bic.w	r3, r3, #3
 800693c:	b29a      	uxth	r2, r3
 800693e:	88bb      	ldrh	r3, [r7, #4]
 8006940:	3303      	adds	r3, #3
 8006942:	b29b      	uxth	r3, r3
 8006944:	f023 0303 	bic.w	r3, r3, #3
 8006948:	b29b      	uxth	r3, r3
 800694a:	4413      	add	r3, r2
 800694c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800694e:	8b3b      	ldrh	r3, [r7, #24]
 8006950:	3310      	adds	r3, #16
 8006952:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006954:	8b3a      	ldrh	r2, [r7, #24]
 8006956:	88bb      	ldrh	r3, [r7, #4]
 8006958:	3303      	adds	r3, #3
 800695a:	f023 0303 	bic.w	r3, r3, #3
 800695e:	429a      	cmp	r2, r3
 8006960:	d306      	bcc.n	8006970 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006962:	8afa      	ldrh	r2, [r7, #22]
 8006964:	88bb      	ldrh	r3, [r7, #4]
 8006966:	3303      	adds	r3, #3
 8006968:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800696c:	429a      	cmp	r2, r3
 800696e:	d201      	bcs.n	8006974 <pbuf_alloc+0x15c>
        return NULL;
 8006970:	2300      	movs	r3, #0
 8006972:	e035      	b.n	80069e0 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006974:	8afb      	ldrh	r3, [r7, #22]
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff fab8 	bl	8005eec <mem_malloc>
 800697c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <pbuf_alloc+0x170>
        return NULL;
 8006984:	2300      	movs	r3, #0
 8006986:	e02b      	b.n	80069e0 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006988:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800698a:	3310      	adds	r3, #16
 800698c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800698e:	4413      	add	r3, r2
 8006990:	3303      	adds	r3, #3
 8006992:	f023 0303 	bic.w	r3, r3, #3
 8006996:	4618      	mov	r0, r3
 8006998:	88b9      	ldrh	r1, [r7, #4]
 800699a:	88ba      	ldrh	r2, [r7, #4]
 800699c:	2300      	movs	r3, #0
 800699e:	9301      	str	r3, [sp, #4]
 80069a0:	887b      	ldrh	r3, [r7, #2]
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	460b      	mov	r3, r1
 80069a6:	4601      	mov	r1, r0
 80069a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069aa:	f7ff ff0a 	bl	80067c2 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d010      	beq.n	80069dc <pbuf_alloc+0x1c4>
 80069ba:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <pbuf_alloc+0x1d0>)
 80069bc:	f44f 7291 	mov.w	r2, #290	; 0x122
 80069c0:	490d      	ldr	r1, [pc, #52]	; (80069f8 <pbuf_alloc+0x1e0>)
 80069c2:	480b      	ldr	r0, [pc, #44]	; (80069f0 <pbuf_alloc+0x1d8>)
 80069c4:	f003 fca0 	bl	800a308 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80069c8:	e008      	b.n	80069dc <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80069ca:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <pbuf_alloc+0x1d0>)
 80069cc:	f240 1227 	movw	r2, #295	; 0x127
 80069d0:	490a      	ldr	r1, [pc, #40]	; (80069fc <pbuf_alloc+0x1e4>)
 80069d2:	4807      	ldr	r0, [pc, #28]	; (80069f0 <pbuf_alloc+0x1d8>)
 80069d4:	f003 fc98 	bl	800a308 <iprintf>
      return NULL;
 80069d8:	2300      	movs	r3, #0
 80069da:	e001      	b.n	80069e0 <pbuf_alloc+0x1c8>
      break;
 80069dc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3728      	adds	r7, #40	; 0x28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	0800b7bc 	.word	0x0800b7bc
 80069ec:	0800b7ec 	.word	0x0800b7ec
 80069f0:	0800b81c 	.word	0x0800b81c
 80069f4:	0800b844 	.word	0x0800b844
 80069f8:	0800b878 	.word	0x0800b878
 80069fc:	0800b8a4 	.word	0x0800b8a4

08006a00 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af02      	add	r7, sp, #8
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	807b      	strh	r3, [r7, #2]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006a10:	883b      	ldrh	r3, [r7, #0]
 8006a12:	2b41      	cmp	r3, #65	; 0x41
 8006a14:	d009      	beq.n	8006a2a <pbuf_alloc_reference+0x2a>
 8006a16:	883b      	ldrh	r3, [r7, #0]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d006      	beq.n	8006a2a <pbuf_alloc_reference+0x2a>
 8006a1c:	4b0f      	ldr	r3, [pc, #60]	; (8006a5c <pbuf_alloc_reference+0x5c>)
 8006a1e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006a22:	490f      	ldr	r1, [pc, #60]	; (8006a60 <pbuf_alloc_reference+0x60>)
 8006a24:	480f      	ldr	r0, [pc, #60]	; (8006a64 <pbuf_alloc_reference+0x64>)
 8006a26:	f003 fc6f 	bl	800a308 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006a2a:	2005      	movs	r0, #5
 8006a2c:	f7ff fbcc 	bl	80061c8 <memp_malloc>
 8006a30:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	e00b      	b.n	8006a54 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006a3c:	8879      	ldrh	r1, [r7, #2]
 8006a3e:	887a      	ldrh	r2, [r7, #2]
 8006a40:	2300      	movs	r3, #0
 8006a42:	9301      	str	r3, [sp, #4]
 8006a44:	883b      	ldrh	r3, [r7, #0]
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	460b      	mov	r3, r1
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7ff feb8 	bl	80067c2 <pbuf_init_alloced_pbuf>
  return p;
 8006a52:	68fb      	ldr	r3, [r7, #12]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	0800b7bc 	.word	0x0800b7bc
 8006a60:	0800b8c0 	.word	0x0800b8c0
 8006a64:	0800b81c 	.word	0x0800b81c

08006a68 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	607b      	str	r3, [r7, #4]
 8006a70:	4603      	mov	r3, r0
 8006a72:	73fb      	strb	r3, [r7, #15]
 8006a74:	460b      	mov	r3, r1
 8006a76:	81bb      	strh	r3, [r7, #12]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006a80:	8a7b      	ldrh	r3, [r7, #18]
 8006a82:	3303      	adds	r3, #3
 8006a84:	f023 0203 	bic.w	r2, r3, #3
 8006a88:	89bb      	ldrh	r3, [r7, #12]
 8006a8a:	441a      	add	r2, r3
 8006a8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d901      	bls.n	8006a96 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	e018      	b.n	8006ac8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006a9c:	8a7b      	ldrh	r3, [r7, #18]
 8006a9e:	3303      	adds	r3, #3
 8006aa0:	f023 0303 	bic.w	r3, r3, #3
 8006aa4:	6a3a      	ldr	r2, [r7, #32]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	e001      	b.n	8006ab0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006aac:	2300      	movs	r3, #0
 8006aae:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	89b9      	ldrh	r1, [r7, #12]
 8006ab4:	89ba      	ldrh	r2, [r7, #12]
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	9301      	str	r3, [sp, #4]
 8006aba:	897b      	ldrh	r3, [r7, #10]
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	6979      	ldr	r1, [r7, #20]
 8006ac2:	f7ff fe7e 	bl	80067c2 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006ac6:	687b      	ldr	r3, [r7, #4]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <pbuf_realloc+0x20>
 8006ae2:	4b3a      	ldr	r3, [pc, #232]	; (8006bcc <pbuf_realloc+0xfc>)
 8006ae4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006ae8:	4939      	ldr	r1, [pc, #228]	; (8006bd0 <pbuf_realloc+0x100>)
 8006aea:	483a      	ldr	r0, [pc, #232]	; (8006bd4 <pbuf_realloc+0x104>)
 8006aec:	f003 fc0c 	bl	800a308 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	891b      	ldrh	r3, [r3, #8]
 8006af4:	887a      	ldrh	r2, [r7, #2]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d263      	bcs.n	8006bc2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	891a      	ldrh	r2, [r3, #8]
 8006afe:	887b      	ldrh	r3, [r7, #2]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006b04:	887b      	ldrh	r3, [r7, #2]
 8006b06:	817b      	strh	r3, [r7, #10]
  q = p;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006b0c:	e018      	b.n	8006b40 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	895b      	ldrh	r3, [r3, #10]
 8006b12:	897a      	ldrh	r2, [r7, #10]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	891a      	ldrh	r2, [r3, #8]
 8006b1c:	893b      	ldrh	r3, [r7, #8]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <pbuf_realloc+0x70>
 8006b32:	4b26      	ldr	r3, [pc, #152]	; (8006bcc <pbuf_realloc+0xfc>)
 8006b34:	f240 12af 	movw	r2, #431	; 0x1af
 8006b38:	4927      	ldr	r1, [pc, #156]	; (8006bd8 <pbuf_realloc+0x108>)
 8006b3a:	4826      	ldr	r0, [pc, #152]	; (8006bd4 <pbuf_realloc+0x104>)
 8006b3c:	f003 fbe4 	bl	800a308 <iprintf>
  while (rem_len > q->len) {
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	895b      	ldrh	r3, [r3, #10]
 8006b44:	897a      	ldrh	r2, [r7, #10]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d8e1      	bhi.n	8006b0e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	7b1b      	ldrb	r3, [r3, #12]
 8006b4e:	f003 030f 	and.w	r3, r3, #15
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d121      	bne.n	8006b9a <pbuf_realloc+0xca>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	895b      	ldrh	r3, [r3, #10]
 8006b5a:	897a      	ldrh	r2, [r7, #10]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d01c      	beq.n	8006b9a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	7b5b      	ldrb	r3, [r3, #13]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d116      	bne.n	8006b9a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	897b      	ldrh	r3, [r7, #10]
 8006b78:	4413      	add	r3, r2
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f7ff f8b8 	bl	8005cf4 <mem_trim>
 8006b84:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d106      	bne.n	8006b9a <pbuf_realloc+0xca>
 8006b8c:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <pbuf_realloc+0xfc>)
 8006b8e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006b92:	4912      	ldr	r1, [pc, #72]	; (8006bdc <pbuf_realloc+0x10c>)
 8006b94:	480f      	ldr	r0, [pc, #60]	; (8006bd4 <pbuf_realloc+0x104>)
 8006b96:	f003 fbb7 	bl	800a308 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	897a      	ldrh	r2, [r7, #10]
 8006b9e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	895a      	ldrh	r2, [r3, #10]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d004      	beq.n	8006bba <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f000 f911 	bl	8006ddc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
 8006bc0:	e000      	b.n	8006bc4 <pbuf_realloc+0xf4>
    return;
 8006bc2:	bf00      	nop

}
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	0800b7bc 	.word	0x0800b7bc
 8006bd0:	0800b8d4 	.word	0x0800b8d4
 8006bd4:	0800b81c 	.word	0x0800b81c
 8006bd8:	0800b8ec 	.word	0x0800b8ec
 8006bdc:	0800b904 	.word	0x0800b904

08006be0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	4613      	mov	r3, r2
 8006bec:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d106      	bne.n	8006c02 <pbuf_add_header_impl+0x22>
 8006bf4:	4b2b      	ldr	r3, [pc, #172]	; (8006ca4 <pbuf_add_header_impl+0xc4>)
 8006bf6:	f240 12df 	movw	r2, #479	; 0x1df
 8006bfa:	492b      	ldr	r1, [pc, #172]	; (8006ca8 <pbuf_add_header_impl+0xc8>)
 8006bfc:	482b      	ldr	r0, [pc, #172]	; (8006cac <pbuf_add_header_impl+0xcc>)
 8006bfe:	f003 fb83 	bl	800a308 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <pbuf_add_header_impl+0x30>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c0e:	d301      	bcc.n	8006c14 <pbuf_add_header_impl+0x34>
    return 1;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e043      	b.n	8006c9c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <pbuf_add_header_impl+0x3e>
    return 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e03e      	b.n	8006c9c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	891a      	ldrh	r2, [r3, #8]
 8006c26:	8a7b      	ldrh	r3, [r7, #18]
 8006c28:	4413      	add	r3, r2
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	8a7a      	ldrh	r2, [r7, #18]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d901      	bls.n	8006c36 <pbuf_add_header_impl+0x56>
    return 1;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e032      	b.n	8006c9c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	7b1b      	ldrb	r3, [r3, #12]
 8006c3a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006c3c:	8a3b      	ldrh	r3, [r7, #16]
 8006c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00c      	beq.n	8006c60 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	425b      	negs	r3, r3
 8006c4e:	4413      	add	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3310      	adds	r3, #16
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d20d      	bcs.n	8006c78 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e01d      	b.n	8006c9c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d006      	beq.n	8006c74 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	425b      	negs	r3, r3
 8006c6e:	4413      	add	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	e001      	b.n	8006c78 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e011      	b.n	8006c9c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	895a      	ldrh	r2, [r3, #10]
 8006c82:	8a7b      	ldrh	r3, [r7, #18]
 8006c84:	4413      	add	r3, r2
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	891a      	ldrh	r2, [r3, #8]
 8006c90:	8a7b      	ldrh	r3, [r7, #18]
 8006c92:	4413      	add	r3, r2
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	811a      	strh	r2, [r3, #8]


  return 0;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3718      	adds	r7, #24
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	0800b7bc 	.word	0x0800b7bc
 8006ca8:	0800b920 	.word	0x0800b920
 8006cac:	0800b81c 	.word	0x0800b81c

08006cb0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006cba:	2200      	movs	r2, #0
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff ff8e 	bl	8006be0 <pbuf_add_header_impl>
 8006cc4:	4603      	mov	r3, r0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d106      	bne.n	8006cee <pbuf_remove_header+0x1e>
 8006ce0:	4b20      	ldr	r3, [pc, #128]	; (8006d64 <pbuf_remove_header+0x94>)
 8006ce2:	f240 224b 	movw	r2, #587	; 0x24b
 8006ce6:	4920      	ldr	r1, [pc, #128]	; (8006d68 <pbuf_remove_header+0x98>)
 8006ce8:	4820      	ldr	r0, [pc, #128]	; (8006d6c <pbuf_remove_header+0x9c>)
 8006cea:	f003 fb0d 	bl	800a308 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <pbuf_remove_header+0x2c>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cfa:	d301      	bcc.n	8006d00 <pbuf_remove_header+0x30>
    return 1;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e02c      	b.n	8006d5a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <pbuf_remove_header+0x3a>
    return 0;
 8006d06:	2300      	movs	r3, #0
 8006d08:	e027      	b.n	8006d5a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	895b      	ldrh	r3, [r3, #10]
 8006d12:	89fa      	ldrh	r2, [r7, #14]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d908      	bls.n	8006d2a <pbuf_remove_header+0x5a>
 8006d18:	4b12      	ldr	r3, [pc, #72]	; (8006d64 <pbuf_remove_header+0x94>)
 8006d1a:	f240 2255 	movw	r2, #597	; 0x255
 8006d1e:	4914      	ldr	r1, [pc, #80]	; (8006d70 <pbuf_remove_header+0xa0>)
 8006d20:	4812      	ldr	r0, [pc, #72]	; (8006d6c <pbuf_remove_header+0x9c>)
 8006d22:	f003 faf1 	bl	800a308 <iprintf>
 8006d26:	2301      	movs	r3, #1
 8006d28:	e017      	b.n	8006d5a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685a      	ldr	r2, [r3, #4]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	441a      	add	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	895a      	ldrh	r2, [r3, #10]
 8006d40:	89fb      	ldrh	r3, [r7, #14]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	891a      	ldrh	r2, [r3, #8]
 8006d4e:	89fb      	ldrh	r3, [r7, #14]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	0800b7bc 	.word	0x0800b7bc
 8006d68:	0800b920 	.word	0x0800b920
 8006d6c:	0800b81c 	.word	0x0800b81c
 8006d70:	0800b92c 	.word	0x0800b92c

08006d74 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	807b      	strh	r3, [r7, #2]
 8006d80:	4613      	mov	r3, r2
 8006d82:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006d84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	da08      	bge.n	8006d9e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006d8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d90:	425b      	negs	r3, r3
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff ff9b 	bl	8006cd0 <pbuf_remove_header>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	e007      	b.n	8006dae <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006d9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006da2:	787a      	ldrb	r2, [r7, #1]
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7ff ff1a 	bl	8006be0 <pbuf_add_header_impl>
 8006dac:	4603      	mov	r3, r0
  }
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006dc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7ff ffd2 	bl	8006d74 <pbuf_header_impl>
 8006dd0:	4603      	mov	r3, r0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
	...

08006ddc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d10b      	bne.n	8006e02 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d106      	bne.n	8006dfe <pbuf_free+0x22>
 8006df0:	4b38      	ldr	r3, [pc, #224]	; (8006ed4 <pbuf_free+0xf8>)
 8006df2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006df6:	4938      	ldr	r1, [pc, #224]	; (8006ed8 <pbuf_free+0xfc>)
 8006df8:	4838      	ldr	r0, [pc, #224]	; (8006edc <pbuf_free+0x100>)
 8006dfa:	f003 fa85 	bl	800a308 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	e063      	b.n	8006eca <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006e02:	2300      	movs	r3, #0
 8006e04:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006e06:	e05c      	b.n	8006ec2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	7b9b      	ldrb	r3, [r3, #14]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d106      	bne.n	8006e1e <pbuf_free+0x42>
 8006e10:	4b30      	ldr	r3, [pc, #192]	; (8006ed4 <pbuf_free+0xf8>)
 8006e12:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006e16:	4932      	ldr	r1, [pc, #200]	; (8006ee0 <pbuf_free+0x104>)
 8006e18:	4830      	ldr	r0, [pc, #192]	; (8006edc <pbuf_free+0x100>)
 8006e1a:	f003 fa75 	bl	800a308 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7b9b      	ldrb	r3, [r3, #14]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	739a      	strb	r2, [r3, #14]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	7b9b      	ldrb	r3, [r3, #14]
 8006e2e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006e30:	7dbb      	ldrb	r3, [r7, #22]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d143      	bne.n	8006ebe <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	7b1b      	ldrb	r3, [r3, #12]
 8006e40:	f003 030f 	and.w	r3, r3, #15
 8006e44:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	7b5b      	ldrb	r3, [r3, #13]
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d011      	beq.n	8006e76 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <pbuf_free+0x90>
 8006e5e:	4b1d      	ldr	r3, [pc, #116]	; (8006ed4 <pbuf_free+0xf8>)
 8006e60:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006e64:	491f      	ldr	r1, [pc, #124]	; (8006ee4 <pbuf_free+0x108>)
 8006e66:	481d      	ldr	r0, [pc, #116]	; (8006edc <pbuf_free+0x100>)
 8006e68:	f003 fa4e 	bl	800a308 <iprintf>
        pc->custom_free_function(p);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	4798      	blx	r3
 8006e74:	e01d      	b.n	8006eb2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d104      	bne.n	8006e86 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006e7c:	6879      	ldr	r1, [r7, #4]
 8006e7e:	2006      	movs	r0, #6
 8006e80:	f7ff f9ee 	bl	8006260 <memp_free>
 8006e84:	e015      	b.n	8006eb2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d104      	bne.n	8006e96 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006e8c:	6879      	ldr	r1, [r7, #4]
 8006e8e:	2005      	movs	r0, #5
 8006e90:	f7ff f9e6 	bl	8006260 <memp_free>
 8006e94:	e00d      	b.n	8006eb2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d103      	bne.n	8006ea4 <pbuf_free+0xc8>
          mem_free(p);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7fe febf 	bl	8005c20 <mem_free>
 8006ea2:	e006      	b.n	8006eb2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	; (8006ed4 <pbuf_free+0xf8>)
 8006ea6:	f240 320f 	movw	r2, #783	; 0x30f
 8006eaa:	490f      	ldr	r1, [pc, #60]	; (8006ee8 <pbuf_free+0x10c>)
 8006eac:	480b      	ldr	r0, [pc, #44]	; (8006edc <pbuf_free+0x100>)
 8006eae:	f003 fa2b 	bl	800a308 <iprintf>
        }
      }
      count++;
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	607b      	str	r3, [r7, #4]
 8006ebc:	e001      	b.n	8006ec2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d19f      	bne.n	8006e08 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	0800b7bc 	.word	0x0800b7bc
 8006ed8:	0800b920 	.word	0x0800b920
 8006edc:	0800b81c 	.word	0x0800b81c
 8006ee0:	0800b94c 	.word	0x0800b94c
 8006ee4:	0800b964 	.word	0x0800b964
 8006ee8:	0800b988 	.word	0x0800b988

08006eec <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006ef8:	e005      	b.n	8006f06 <pbuf_clen+0x1a>
    ++len;
 8006efa:	89fb      	ldrh	r3, [r7, #14]
 8006efc:	3301      	adds	r3, #1
 8006efe:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1f6      	bne.n	8006efa <pbuf_clen+0xe>
  }
  return len;
 8006f0c:	89fb      	ldrh	r3, [r7, #14]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
	...

08006f1c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d010      	beq.n	8006f4c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	7b9b      	ldrb	r3, [r3, #14]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	7b9b      	ldrb	r3, [r3, #14]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <pbuf_ref+0x30>
 8006f3e:	4b05      	ldr	r3, [pc, #20]	; (8006f54 <pbuf_ref+0x38>)
 8006f40:	f240 3242 	movw	r2, #834	; 0x342
 8006f44:	4904      	ldr	r1, [pc, #16]	; (8006f58 <pbuf_ref+0x3c>)
 8006f46:	4805      	ldr	r0, [pc, #20]	; (8006f5c <pbuf_ref+0x40>)
 8006f48:	f003 f9de 	bl	800a308 <iprintf>
  }
}
 8006f4c:	bf00      	nop
 8006f4e:	3708      	adds	r7, #8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	0800b7bc 	.word	0x0800b7bc
 8006f58:	0800b99c 	.word	0x0800b99c
 8006f5c:	0800b81c 	.word	0x0800b81c

08006f60 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <pbuf_cat+0x16>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d107      	bne.n	8006f86 <pbuf_cat+0x26>
 8006f76:	4b20      	ldr	r3, [pc, #128]	; (8006ff8 <pbuf_cat+0x98>)
 8006f78:	f240 3259 	movw	r2, #857	; 0x359
 8006f7c:	491f      	ldr	r1, [pc, #124]	; (8006ffc <pbuf_cat+0x9c>)
 8006f7e:	4820      	ldr	r0, [pc, #128]	; (8007000 <pbuf_cat+0xa0>)
 8006f80:	f003 f9c2 	bl	800a308 <iprintf>
 8006f84:	e034      	b.n	8006ff0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	e00a      	b.n	8006fa2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	891a      	ldrh	r2, [r3, #8]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	891b      	ldrh	r3, [r3, #8]
 8006f94:	4413      	add	r3, r2
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f0      	bne.n	8006f8c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	891a      	ldrh	r2, [r3, #8]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	895b      	ldrh	r3, [r3, #10]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d006      	beq.n	8006fc4 <pbuf_cat+0x64>
 8006fb6:	4b10      	ldr	r3, [pc, #64]	; (8006ff8 <pbuf_cat+0x98>)
 8006fb8:	f240 3262 	movw	r2, #866	; 0x362
 8006fbc:	4911      	ldr	r1, [pc, #68]	; (8007004 <pbuf_cat+0xa4>)
 8006fbe:	4810      	ldr	r0, [pc, #64]	; (8007000 <pbuf_cat+0xa0>)
 8006fc0:	f003 f9a2 	bl	800a308 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d006      	beq.n	8006fda <pbuf_cat+0x7a>
 8006fcc:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <pbuf_cat+0x98>)
 8006fce:	f240 3263 	movw	r2, #867	; 0x363
 8006fd2:	490d      	ldr	r1, [pc, #52]	; (8007008 <pbuf_cat+0xa8>)
 8006fd4:	480a      	ldr	r0, [pc, #40]	; (8007000 <pbuf_cat+0xa0>)
 8006fd6:	f003 f997 	bl	800a308 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	891a      	ldrh	r2, [r3, #8]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	891b      	ldrh	r3, [r3, #8]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	0800b7bc 	.word	0x0800b7bc
 8006ffc:	0800b9b0 	.word	0x0800b9b0
 8007000:	0800b81c 	.word	0x0800b81c
 8007004:	0800b9e8 	.word	0x0800b9e8
 8007008:	0800ba18 	.word	0x0800ba18

0800700c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007016:	2300      	movs	r3, #0
 8007018:	617b      	str	r3, [r7, #20]
 800701a:	2300      	movs	r3, #0
 800701c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d008      	beq.n	8007036 <pbuf_copy+0x2a>
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d005      	beq.n	8007036 <pbuf_copy+0x2a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	891a      	ldrh	r2, [r3, #8]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	891b      	ldrh	r3, [r3, #8]
 8007032:	429a      	cmp	r2, r3
 8007034:	d209      	bcs.n	800704a <pbuf_copy+0x3e>
 8007036:	4b57      	ldr	r3, [pc, #348]	; (8007194 <pbuf_copy+0x188>)
 8007038:	f240 32c9 	movw	r2, #969	; 0x3c9
 800703c:	4956      	ldr	r1, [pc, #344]	; (8007198 <pbuf_copy+0x18c>)
 800703e:	4857      	ldr	r0, [pc, #348]	; (800719c <pbuf_copy+0x190>)
 8007040:	f003 f962 	bl	800a308 <iprintf>
 8007044:	f06f 030f 	mvn.w	r3, #15
 8007048:	e09f      	b.n	800718a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	895b      	ldrh	r3, [r3, #10]
 800704e:	461a      	mov	r2, r3
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	1ad2      	subs	r2, r2, r3
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	895b      	ldrh	r3, [r3, #10]
 8007058:	4619      	mov	r1, r3
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1acb      	subs	r3, r1, r3
 800705e:	429a      	cmp	r2, r3
 8007060:	d306      	bcc.n	8007070 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	895b      	ldrh	r3, [r3, #10]
 8007066:	461a      	mov	r2, r3
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	60fb      	str	r3, [r7, #12]
 800706e:	e005      	b.n	800707c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	895b      	ldrh	r3, [r3, #10]
 8007074:	461a      	mov	r2, r3
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	18d0      	adds	r0, r2, r3
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	4413      	add	r3, r2
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4619      	mov	r1, r3
 8007090:	f003 f87a 	bl	800a188 <memcpy>
    offset_to += len;
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4413      	add	r3, r2
 800709a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4413      	add	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	895b      	ldrh	r3, [r3, #10]
 80070a8:	461a      	mov	r2, r3
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d906      	bls.n	80070be <pbuf_copy+0xb2>
 80070b0:	4b38      	ldr	r3, [pc, #224]	; (8007194 <pbuf_copy+0x188>)
 80070b2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80070b6:	493a      	ldr	r1, [pc, #232]	; (80071a0 <pbuf_copy+0x194>)
 80070b8:	4838      	ldr	r0, [pc, #224]	; (800719c <pbuf_copy+0x190>)
 80070ba:	f003 f925 	bl	800a308 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	895b      	ldrh	r3, [r3, #10]
 80070c2:	461a      	mov	r2, r3
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d906      	bls.n	80070d8 <pbuf_copy+0xcc>
 80070ca:	4b32      	ldr	r3, [pc, #200]	; (8007194 <pbuf_copy+0x188>)
 80070cc:	f240 32da 	movw	r2, #986	; 0x3da
 80070d0:	4934      	ldr	r1, [pc, #208]	; (80071a4 <pbuf_copy+0x198>)
 80070d2:	4832      	ldr	r0, [pc, #200]	; (800719c <pbuf_copy+0x190>)
 80070d4:	f003 f918 	bl	800a308 <iprintf>
    if (offset_from >= p_from->len) {
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	895b      	ldrh	r3, [r3, #10]
 80070dc:	461a      	mov	r2, r3
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d304      	bcc.n	80070ee <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80070e4:	2300      	movs	r3, #0
 80070e6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	895b      	ldrh	r3, [r3, #10]
 80070f2:	461a      	mov	r2, r3
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d114      	bne.n	8007124 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10c      	bne.n	8007124 <pbuf_copy+0x118>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d009      	beq.n	8007124 <pbuf_copy+0x118>
 8007110:	4b20      	ldr	r3, [pc, #128]	; (8007194 <pbuf_copy+0x188>)
 8007112:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8007116:	4924      	ldr	r1, [pc, #144]	; (80071a8 <pbuf_copy+0x19c>)
 8007118:	4820      	ldr	r0, [pc, #128]	; (800719c <pbuf_copy+0x190>)
 800711a:	f003 f8f5 	bl	800a308 <iprintf>
 800711e:	f06f 030f 	mvn.w	r3, #15
 8007122:	e032      	b.n	800718a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d013      	beq.n	8007152 <pbuf_copy+0x146>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	895a      	ldrh	r2, [r3, #10]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	891b      	ldrh	r3, [r3, #8]
 8007132:	429a      	cmp	r2, r3
 8007134:	d10d      	bne.n	8007152 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d009      	beq.n	8007152 <pbuf_copy+0x146>
 800713e:	4b15      	ldr	r3, [pc, #84]	; (8007194 <pbuf_copy+0x188>)
 8007140:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8007144:	4919      	ldr	r1, [pc, #100]	; (80071ac <pbuf_copy+0x1a0>)
 8007146:	4815      	ldr	r0, [pc, #84]	; (800719c <pbuf_copy+0x190>)
 8007148:	f003 f8de 	bl	800a308 <iprintf>
 800714c:	f06f 0305 	mvn.w	r3, #5
 8007150:	e01b      	b.n	800718a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d013      	beq.n	8007180 <pbuf_copy+0x174>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	895a      	ldrh	r2, [r3, #10]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	891b      	ldrh	r3, [r3, #8]
 8007160:	429a      	cmp	r2, r3
 8007162:	d10d      	bne.n	8007180 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d009      	beq.n	8007180 <pbuf_copy+0x174>
 800716c:	4b09      	ldr	r3, [pc, #36]	; (8007194 <pbuf_copy+0x188>)
 800716e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007172:	490e      	ldr	r1, [pc, #56]	; (80071ac <pbuf_copy+0x1a0>)
 8007174:	4809      	ldr	r0, [pc, #36]	; (800719c <pbuf_copy+0x190>)
 8007176:	f003 f8c7 	bl	800a308 <iprintf>
 800717a:	f06f 0305 	mvn.w	r3, #5
 800717e:	e004      	b.n	800718a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	f47f af61 	bne.w	800704a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	0800b7bc 	.word	0x0800b7bc
 8007198:	0800ba64 	.word	0x0800ba64
 800719c:	0800b81c 	.word	0x0800b81c
 80071a0:	0800ba94 	.word	0x0800ba94
 80071a4:	0800baac 	.word	0x0800baac
 80071a8:	0800bac8 	.word	0x0800bac8
 80071ac:	0800bad8 	.word	0x0800bad8

080071b0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	603a      	str	r2, [r7, #0]
 80071ba:	71fb      	strb	r3, [r7, #7]
 80071bc:	460b      	mov	r3, r1
 80071be:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	8919      	ldrh	r1, [r3, #8]
 80071c4:	88ba      	ldrh	r2, [r7, #4]
 80071c6:	79fb      	ldrb	r3, [r7, #7]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7ff fb25 	bl	8006818 <pbuf_alloc>
 80071ce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <pbuf_clone+0x2a>
    return NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e011      	b.n	80071fe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f7ff ff15 	bl	800700c <pbuf_copy>
 80071e2:	4603      	mov	r3, r0
 80071e4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80071e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d006      	beq.n	80071fc <pbuf_clone+0x4c>
 80071ee:	4b06      	ldr	r3, [pc, #24]	; (8007208 <pbuf_clone+0x58>)
 80071f0:	f240 5224 	movw	r2, #1316	; 0x524
 80071f4:	4905      	ldr	r1, [pc, #20]	; (800720c <pbuf_clone+0x5c>)
 80071f6:	4806      	ldr	r0, [pc, #24]	; (8007210 <pbuf_clone+0x60>)
 80071f8:	f003 f886 	bl	800a308 <iprintf>
  return q;
 80071fc:	68fb      	ldr	r3, [r7, #12]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	0800b7bc 	.word	0x0800b7bc
 800720c:	0800bc30 	.word	0x0800bc30
 8007210:	0800b81c 	.word	0x0800b81c

08007214 <raw_input_local_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_local_match(struct raw_pcb *pcb, u8_t broadcast)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	7a1b      	ldrb	r3, [r3, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00b      	beq.n	8007240 <raw_input_local_match+0x2c>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	7a1a      	ldrb	r2, [r3, #8]
 800722c:	4b15      	ldr	r3, [pc, #84]	; (8007284 <raw_input_local_match+0x70>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007234:	3301      	adds	r3, #1
 8007236:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007238:	429a      	cmp	r2, r3
 800723a:	d001      	beq.n	8007240 <raw_input_local_match+0x2c>
    return 0;
 800723c:	2300      	movs	r3, #0
 800723e:	e01b      	b.n	8007278 <raw_input_local_match+0x64>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d008      	beq.n	8007258 <raw_input_local_match+0x44>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <raw_input_local_match+0x40>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d110      	bne.n	8007276 <raw_input_local_match+0x62>
          return 1;
 8007254:	2301      	movs	r3, #1
 8007256:	e00f      	b.n	8007278 <raw_input_local_match+0x64>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: catch all or exact match */
      if (ip_addr_isany(&pcb->local_ip) ||
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d009      	beq.n	8007272 <raw_input_local_match+0x5e>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d005      	beq.n	8007272 <raw_input_local_match+0x5e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4b06      	ldr	r3, [pc, #24]	; (8007284 <raw_input_local_match+0x70>)
 800726c:	695b      	ldr	r3, [r3, #20]
      if (ip_addr_isany(&pcb->local_ip) ||
 800726e:	429a      	cmp	r2, r3
 8007270:	d101      	bne.n	8007276 <raw_input_local_match+0x62>
        return 1;
 8007272:	2301      	movs	r3, #1
 8007274:	e000      	b.n	8007278 <raw_input_local_match+0x64>
      }
  }

  return 0;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	2000368c 	.word	0x2000368c

08007288 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8007288:	b590      	push	{r4, r7, lr}
 800728a:	b089      	sub	sp, #36	; 0x24
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
 8007292:	2300      	movs	r3, #0
 8007294:	75fb      	strb	r3, [r7, #23]
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8007296:	4b37      	ldr	r3, [pc, #220]	; (8007374 <raw_input+0xec>)
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	4a36      	ldr	r2, [pc, #216]	; (8007374 <raw_input+0xec>)
 800729c:	6812      	ldr	r2, [r2, #0]
 800729e:	4611      	mov	r1, r2
 80072a0:	4618      	mov	r0, r3
 80072a2:	f001 ffe7 	bl	8009274 <ip4_addr_isbroadcast_u32>
 80072a6:	4603      	mov	r3, r0
 80072a8:	75bb      	strb	r3, [r7, #22]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	7a5b      	ldrb	r3, [r3, #9]
 80072b0:	82bb      	strh	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
  pcb = raw_pcbs;
 80072b6:	4b30      	ldr	r3, [pc, #192]	; (8007378 <raw_input+0xf0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	61fb      	str	r3, [r7, #28]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 80072bc:	e052      	b.n	8007364 <raw_input+0xdc>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	7c1b      	ldrb	r3, [r3, #16]
 80072c2:	461a      	mov	r2, r3
 80072c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d146      	bne.n	800735a <raw_input+0xd2>
 80072cc:	7dbb      	ldrb	r3, [r7, #22]
 80072ce:	4619      	mov	r1, r3
 80072d0:	69f8      	ldr	r0, [r7, #28]
 80072d2:	f7ff ff9f 	bl	8007214 <raw_input_local_match>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d03e      	beq.n	800735a <raw_input+0xd2>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	7c5b      	ldrb	r3, [r3, #17]
 80072e0:	f003 0301 	and.w	r3, r3, #1
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <raw_input+0x6c>
         ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	4b21      	ldr	r3, [pc, #132]	; (8007374 <raw_input+0xec>)
 80072ee:	691b      	ldr	r3, [r3, #16]
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d132      	bne.n	800735a <raw_input+0xd2>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d02e      	beq.n	800735a <raw_input+0xd2>
        u8_t eaten;
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	613b      	str	r3, [r7, #16]
#endif
        ret = RAW_INPUT_DELIVERED;
 8007302:	2302      	movs	r3, #2
 8007304:	75fb      	strb	r3, [r7, #23]
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	695c      	ldr	r4, [r3, #20]
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	6998      	ldr	r0, [r3, #24]
 800730e:	4b1b      	ldr	r3, [pc, #108]	; (800737c <raw_input+0xf4>)
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	69f9      	ldr	r1, [r7, #28]
 8007314:	47a0      	blx	r4
 8007316:	4603      	mov	r3, r0
 8007318:	73fb      	strb	r3, [r7, #15]
        if (eaten != 0) {
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d011      	beq.n	8007344 <raw_input+0xbc>
          /* receive function ate the packet */
          p = NULL;
 8007320:	2300      	movs	r3, #0
 8007322:	607b      	str	r3, [r7, #4]
          if (prev != NULL) {
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <raw_input+0xb8>
            /* move the pcb to the front of raw_pcbs so that is
               found faster next time */
            prev->next = pcb->next;
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	60da      	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
 8007332:	4b11      	ldr	r3, [pc, #68]	; (8007378 <raw_input+0xf0>)
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	60da      	str	r2, [r3, #12]
            raw_pcbs = pcb;
 800733a:	4a0f      	ldr	r2, [pc, #60]	; (8007378 <raw_input+0xf0>)
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	6013      	str	r3, [r2, #0]
          }
          return RAW_INPUT_EATEN;
 8007340:	2301      	movs	r3, #1
 8007342:	e013      	b.n	800736c <raw_input+0xe4>
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	429a      	cmp	r2, r3
 800734c:	d005      	beq.n	800735a <raw_input+0xd2>
 800734e:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <raw_input+0xf8>)
 8007350:	22c0      	movs	r2, #192	; 0xc0
 8007352:	490c      	ldr	r1, [pc, #48]	; (8007384 <raw_input+0xfc>)
 8007354:	480c      	ldr	r0, [pc, #48]	; (8007388 <raw_input+0x100>)
 8007356:	f002 ffd7 	bl	800a308 <iprintf>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	61bb      	str	r3, [r7, #24]
    pcb = pcb->next;
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	61fb      	str	r3, [r7, #28]
  while (pcb != NULL) {
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1a9      	bne.n	80072be <raw_input+0x36>
  }
  return ret;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3724      	adds	r7, #36	; 0x24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd90      	pop	{r4, r7, pc}
 8007374:	2000368c 	.word	0x2000368c
 8007378:	200000cc 	.word	0x200000cc
 800737c:	2000369c 	.word	0x2000369c
 8007380:	0800bc44 	.word	0x0800bc44
 8007384:	0800bc74 	.word	0x0800bc74
 8007388:	0800bcc0 	.word	0x0800bcc0

0800738c <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01e      	beq.n	80073da <raw_netif_ip_addr_changed+0x4e>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d01a      	beq.n	80073da <raw_netif_ip_addr_changed+0x4e>
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d017      	beq.n	80073da <raw_netif_ip_addr_changed+0x4e>
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d013      	beq.n	80073da <raw_netif_ip_addr_changed+0x4e>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80073b2:	4b0d      	ldr	r3, [pc, #52]	; (80073e8 <raw_netif_ip_addr_changed+0x5c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	e00c      	b.n	80073d4 <raw_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d103      	bne.n	80073ce <raw_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1ef      	bne.n	80073ba <raw_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80073da:	bf00      	nop
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	200000cc 	.word	0x200000cc

080073ec <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80073f8:	2004      	movs	r0, #4
 80073fa:	f7fe fee5 	bl	80061c8 <memp_malloc>
 80073fe:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d109      	bne.n	800741a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d151      	bne.n	80074b0 <sys_timeout_abs+0xc4>
 800740c:	4b2a      	ldr	r3, [pc, #168]	; (80074b8 <sys_timeout_abs+0xcc>)
 800740e:	22be      	movs	r2, #190	; 0xbe
 8007410:	492a      	ldr	r1, [pc, #168]	; (80074bc <sys_timeout_abs+0xd0>)
 8007412:	482b      	ldr	r0, [pc, #172]	; (80074c0 <sys_timeout_abs+0xd4>)
 8007414:	f002 ff78 	bl	800a308 <iprintf>
    return;
 8007418:	e04a      	b.n	80074b0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8007432:	4b24      	ldr	r3, [pc, #144]	; (80074c4 <sys_timeout_abs+0xd8>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d103      	bne.n	8007442 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800743a:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <sys_timeout_abs+0xd8>)
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6013      	str	r3, [r2, #0]
    return;
 8007440:	e037      	b.n	80074b2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	4b1f      	ldr	r3, [pc, #124]	; (80074c4 <sys_timeout_abs+0xd8>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	0fdb      	lsrs	r3, r3, #31
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d007      	beq.n	800746a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800745a:	4b1a      	ldr	r3, [pc, #104]	; (80074c4 <sys_timeout_abs+0xd8>)
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8007462:	4a18      	ldr	r2, [pc, #96]	; (80074c4 <sys_timeout_abs+0xd8>)
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	e023      	b.n	80074b2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800746a:	4b16      	ldr	r3, [pc, #88]	; (80074c4 <sys_timeout_abs+0xd8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	617b      	str	r3, [r7, #20]
 8007470:	e01a      	b.n	80074a8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00b      	beq.n	8007492 <sys_timeout_abs+0xa6>
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	0fdb      	lsrs	r3, r3, #31
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d007      	beq.n	80074a2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	601a      	str	r2, [r3, #0]
        break;
 80074a0:	e007      	b.n	80074b2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1e1      	bne.n	8007472 <sys_timeout_abs+0x86>
 80074ae:	e000      	b.n	80074b2 <sys_timeout_abs+0xc6>
    return;
 80074b0:	bf00      	nop
      }
    }
  }
}
 80074b2:	3718      	adds	r7, #24
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	0800bd10 	.word	0x0800bd10
 80074bc:	0800bd44 	.word	0x0800bd44
 80074c0:	0800bd84 	.word	0x0800bd84
 80074c4:	200000d0 	.word	0x200000d0

080074c8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	4798      	blx	r3

  now = sys_now();
 80074da:	f7fe f9ad 	bl	8005838 <sys_now>
 80074de:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <lwip_cyclic_timer+0x5c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4413      	add	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	0fdb      	lsrs	r3, r3, #31
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d009      	beq.n	8007512 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	4413      	add	r3, r2
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	4907      	ldr	r1, [pc, #28]	; (8007528 <lwip_cyclic_timer+0x60>)
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff ff6e 	bl	80073ec <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8007510:	e004      	b.n	800751c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	4904      	ldr	r1, [pc, #16]	; (8007528 <lwip_cyclic_timer+0x60>)
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff ff68 	bl	80073ec <sys_timeout_abs>
}
 800751c:	bf00      	nop
 800751e:	3718      	adds	r7, #24
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	200000d4 	.word	0x200000d4
 8007528:	080074c9 	.word	0x080074c9

0800752c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8007532:	2300      	movs	r3, #0
 8007534:	607b      	str	r3, [r7, #4]
 8007536:	e00e      	b.n	8007556 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8007538:	4a0b      	ldr	r2, [pc, #44]	; (8007568 <sys_timeouts_init+0x3c>)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	4a08      	ldr	r2, [pc, #32]	; (8007568 <sys_timeouts_init+0x3c>)
 8007546:	4413      	add	r3, r2
 8007548:	461a      	mov	r2, r3
 800754a:	4908      	ldr	r1, [pc, #32]	; (800756c <sys_timeouts_init+0x40>)
 800754c:	f000 f810 	bl	8007570 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3301      	adds	r3, #1
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d9ed      	bls.n	8007538 <sys_timeouts_init+0xc>
  }
}
 800755c:	bf00      	nop
 800755e:	bf00      	nop
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	0800c8a8 	.word	0x0800c8a8
 800756c:	080074c9 	.word	0x080074c9

08007570 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b086      	sub	sp, #24
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007582:	d306      	bcc.n	8007592 <sys_timeout+0x22>
 8007584:	4b0a      	ldr	r3, [pc, #40]	; (80075b0 <sys_timeout+0x40>)
 8007586:	f240 1229 	movw	r2, #297	; 0x129
 800758a:	490a      	ldr	r1, [pc, #40]	; (80075b4 <sys_timeout+0x44>)
 800758c:	480a      	ldr	r0, [pc, #40]	; (80075b8 <sys_timeout+0x48>)
 800758e:	f002 febb 	bl	800a308 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8007592:	f7fe f951 	bl	8005838 <sys_now>
 8007596:	4602      	mov	r2, r0
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4413      	add	r3, r2
 800759c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	68b9      	ldr	r1, [r7, #8]
 80075a2:	6978      	ldr	r0, [r7, #20]
 80075a4:	f7ff ff22 	bl	80073ec <sys_timeout_abs>
#endif
}
 80075a8:	bf00      	nop
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	0800bd10 	.word	0x0800bd10
 80075b4:	0800bdac 	.word	0x0800bdac
 80075b8:	0800bd84 	.word	0x0800bd84

080075bc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80075c2:	f7fe f939 	bl	8005838 <sys_now>
 80075c6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80075c8:	4b17      	ldr	r3, [pc, #92]	; (8007628 <sys_check_timeouts+0x6c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d022      	beq.n	800761a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	0fdb      	lsrs	r3, r3, #31
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d11a      	bne.n	800761e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a0e      	ldr	r2, [pc, #56]	; (8007628 <sys_check_timeouts+0x6c>)
 80075ee:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	4a0a      	ldr	r2, [pc, #40]	; (800762c <sys_check_timeouts+0x70>)
 8007602:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	2004      	movs	r0, #4
 8007608:	f7fe fe2a 	bl	8006260 <memp_free>
    if (handler != NULL) {
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0da      	beq.n	80075c8 <sys_check_timeouts+0xc>
      handler(arg);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6838      	ldr	r0, [r7, #0]
 8007616:	4798      	blx	r3
  do {
 8007618:	e7d6      	b.n	80075c8 <sys_check_timeouts+0xc>
      return;
 800761a:	bf00      	nop
 800761c:	e000      	b.n	8007620 <sys_check_timeouts+0x64>
      return;
 800761e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	200000d0 	.word	0x200000d0
 800762c:	200000d4 	.word	0x200000d4

08007630 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007634:	f002 fe80 	bl	800a338 <rand>
 8007638:	4603      	mov	r3, r0
 800763a:	b29b      	uxth	r3, r3
 800763c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007640:	b29b      	uxth	r3, r3
 8007642:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007646:	b29a      	uxth	r2, r3
 8007648:	4b01      	ldr	r3, [pc, #4]	; (8007650 <udp_init+0x20>)
 800764a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800764c:	bf00      	nop
 800764e:	bd80      	pop	{r7, pc}
 8007650:	2000000e 	.word	0x2000000e

08007654 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800765a:	2300      	movs	r3, #0
 800765c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800765e:	4b17      	ldr	r3, [pc, #92]	; (80076bc <udp_new_port+0x68>)
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	b291      	uxth	r1, r2
 8007666:	4a15      	ldr	r2, [pc, #84]	; (80076bc <udp_new_port+0x68>)
 8007668:	8011      	strh	r1, [r2, #0]
 800766a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800766e:	4293      	cmp	r3, r2
 8007670:	d103      	bne.n	800767a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8007672:	4b12      	ldr	r3, [pc, #72]	; (80076bc <udp_new_port+0x68>)
 8007674:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007678:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800767a:	4b11      	ldr	r3, [pc, #68]	; (80076c0 <udp_new_port+0x6c>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	e011      	b.n	80076a6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	8a5a      	ldrh	r2, [r3, #18]
 8007686:	4b0d      	ldr	r3, [pc, #52]	; (80076bc <udp_new_port+0x68>)
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d108      	bne.n	80076a0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	3301      	adds	r3, #1
 8007692:	80fb      	strh	r3, [r7, #6]
 8007694:	88fb      	ldrh	r3, [r7, #6]
 8007696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800769a:	d3e0      	bcc.n	800765e <udp_new_port+0xa>
        return 0;
 800769c:	2300      	movs	r3, #0
 800769e:	e007      	b.n	80076b0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	603b      	str	r3, [r7, #0]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1ea      	bne.n	8007682 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80076ac:	4b03      	ldr	r3, [pc, #12]	; (80076bc <udp_new_port+0x68>)
 80076ae:	881b      	ldrh	r3, [r3, #0]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	2000000e 	.word	0x2000000e
 80076c0:	200066f4 	.word	0x200066f4

080076c4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	4613      	mov	r3, r2
 80076d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d105      	bne.n	80076e4 <udp_input_local_match+0x20>
 80076d8:	4b27      	ldr	r3, [pc, #156]	; (8007778 <udp_input_local_match+0xb4>)
 80076da:	2287      	movs	r2, #135	; 0x87
 80076dc:	4927      	ldr	r1, [pc, #156]	; (800777c <udp_input_local_match+0xb8>)
 80076de:	4828      	ldr	r0, [pc, #160]	; (8007780 <udp_input_local_match+0xbc>)
 80076e0:	f002 fe12 	bl	800a308 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d105      	bne.n	80076f6 <udp_input_local_match+0x32>
 80076ea:	4b23      	ldr	r3, [pc, #140]	; (8007778 <udp_input_local_match+0xb4>)
 80076ec:	2288      	movs	r2, #136	; 0x88
 80076ee:	4925      	ldr	r1, [pc, #148]	; (8007784 <udp_input_local_match+0xc0>)
 80076f0:	4823      	ldr	r0, [pc, #140]	; (8007780 <udp_input_local_match+0xbc>)
 80076f2:	f002 fe09 	bl	800a308 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	7a1b      	ldrb	r3, [r3, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00b      	beq.n	8007716 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	7a1a      	ldrb	r2, [r3, #8]
 8007702:	4b21      	ldr	r3, [pc, #132]	; (8007788 <udp_input_local_match+0xc4>)
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800770a:	3301      	adds	r3, #1
 800770c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800770e:	429a      	cmp	r2, r3
 8007710:	d001      	beq.n	8007716 <udp_input_local_match+0x52>
    return 0;
 8007712:	2300      	movs	r3, #0
 8007714:	e02b      	b.n	800776e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8007716:	79fb      	ldrb	r3, [r7, #7]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d018      	beq.n	800774e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d013      	beq.n	800774a <udp_input_local_match+0x86>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00f      	beq.n	800774a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800772a:	4b17      	ldr	r3, [pc, #92]	; (8007788 <udp_input_local_match+0xc4>)
 800772c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800772e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007732:	d00a      	beq.n	800774a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	4b13      	ldr	r3, [pc, #76]	; (8007788 <udp_input_local_match+0xc4>)
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	405a      	eors	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	3308      	adds	r3, #8
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8007746:	2b00      	cmp	r3, #0
 8007748:	d110      	bne.n	800776c <udp_input_local_match+0xa8>
          return 1;
 800774a:	2301      	movs	r3, #1
 800774c:	e00f      	b.n	800776e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d009      	beq.n	8007768 <udp_input_local_match+0xa4>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d005      	beq.n	8007768 <udp_input_local_match+0xa4>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	4b09      	ldr	r3, [pc, #36]	; (8007788 <udp_input_local_match+0xc4>)
 8007762:	695b      	ldr	r3, [r3, #20]
 8007764:	429a      	cmp	r2, r3
 8007766:	d101      	bne.n	800776c <udp_input_local_match+0xa8>
        return 1;
 8007768:	2301      	movs	r3, #1
 800776a:	e000      	b.n	800776e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	0800bdf8 	.word	0x0800bdf8
 800777c:	0800be28 	.word	0x0800be28
 8007780:	0800be4c 	.word	0x0800be4c
 8007784:	0800be74 	.word	0x0800be74
 8007788:	2000368c 	.word	0x2000368c

0800778c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800778c:	b590      	push	{r4, r7, lr}
 800778e:	b08d      	sub	sp, #52	; 0x34
 8007790:	af02      	add	r7, sp, #8
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8007796:	2300      	movs	r3, #0
 8007798:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d105      	bne.n	80077ac <udp_input+0x20>
 80077a0:	4b7c      	ldr	r3, [pc, #496]	; (8007994 <udp_input+0x208>)
 80077a2:	22cf      	movs	r2, #207	; 0xcf
 80077a4:	497c      	ldr	r1, [pc, #496]	; (8007998 <udp_input+0x20c>)
 80077a6:	487d      	ldr	r0, [pc, #500]	; (800799c <udp_input+0x210>)
 80077a8:	f002 fdae 	bl	800a308 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d105      	bne.n	80077be <udp_input+0x32>
 80077b2:	4b78      	ldr	r3, [pc, #480]	; (8007994 <udp_input+0x208>)
 80077b4:	22d0      	movs	r2, #208	; 0xd0
 80077b6:	497a      	ldr	r1, [pc, #488]	; (80079a0 <udp_input+0x214>)
 80077b8:	4878      	ldr	r0, [pc, #480]	; (800799c <udp_input+0x210>)
 80077ba:	f002 fda5 	bl	800a308 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	895b      	ldrh	r3, [r3, #10]
 80077c2:	2b07      	cmp	r3, #7
 80077c4:	d803      	bhi.n	80077ce <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff fb08 	bl	8006ddc <pbuf_free>
    goto end;
 80077cc:	e0de      	b.n	800798c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80077d4:	4b73      	ldr	r3, [pc, #460]	; (80079a4 <udp_input+0x218>)
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	4a72      	ldr	r2, [pc, #456]	; (80079a4 <udp_input+0x218>)
 80077da:	6812      	ldr	r2, [r2, #0]
 80077dc:	4611      	mov	r1, r2
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 fd48 	bl	8009274 <ip4_addr_isbroadcast_u32>
 80077e4:	4603      	mov	r3, r0
 80077e6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe f8b0 	bl	8005954 <lwip_htons>
 80077f4:	4603      	mov	r3, r0
 80077f6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	885b      	ldrh	r3, [r3, #2]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	4618      	mov	r0, r3
 8007800:	f7fe f8a8 	bl	8005954 <lwip_htons>
 8007804:	4603      	mov	r3, r0
 8007806:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8007808:	2300      	movs	r3, #0
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800780c:	2300      	movs	r3, #0
 800780e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8007814:	4b64      	ldr	r3, [pc, #400]	; (80079a8 <udp_input+0x21c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	627b      	str	r3, [r7, #36]	; 0x24
 800781a:	e054      	b.n	80078c6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	8a5b      	ldrh	r3, [r3, #18]
 8007820:	89fa      	ldrh	r2, [r7, #14]
 8007822:	429a      	cmp	r2, r3
 8007824:	d14a      	bne.n	80078bc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8007826:	7cfb      	ldrb	r3, [r7, #19]
 8007828:	461a      	mov	r2, r3
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800782e:	f7ff ff49 	bl	80076c4 <udp_input_local_match>
 8007832:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8007834:	2b00      	cmp	r3, #0
 8007836:	d041      	beq.n	80078bc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	7c1b      	ldrb	r3, [r3, #16]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	d11d      	bne.n	8007880 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d102      	bne.n	8007850 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	61fb      	str	r3, [r7, #28]
 800784e:	e017      	b.n	8007880 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8007850:	7cfb      	ldrb	r3, [r7, #19]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d014      	beq.n	8007880 <udp_input+0xf4>
 8007856:	4b53      	ldr	r3, [pc, #332]	; (80079a4 <udp_input+0x218>)
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785e:	d10f      	bne.n	8007880 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	3304      	adds	r3, #4
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	429a      	cmp	r2, r3
 800786c:	d008      	beq.n	8007880 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	3304      	adds	r3, #4
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	429a      	cmp	r2, r3
 800787a:	d101      	bne.n	8007880 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	8a9b      	ldrh	r3, [r3, #20]
 8007884:	8a3a      	ldrh	r2, [r7, #16]
 8007886:	429a      	cmp	r2, r3
 8007888:	d118      	bne.n	80078bc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	4b43      	ldr	r3, [pc, #268]	; (80079a4 <udp_input+0x218>)
 8007898:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800789a:	429a      	cmp	r2, r3
 800789c:	d10e      	bne.n	80078bc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d014      	beq.n	80078ce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	68da      	ldr	r2, [r3, #12]
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80078ac:	4b3e      	ldr	r3, [pc, #248]	; (80079a8 <udp_input+0x21c>)
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80078b4:	4a3c      	ldr	r2, [pc, #240]	; (80079a8 <udp_input+0x21c>)
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80078ba:	e008      	b.n	80078ce <udp_input+0x142>
      }
    }

    prev = pcb;
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	627b      	str	r3, [r7, #36]	; 0x24
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1a7      	bne.n	800781c <udp_input+0x90>
 80078cc:	e000      	b.n	80078d0 <udp_input+0x144>
        break;
 80078ce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <udp_input+0x14e>
    pcb = uncon_pcb;
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <udp_input+0x15a>
    for_us = 1;
 80078e0:	2301      	movs	r3, #1
 80078e2:	76fb      	strb	r3, [r7, #27]
 80078e4:	e00a      	b.n	80078fc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	3304      	adds	r3, #4
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	4b2d      	ldr	r3, [pc, #180]	; (80079a4 <udp_input+0x218>)
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	bf0c      	ite	eq
 80078f4:	2301      	moveq	r3, #1
 80078f6:	2300      	movne	r3, #0
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80078fc:	7efb      	ldrb	r3, [r7, #27]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d041      	beq.n	8007986 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8007902:	2108      	movs	r1, #8
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7ff f9e3 	bl	8006cd0 <pbuf_remove_header>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00a      	beq.n	8007926 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8007910:	4b20      	ldr	r3, [pc, #128]	; (8007994 <udp_input+0x208>)
 8007912:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8007916:	4925      	ldr	r1, [pc, #148]	; (80079ac <udp_input+0x220>)
 8007918:	4820      	ldr	r0, [pc, #128]	; (800799c <udp_input+0x210>)
 800791a:	f002 fcf5 	bl	800a308 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7ff fa5c 	bl	8006ddc <pbuf_free>
      goto end;
 8007924:	e032      	b.n	800798c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	2b00      	cmp	r3, #0
 800792a:	d012      	beq.n	8007952 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00a      	beq.n	800794a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	699c      	ldr	r4, [r3, #24]
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	69d8      	ldr	r0, [r3, #28]
 800793c:	8a3b      	ldrh	r3, [r7, #16]
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	4b1b      	ldr	r3, [pc, #108]	; (80079b0 <udp_input+0x224>)
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007946:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8007948:	e021      	b.n	800798e <udp_input+0x202>
        pbuf_free(p);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7ff fa46 	bl	8006ddc <pbuf_free>
        goto end;
 8007950:	e01c      	b.n	800798c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8007952:	7cfb      	ldrb	r3, [r7, #19]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d112      	bne.n	800797e <udp_input+0x1f2>
 8007958:	4b12      	ldr	r3, [pc, #72]	; (80079a4 <udp_input+0x218>)
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007960:	2be0      	cmp	r3, #224	; 0xe0
 8007962:	d00c      	beq.n	800797e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8007964:	4b0f      	ldr	r3, [pc, #60]	; (80079a4 <udp_input+0x218>)
 8007966:	899b      	ldrh	r3, [r3, #12]
 8007968:	3308      	adds	r3, #8
 800796a:	b29b      	uxth	r3, r3
 800796c:	b21b      	sxth	r3, r3
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff fa20 	bl	8006db6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8007976:	2103      	movs	r1, #3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 f959 	bl	8008c30 <icmp_dest_unreach>
      pbuf_free(p);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7ff fa2c 	bl	8006ddc <pbuf_free>
  return;
 8007984:	e003      	b.n	800798e <udp_input+0x202>
    pbuf_free(p);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7ff fa28 	bl	8006ddc <pbuf_free>
  return;
 800798c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800798e:	372c      	adds	r7, #44	; 0x2c
 8007990:	46bd      	mov	sp, r7
 8007992:	bd90      	pop	{r4, r7, pc}
 8007994:	0800bdf8 	.word	0x0800bdf8
 8007998:	0800be9c 	.word	0x0800be9c
 800799c:	0800be4c 	.word	0x0800be4c
 80079a0:	0800beb4 	.word	0x0800beb4
 80079a4:	2000368c 	.word	0x2000368c
 80079a8:	200066f4 	.word	0x200066f4
 80079ac:	0800bed0 	.word	0x0800bed0
 80079b0:	2000369c 	.word	0x2000369c

080079b4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	4613      	mov	r3, r2
 80079c0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d101      	bne.n	80079cc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80079c8:	4b39      	ldr	r3, [pc, #228]	; (8007ab0 <udp_bind+0xfc>)
 80079ca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d109      	bne.n	80079e6 <udp_bind+0x32>
 80079d2:	4b38      	ldr	r3, [pc, #224]	; (8007ab4 <udp_bind+0x100>)
 80079d4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80079d8:	4937      	ldr	r1, [pc, #220]	; (8007ab8 <udp_bind+0x104>)
 80079da:	4838      	ldr	r0, [pc, #224]	; (8007abc <udp_bind+0x108>)
 80079dc:	f002 fc94 	bl	800a308 <iprintf>
 80079e0:	f06f 030f 	mvn.w	r3, #15
 80079e4:	e060      	b.n	8007aa8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80079ea:	4b35      	ldr	r3, [pc, #212]	; (8007ac0 <udp_bind+0x10c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	617b      	str	r3, [r7, #20]
 80079f0:	e009      	b.n	8007a06 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80079f2:	68fa      	ldr	r2, [r7, #12]
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d102      	bne.n	8007a00 <udp_bind+0x4c>
      rebind = 1;
 80079fa:	2301      	movs	r3, #1
 80079fc:	74fb      	strb	r3, [r7, #19]
      break;
 80079fe:	e005      	b.n	8007a0c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	617b      	str	r3, [r7, #20]
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1f2      	bne.n	80079f2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8007a0c:	88fb      	ldrh	r3, [r7, #6]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d109      	bne.n	8007a26 <udp_bind+0x72>
    port = udp_new_port();
 8007a12:	f7ff fe1f 	bl	8007654 <udp_new_port>
 8007a16:	4603      	mov	r3, r0
 8007a18:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007a1a:	88fb      	ldrh	r3, [r7, #6]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d12c      	bne.n	8007a7a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8007a20:	f06f 0307 	mvn.w	r3, #7
 8007a24:	e040      	b.n	8007aa8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007a26:	4b26      	ldr	r3, [pc, #152]	; (8007ac0 <udp_bind+0x10c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	e022      	b.n	8007a74 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d01b      	beq.n	8007a6e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	8a5b      	ldrh	r3, [r3, #18]
 8007a3a:	88fa      	ldrh	r2, [r7, #6]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d116      	bne.n	8007a6e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d00d      	beq.n	8007a68 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <udp_bind+0xb4>
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d006      	beq.n	8007a68 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8007a5a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d102      	bne.n	8007a6e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8007a68:	f06f 0307 	mvn.w	r3, #7
 8007a6c:	e01c      	b.n	8007aa8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1d9      	bne.n	8007a2e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <udp_bind+0xd2>
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	e000      	b.n	8007a88 <udp_bind+0xd4>
 8007a86:	2300      	movs	r3, #0
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	88fa      	ldrh	r2, [r7, #6]
 8007a90:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8007a92:	7cfb      	ldrb	r3, [r7, #19]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d106      	bne.n	8007aa6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8007a98:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <udp_bind+0x10c>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8007aa0:	4a07      	ldr	r2, [pc, #28]	; (8007ac0 <udp_bind+0x10c>)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	0800c8b8 	.word	0x0800c8b8
 8007ab4:	0800bdf8 	.word	0x0800bdf8
 8007ab8:	0800c0c0 	.word	0x0800c0c0
 8007abc:	0800be4c 	.word	0x0800be4c
 8007ac0:	200066f4 	.word	0x200066f4

08007ac4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d107      	bne.n	8007ae6 <udp_recv+0x22>
 8007ad6:	4b08      	ldr	r3, [pc, #32]	; (8007af8 <udp_recv+0x34>)
 8007ad8:	f240 428a 	movw	r2, #1162	; 0x48a
 8007adc:	4907      	ldr	r1, [pc, #28]	; (8007afc <udp_recv+0x38>)
 8007ade:	4808      	ldr	r0, [pc, #32]	; (8007b00 <udp_recv+0x3c>)
 8007ae0:	f002 fc12 	bl	800a308 <iprintf>
 8007ae4:	e005      	b.n	8007af2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	61da      	str	r2, [r3, #28]
}
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	0800bdf8 	.word	0x0800bdf8
 8007afc:	0800c12c 	.word	0x0800c12c
 8007b00:	0800be4c 	.word	0x0800be4c

08007b04 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	f7fe fb5c 	bl	80061c8 <memp_malloc>
 8007b10:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d007      	beq.n	8007b28 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8007b18:	2220      	movs	r2, #32
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f002 fb41 	bl	800a1a4 <memset>
    pcb->ttl = UDP_TTL;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	22ff      	movs	r2, #255	; 0xff
 8007b26:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8007b28:	687b      	ldr	r3, [r7, #4]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d01e      	beq.n	8007b82 <udp_netif_ip_addr_changed+0x4e>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d01a      	beq.n	8007b82 <udp_netif_ip_addr_changed+0x4e>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d017      	beq.n	8007b82 <udp_netif_ip_addr_changed+0x4e>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d013      	beq.n	8007b82 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	; (8007b90 <udp_netif_ip_addr_changed+0x5c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	e00c      	b.n	8007b7c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d103      	bne.n	8007b76 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1ef      	bne.n	8007b62 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8007b82:	bf00      	nop
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	200066f4 	.word	0x200066f4

08007b94 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8007b9c:	4915      	ldr	r1, [pc, #84]	; (8007bf4 <etharp_free_entry+0x60>)
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	4413      	add	r3, r2
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	440b      	add	r3, r1
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d013      	beq.n	8007bd8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8007bb0:	4910      	ldr	r1, [pc, #64]	; (8007bf4 <etharp_free_entry+0x60>)
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	005b      	lsls	r3, r3, #1
 8007bb8:	4413      	add	r3, r2
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	440b      	add	r3, r1
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff f90b 	bl	8006ddc <pbuf_free>
    arp_table[i].q = NULL;
 8007bc6:	490b      	ldr	r1, [pc, #44]	; (8007bf4 <etharp_free_entry+0x60>)
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	4413      	add	r3, r2
 8007bd0:	00db      	lsls	r3, r3, #3
 8007bd2:	440b      	add	r3, r1
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8007bd8:	4906      	ldr	r1, [pc, #24]	; (8007bf4 <etharp_free_entry+0x60>)
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	4413      	add	r3, r2
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	440b      	add	r3, r1
 8007be6:	3314      	adds	r3, #20
 8007be8:	2200      	movs	r2, #0
 8007bea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8007bec:	bf00      	nop
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	200000d8 	.word	0x200000d8

08007bf8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007bfe:	2300      	movs	r3, #0
 8007c00:	607b      	str	r3, [r7, #4]
 8007c02:	e096      	b.n	8007d32 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8007c04:	494f      	ldr	r1, [pc, #316]	; (8007d44 <etharp_tmr+0x14c>)
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	4413      	add	r3, r2
 8007c0e:	00db      	lsls	r3, r3, #3
 8007c10:	440b      	add	r3, r1
 8007c12:	3314      	adds	r3, #20
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8007c18:	78fb      	ldrb	r3, [r7, #3]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 8086 	beq.w	8007d2c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8007c20:	4948      	ldr	r1, [pc, #288]	; (8007d44 <etharp_tmr+0x14c>)
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	4613      	mov	r3, r2
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	4413      	add	r3, r2
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	440b      	add	r3, r1
 8007c2e:	3312      	adds	r3, #18
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	3301      	adds	r3, #1
 8007c34:	b298      	uxth	r0, r3
 8007c36:	4943      	ldr	r1, [pc, #268]	; (8007d44 <etharp_tmr+0x14c>)
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	4413      	add	r3, r2
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	440b      	add	r3, r1
 8007c44:	3312      	adds	r3, #18
 8007c46:	4602      	mov	r2, r0
 8007c48:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007c4a:	493e      	ldr	r1, [pc, #248]	; (8007d44 <etharp_tmr+0x14c>)
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	4413      	add	r3, r2
 8007c54:	00db      	lsls	r3, r3, #3
 8007c56:	440b      	add	r3, r1
 8007c58:	3312      	adds	r3, #18
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007c60:	d215      	bcs.n	8007c8e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8007c62:	4938      	ldr	r1, [pc, #224]	; (8007d44 <etharp_tmr+0x14c>)
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	4613      	mov	r3, r2
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	4413      	add	r3, r2
 8007c6c:	00db      	lsls	r3, r3, #3
 8007c6e:	440b      	add	r3, r1
 8007c70:	3314      	adds	r3, #20
 8007c72:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d10e      	bne.n	8007c96 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8007c78:	4932      	ldr	r1, [pc, #200]	; (8007d44 <etharp_tmr+0x14c>)
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	4413      	add	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	440b      	add	r3, r1
 8007c86:	3312      	adds	r3, #18
 8007c88:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8007c8a:	2b04      	cmp	r3, #4
 8007c8c:	d903      	bls.n	8007c96 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff ff80 	bl	8007b94 <etharp_free_entry>
 8007c94:	e04a      	b.n	8007d2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8007c96:	492b      	ldr	r1, [pc, #172]	; (8007d44 <etharp_tmr+0x14c>)
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	005b      	lsls	r3, r3, #1
 8007c9e:	4413      	add	r3, r2
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	440b      	add	r3, r1
 8007ca4:	3314      	adds	r3, #20
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d10a      	bne.n	8007cc2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8007cac:	4925      	ldr	r1, [pc, #148]	; (8007d44 <etharp_tmr+0x14c>)
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	4413      	add	r3, r2
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	440b      	add	r3, r1
 8007cba:	3314      	adds	r3, #20
 8007cbc:	2204      	movs	r2, #4
 8007cbe:	701a      	strb	r2, [r3, #0]
 8007cc0:	e034      	b.n	8007d2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8007cc2:	4920      	ldr	r1, [pc, #128]	; (8007d44 <etharp_tmr+0x14c>)
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	4413      	add	r3, r2
 8007ccc:	00db      	lsls	r3, r3, #3
 8007cce:	440b      	add	r3, r1
 8007cd0:	3314      	adds	r3, #20
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b04      	cmp	r3, #4
 8007cd6:	d10a      	bne.n	8007cee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8007cd8:	491a      	ldr	r1, [pc, #104]	; (8007d44 <etharp_tmr+0x14c>)
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	005b      	lsls	r3, r3, #1
 8007ce0:	4413      	add	r3, r2
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	440b      	add	r3, r1
 8007ce6:	3314      	adds	r3, #20
 8007ce8:	2202      	movs	r2, #2
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	e01e      	b.n	8007d2c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8007cee:	4915      	ldr	r1, [pc, #84]	; (8007d44 <etharp_tmr+0x14c>)
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	005b      	lsls	r3, r3, #1
 8007cf6:	4413      	add	r3, r2
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	440b      	add	r3, r1
 8007cfc:	3314      	adds	r3, #20
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d113      	bne.n	8007d2c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8007d04:	490f      	ldr	r1, [pc, #60]	; (8007d44 <etharp_tmr+0x14c>)
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	4413      	add	r3, r2
 8007d0e:	00db      	lsls	r3, r3, #3
 8007d10:	440b      	add	r3, r1
 8007d12:	3308      	adds	r3, #8
 8007d14:	6818      	ldr	r0, [r3, #0]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	4413      	add	r3, r2
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	4a08      	ldr	r2, [pc, #32]	; (8007d44 <etharp_tmr+0x14c>)
 8007d22:	4413      	add	r3, r2
 8007d24:	3304      	adds	r3, #4
 8007d26:	4619      	mov	r1, r3
 8007d28:	f000 fe6e 	bl	8008a08 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	607b      	str	r3, [r7, #4]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b09      	cmp	r3, #9
 8007d36:	f77f af65 	ble.w	8007c04 <etharp_tmr+0xc>
      }
    }
  }
}
 8007d3a:	bf00      	nop
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	200000d8 	.word	0x200000d8

08007d48 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08a      	sub	sp, #40	; 0x28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	460b      	mov	r3, r1
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8007d56:	230a      	movs	r3, #10
 8007d58:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007d5a:	230a      	movs	r3, #10
 8007d5c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8007d5e:	230a      	movs	r3, #10
 8007d60:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8007d66:	230a      	movs	r3, #10
 8007d68:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	83bb      	strh	r3, [r7, #28]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	837b      	strh	r3, [r7, #26]
 8007d72:	2300      	movs	r3, #0
 8007d74:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007d76:	2300      	movs	r3, #0
 8007d78:	843b      	strh	r3, [r7, #32]
 8007d7a:	e0ae      	b.n	8007eda <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8007d7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007d80:	49a6      	ldr	r1, [pc, #664]	; (800801c <etharp_find_entry+0x2d4>)
 8007d82:	4613      	mov	r3, r2
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	4413      	add	r3, r2
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	440b      	add	r3, r1
 8007d8c:	3314      	adds	r3, #20
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8007d92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007d96:	2b0a      	cmp	r3, #10
 8007d98:	d105      	bne.n	8007da6 <etharp_find_entry+0x5e>
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d102      	bne.n	8007da6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8007da0:	8c3b      	ldrh	r3, [r7, #32]
 8007da2:	847b      	strh	r3, [r7, #34]	; 0x22
 8007da4:	e095      	b.n	8007ed2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 8092 	beq.w	8007ed2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d009      	beq.n	8007dc8 <etharp_find_entry+0x80>
 8007db4:	7dfb      	ldrb	r3, [r7, #23]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d806      	bhi.n	8007dc8 <etharp_find_entry+0x80>
 8007dba:	4b99      	ldr	r3, [pc, #612]	; (8008020 <etharp_find_entry+0x2d8>)
 8007dbc:	f240 1223 	movw	r2, #291	; 0x123
 8007dc0:	4998      	ldr	r1, [pc, #608]	; (8008024 <etharp_find_entry+0x2dc>)
 8007dc2:	4899      	ldr	r0, [pc, #612]	; (8008028 <etharp_find_entry+0x2e0>)
 8007dc4:	f002 faa0 	bl	800a308 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d020      	beq.n	8007e10 <etharp_find_entry+0xc8>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6819      	ldr	r1, [r3, #0]
 8007dd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007dd6:	4891      	ldr	r0, [pc, #580]	; (800801c <etharp_find_entry+0x2d4>)
 8007dd8:	4613      	mov	r3, r2
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	4413      	add	r3, r2
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	4403      	add	r3, r0
 8007de2:	3304      	adds	r3, #4
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4299      	cmp	r1, r3
 8007de8:	d112      	bne.n	8007e10 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00c      	beq.n	8007e0a <etharp_find_entry+0xc2>
 8007df0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007df4:	4989      	ldr	r1, [pc, #548]	; (800801c <etharp_find_entry+0x2d4>)
 8007df6:	4613      	mov	r3, r2
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	4413      	add	r3, r2
 8007dfc:	00db      	lsls	r3, r3, #3
 8007dfe:	440b      	add	r3, r1
 8007e00:	3308      	adds	r3, #8
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	429a      	cmp	r2, r3
 8007e08:	d102      	bne.n	8007e10 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8007e0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007e0e:	e100      	b.n	8008012 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8007e10:	7dfb      	ldrb	r3, [r7, #23]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d140      	bne.n	8007e98 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8007e16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007e1a:	4980      	ldr	r1, [pc, #512]	; (800801c <etharp_find_entry+0x2d4>)
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	4413      	add	r3, r2
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	440b      	add	r3, r1
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01a      	beq.n	8007e62 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8007e2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007e30:	497a      	ldr	r1, [pc, #488]	; (800801c <etharp_find_entry+0x2d4>)
 8007e32:	4613      	mov	r3, r2
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	4413      	add	r3, r2
 8007e38:	00db      	lsls	r3, r3, #3
 8007e3a:	440b      	add	r3, r1
 8007e3c:	3312      	adds	r3, #18
 8007e3e:	881b      	ldrh	r3, [r3, #0]
 8007e40:	8bba      	ldrh	r2, [r7, #28]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d845      	bhi.n	8007ed2 <etharp_find_entry+0x18a>
            old_queue = i;
 8007e46:	8c3b      	ldrh	r3, [r7, #32]
 8007e48:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8007e4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007e4e:	4973      	ldr	r1, [pc, #460]	; (800801c <etharp_find_entry+0x2d4>)
 8007e50:	4613      	mov	r3, r2
 8007e52:	005b      	lsls	r3, r3, #1
 8007e54:	4413      	add	r3, r2
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	440b      	add	r3, r1
 8007e5a:	3312      	adds	r3, #18
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	83bb      	strh	r3, [r7, #28]
 8007e60:	e037      	b.n	8007ed2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8007e62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007e66:	496d      	ldr	r1, [pc, #436]	; (800801c <etharp_find_entry+0x2d4>)
 8007e68:	4613      	mov	r3, r2
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	4413      	add	r3, r2
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	440b      	add	r3, r1
 8007e72:	3312      	adds	r3, #18
 8007e74:	881b      	ldrh	r3, [r3, #0]
 8007e76:	8b7a      	ldrh	r2, [r7, #26]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d82a      	bhi.n	8007ed2 <etharp_find_entry+0x18a>
            old_pending = i;
 8007e7c:	8c3b      	ldrh	r3, [r7, #32]
 8007e7e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8007e80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007e84:	4965      	ldr	r1, [pc, #404]	; (800801c <etharp_find_entry+0x2d4>)
 8007e86:	4613      	mov	r3, r2
 8007e88:	005b      	lsls	r3, r3, #1
 8007e8a:	4413      	add	r3, r2
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	440b      	add	r3, r1
 8007e90:	3312      	adds	r3, #18
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	837b      	strh	r3, [r7, #26]
 8007e96:	e01c      	b.n	8007ed2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8007e98:	7dfb      	ldrb	r3, [r7, #23]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d919      	bls.n	8007ed2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8007e9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007ea2:	495e      	ldr	r1, [pc, #376]	; (800801c <etharp_find_entry+0x2d4>)
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	4413      	add	r3, r2
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	440b      	add	r3, r1
 8007eae:	3312      	adds	r3, #18
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	8b3a      	ldrh	r2, [r7, #24]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d80c      	bhi.n	8007ed2 <etharp_find_entry+0x18a>
            old_stable = i;
 8007eb8:	8c3b      	ldrh	r3, [r7, #32]
 8007eba:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8007ebc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007ec0:	4956      	ldr	r1, [pc, #344]	; (800801c <etharp_find_entry+0x2d4>)
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	4413      	add	r3, r2
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	440b      	add	r3, r1
 8007ecc:	3312      	adds	r3, #18
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8007ed2:	8c3b      	ldrh	r3, [r7, #32]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	843b      	strh	r3, [r7, #32]
 8007eda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007ede:	2b09      	cmp	r3, #9
 8007ee0:	f77f af4c 	ble.w	8007d7c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8007ee4:	7afb      	ldrb	r3, [r7, #11]
 8007ee6:	f003 0302 	and.w	r3, r3, #2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d108      	bne.n	8007f00 <etharp_find_entry+0x1b8>
 8007eee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007ef2:	2b0a      	cmp	r3, #10
 8007ef4:	d107      	bne.n	8007f06 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8007ef6:	7afb      	ldrb	r3, [r7, #11]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d102      	bne.n	8007f06 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8007f00:	f04f 33ff 	mov.w	r3, #4294967295
 8007f04:	e085      	b.n	8008012 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8007f06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007f0a:	2b09      	cmp	r3, #9
 8007f0c:	dc02      	bgt.n	8007f14 <etharp_find_entry+0x1cc>
    i = empty;
 8007f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f10:	843b      	strh	r3, [r7, #32]
 8007f12:	e039      	b.n	8007f88 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8007f14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007f18:	2b09      	cmp	r3, #9
 8007f1a:	dc14      	bgt.n	8007f46 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8007f1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f1e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8007f20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007f24:	493d      	ldr	r1, [pc, #244]	; (800801c <etharp_find_entry+0x2d4>)
 8007f26:	4613      	mov	r3, r2
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	4413      	add	r3, r2
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	440b      	add	r3, r1
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d018      	beq.n	8007f68 <etharp_find_entry+0x220>
 8007f36:	4b3a      	ldr	r3, [pc, #232]	; (8008020 <etharp_find_entry+0x2d8>)
 8007f38:	f240 126d 	movw	r2, #365	; 0x16d
 8007f3c:	493b      	ldr	r1, [pc, #236]	; (800802c <etharp_find_entry+0x2e4>)
 8007f3e:	483a      	ldr	r0, [pc, #232]	; (8008028 <etharp_find_entry+0x2e0>)
 8007f40:	f002 f9e2 	bl	800a308 <iprintf>
 8007f44:	e010      	b.n	8007f68 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8007f46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007f4a:	2b09      	cmp	r3, #9
 8007f4c:	dc02      	bgt.n	8007f54 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8007f4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007f50:	843b      	strh	r3, [r7, #32]
 8007f52:	e009      	b.n	8007f68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8007f54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007f58:	2b09      	cmp	r3, #9
 8007f5a:	dc02      	bgt.n	8007f62 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8007f5c:	8bfb      	ldrh	r3, [r7, #30]
 8007f5e:	843b      	strh	r3, [r7, #32]
 8007f60:	e002      	b.n	8007f68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8007f62:	f04f 33ff 	mov.w	r3, #4294967295
 8007f66:	e054      	b.n	8008012 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8007f68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007f6c:	2b09      	cmp	r3, #9
 8007f6e:	dd06      	ble.n	8007f7e <etharp_find_entry+0x236>
 8007f70:	4b2b      	ldr	r3, [pc, #172]	; (8008020 <etharp_find_entry+0x2d8>)
 8007f72:	f240 127f 	movw	r2, #383	; 0x17f
 8007f76:	492e      	ldr	r1, [pc, #184]	; (8008030 <etharp_find_entry+0x2e8>)
 8007f78:	482b      	ldr	r0, [pc, #172]	; (8008028 <etharp_find_entry+0x2e0>)
 8007f7a:	f002 f9c5 	bl	800a308 <iprintf>
    etharp_free_entry(i);
 8007f7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7ff fe06 	bl	8007b94 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8007f88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8007f8c:	2b09      	cmp	r3, #9
 8007f8e:	dd06      	ble.n	8007f9e <etharp_find_entry+0x256>
 8007f90:	4b23      	ldr	r3, [pc, #140]	; (8008020 <etharp_find_entry+0x2d8>)
 8007f92:	f240 1283 	movw	r2, #387	; 0x183
 8007f96:	4926      	ldr	r1, [pc, #152]	; (8008030 <etharp_find_entry+0x2e8>)
 8007f98:	4823      	ldr	r0, [pc, #140]	; (8008028 <etharp_find_entry+0x2e0>)
 8007f9a:	f002 f9b5 	bl	800a308 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8007f9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007fa2:	491e      	ldr	r1, [pc, #120]	; (800801c <etharp_find_entry+0x2d4>)
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	005b      	lsls	r3, r3, #1
 8007fa8:	4413      	add	r3, r2
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	440b      	add	r3, r1
 8007fae:	3314      	adds	r3, #20
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d006      	beq.n	8007fc4 <etharp_find_entry+0x27c>
 8007fb6:	4b1a      	ldr	r3, [pc, #104]	; (8008020 <etharp_find_entry+0x2d8>)
 8007fb8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8007fbc:	491d      	ldr	r1, [pc, #116]	; (8008034 <etharp_find_entry+0x2ec>)
 8007fbe:	481a      	ldr	r0, [pc, #104]	; (8008028 <etharp_find_entry+0x2e0>)
 8007fc0:	f002 f9a2 	bl	800a308 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00b      	beq.n	8007fe2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8007fca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6819      	ldr	r1, [r3, #0]
 8007fd2:	4812      	ldr	r0, [pc, #72]	; (800801c <etharp_find_entry+0x2d4>)
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	4413      	add	r3, r2
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	4403      	add	r3, r0
 8007fde:	3304      	adds	r3, #4
 8007fe0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8007fe2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007fe6:	490d      	ldr	r1, [pc, #52]	; (800801c <etharp_find_entry+0x2d4>)
 8007fe8:	4613      	mov	r3, r2
 8007fea:	005b      	lsls	r3, r3, #1
 8007fec:	4413      	add	r3, r2
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	440b      	add	r3, r1
 8007ff2:	3312      	adds	r3, #18
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8007ff8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8007ffc:	4907      	ldr	r1, [pc, #28]	; (800801c <etharp_find_entry+0x2d4>)
 8007ffe:	4613      	mov	r3, r2
 8008000:	005b      	lsls	r3, r3, #1
 8008002:	4413      	add	r3, r2
 8008004:	00db      	lsls	r3, r3, #3
 8008006:	440b      	add	r3, r1
 8008008:	3308      	adds	r3, #8
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800800e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3728      	adds	r7, #40	; 0x28
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	200000d8 	.word	0x200000d8
 8008020:	0800c15c 	.word	0x0800c15c
 8008024:	0800c194 	.word	0x0800c194
 8008028:	0800c1d4 	.word	0x0800c1d4
 800802c:	0800c1fc 	.word	0x0800c1fc
 8008030:	0800c214 	.word	0x0800c214
 8008034:	0800c228 	.word	0x0800c228

08008038 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b088      	sub	sp, #32
 800803c:	af02      	add	r7, sp, #8
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800804c:	2b06      	cmp	r3, #6
 800804e:	d006      	beq.n	800805e <etharp_update_arp_entry+0x26>
 8008050:	4b48      	ldr	r3, [pc, #288]	; (8008174 <etharp_update_arp_entry+0x13c>)
 8008052:	f240 12a9 	movw	r2, #425	; 0x1a9
 8008056:	4948      	ldr	r1, [pc, #288]	; (8008178 <etharp_update_arp_entry+0x140>)
 8008058:	4848      	ldr	r0, [pc, #288]	; (800817c <etharp_update_arp_entry+0x144>)
 800805a:	f002 f955 	bl	800a308 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d012      	beq.n	800808a <etharp_update_arp_entry+0x52>
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00e      	beq.n	800808a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68f9      	ldr	r1, [r7, #12]
 8008072:	4618      	mov	r0, r3
 8008074:	f001 f8fe 	bl	8009274 <ip4_addr_isbroadcast_u32>
 8008078:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800807a:	2b00      	cmp	r3, #0
 800807c:	d105      	bne.n	800808a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008086:	2be0      	cmp	r3, #224	; 0xe0
 8008088:	d102      	bne.n	8008090 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800808a:	f06f 030f 	mvn.w	r3, #15
 800808e:	e06c      	b.n	800816a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8008090:	78fb      	ldrb	r3, [r7, #3]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4619      	mov	r1, r3
 8008096:	68b8      	ldr	r0, [r7, #8]
 8008098:	f7ff fe56 	bl	8007d48 <etharp_find_entry>
 800809c:	4603      	mov	r3, r0
 800809e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80080a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	da02      	bge.n	80080ae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80080a8:	8afb      	ldrh	r3, [r7, #22]
 80080aa:	b25b      	sxtb	r3, r3
 80080ac:	e05d      	b.n	800816a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80080ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80080b2:	4933      	ldr	r1, [pc, #204]	; (8008180 <etharp_update_arp_entry+0x148>)
 80080b4:	4613      	mov	r3, r2
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	4413      	add	r3, r2
 80080ba:	00db      	lsls	r3, r3, #3
 80080bc:	440b      	add	r3, r1
 80080be:	3314      	adds	r3, #20
 80080c0:	2202      	movs	r2, #2
 80080c2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80080c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80080c8:	492d      	ldr	r1, [pc, #180]	; (8008180 <etharp_update_arp_entry+0x148>)
 80080ca:	4613      	mov	r3, r2
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	4413      	add	r3, r2
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	440b      	add	r3, r1
 80080d4:	3308      	adds	r3, #8
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80080da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80080de:	4613      	mov	r3, r2
 80080e0:	005b      	lsls	r3, r3, #1
 80080e2:	4413      	add	r3, r2
 80080e4:	00db      	lsls	r3, r3, #3
 80080e6:	3308      	adds	r3, #8
 80080e8:	4a25      	ldr	r2, [pc, #148]	; (8008180 <etharp_update_arp_entry+0x148>)
 80080ea:	4413      	add	r3, r2
 80080ec:	3304      	adds	r3, #4
 80080ee:	2206      	movs	r2, #6
 80080f0:	6879      	ldr	r1, [r7, #4]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f002 f848 	bl	800a188 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80080f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80080fc:	4920      	ldr	r1, [pc, #128]	; (8008180 <etharp_update_arp_entry+0x148>)
 80080fe:	4613      	mov	r3, r2
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	4413      	add	r3, r2
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	440b      	add	r3, r1
 8008108:	3312      	adds	r3, #18
 800810a:	2200      	movs	r2, #0
 800810c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800810e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008112:	491b      	ldr	r1, [pc, #108]	; (8008180 <etharp_update_arp_entry+0x148>)
 8008114:	4613      	mov	r3, r2
 8008116:	005b      	lsls	r3, r3, #1
 8008118:	4413      	add	r3, r2
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	440b      	add	r3, r1
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d021      	beq.n	8008168 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8008124:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008128:	4915      	ldr	r1, [pc, #84]	; (8008180 <etharp_update_arp_entry+0x148>)
 800812a:	4613      	mov	r3, r2
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	4413      	add	r3, r2
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	440b      	add	r3, r1
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8008138:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800813c:	4910      	ldr	r1, [pc, #64]	; (8008180 <etharp_update_arp_entry+0x148>)
 800813e:	4613      	mov	r3, r2
 8008140:	005b      	lsls	r3, r3, #1
 8008142:	4413      	add	r3, r2
 8008144:	00db      	lsls	r3, r3, #3
 8008146:	440b      	add	r3, r1
 8008148:	2200      	movs	r2, #0
 800814a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8008152:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6939      	ldr	r1, [r7, #16]
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f001 ff91 	bl	800a084 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8008162:	6938      	ldr	r0, [r7, #16]
 8008164:	f7fe fe3a 	bl	8006ddc <pbuf_free>
  }
  return ERR_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3718      	adds	r7, #24
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	0800c15c 	.word	0x0800c15c
 8008178:	0800c254 	.word	0x0800c254
 800817c:	0800c1d4 	.word	0x0800c1d4
 8008180:	200000d8 	.word	0x200000d8

08008184 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800818c:	2300      	movs	r3, #0
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	e01e      	b.n	80081d0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8008192:	4913      	ldr	r1, [pc, #76]	; (80081e0 <etharp_cleanup_netif+0x5c>)
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	4613      	mov	r3, r2
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	4413      	add	r3, r2
 800819c:	00db      	lsls	r3, r3, #3
 800819e:	440b      	add	r3, r1
 80081a0:	3314      	adds	r3, #20
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80081a6:	7afb      	ldrb	r3, [r7, #11]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00e      	beq.n	80081ca <etharp_cleanup_netif+0x46>
 80081ac:	490c      	ldr	r1, [pc, #48]	; (80081e0 <etharp_cleanup_netif+0x5c>)
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4613      	mov	r3, r2
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	4413      	add	r3, r2
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	440b      	add	r3, r1
 80081ba:	3308      	adds	r3, #8
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d102      	bne.n	80081ca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7ff fce5 	bl	8007b94 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3301      	adds	r3, #1
 80081ce:	60fb      	str	r3, [r7, #12]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b09      	cmp	r3, #9
 80081d4:	dddd      	ble.n	8008192 <etharp_cleanup_netif+0xe>
    }
  }
}
 80081d6:	bf00      	nop
 80081d8:	bf00      	nop
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	200000d8 	.word	0x200000d8

080081e4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80081e4:	b5b0      	push	{r4, r5, r7, lr}
 80081e6:	b08a      	sub	sp, #40	; 0x28
 80081e8:	af04      	add	r7, sp, #16
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d107      	bne.n	8008204 <etharp_input+0x20>
 80081f4:	4b3d      	ldr	r3, [pc, #244]	; (80082ec <etharp_input+0x108>)
 80081f6:	f240 228a 	movw	r2, #650	; 0x28a
 80081fa:	493d      	ldr	r1, [pc, #244]	; (80082f0 <etharp_input+0x10c>)
 80081fc:	483d      	ldr	r0, [pc, #244]	; (80082f4 <etharp_input+0x110>)
 80081fe:	f002 f883 	bl	800a308 <iprintf>
 8008202:	e06f      	b.n	80082e4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	881b      	ldrh	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008214:	d10c      	bne.n	8008230 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800821a:	2b06      	cmp	r3, #6
 800821c:	d108      	bne.n	8008230 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008222:	2b04      	cmp	r3, #4
 8008224:	d104      	bne.n	8008230 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	885b      	ldrh	r3, [r3, #2]
 800822a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800822c:	2b08      	cmp	r3, #8
 800822e:	d003      	beq.n	8008238 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7fe fdd3 	bl	8006ddc <pbuf_free>
    return;
 8008236:	e055      	b.n	80082e4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	330e      	adds	r3, #14
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	3318      	adds	r3, #24
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	3304      	adds	r3, #4
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d102      	bne.n	8008258 <etharp_input+0x74>
    for_us = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	75fb      	strb	r3, [r7, #23]
 8008256:	e009      	b.n	800826c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	3304      	adds	r3, #4
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	429a      	cmp	r2, r3
 8008262:	bf0c      	ite	eq
 8008264:	2301      	moveq	r3, #1
 8008266:	2300      	movne	r3, #0
 8008268:	b2db      	uxtb	r3, r3
 800826a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f103 0208 	add.w	r2, r3, #8
 8008272:	7dfb      	ldrb	r3, [r7, #23]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <etharp_input+0x98>
 8008278:	2301      	movs	r3, #1
 800827a:	e000      	b.n	800827e <etharp_input+0x9a>
 800827c:	2302      	movs	r3, #2
 800827e:	f107 010c 	add.w	r1, r7, #12
 8008282:	6838      	ldr	r0, [r7, #0]
 8008284:	f7ff fed8 	bl	8008038 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	88db      	ldrh	r3, [r3, #6]
 800828c:	b29b      	uxth	r3, r3
 800828e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008292:	d003      	beq.n	800829c <etharp_input+0xb8>
 8008294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008298:	d01e      	beq.n	80082d8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800829a:	e020      	b.n	80082de <etharp_input+0xfa>
      if (for_us) {
 800829c:	7dfb      	ldrb	r3, [r7, #23]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01c      	beq.n	80082dc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	3208      	adds	r2, #8
        etharp_raw(netif,
 80082bc:	2102      	movs	r1, #2
 80082be:	9103      	str	r1, [sp, #12]
 80082c0:	f107 010c 	add.w	r1, r7, #12
 80082c4:	9102      	str	r1, [sp, #8]
 80082c6:	9201      	str	r2, [sp, #4]
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	462b      	mov	r3, r5
 80082cc:	4622      	mov	r2, r4
 80082ce:	4601      	mov	r1, r0
 80082d0:	6838      	ldr	r0, [r7, #0]
 80082d2:	f000 faeb 	bl	80088ac <etharp_raw>
      break;
 80082d6:	e001      	b.n	80082dc <etharp_input+0xf8>
      break;
 80082d8:	bf00      	nop
 80082da:	e000      	b.n	80082de <etharp_input+0xfa>
      break;
 80082dc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7fe fd7c 	bl	8006ddc <pbuf_free>
}
 80082e4:	3718      	adds	r7, #24
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bdb0      	pop	{r4, r5, r7, pc}
 80082ea:	bf00      	nop
 80082ec:	0800c15c 	.word	0x0800c15c
 80082f0:	0800c2ac 	.word	0x0800c2ac
 80082f4:	0800c1d4 	.word	0x0800c1d4

080082f8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	4613      	mov	r3, r2
 8008304:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008306:	79fa      	ldrb	r2, [r7, #7]
 8008308:	4944      	ldr	r1, [pc, #272]	; (800841c <etharp_output_to_arp_index+0x124>)
 800830a:	4613      	mov	r3, r2
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	4413      	add	r3, r2
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	440b      	add	r3, r1
 8008314:	3314      	adds	r3, #20
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d806      	bhi.n	800832a <etharp_output_to_arp_index+0x32>
 800831c:	4b40      	ldr	r3, [pc, #256]	; (8008420 <etharp_output_to_arp_index+0x128>)
 800831e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008322:	4940      	ldr	r1, [pc, #256]	; (8008424 <etharp_output_to_arp_index+0x12c>)
 8008324:	4840      	ldr	r0, [pc, #256]	; (8008428 <etharp_output_to_arp_index+0x130>)
 8008326:	f001 ffef 	bl	800a308 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800832a:	79fa      	ldrb	r2, [r7, #7]
 800832c:	493b      	ldr	r1, [pc, #236]	; (800841c <etharp_output_to_arp_index+0x124>)
 800832e:	4613      	mov	r3, r2
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	4413      	add	r3, r2
 8008334:	00db      	lsls	r3, r3, #3
 8008336:	440b      	add	r3, r1
 8008338:	3314      	adds	r3, #20
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	2b02      	cmp	r3, #2
 800833e:	d153      	bne.n	80083e8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008340:	79fa      	ldrb	r2, [r7, #7]
 8008342:	4936      	ldr	r1, [pc, #216]	; (800841c <etharp_output_to_arp_index+0x124>)
 8008344:	4613      	mov	r3, r2
 8008346:	005b      	lsls	r3, r3, #1
 8008348:	4413      	add	r3, r2
 800834a:	00db      	lsls	r3, r3, #3
 800834c:	440b      	add	r3, r1
 800834e:	3312      	adds	r3, #18
 8008350:	881b      	ldrh	r3, [r3, #0]
 8008352:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8008356:	d919      	bls.n	800838c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008358:	79fa      	ldrb	r2, [r7, #7]
 800835a:	4613      	mov	r3, r2
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	4413      	add	r3, r2
 8008360:	00db      	lsls	r3, r3, #3
 8008362:	4a2e      	ldr	r2, [pc, #184]	; (800841c <etharp_output_to_arp_index+0x124>)
 8008364:	4413      	add	r3, r2
 8008366:	3304      	adds	r3, #4
 8008368:	4619      	mov	r1, r3
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f000 fb4c 	bl	8008a08 <etharp_request>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d138      	bne.n	80083e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008376:	79fa      	ldrb	r2, [r7, #7]
 8008378:	4928      	ldr	r1, [pc, #160]	; (800841c <etharp_output_to_arp_index+0x124>)
 800837a:	4613      	mov	r3, r2
 800837c:	005b      	lsls	r3, r3, #1
 800837e:	4413      	add	r3, r2
 8008380:	00db      	lsls	r3, r3, #3
 8008382:	440b      	add	r3, r1
 8008384:	3314      	adds	r3, #20
 8008386:	2203      	movs	r2, #3
 8008388:	701a      	strb	r2, [r3, #0]
 800838a:	e02d      	b.n	80083e8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800838c:	79fa      	ldrb	r2, [r7, #7]
 800838e:	4923      	ldr	r1, [pc, #140]	; (800841c <etharp_output_to_arp_index+0x124>)
 8008390:	4613      	mov	r3, r2
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	4413      	add	r3, r2
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	440b      	add	r3, r1
 800839a:	3312      	adds	r3, #18
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80083a2:	d321      	bcc.n	80083e8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80083a4:	79fa      	ldrb	r2, [r7, #7]
 80083a6:	4613      	mov	r3, r2
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	4413      	add	r3, r2
 80083ac:	00db      	lsls	r3, r3, #3
 80083ae:	4a1b      	ldr	r2, [pc, #108]	; (800841c <etharp_output_to_arp_index+0x124>)
 80083b0:	4413      	add	r3, r2
 80083b2:	1d19      	adds	r1, r3, #4
 80083b4:	79fa      	ldrb	r2, [r7, #7]
 80083b6:	4613      	mov	r3, r2
 80083b8:	005b      	lsls	r3, r3, #1
 80083ba:	4413      	add	r3, r2
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	3308      	adds	r3, #8
 80083c0:	4a16      	ldr	r2, [pc, #88]	; (800841c <etharp_output_to_arp_index+0x124>)
 80083c2:	4413      	add	r3, r2
 80083c4:	3304      	adds	r3, #4
 80083c6:	461a      	mov	r2, r3
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 fafb 	bl	80089c4 <etharp_request_dst>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d109      	bne.n	80083e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80083d4:	79fa      	ldrb	r2, [r7, #7]
 80083d6:	4911      	ldr	r1, [pc, #68]	; (800841c <etharp_output_to_arp_index+0x124>)
 80083d8:	4613      	mov	r3, r2
 80083da:	005b      	lsls	r3, r3, #1
 80083dc:	4413      	add	r3, r2
 80083de:	00db      	lsls	r3, r3, #3
 80083e0:	440b      	add	r3, r1
 80083e2:	3314      	adds	r3, #20
 80083e4:	2203      	movs	r2, #3
 80083e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80083ee:	79fa      	ldrb	r2, [r7, #7]
 80083f0:	4613      	mov	r3, r2
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	4413      	add	r3, r2
 80083f6:	00db      	lsls	r3, r3, #3
 80083f8:	3308      	adds	r3, #8
 80083fa:	4a08      	ldr	r2, [pc, #32]	; (800841c <etharp_output_to_arp_index+0x124>)
 80083fc:	4413      	add	r3, r2
 80083fe:	3304      	adds	r3, #4
 8008400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008404:	9200      	str	r2, [sp, #0]
 8008406:	460a      	mov	r2, r1
 8008408:	68b9      	ldr	r1, [r7, #8]
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f001 fe3a 	bl	800a084 <ethernet_output>
 8008410:	4603      	mov	r3, r0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	200000d8 	.word	0x200000d8
 8008420:	0800c15c 	.word	0x0800c15c
 8008424:	0800c2cc 	.word	0x0800c2cc
 8008428:	0800c1d4 	.word	0x0800c1d4

0800842c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08a      	sub	sp, #40	; 0x28
 8008430:	af02      	add	r7, sp, #8
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d106      	bne.n	8008450 <etharp_output+0x24>
 8008442:	4b73      	ldr	r3, [pc, #460]	; (8008610 <etharp_output+0x1e4>)
 8008444:	f240 321e 	movw	r2, #798	; 0x31e
 8008448:	4972      	ldr	r1, [pc, #456]	; (8008614 <etharp_output+0x1e8>)
 800844a:	4873      	ldr	r0, [pc, #460]	; (8008618 <etharp_output+0x1ec>)
 800844c:	f001 ff5c 	bl	800a308 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d106      	bne.n	8008464 <etharp_output+0x38>
 8008456:	4b6e      	ldr	r3, [pc, #440]	; (8008610 <etharp_output+0x1e4>)
 8008458:	f240 321f 	movw	r2, #799	; 0x31f
 800845c:	496f      	ldr	r1, [pc, #444]	; (800861c <etharp_output+0x1f0>)
 800845e:	486e      	ldr	r0, [pc, #440]	; (8008618 <etharp_output+0x1ec>)
 8008460:	f001 ff52 	bl	800a308 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d106      	bne.n	8008478 <etharp_output+0x4c>
 800846a:	4b69      	ldr	r3, [pc, #420]	; (8008610 <etharp_output+0x1e4>)
 800846c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008470:	496b      	ldr	r1, [pc, #428]	; (8008620 <etharp_output+0x1f4>)
 8008472:	4869      	ldr	r0, [pc, #420]	; (8008618 <etharp_output+0x1ec>)
 8008474:	f001 ff48 	bl	800a308 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68f9      	ldr	r1, [r7, #12]
 800847e:	4618      	mov	r0, r3
 8008480:	f000 fef8 	bl	8009274 <ip4_addr_isbroadcast_u32>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800848a:	4b66      	ldr	r3, [pc, #408]	; (8008624 <etharp_output+0x1f8>)
 800848c:	61fb      	str	r3, [r7, #28]
 800848e:	e0af      	b.n	80085f0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008498:	2be0      	cmp	r3, #224	; 0xe0
 800849a:	d118      	bne.n	80084ce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800849c:	2301      	movs	r3, #1
 800849e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80084a0:	2300      	movs	r3, #0
 80084a2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80084a4:	235e      	movs	r3, #94	; 0x5e
 80084a6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3301      	adds	r3, #1
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	3302      	adds	r3, #2
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3303      	adds	r3, #3
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80084c6:	f107 0310 	add.w	r3, r7, #16
 80084ca:	61fb      	str	r3, [r7, #28]
 80084cc:	e090      	b.n	80085f0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3304      	adds	r3, #4
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	405a      	eors	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3308      	adds	r3, #8
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4013      	ands	r3, r2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d012      	beq.n	800850c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80084ec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d00b      	beq.n	800850c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	330c      	adds	r3, #12
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	330c      	adds	r3, #12
 8008502:	61bb      	str	r3, [r7, #24]
 8008504:	e002      	b.n	800850c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8008506:	f06f 0303 	mvn.w	r3, #3
 800850a:	e07d      	b.n	8008608 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800850c:	4b46      	ldr	r3, [pc, #280]	; (8008628 <etharp_output+0x1fc>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	4619      	mov	r1, r3
 8008512:	4a46      	ldr	r2, [pc, #280]	; (800862c <etharp_output+0x200>)
 8008514:	460b      	mov	r3, r1
 8008516:	005b      	lsls	r3, r3, #1
 8008518:	440b      	add	r3, r1
 800851a:	00db      	lsls	r3, r3, #3
 800851c:	4413      	add	r3, r2
 800851e:	3314      	adds	r3, #20
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d925      	bls.n	8008572 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008526:	4b40      	ldr	r3, [pc, #256]	; (8008628 <etharp_output+0x1fc>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	4619      	mov	r1, r3
 800852c:	4a3f      	ldr	r2, [pc, #252]	; (800862c <etharp_output+0x200>)
 800852e:	460b      	mov	r3, r1
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	440b      	add	r3, r1
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	4413      	add	r3, r2
 8008538:	3308      	adds	r3, #8
 800853a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	429a      	cmp	r2, r3
 8008540:	d117      	bne.n	8008572 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	4b38      	ldr	r3, [pc, #224]	; (8008628 <etharp_output+0x1fc>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	4937      	ldr	r1, [pc, #220]	; (800862c <etharp_output+0x200>)
 800854e:	4603      	mov	r3, r0
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	4403      	add	r3, r0
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	440b      	add	r3, r1
 8008558:	3304      	adds	r3, #4
 800855a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800855c:	429a      	cmp	r2, r3
 800855e:	d108      	bne.n	8008572 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8008560:	4b31      	ldr	r3, [pc, #196]	; (8008628 <etharp_output+0x1fc>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	461a      	mov	r2, r3
 8008566:	68b9      	ldr	r1, [r7, #8]
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7ff fec5 	bl	80082f8 <etharp_output_to_arp_index>
 800856e:	4603      	mov	r3, r0
 8008570:	e04a      	b.n	8008608 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008572:	2300      	movs	r3, #0
 8008574:	75fb      	strb	r3, [r7, #23]
 8008576:	e031      	b.n	80085dc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008578:	7dfa      	ldrb	r2, [r7, #23]
 800857a:	492c      	ldr	r1, [pc, #176]	; (800862c <etharp_output+0x200>)
 800857c:	4613      	mov	r3, r2
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	4413      	add	r3, r2
 8008582:	00db      	lsls	r3, r3, #3
 8008584:	440b      	add	r3, r1
 8008586:	3314      	adds	r3, #20
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d923      	bls.n	80085d6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800858e:	7dfa      	ldrb	r2, [r7, #23]
 8008590:	4926      	ldr	r1, [pc, #152]	; (800862c <etharp_output+0x200>)
 8008592:	4613      	mov	r3, r2
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	4413      	add	r3, r2
 8008598:	00db      	lsls	r3, r3, #3
 800859a:	440b      	add	r3, r1
 800859c:	3308      	adds	r3, #8
 800859e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d117      	bne.n	80085d6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	6819      	ldr	r1, [r3, #0]
 80085aa:	7dfa      	ldrb	r2, [r7, #23]
 80085ac:	481f      	ldr	r0, [pc, #124]	; (800862c <etharp_output+0x200>)
 80085ae:	4613      	mov	r3, r2
 80085b0:	005b      	lsls	r3, r3, #1
 80085b2:	4413      	add	r3, r2
 80085b4:	00db      	lsls	r3, r3, #3
 80085b6:	4403      	add	r3, r0
 80085b8:	3304      	adds	r3, #4
 80085ba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80085bc:	4299      	cmp	r1, r3
 80085be:	d10a      	bne.n	80085d6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80085c0:	4a19      	ldr	r2, [pc, #100]	; (8008628 <etharp_output+0x1fc>)
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80085c6:	7dfb      	ldrb	r3, [r7, #23]
 80085c8:	461a      	mov	r2, r3
 80085ca:	68b9      	ldr	r1, [r7, #8]
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f7ff fe93 	bl	80082f8 <etharp_output_to_arp_index>
 80085d2:	4603      	mov	r3, r0
 80085d4:	e018      	b.n	8008608 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80085d6:	7dfb      	ldrb	r3, [r7, #23]
 80085d8:	3301      	adds	r3, #1
 80085da:	75fb      	strb	r3, [r7, #23]
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
 80085de:	2b09      	cmp	r3, #9
 80085e0:	d9ca      	bls.n	8008578 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	69b9      	ldr	r1, [r7, #24]
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 f822 	bl	8008630 <etharp_query>
 80085ec:	4603      	mov	r3, r0
 80085ee:	e00b      	b.n	8008608 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80085f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085fa:	9300      	str	r3, [sp, #0]
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f001 fd3f 	bl	800a084 <ethernet_output>
 8008606:	4603      	mov	r3, r0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3720      	adds	r7, #32
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	0800c15c 	.word	0x0800c15c
 8008614:	0800c2ac 	.word	0x0800c2ac
 8008618:	0800c1d4 	.word	0x0800c1d4
 800861c:	0800c2fc 	.word	0x0800c2fc
 8008620:	0800c29c 	.word	0x0800c29c
 8008624:	0800c8bc 	.word	0x0800c8bc
 8008628:	200001c8 	.word	0x200001c8
 800862c:	200000d8 	.word	0x200000d8

08008630 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08c      	sub	sp, #48	; 0x30
 8008634:	af02      	add	r7, sp, #8
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	3326      	adds	r3, #38	; 0x26
 8008640:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8008642:	23ff      	movs	r3, #255	; 0xff
 8008644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68f9      	ldr	r1, [r7, #12]
 8008652:	4618      	mov	r0, r3
 8008654:	f000 fe0e 	bl	8009274 <ip4_addr_isbroadcast_u32>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10c      	bne.n	8008678 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008666:	2be0      	cmp	r3, #224	; 0xe0
 8008668:	d006      	beq.n	8008678 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d003      	beq.n	8008678 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d102      	bne.n	800867e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8008678:	f06f 030f 	mvn.w	r3, #15
 800867c:	e101      	b.n	8008882 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	2101      	movs	r1, #1
 8008682:	68b8      	ldr	r0, [r7, #8]
 8008684:	f7ff fb60 	bl	8007d48 <etharp_find_entry>
 8008688:	4603      	mov	r3, r0
 800868a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800868c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008690:	2b00      	cmp	r3, #0
 8008692:	da02      	bge.n	800869a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8008694:	8a7b      	ldrh	r3, [r7, #18]
 8008696:	b25b      	sxtb	r3, r3
 8008698:	e0f3      	b.n	8008882 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800869a:	8a7b      	ldrh	r3, [r7, #18]
 800869c:	2b7e      	cmp	r3, #126	; 0x7e
 800869e:	d906      	bls.n	80086ae <etharp_query+0x7e>
 80086a0:	4b7a      	ldr	r3, [pc, #488]	; (800888c <etharp_query+0x25c>)
 80086a2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80086a6:	497a      	ldr	r1, [pc, #488]	; (8008890 <etharp_query+0x260>)
 80086a8:	487a      	ldr	r0, [pc, #488]	; (8008894 <etharp_query+0x264>)
 80086aa:	f001 fe2d 	bl	800a308 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80086ae:	8a7b      	ldrh	r3, [r7, #18]
 80086b0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80086b2:	7c7a      	ldrb	r2, [r7, #17]
 80086b4:	4978      	ldr	r1, [pc, #480]	; (8008898 <etharp_query+0x268>)
 80086b6:	4613      	mov	r3, r2
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	4413      	add	r3, r2
 80086bc:	00db      	lsls	r3, r3, #3
 80086be:	440b      	add	r3, r1
 80086c0:	3314      	adds	r3, #20
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d115      	bne.n	80086f4 <etharp_query+0xc4>
    is_new_entry = 1;
 80086c8:	2301      	movs	r3, #1
 80086ca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80086cc:	7c7a      	ldrb	r2, [r7, #17]
 80086ce:	4972      	ldr	r1, [pc, #456]	; (8008898 <etharp_query+0x268>)
 80086d0:	4613      	mov	r3, r2
 80086d2:	005b      	lsls	r3, r3, #1
 80086d4:	4413      	add	r3, r2
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	440b      	add	r3, r1
 80086da:	3314      	adds	r3, #20
 80086dc:	2201      	movs	r2, #1
 80086de:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80086e0:	7c7a      	ldrb	r2, [r7, #17]
 80086e2:	496d      	ldr	r1, [pc, #436]	; (8008898 <etharp_query+0x268>)
 80086e4:	4613      	mov	r3, r2
 80086e6:	005b      	lsls	r3, r3, #1
 80086e8:	4413      	add	r3, r2
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	440b      	add	r3, r1
 80086ee:	3308      	adds	r3, #8
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80086f4:	7c7a      	ldrb	r2, [r7, #17]
 80086f6:	4968      	ldr	r1, [pc, #416]	; (8008898 <etharp_query+0x268>)
 80086f8:	4613      	mov	r3, r2
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	4413      	add	r3, r2
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	440b      	add	r3, r1
 8008702:	3314      	adds	r3, #20
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	2b01      	cmp	r3, #1
 8008708:	d011      	beq.n	800872e <etharp_query+0xfe>
 800870a:	7c7a      	ldrb	r2, [r7, #17]
 800870c:	4962      	ldr	r1, [pc, #392]	; (8008898 <etharp_query+0x268>)
 800870e:	4613      	mov	r3, r2
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	4413      	add	r3, r2
 8008714:	00db      	lsls	r3, r3, #3
 8008716:	440b      	add	r3, r1
 8008718:	3314      	adds	r3, #20
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d806      	bhi.n	800872e <etharp_query+0xfe>
 8008720:	4b5a      	ldr	r3, [pc, #360]	; (800888c <etharp_query+0x25c>)
 8008722:	f240 32cd 	movw	r2, #973	; 0x3cd
 8008726:	495d      	ldr	r1, [pc, #372]	; (800889c <etharp_query+0x26c>)
 8008728:	485a      	ldr	r0, [pc, #360]	; (8008894 <etharp_query+0x264>)
 800872a:	f001 fded 	bl	800a308 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <etharp_query+0x10a>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10c      	bne.n	8008754 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800873a:	68b9      	ldr	r1, [r7, #8]
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f963 	bl	8008a08 <etharp_request>
 8008742:	4603      	mov	r3, r0
 8008744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d102      	bne.n	8008754 <etharp_query+0x124>
      return result;
 800874e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008752:	e096      	b.n	8008882 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d106      	bne.n	8008768 <etharp_query+0x138>
 800875a:	4b4c      	ldr	r3, [pc, #304]	; (800888c <etharp_query+0x25c>)
 800875c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8008760:	494f      	ldr	r1, [pc, #316]	; (80088a0 <etharp_query+0x270>)
 8008762:	484c      	ldr	r0, [pc, #304]	; (8008894 <etharp_query+0x264>)
 8008764:	f001 fdd0 	bl	800a308 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8008768:	7c7a      	ldrb	r2, [r7, #17]
 800876a:	494b      	ldr	r1, [pc, #300]	; (8008898 <etharp_query+0x268>)
 800876c:	4613      	mov	r3, r2
 800876e:	005b      	lsls	r3, r3, #1
 8008770:	4413      	add	r3, r2
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	440b      	add	r3, r1
 8008776:	3314      	adds	r3, #20
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d917      	bls.n	80087ae <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800877e:	4a49      	ldr	r2, [pc, #292]	; (80088a4 <etharp_query+0x274>)
 8008780:	7c7b      	ldrb	r3, [r7, #17]
 8008782:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008784:	7c7a      	ldrb	r2, [r7, #17]
 8008786:	4613      	mov	r3, r2
 8008788:	005b      	lsls	r3, r3, #1
 800878a:	4413      	add	r3, r2
 800878c:	00db      	lsls	r3, r3, #3
 800878e:	3308      	adds	r3, #8
 8008790:	4a41      	ldr	r2, [pc, #260]	; (8008898 <etharp_query+0x268>)
 8008792:	4413      	add	r3, r2
 8008794:	3304      	adds	r3, #4
 8008796:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800879a:	9200      	str	r2, [sp, #0]
 800879c:	697a      	ldr	r2, [r7, #20]
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f001 fc6f 	bl	800a084 <ethernet_output>
 80087a6:	4603      	mov	r3, r0
 80087a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80087ac:	e067      	b.n	800887e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80087ae:	7c7a      	ldrb	r2, [r7, #17]
 80087b0:	4939      	ldr	r1, [pc, #228]	; (8008898 <etharp_query+0x268>)
 80087b2:	4613      	mov	r3, r2
 80087b4:	005b      	lsls	r3, r3, #1
 80087b6:	4413      	add	r3, r2
 80087b8:	00db      	lsls	r3, r3, #3
 80087ba:	440b      	add	r3, r1
 80087bc:	3314      	adds	r3, #20
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d15c      	bne.n	800887e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 80087cc:	e01c      	b.n	8008808 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80087ce:	69fb      	ldr	r3, [r7, #28]
 80087d0:	895a      	ldrh	r2, [r3, #10]
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	891b      	ldrh	r3, [r3, #8]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d10a      	bne.n	80087f0 <etharp_query+0x1c0>
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d006      	beq.n	80087f0 <etharp_query+0x1c0>
 80087e2:	4b2a      	ldr	r3, [pc, #168]	; (800888c <etharp_query+0x25c>)
 80087e4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80087e8:	492f      	ldr	r1, [pc, #188]	; (80088a8 <etharp_query+0x278>)
 80087ea:	482a      	ldr	r0, [pc, #168]	; (8008894 <etharp_query+0x264>)
 80087ec:	f001 fd8c 	bl	800a308 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	7b1b      	ldrb	r3, [r3, #12]
 80087f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d002      	beq.n	8008802 <etharp_query+0x1d2>
        copy_needed = 1;
 80087fc:	2301      	movs	r3, #1
 80087fe:	61bb      	str	r3, [r7, #24]
        break;
 8008800:	e005      	b.n	800880e <etharp_query+0x1de>
      }
      p = p->next;
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	61fb      	str	r3, [r7, #28]
    while (p) {
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1df      	bne.n	80087ce <etharp_query+0x19e>
    }
    if (copy_needed) {
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d007      	beq.n	8008824 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	f44f 7120 	mov.w	r1, #640	; 0x280
 800881a:	200e      	movs	r0, #14
 800881c:	f7fe fcc8 	bl	80071b0 <pbuf_clone>
 8008820:	61f8      	str	r0, [r7, #28]
 8008822:	e004      	b.n	800882e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8008828:	69f8      	ldr	r0, [r7, #28]
 800882a:	f7fe fb77 	bl	8006f1c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d021      	beq.n	8008878 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8008834:	7c7a      	ldrb	r2, [r7, #17]
 8008836:	4918      	ldr	r1, [pc, #96]	; (8008898 <etharp_query+0x268>)
 8008838:	4613      	mov	r3, r2
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	4413      	add	r3, r2
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	440b      	add	r3, r1
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00a      	beq.n	800885e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8008848:	7c7a      	ldrb	r2, [r7, #17]
 800884a:	4913      	ldr	r1, [pc, #76]	; (8008898 <etharp_query+0x268>)
 800884c:	4613      	mov	r3, r2
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	4413      	add	r3, r2
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	440b      	add	r3, r1
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4618      	mov	r0, r3
 800885a:	f7fe fabf 	bl	8006ddc <pbuf_free>
      }
      arp_table[i].q = p;
 800885e:	7c7a      	ldrb	r2, [r7, #17]
 8008860:	490d      	ldr	r1, [pc, #52]	; (8008898 <etharp_query+0x268>)
 8008862:	4613      	mov	r3, r2
 8008864:	005b      	lsls	r3, r3, #1
 8008866:	4413      	add	r3, r2
 8008868:	00db      	lsls	r3, r3, #3
 800886a:	440b      	add	r3, r1
 800886c:	69fa      	ldr	r2, [r7, #28]
 800886e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008876:	e002      	b.n	800887e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8008878:	23ff      	movs	r3, #255	; 0xff
 800887a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800887e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008882:	4618      	mov	r0, r3
 8008884:	3728      	adds	r7, #40	; 0x28
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	0800c15c 	.word	0x0800c15c
 8008890:	0800c308 	.word	0x0800c308
 8008894:	0800c1d4 	.word	0x0800c1d4
 8008898:	200000d8 	.word	0x200000d8
 800889c:	0800c318 	.word	0x0800c318
 80088a0:	0800c2fc 	.word	0x0800c2fc
 80088a4:	200001c8 	.word	0x200001c8
 80088a8:	0800c340 	.word	0x0800c340

080088ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08a      	sub	sp, #40	; 0x28
 80088b0:	af02      	add	r7, sp, #8
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
 80088b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d106      	bne.n	80088d2 <etharp_raw+0x26>
 80088c4:	4b3a      	ldr	r3, [pc, #232]	; (80089b0 <etharp_raw+0x104>)
 80088c6:	f240 4257 	movw	r2, #1111	; 0x457
 80088ca:	493a      	ldr	r1, [pc, #232]	; (80089b4 <etharp_raw+0x108>)
 80088cc:	483a      	ldr	r0, [pc, #232]	; (80089b8 <etharp_raw+0x10c>)
 80088ce:	f001 fd1b 	bl	800a308 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80088d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80088d6:	211c      	movs	r1, #28
 80088d8:	200e      	movs	r0, #14
 80088da:	f7fd ff9d 	bl	8006818 <pbuf_alloc>
 80088de:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d102      	bne.n	80088ec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80088e6:	f04f 33ff 	mov.w	r3, #4294967295
 80088ea:	e05d      	b.n	80089a8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	895b      	ldrh	r3, [r3, #10]
 80088f0:	2b1b      	cmp	r3, #27
 80088f2:	d806      	bhi.n	8008902 <etharp_raw+0x56>
 80088f4:	4b2e      	ldr	r3, [pc, #184]	; (80089b0 <etharp_raw+0x104>)
 80088f6:	f240 4262 	movw	r2, #1122	; 0x462
 80088fa:	4930      	ldr	r1, [pc, #192]	; (80089bc <etharp_raw+0x110>)
 80088fc:	482e      	ldr	r0, [pc, #184]	; (80089b8 <etharp_raw+0x10c>)
 80088fe:	f001 fd03 	bl	800a308 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8008908:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800890a:	4618      	mov	r0, r3
 800890c:	f7fd f822 	bl	8005954 <lwip_htons>
 8008910:	4603      	mov	r3, r0
 8008912:	461a      	mov	r2, r3
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800891e:	2b06      	cmp	r3, #6
 8008920:	d006      	beq.n	8008930 <etharp_raw+0x84>
 8008922:	4b23      	ldr	r3, [pc, #140]	; (80089b0 <etharp_raw+0x104>)
 8008924:	f240 4269 	movw	r2, #1129	; 0x469
 8008928:	4925      	ldr	r1, [pc, #148]	; (80089c0 <etharp_raw+0x114>)
 800892a:	4823      	ldr	r0, [pc, #140]	; (80089b8 <etharp_raw+0x10c>)
 800892c:	f001 fcec 	bl	800a308 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	3308      	adds	r3, #8
 8008934:	2206      	movs	r2, #6
 8008936:	6839      	ldr	r1, [r7, #0]
 8008938:	4618      	mov	r0, r3
 800893a:	f001 fc25 	bl	800a188 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	3312      	adds	r3, #18
 8008942:	2206      	movs	r2, #6
 8008944:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008946:	4618      	mov	r0, r3
 8008948:	f001 fc1e 	bl	800a188 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	330e      	adds	r3, #14
 8008950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008952:	6812      	ldr	r2, [r2, #0]
 8008954:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	3318      	adds	r3, #24
 800895a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800895c:	6812      	ldr	r2, [r2, #0]
 800895e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	2200      	movs	r2, #0
 8008964:	701a      	strb	r2, [r3, #0]
 8008966:	2200      	movs	r2, #0
 8008968:	f042 0201 	orr.w	r2, r2, #1
 800896c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2200      	movs	r2, #0
 8008972:	f042 0208 	orr.w	r2, r2, #8
 8008976:	709a      	strb	r2, [r3, #2]
 8008978:	2200      	movs	r2, #0
 800897a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	2206      	movs	r2, #6
 8008980:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2204      	movs	r2, #4
 8008986:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8008988:	f640 0306 	movw	r3, #2054	; 0x806
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	69b9      	ldr	r1, [r7, #24]
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f001 fb75 	bl	800a084 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800899a:	69b8      	ldr	r0, [r7, #24]
 800899c:	f7fe fa1e 	bl	8006ddc <pbuf_free>
  p = NULL;
 80089a0:	2300      	movs	r3, #0
 80089a2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80089a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3720      	adds	r7, #32
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	0800c15c 	.word	0x0800c15c
 80089b4:	0800c2ac 	.word	0x0800c2ac
 80089b8:	0800c1d4 	.word	0x0800c1d4
 80089bc:	0800c35c 	.word	0x0800c35c
 80089c0:	0800c390 	.word	0x0800c390

080089c4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b088      	sub	sp, #32
 80089c8:	af04      	add	r7, sp, #16
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80089e0:	2201      	movs	r2, #1
 80089e2:	9203      	str	r2, [sp, #12]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	9202      	str	r2, [sp, #8]
 80089e8:	4a06      	ldr	r2, [pc, #24]	; (8008a04 <etharp_request_dst+0x40>)
 80089ea:	9201      	str	r2, [sp, #4]
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	4603      	mov	r3, r0
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f7ff ff5a 	bl	80088ac <etharp_raw>
 80089f8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	0800c8c4 	.word	0x0800c8c4

08008a08 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8008a12:	4a05      	ldr	r2, [pc, #20]	; (8008a28 <etharp_request+0x20>)
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7ff ffd4 	bl	80089c4 <etharp_request_dst>
 8008a1c:	4603      	mov	r3, r0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	0800c8bc 	.word	0x0800c8bc

08008a2c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b08e      	sub	sp, #56	; 0x38
 8008a30:	af04      	add	r7, sp, #16
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8008a36:	4b78      	ldr	r3, [pc, #480]	; (8008c18 <icmp_input+0x1ec>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	623b      	str	r3, [r7, #32]
  hlen = IPH_HL_BYTES(iphdr_in);
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	f003 030f 	and.w	r3, r3, #15
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	83fb      	strh	r3, [r7, #30]
  if (hlen < IP_HLEN) {
 8008a4c:	8bfb      	ldrh	r3, [r7, #30]
 8008a4e:	2b13      	cmp	r3, #19
 8008a50:	f240 80cf 	bls.w	8008bf2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	895b      	ldrh	r3, [r3, #10]
 8008a58:	2b03      	cmp	r3, #3
 8008a5a:	f240 80cc 	bls.w	8008bf6 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	777b      	strb	r3, [r7, #29]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8008a66:	7f7b      	ldrb	r3, [r7, #29]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 80bb 	beq.w	8008be4 <icmp_input+0x1b8>
 8008a6e:	2b08      	cmp	r3, #8
 8008a70:	f040 80bb 	bne.w	8008bea <icmp_input+0x1be>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8008a74:	4b69      	ldr	r3, [pc, #420]	; (8008c1c <icmp_input+0x1f0>)
 8008a76:	627b      	str	r3, [r7, #36]	; 0x24
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008a78:	4b67      	ldr	r3, [pc, #412]	; (8008c18 <icmp_input+0x1ec>)
 8008a7a:	695b      	ldr	r3, [r3, #20]
 8008a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a80:	2be0      	cmp	r3, #224	; 0xe0
 8008a82:	d102      	bne.n	8008a8a <icmp_input+0x5e>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	3304      	adds	r3, #4
 8008a88:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8008a8a:	4b63      	ldr	r3, [pc, #396]	; (8008c18 <icmp_input+0x1ec>)
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	4a62      	ldr	r2, [pc, #392]	; (8008c18 <icmp_input+0x1ec>)
 8008a90:	6812      	ldr	r2, [r2, #0]
 8008a92:	4611      	mov	r1, r2
 8008a94:	4618      	mov	r0, r3
 8008a96:	f000 fbed 	bl	8009274 <ip4_addr_isbroadcast_u32>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <icmp_input+0x7a>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	891b      	ldrh	r3, [r3, #8]
 8008aaa:	2b07      	cmp	r3, #7
 8008aac:	f240 80a5 	bls.w	8008bfa <icmp_input+0x1ce>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8008ab0:	8bfb      	ldrh	r3, [r7, #30]
 8008ab2:	330e      	adds	r3, #14
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f7fe f8fa 	bl	8006cb0 <pbuf_add_header>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d04b      	beq.n	8008b5a <icmp_input+0x12e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	891a      	ldrh	r2, [r3, #8]
 8008ac6:	8bfb      	ldrh	r3, [r7, #30]
 8008ac8:	4413      	add	r3, r2
 8008aca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	891b      	ldrh	r3, [r3, #8]
 8008ad0:	8b7a      	ldrh	r2, [r7, #26]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	f0c0 8096 	bcc.w	8008c04 <icmp_input+0x1d8>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8008ad8:	8b7b      	ldrh	r3, [r7, #26]
 8008ada:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008ade:	4619      	mov	r1, r3
 8008ae0:	200e      	movs	r0, #14
 8008ae2:	f7fd fe99 	bl	8006818 <pbuf_alloc>
 8008ae6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 808c 	beq.w	8008c08 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	895b      	ldrh	r3, [r3, #10]
 8008af4:	461a      	mov	r2, r3
 8008af6:	8bfb      	ldrh	r3, [r7, #30]
 8008af8:	3308      	adds	r3, #8
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d203      	bcs.n	8008b06 <icmp_input+0xda>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8008afe:	6978      	ldr	r0, [r7, #20]
 8008b00:	f7fe f96c 	bl	8006ddc <pbuf_free>
          goto icmperr;
 8008b04:	e081      	b.n	8008c0a <icmp_input+0x1de>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	8bfa      	ldrh	r2, [r7, #30]
 8008b0c:	6a39      	ldr	r1, [r7, #32]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f001 fb3a 	bl	800a188 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8008b14:	8bfb      	ldrh	r3, [r7, #30]
 8008b16:	4619      	mov	r1, r3
 8008b18:	6978      	ldr	r0, [r7, #20]
 8008b1a:	f7fe f8d9 	bl	8006cd0 <pbuf_remove_header>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d009      	beq.n	8008b38 <icmp_input+0x10c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8008b24:	4b3e      	ldr	r3, [pc, #248]	; (8008c20 <icmp_input+0x1f4>)
 8008b26:	22b6      	movs	r2, #182	; 0xb6
 8008b28:	493e      	ldr	r1, [pc, #248]	; (8008c24 <icmp_input+0x1f8>)
 8008b2a:	483f      	ldr	r0, [pc, #252]	; (8008c28 <icmp_input+0x1fc>)
 8008b2c:	f001 fbec 	bl	800a308 <iprintf>
          pbuf_free(r);
 8008b30:	6978      	ldr	r0, [r7, #20]
 8008b32:	f7fe f953 	bl	8006ddc <pbuf_free>
          goto icmperr;
 8008b36:	e068      	b.n	8008c0a <icmp_input+0x1de>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8008b38:	6879      	ldr	r1, [r7, #4]
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	f7fe fa66 	bl	800700c <pbuf_copy>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d003      	beq.n	8008b4e <icmp_input+0x122>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8008b46:	6978      	ldr	r0, [r7, #20]
 8008b48:	f7fe f948 	bl	8006ddc <pbuf_free>
          goto icmperr;
 8008b4c:	e05d      	b.n	8008c0a <icmp_input+0x1de>
        }
        /* free the original p */
        pbuf_free(p);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7fe f944 	bl	8006ddc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	607b      	str	r3, [r7, #4]
 8008b58:	e00f      	b.n	8008b7a <icmp_input+0x14e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8008b5a:	8bfb      	ldrh	r3, [r7, #30]
 8008b5c:	330e      	adds	r3, #14
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7fe f8b5 	bl	8006cd0 <pbuf_remove_header>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d006      	beq.n	8008b7a <icmp_input+0x14e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8008b6c:	4b2c      	ldr	r3, [pc, #176]	; (8008c20 <icmp_input+0x1f4>)
 8008b6e:	22c7      	movs	r2, #199	; 0xc7
 8008b70:	492e      	ldr	r1, [pc, #184]	; (8008c2c <icmp_input+0x200>)
 8008b72:	482d      	ldr	r0, [pc, #180]	; (8008c28 <icmp_input+0x1fc>)
 8008b74:	f001 fbc8 	bl	800a308 <iprintf>
          goto icmperr;
 8008b78:	e047      	b.n	8008c0a <icmp_input+0x1de>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8008b80:	8bfb      	ldrh	r3, [r7, #30]
 8008b82:	4619      	mov	r1, r3
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7fe f893 	bl	8006cb0 <pbuf_add_header>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d12b      	bne.n	8008be8 <icmp_input+0x1bc>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8008b9e:	4b1e      	ldr	r3, [pc, #120]	; (8008c18 <icmp_input+0x1ec>)
 8008ba0:	691a      	ldr	r2, [r3, #16]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	709a      	strb	r2, [r3, #2]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	22ff      	movs	r2, #255	; 0xff
 8008bba:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	729a      	strb	r2, [r3, #10]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	9302      	str	r3, [sp, #8]
 8008bca:	2301      	movs	r3, #1
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	23ff      	movs	r3, #255	; 0xff
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fa73 	bl	80090c4 <ip4_output_if>
 8008bde:	4603      	mov	r3, r0
 8008be0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8008be2:	e001      	b.n	8008be8 <icmp_input+0x1bc>
      break;
 8008be4:	bf00      	nop
 8008be6:	e000      	b.n	8008bea <icmp_input+0x1be>
      break;
 8008be8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7fe f8f6 	bl	8006ddc <pbuf_free>
  return;
 8008bf0:	e00f      	b.n	8008c12 <icmp_input+0x1e6>
    goto lenerr;
 8008bf2:	bf00      	nop
 8008bf4:	e002      	b.n	8008bfc <icmp_input+0x1d0>
    goto lenerr;
 8008bf6:	bf00      	nop
 8008bf8:	e000      	b.n	8008bfc <icmp_input+0x1d0>
        goto lenerr;
 8008bfa:	bf00      	nop
lenerr:
  pbuf_free(p);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7fe f8ed 	bl	8006ddc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8008c02:	e006      	b.n	8008c12 <icmp_input+0x1e6>
          goto icmperr;
 8008c04:	bf00      	nop
 8008c06:	e000      	b.n	8008c0a <icmp_input+0x1de>
          goto icmperr;
 8008c08:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7fe f8e6 	bl	8006ddc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8008c10:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8008c12:	3728      	adds	r7, #40	; 0x28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	2000368c 	.word	0x2000368c
 8008c1c:	200036a0 	.word	0x200036a0
 8008c20:	0800c3d4 	.word	0x0800c3d4
 8008c24:	0800c40c 	.word	0x0800c40c
 8008c28:	0800c444 	.word	0x0800c444
 8008c2c:	0800c46c 	.word	0x0800c46c

08008c30 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8008c3c:	78fb      	ldrb	r3, [r7, #3]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	2103      	movs	r1, #3
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f814 	bl	8008c70 <icmp_send_response>
}
 8008c48:	bf00      	nop
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8008c5c:	78fb      	ldrb	r3, [r7, #3]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	210b      	movs	r1, #11
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f804 	bl	8008c70 <icmp_send_response>
}
 8008c68:	bf00      	nop
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b08c      	sub	sp, #48	; 0x30
 8008c74:	af04      	add	r7, sp, #16
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70fb      	strb	r3, [r7, #3]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8008c80:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008c84:	2124      	movs	r1, #36	; 0x24
 8008c86:	2022      	movs	r0, #34	; 0x22
 8008c88:	f7fd fdc6 	bl	8006818 <pbuf_alloc>
 8008c8c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d04c      	beq.n	8008d2e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	895b      	ldrh	r3, [r3, #10]
 8008c98:	2b23      	cmp	r3, #35	; 0x23
 8008c9a:	d806      	bhi.n	8008caa <icmp_send_response+0x3a>
 8008c9c:	4b26      	ldr	r3, [pc, #152]	; (8008d38 <icmp_send_response+0xc8>)
 8008c9e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8008ca2:	4926      	ldr	r1, [pc, #152]	; (8008d3c <icmp_send_response+0xcc>)
 8008ca4:	4826      	ldr	r0, [pc, #152]	; (8008d40 <icmp_send_response+0xd0>)
 8008ca6:	f001 fb2f 	bl	800a308 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	78fa      	ldrb	r2, [r7, #3]
 8008cba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	78ba      	ldrb	r2, [r7, #2]
 8008cc0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	711a      	strb	r2, [r3, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	719a      	strb	r2, [r3, #6]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f103 0008 	add.w	r0, r3, #8
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	221c      	movs	r2, #28
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	f001 fa4f 	bl	800a188 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8008cf0:	f107 030c 	add.w	r3, r7, #12
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 f825 	bl	8008d44 <ip4_route>
 8008cfa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d011      	beq.n	8008d26 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2200      	movs	r2, #0
 8008d06:	709a      	strb	r2, [r3, #2]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8008d0c:	f107 020c 	add.w	r2, r7, #12
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	9302      	str	r3, [sp, #8]
 8008d14:	2301      	movs	r3, #1
 8008d16:	9301      	str	r3, [sp, #4]
 8008d18:	2300      	movs	r3, #0
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	23ff      	movs	r3, #255	; 0xff
 8008d1e:	2100      	movs	r1, #0
 8008d20:	69f8      	ldr	r0, [r7, #28]
 8008d22:	f000 f9cf 	bl	80090c4 <ip4_output_if>
  }
  pbuf_free(q);
 8008d26:	69f8      	ldr	r0, [r7, #28]
 8008d28:	f7fe f858 	bl	8006ddc <pbuf_free>
 8008d2c:	e000      	b.n	8008d30 <icmp_send_response+0xc0>
    return;
 8008d2e:	bf00      	nop
}
 8008d30:	3720      	adds	r7, #32
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	0800c3d4 	.word	0x0800c3d4
 8008d3c:	0800c4a0 	.word	0x0800c4a0
 8008d40:	0800c444 	.word	0x0800c444

08008d44 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8008d4c:	4b33      	ldr	r3, [pc, #204]	; (8008e1c <ip4_route+0xd8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	e036      	b.n	8008dc2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008d5a:	f003 0301 	and.w	r3, r3, #1
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d02b      	beq.n	8008dbc <ip4_route+0x78>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008d6a:	089b      	lsrs	r3, r3, #2
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d022      	beq.n	8008dbc <ip4_route+0x78>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	3304      	adds	r3, #4
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d01d      	beq.n	8008dbc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	3304      	adds	r3, #4
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	405a      	eors	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3308      	adds	r3, #8
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4013      	ands	r3, r2
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	e038      	b.n	8008e0e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008da2:	f003 0302 	and.w	r3, r3, #2
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d108      	bne.n	8008dbc <ip4_route+0x78>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	330c      	adds	r3, #12
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d101      	bne.n	8008dbc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	e028      	b.n	8008e0e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	60fb      	str	r3, [r7, #12]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1c5      	bne.n	8008d54 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8008dc8:	4b15      	ldr	r3, [pc, #84]	; (8008e20 <ip4_route+0xdc>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d01a      	beq.n	8008e06 <ip4_route+0xc2>
 8008dd0:	4b13      	ldr	r3, [pc, #76]	; (8008e20 <ip4_route+0xdc>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008dd8:	f003 0301 	and.w	r3, r3, #1
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d012      	beq.n	8008e06 <ip4_route+0xc2>
 8008de0:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <ip4_route+0xdc>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008de8:	f003 0304 	and.w	r3, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00a      	beq.n	8008e06 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8008df0:	4b0b      	ldr	r3, [pc, #44]	; (8008e20 <ip4_route+0xdc>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3304      	adds	r3, #4
 8008df6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d004      	beq.n	8008e06 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b7f      	cmp	r3, #127	; 0x7f
 8008e04:	d101      	bne.n	8008e0a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	e001      	b.n	8008e0e <ip4_route+0xca>
  }

  return netif_default;
 8008e0a:	4b05      	ldr	r3, [pc, #20]	; (8008e20 <ip4_route+0xdc>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	200066ec 	.word	0x200066ec
 8008e20:	200066f0 	.word	0x200066f0

08008e24 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b082      	sub	sp, #8
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d016      	beq.n	8008e6a <ip4_input_accept+0x46>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	3304      	adds	r3, #4
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d011      	beq.n	8008e6a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008e46:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <ip4_input_accept+0x50>)
 8008e48:	695a      	ldr	r2, [r3, #20]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d008      	beq.n	8008e66 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8008e54:	4b07      	ldr	r3, [pc, #28]	; (8008e74 <ip4_input_accept+0x50>)
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	6879      	ldr	r1, [r7, #4]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 fa0a 	bl	8009274 <ip4_addr_isbroadcast_u32>
 8008e60:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e000      	b.n	8008e6c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	2000368c 	.word	0x2000368c

08008e78 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	091b      	lsrs	r3, r3, #4
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b04      	cmp	r3, #4
 8008e92:	d004      	beq.n	8008e9e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f7fd ffa1 	bl	8006ddc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	e10a      	b.n	80090b4 <ip4_input+0x23c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	f003 030f 	and.w	r3, r3, #15
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	885b      	ldrh	r3, [r3, #2]
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fc fd4d 	bl	8005954 <lwip_htons>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	891b      	ldrh	r3, [r3, #8]
 8008ec2:	89ba      	ldrh	r2, [r7, #12]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d204      	bcs.n	8008ed2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8008ec8:	89bb      	ldrh	r3, [r7, #12]
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7fd fdff 	bl	8006ad0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	895b      	ldrh	r3, [r3, #10]
 8008ed6:	89fa      	ldrh	r2, [r7, #14]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d807      	bhi.n	8008eec <ip4_input+0x74>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	891b      	ldrh	r3, [r3, #8]
 8008ee0:	89ba      	ldrh	r2, [r7, #12]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d802      	bhi.n	8008eec <ip4_input+0x74>
 8008ee6:	89fb      	ldrh	r3, [r7, #14]
 8008ee8:	2b13      	cmp	r3, #19
 8008eea:	d804      	bhi.n	8008ef6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f7fd ff75 	bl	8006ddc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	e0de      	b.n	80090b4 <ip4_input+0x23c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	4a70      	ldr	r2, [pc, #448]	; (80090bc <ip4_input+0x244>)
 8008efc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	4a6e      	ldr	r2, [pc, #440]	; (80090bc <ip4_input+0x244>)
 8008f04:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008f06:	4b6d      	ldr	r3, [pc, #436]	; (80090bc <ip4_input+0x244>)
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f0e:	2be0      	cmp	r3, #224	; 0xe0
 8008f10:	d112      	bne.n	8008f38 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	b2db      	uxtb	r3, r3
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d007      	beq.n	8008f32 <ip4_input+0xba>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	3304      	adds	r3, #4
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <ip4_input+0xba>
      netif = inp;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	613b      	str	r3, [r7, #16]
 8008f30:	e02a      	b.n	8008f88 <ip4_input+0x110>
    } else {
      netif = NULL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	613b      	str	r3, [r7, #16]
 8008f36:	e027      	b.n	8008f88 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8008f38:	6838      	ldr	r0, [r7, #0]
 8008f3a:	f7ff ff73 	bl	8008e24 <ip4_input_accept>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d002      	beq.n	8008f4a <ip4_input+0xd2>
      netif = inp;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	613b      	str	r3, [r7, #16]
 8008f48:	e01e      	b.n	8008f88 <ip4_input+0x110>
    } else {
      netif = NULL;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8008f4e:	4b5b      	ldr	r3, [pc, #364]	; (80090bc <ip4_input+0x244>)
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	2b7f      	cmp	r3, #127	; 0x7f
 8008f56:	d017      	beq.n	8008f88 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8008f58:	4b59      	ldr	r3, [pc, #356]	; (80090c0 <ip4_input+0x248>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	613b      	str	r3, [r7, #16]
 8008f5e:	e00e      	b.n	8008f7e <ip4_input+0x106>
          if (netif == inp) {
 8008f60:	693a      	ldr	r2, [r7, #16]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d006      	beq.n	8008f76 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8008f68:	6938      	ldr	r0, [r7, #16]
 8008f6a:	f7ff ff5b 	bl	8008e24 <ip4_input_accept>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d108      	bne.n	8008f86 <ip4_input+0x10e>
 8008f74:	e000      	b.n	8008f78 <ip4_input+0x100>
            continue;
 8008f76:	bf00      	nop
        NETIF_FOREACH(netif) {
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	613b      	str	r3, [r7, #16]
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1ed      	bne.n	8008f60 <ip4_input+0xe8>
 8008f84:	e000      	b.n	8008f88 <ip4_input+0x110>
            break;
 8008f86:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008f88:	4b4c      	ldr	r3, [pc, #304]	; (80090bc <ip4_input+0x244>)
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 f970 	bl	8009274 <ip4_addr_isbroadcast_u32>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d105      	bne.n	8008fa6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8008f9a:	4b48      	ldr	r3, [pc, #288]	; (80090bc <ip4_input+0x244>)
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8008fa2:	2be0      	cmp	r3, #224	; 0xe0
 8008fa4:	d104      	bne.n	8008fb0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7fd ff18 	bl	8006ddc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	e081      	b.n	80090b4 <ip4_input+0x23c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d104      	bne.n	8008fc0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7fd ff10 	bl	8006ddc <pbuf_free>
    return ERR_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	e079      	b.n	80090b4 <ip4_input+0x23c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	88db      	ldrh	r3, [r3, #6]
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8008fcc:	4013      	ands	r3, r2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00b      	beq.n	8008fea <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fc94 	bl	8009900 <ip4_reass>
 8008fd8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <ip4_input+0x16c>
      return ERR_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	e067      	b.n	80090b4 <ip4_input+0x23c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8008fea:	4a34      	ldr	r2, [pc, #208]	; (80090bc <ip4_input+0x244>)
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8008ff0:	4a32      	ldr	r2, [pc, #200]	; (80090bc <ip4_input+0x244>)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8008ff6:	4a31      	ldr	r2, [pc, #196]	; (80090bc <ip4_input+0x244>)
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	f003 030f 	and.w	r3, r3, #15
 8009004:	b2db      	uxtb	r3, r3
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	b2db      	uxtb	r3, r3
 800900a:	b29a      	uxth	r2, r3
 800900c:	4b2b      	ldr	r3, [pc, #172]	; (80090bc <ip4_input+0x244>)
 800900e:	819a      	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7fe f938 	bl	8007288 <raw_input>
 8009018:	4603      	mov	r3, r0
 800901a:	72fb      	strb	r3, [r7, #11]
  if (raw_status != RAW_INPUT_EATEN)
 800901c:	7afb      	ldrb	r3, [r7, #11]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d034      	beq.n	800908c <ip4_input+0x214>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8009022:	89fb      	ldrh	r3, [r7, #14]
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7fd fe52 	bl	8006cd0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	7a5b      	ldrb	r3, [r3, #9]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d006      	beq.n	8009042 <ip4_input+0x1ca>
 8009034:	2b11      	cmp	r3, #17
 8009036:	d109      	bne.n	800904c <ip4_input+0x1d4>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f7fe fba6 	bl	800778c <udp_input>
        break;
 8009040:	e025      	b.n	800908e <ip4_input+0x216>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff fcf1 	bl	8008a2c <icmp_input>
        break;
 800904a:	e020      	b.n	800908e <ip4_input+0x216>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 800904c:	7afb      	ldrb	r3, [r7, #11]
 800904e:	2b02      	cmp	r3, #2
 8009050:	d018      	beq.n	8009084 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009052:	4b1a      	ldr	r3, [pc, #104]	; (80090bc <ip4_input+0x244>)
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	6939      	ldr	r1, [r7, #16]
 8009058:	4618      	mov	r0, r3
 800905a:	f000 f90b 	bl	8009274 <ip4_addr_isbroadcast_u32>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10f      	bne.n	8009084 <ip4_input+0x20c>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009064:	4b15      	ldr	r3, [pc, #84]	; (80090bc <ip4_input+0x244>)
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800906c:	2be0      	cmp	r3, #224	; 0xe0
 800906e:	d009      	beq.n	8009084 <ip4_input+0x20c>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8009070:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7fd fe9d 	bl	8006db6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800907c:	2102      	movs	r1, #2
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7ff fdd6 	bl	8008c30 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7fd fea9 	bl	8006ddc <pbuf_free>
        break;
 800908a:	e000      	b.n	800908e <ip4_input+0x216>
    }
  }
 800908c:	bf00      	nop

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800908e:	4b0b      	ldr	r3, [pc, #44]	; (80090bc <ip4_input+0x244>)
 8009090:	2200      	movs	r2, #0
 8009092:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8009094:	4b09      	ldr	r3, [pc, #36]	; (80090bc <ip4_input+0x244>)
 8009096:	2200      	movs	r2, #0
 8009098:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800909a:	4b08      	ldr	r3, [pc, #32]	; (80090bc <ip4_input+0x244>)
 800909c:	2200      	movs	r2, #0
 800909e:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80090a0:	4b06      	ldr	r3, [pc, #24]	; (80090bc <ip4_input+0x244>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80090a6:	4b05      	ldr	r3, [pc, #20]	; (80090bc <ip4_input+0x244>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80090ac:	4b03      	ldr	r3, [pc, #12]	; (80090bc <ip4_input+0x244>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	2000368c 	.word	0x2000368c
 80090c0:	200066ec 	.word	0x200066ec

080090c4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08a      	sub	sp, #40	; 0x28
 80090c8:	af04      	add	r7, sp, #16
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
 80090d0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d009      	beq.n	80090f0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d003      	beq.n	80090ea <ip4_output_if+0x26>
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d102      	bne.n	80090f0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	3304      	adds	r3, #4
 80090ee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80090f0:	78fa      	ldrb	r2, [r7, #3]
 80090f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f4:	9302      	str	r3, [sp, #8]
 80090f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090fa:	9301      	str	r3, [sp, #4]
 80090fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	4613      	mov	r3, r2
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	6979      	ldr	r1, [r7, #20]
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f000 f805 	bl	8009118 <ip4_output_if_src>
 800910e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8009110:	4618      	mov	r0, r3
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	607a      	str	r2, [r7, #4]
 8009124:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	7b9b      	ldrb	r3, [r3, #14]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d006      	beq.n	800913c <ip4_output_if_src+0x24>
 800912e:	4b4b      	ldr	r3, [pc, #300]	; (800925c <ip4_output_if_src+0x144>)
 8009130:	f44f 7255 	mov.w	r2, #852	; 0x354
 8009134:	494a      	ldr	r1, [pc, #296]	; (8009260 <ip4_output_if_src+0x148>)
 8009136:	484b      	ldr	r0, [pc, #300]	; (8009264 <ip4_output_if_src+0x14c>)
 8009138:	f001 f8e6 	bl	800a308 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d060      	beq.n	8009204 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8009142:	2314      	movs	r3, #20
 8009144:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8009146:	2114      	movs	r1, #20
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f7fd fdb1 	bl	8006cb0 <pbuf_add_header>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d002      	beq.n	800915a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009154:	f06f 0301 	mvn.w	r3, #1
 8009158:	e07c      	b.n	8009254 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	895b      	ldrh	r3, [r3, #10]
 8009164:	2b13      	cmp	r3, #19
 8009166:	d806      	bhi.n	8009176 <ip4_output_if_src+0x5e>
 8009168:	4b3c      	ldr	r3, [pc, #240]	; (800925c <ip4_output_if_src+0x144>)
 800916a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800916e:	493e      	ldr	r1, [pc, #248]	; (8009268 <ip4_output_if_src+0x150>)
 8009170:	483c      	ldr	r0, [pc, #240]	; (8009264 <ip4_output_if_src+0x14c>)
 8009172:	f001 f8c9 	bl	800a308 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	78fa      	ldrb	r2, [r7, #3]
 800917a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8009182:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800918c:	8b7b      	ldrh	r3, [r7, #26]
 800918e:	089b      	lsrs	r3, r3, #2
 8009190:	b29b      	uxth	r3, r3
 8009192:	b2db      	uxtb	r3, r3
 8009194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009198:	b2da      	uxtb	r2, r3
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80091a4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	891b      	ldrh	r3, [r3, #8]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fc fbd2 	bl	8005954 <lwip_htons>
 80091b0:	4603      	mov	r3, r0
 80091b2:	461a      	mov	r2, r3
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	2200      	movs	r2, #0
 80091bc:	719a      	strb	r2, [r3, #6]
 80091be:	2200      	movs	r2, #0
 80091c0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80091c2:	4b2a      	ldr	r3, [pc, #168]	; (800926c <ip4_output_if_src+0x154>)
 80091c4:	881b      	ldrh	r3, [r3, #0]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fc fbc4 	bl	8005954 <lwip_htons>
 80091cc:	4603      	mov	r3, r0
 80091ce:	461a      	mov	r2, r3
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80091d4:	4b25      	ldr	r3, [pc, #148]	; (800926c <ip4_output_if_src+0x154>)
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	3301      	adds	r3, #1
 80091da:	b29a      	uxth	r2, r3
 80091dc:	4b23      	ldr	r3, [pc, #140]	; (800926c <ip4_output_if_src+0x154>)
 80091de:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d104      	bne.n	80091f0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80091e6:	4b22      	ldr	r3, [pc, #136]	; (8009270 <ip4_output_if_src+0x158>)
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	60da      	str	r2, [r3, #12]
 80091ee:	e003      	b.n	80091f8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	2200      	movs	r2, #0
 80091fc:	729a      	strb	r2, [r3, #10]
 80091fe:	2200      	movs	r2, #0
 8009200:	72da      	strb	r2, [r3, #11]
 8009202:	e00f      	b.n	8009224 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	895b      	ldrh	r3, [r3, #10]
 8009208:	2b13      	cmp	r3, #19
 800920a:	d802      	bhi.n	8009212 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800920c:	f06f 0301 	mvn.w	r3, #1
 8009210:	e020      	b.n	8009254 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8009218:	69fb      	ldr	r3, [r7, #28]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800921e:	f107 0314 	add.w	r3, r7, #20
 8009222:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8009224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009226:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00c      	beq.n	8009246 <ip4_output_if_src+0x12e>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	891a      	ldrh	r2, [r3, #8]
 8009230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009232:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009234:	429a      	cmp	r2, r3
 8009236:	d906      	bls.n	8009246 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 fd4d 	bl	8009cdc <ip4_frag>
 8009242:	4603      	mov	r3, r0
 8009244:	e006      	b.n	8009254 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	68f9      	ldr	r1, [r7, #12]
 800924e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009250:	4798      	blx	r3
 8009252:	4603      	mov	r3, r0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3720      	adds	r7, #32
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	0800c4cc 	.word	0x0800c4cc
 8009260:	0800c500 	.word	0x0800c500
 8009264:	0800c50c 	.word	0x0800c50c
 8009268:	0800c534 	.word	0x0800c534
 800926c:	200001ca 	.word	0x200001ca
 8009270:	0800c8b8 	.word	0x0800c8b8

08009274 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009288:	d002      	beq.n	8009290 <ip4_addr_isbroadcast_u32+0x1c>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d101      	bne.n	8009294 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8009290:	2301      	movs	r3, #1
 8009292:	e02a      	b.n	80092ea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	e021      	b.n	80092ea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	3304      	adds	r3, #4
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d101      	bne.n	80092b6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	e019      	b.n	80092ea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	3304      	adds	r3, #4
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	405a      	eors	r2, r3
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	3308      	adds	r3, #8
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4013      	ands	r3, r2
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10d      	bne.n	80092e8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	3308      	adds	r3, #8
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	43da      	mvns	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	3308      	adds	r3, #8
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d101      	bne.n	80092e8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e000      	b.n	80092ea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80092e8:	2300      	movs	r3, #0
  }
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
	...

080092f8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8009302:	4b12      	ldr	r3, [pc, #72]	; (800934c <ip_reass_tmr+0x54>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8009308:	e018      	b.n	800933c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	7fdb      	ldrb	r3, [r3, #31]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00b      	beq.n	800932a <ip_reass_tmr+0x32>
      r->timer--;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	7fdb      	ldrb	r3, [r3, #31]
 8009316:	3b01      	subs	r3, #1
 8009318:	b2da      	uxtb	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60fb      	str	r3, [r7, #12]
 8009328:	e008      	b.n	800933c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8009334:	68b9      	ldr	r1, [r7, #8]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 f80a 	bl	8009350 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e3      	bne.n	800930a <ip_reass_tmr+0x12>
    }
  }
}
 8009342:	bf00      	nop
 8009344:	bf00      	nop
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	200001cc 	.word	0x200001cc

08009350 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b088      	sub	sp, #32
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	429a      	cmp	r2, r3
 8009364:	d105      	bne.n	8009372 <ip_reass_free_complete_datagram+0x22>
 8009366:	4b45      	ldr	r3, [pc, #276]	; (800947c <ip_reass_free_complete_datagram+0x12c>)
 8009368:	22ab      	movs	r2, #171	; 0xab
 800936a:	4945      	ldr	r1, [pc, #276]	; (8009480 <ip_reass_free_complete_datagram+0x130>)
 800936c:	4845      	ldr	r0, [pc, #276]	; (8009484 <ip_reass_free_complete_datagram+0x134>)
 800936e:	f000 ffcb 	bl	800a308 <iprintf>
  if (prev != NULL) {
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00a      	beq.n	800938e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	429a      	cmp	r2, r3
 8009380:	d005      	beq.n	800938e <ip_reass_free_complete_datagram+0x3e>
 8009382:	4b3e      	ldr	r3, [pc, #248]	; (800947c <ip_reass_free_complete_datagram+0x12c>)
 8009384:	22ad      	movs	r2, #173	; 0xad
 8009386:	4940      	ldr	r1, [pc, #256]	; (8009488 <ip_reass_free_complete_datagram+0x138>)
 8009388:	483e      	ldr	r0, [pc, #248]	; (8009484 <ip_reass_free_complete_datagram+0x134>)
 800938a:	f000 ffbd 	bl	800a308 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	889b      	ldrh	r3, [r3, #4]
 800939a:	b29b      	uxth	r3, r3
 800939c:	2b00      	cmp	r3, #0
 800939e:	d12a      	bne.n	80093f6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80093ae:	69bb      	ldr	r3, [r7, #24]
 80093b0:	6858      	ldr	r0, [r3, #4]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3308      	adds	r3, #8
 80093b6:	2214      	movs	r2, #20
 80093b8:	4619      	mov	r1, r3
 80093ba:	f000 fee5 	bl	800a188 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80093be:	2101      	movs	r1, #1
 80093c0:	69b8      	ldr	r0, [r7, #24]
 80093c2:	f7ff fc45 	bl	8008c50 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80093c6:	69b8      	ldr	r0, [r7, #24]
 80093c8:	f7fd fd90 	bl	8006eec <pbuf_clen>
 80093cc:	4603      	mov	r3, r0
 80093ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80093d0:	8bfa      	ldrh	r2, [r7, #30]
 80093d2:	8a7b      	ldrh	r3, [r7, #18]
 80093d4:	4413      	add	r3, r2
 80093d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093da:	db05      	blt.n	80093e8 <ip_reass_free_complete_datagram+0x98>
 80093dc:	4b27      	ldr	r3, [pc, #156]	; (800947c <ip_reass_free_complete_datagram+0x12c>)
 80093de:	22bc      	movs	r2, #188	; 0xbc
 80093e0:	492a      	ldr	r1, [pc, #168]	; (800948c <ip_reass_free_complete_datagram+0x13c>)
 80093e2:	4828      	ldr	r0, [pc, #160]	; (8009484 <ip_reass_free_complete_datagram+0x134>)
 80093e4:	f000 ff90 	bl	800a308 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80093e8:	8bfa      	ldrh	r2, [r7, #30]
 80093ea:	8a7b      	ldrh	r3, [r7, #18]
 80093ec:	4413      	add	r3, r2
 80093ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80093f0:	69b8      	ldr	r0, [r7, #24]
 80093f2:	f7fd fcf3 	bl	8006ddc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80093fc:	e01f      	b.n	800943e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	617b      	str	r3, [r7, #20]
    pcur = p;
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f7fd fd6c 	bl	8006eec <pbuf_clen>
 8009414:	4603      	mov	r3, r0
 8009416:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009418:	8bfa      	ldrh	r2, [r7, #30]
 800941a:	8a7b      	ldrh	r3, [r7, #18]
 800941c:	4413      	add	r3, r2
 800941e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009422:	db05      	blt.n	8009430 <ip_reass_free_complete_datagram+0xe0>
 8009424:	4b15      	ldr	r3, [pc, #84]	; (800947c <ip_reass_free_complete_datagram+0x12c>)
 8009426:	22cc      	movs	r2, #204	; 0xcc
 8009428:	4918      	ldr	r1, [pc, #96]	; (800948c <ip_reass_free_complete_datagram+0x13c>)
 800942a:	4816      	ldr	r0, [pc, #88]	; (8009484 <ip_reass_free_complete_datagram+0x134>)
 800942c:	f000 ff6c 	bl	800a308 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009430:	8bfa      	ldrh	r2, [r7, #30]
 8009432:	8a7b      	ldrh	r3, [r7, #18]
 8009434:	4413      	add	r3, r2
 8009436:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f7fd fccf 	bl	8006ddc <pbuf_free>
  while (p != NULL) {
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1dc      	bne.n	80093fe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f8c2 	bl	80095d0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800944c:	4b10      	ldr	r3, [pc, #64]	; (8009490 <ip_reass_free_complete_datagram+0x140>)
 800944e:	881b      	ldrh	r3, [r3, #0]
 8009450:	8bfa      	ldrh	r2, [r7, #30]
 8009452:	429a      	cmp	r2, r3
 8009454:	d905      	bls.n	8009462 <ip_reass_free_complete_datagram+0x112>
 8009456:	4b09      	ldr	r3, [pc, #36]	; (800947c <ip_reass_free_complete_datagram+0x12c>)
 8009458:	22d2      	movs	r2, #210	; 0xd2
 800945a:	490e      	ldr	r1, [pc, #56]	; (8009494 <ip_reass_free_complete_datagram+0x144>)
 800945c:	4809      	ldr	r0, [pc, #36]	; (8009484 <ip_reass_free_complete_datagram+0x134>)
 800945e:	f000 ff53 	bl	800a308 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009462:	4b0b      	ldr	r3, [pc, #44]	; (8009490 <ip_reass_free_complete_datagram+0x140>)
 8009464:	881a      	ldrh	r2, [r3, #0]
 8009466:	8bfb      	ldrh	r3, [r7, #30]
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	b29a      	uxth	r2, r3
 800946c:	4b08      	ldr	r3, [pc, #32]	; (8009490 <ip_reass_free_complete_datagram+0x140>)
 800946e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8009470:	8bfb      	ldrh	r3, [r7, #30]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3720      	adds	r7, #32
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	0800c564 	.word	0x0800c564
 8009480:	0800c5a0 	.word	0x0800c5a0
 8009484:	0800c5ac 	.word	0x0800c5ac
 8009488:	0800c5d4 	.word	0x0800c5d4
 800948c:	0800c5e8 	.word	0x0800c5e8
 8009490:	200001d0 	.word	0x200001d0
 8009494:	0800c608 	.word	0x0800c608

08009498 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08a      	sub	sp, #40	; 0x28
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80094a2:	2300      	movs	r3, #0
 80094a4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80094aa:	2300      	movs	r3, #0
 80094ac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80094ae:	2300      	movs	r3, #0
 80094b0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80094b6:	4b28      	ldr	r3, [pc, #160]	; (8009558 <ip_reass_remove_oldest_datagram+0xc0>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80094bc:	e030      	b.n	8009520 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80094be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c0:	695a      	ldr	r2, [r3, #20]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d10c      	bne.n	80094e4 <ip_reass_remove_oldest_datagram+0x4c>
 80094ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094cc:	699a      	ldr	r2, [r3, #24]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d106      	bne.n	80094e4 <ip_reass_remove_oldest_datagram+0x4c>
 80094d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d8:	899a      	ldrh	r2, [r3, #12]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	889b      	ldrh	r3, [r3, #4]
 80094de:	b29b      	uxth	r3, r3
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d014      	beq.n	800950e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	3301      	adds	r3, #1
 80094e8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d104      	bne.n	80094fa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	61bb      	str	r3, [r7, #24]
 80094f8:	e009      	b.n	800950e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	7fda      	ldrb	r2, [r3, #31]
 80094fe:	6a3b      	ldr	r3, [r7, #32]
 8009500:	7fdb      	ldrb	r3, [r3, #31]
 8009502:	429a      	cmp	r2, r3
 8009504:	d803      	bhi.n	800950e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800951a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009522:	2b00      	cmp	r3, #0
 8009524:	d1cb      	bne.n	80094be <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d008      	beq.n	800953e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800952c:	69b9      	ldr	r1, [r7, #24]
 800952e:	6a38      	ldr	r0, [r7, #32]
 8009530:	f7ff ff0e 	bl	8009350 <ip_reass_free_complete_datagram>
 8009534:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	4413      	add	r3, r2
 800953c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	429a      	cmp	r2, r3
 8009544:	da02      	bge.n	800954c <ip_reass_remove_oldest_datagram+0xb4>
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	2b01      	cmp	r3, #1
 800954a:	dcac      	bgt.n	80094a6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800954c:	697b      	ldr	r3, [r7, #20]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3728      	adds	r7, #40	; 0x28
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	200001cc 	.word	0x200001cc

0800955c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009566:	2002      	movs	r0, #2
 8009568:	f7fc fe2e 	bl	80061c8 <memp_malloc>
 800956c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d110      	bne.n	8009596 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7ff ff8e 	bl	8009498 <ip_reass_remove_oldest_datagram>
 800957c:	4602      	mov	r2, r0
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	4293      	cmp	r3, r2
 8009582:	dc03      	bgt.n	800958c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009584:	2002      	movs	r0, #2
 8009586:	f7fc fe1f 	bl	80061c8 <memp_malloc>
 800958a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8009592:	2300      	movs	r3, #0
 8009594:	e016      	b.n	80095c4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8009596:	2220      	movs	r2, #32
 8009598:	2100      	movs	r1, #0
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 fe02 	bl	800a1a4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	220f      	movs	r2, #15
 80095a4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80095a6:	4b09      	ldr	r3, [pc, #36]	; (80095cc <ip_reass_enqueue_new_datagram+0x70>)
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80095ae:	4a07      	ldr	r2, [pc, #28]	; (80095cc <ip_reass_enqueue_new_datagram+0x70>)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3308      	adds	r3, #8
 80095b8:	2214      	movs	r2, #20
 80095ba:	6879      	ldr	r1, [r7, #4]
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 fde3 	bl	800a188 <memcpy>
  return ipr;
 80095c2:	68fb      	ldr	r3, [r7, #12]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	200001cc 	.word	0x200001cc

080095d0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80095da:	4b10      	ldr	r3, [pc, #64]	; (800961c <ip_reass_dequeue_datagram+0x4c>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d104      	bne.n	80095ee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a0c      	ldr	r2, [pc, #48]	; (800961c <ip_reass_dequeue_datagram+0x4c>)
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	e00d      	b.n	800960a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <ip_reass_dequeue_datagram+0x32>
 80095f4:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <ip_reass_dequeue_datagram+0x50>)
 80095f6:	f240 1245 	movw	r2, #325	; 0x145
 80095fa:	490a      	ldr	r1, [pc, #40]	; (8009624 <ip_reass_dequeue_datagram+0x54>)
 80095fc:	480a      	ldr	r0, [pc, #40]	; (8009628 <ip_reass_dequeue_datagram+0x58>)
 80095fe:	f000 fe83 	bl	800a308 <iprintf>
    prev->next = ipr->next;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	2002      	movs	r0, #2
 800960e:	f7fc fe27 	bl	8006260 <memp_free>
}
 8009612:	bf00      	nop
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	200001cc 	.word	0x200001cc
 8009620:	0800c564 	.word	0x0800c564
 8009624:	0800c62c 	.word	0x0800c62c
 8009628:	0800c5ac 	.word	0x0800c5ac

0800962c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b08c      	sub	sp, #48	; 0x30
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8009638:	2300      	movs	r3, #0
 800963a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800963c:	2301      	movs	r3, #1
 800963e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	885b      	ldrh	r3, [r3, #2]
 800964a:	b29b      	uxth	r3, r3
 800964c:	4618      	mov	r0, r3
 800964e:	f7fc f981 	bl	8005954 <lwip_htons>
 8009652:	4603      	mov	r3, r0
 8009654:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	f003 030f 	and.w	r3, r3, #15
 800965e:	b2db      	uxtb	r3, r3
 8009660:	009b      	lsls	r3, r3, #2
 8009662:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8009664:	7e7b      	ldrb	r3, [r7, #25]
 8009666:	b29b      	uxth	r3, r3
 8009668:	8b7a      	ldrh	r2, [r7, #26]
 800966a:	429a      	cmp	r2, r3
 800966c:	d202      	bcs.n	8009674 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800966e:	f04f 33ff 	mov.w	r3, #4294967295
 8009672:	e135      	b.n	80098e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8009674:	7e7b      	ldrb	r3, [r7, #25]
 8009676:	b29b      	uxth	r3, r3
 8009678:	8b7a      	ldrh	r2, [r7, #26]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	88db      	ldrh	r3, [r3, #6]
 8009682:	b29b      	uxth	r3, r3
 8009684:	4618      	mov	r0, r3
 8009686:	f7fc f965 	bl	8005954 <lwip_htons>
 800968a:	4603      	mov	r3, r0
 800968c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009690:	b29b      	uxth	r3, r3
 8009692:	00db      	lsls	r3, r3, #3
 8009694:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800969c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969e:	2200      	movs	r2, #0
 80096a0:	701a      	strb	r2, [r3, #0]
 80096a2:	2200      	movs	r2, #0
 80096a4:	705a      	strb	r2, [r3, #1]
 80096a6:	2200      	movs	r2, #0
 80096a8:	709a      	strb	r2, [r3, #2]
 80096aa:	2200      	movs	r2, #0
 80096ac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b0:	8afa      	ldrh	r2, [r7, #22]
 80096b2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80096b4:	8afa      	ldrh	r2, [r7, #22]
 80096b6:	8b7b      	ldrh	r3, [r7, #26]
 80096b8:	4413      	add	r3, r2
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096be:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80096c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c2:	88db      	ldrh	r3, [r3, #6]
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	8afa      	ldrh	r2, [r7, #22]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d902      	bls.n	80096d2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80096cc:	f04f 33ff 	mov.w	r3, #4294967295
 80096d0:	e106      	b.n	80098e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	627b      	str	r3, [r7, #36]	; 0x24
 80096d8:	e068      	b.n	80097ac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80096e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e2:	889b      	ldrh	r3, [r3, #4]
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	889b      	ldrh	r3, [r3, #4]
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d235      	bcs.n	800975c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80096f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80096f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d020      	beq.n	800973e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80096fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fe:	889b      	ldrh	r3, [r3, #4]
 8009700:	b29a      	uxth	r2, r3
 8009702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009704:	88db      	ldrh	r3, [r3, #6]
 8009706:	b29b      	uxth	r3, r3
 8009708:	429a      	cmp	r2, r3
 800970a:	d307      	bcc.n	800971c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800970c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970e:	88db      	ldrh	r3, [r3, #6]
 8009710:	b29a      	uxth	r2, r3
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	889b      	ldrh	r3, [r3, #4]
 8009716:	b29b      	uxth	r3, r3
 8009718:	429a      	cmp	r2, r3
 800971a:	d902      	bls.n	8009722 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800971c:	f04f 33ff 	mov.w	r3, #4294967295
 8009720:	e0de      	b.n	80098e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8009722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8009728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972a:	88db      	ldrh	r3, [r3, #6]
 800972c:	b29a      	uxth	r2, r3
 800972e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009730:	889b      	ldrh	r3, [r3, #4]
 8009732:	b29b      	uxth	r3, r3
 8009734:	429a      	cmp	r2, r3
 8009736:	d03d      	beq.n	80097b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800973c:	e03a      	b.n	80097b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	88db      	ldrh	r3, [r3, #6]
 8009742:	b29a      	uxth	r2, r3
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	889b      	ldrh	r3, [r3, #4]
 8009748:	b29b      	uxth	r3, r3
 800974a:	429a      	cmp	r2, r3
 800974c:	d902      	bls.n	8009754 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800974e:	f04f 33ff 	mov.w	r3, #4294967295
 8009752:	e0c5      	b.n	80098e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	605a      	str	r2, [r3, #4]
      break;
 800975a:	e02b      	b.n	80097b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800975c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975e:	889b      	ldrh	r3, [r3, #4]
 8009760:	b29a      	uxth	r2, r3
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	889b      	ldrh	r3, [r3, #4]
 8009766:	b29b      	uxth	r3, r3
 8009768:	429a      	cmp	r2, r3
 800976a:	d102      	bne.n	8009772 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800976c:	f04f 33ff 	mov.w	r3, #4294967295
 8009770:	e0b6      	b.n	80098e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8009772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009774:	889b      	ldrh	r3, [r3, #4]
 8009776:	b29a      	uxth	r2, r3
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	88db      	ldrh	r3, [r3, #6]
 800977c:	b29b      	uxth	r3, r3
 800977e:	429a      	cmp	r2, r3
 8009780:	d202      	bcs.n	8009788 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8009782:	f04f 33ff 	mov.w	r3, #4294967295
 8009786:	e0ab      	b.n	80098e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	2b00      	cmp	r3, #0
 800978c:	d009      	beq.n	80097a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	88db      	ldrh	r3, [r3, #6]
 8009792:	b29a      	uxth	r2, r3
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	889b      	ldrh	r3, [r3, #4]
 8009798:	b29b      	uxth	r3, r3
 800979a:	429a      	cmp	r2, r3
 800979c:	d001      	beq.n	80097a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d193      	bne.n	80096da <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80097b2:	e000      	b.n	80097b6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80097b4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80097b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d12d      	bne.n	8009818 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80097bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d01c      	beq.n	80097fc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80097c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c4:	88db      	ldrh	r3, [r3, #6]
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ca:	889b      	ldrh	r3, [r3, #4]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d906      	bls.n	80097e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80097d2:	4b45      	ldr	r3, [pc, #276]	; (80098e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80097d4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80097d8:	4944      	ldr	r1, [pc, #272]	; (80098ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80097da:	4845      	ldr	r0, [pc, #276]	; (80098f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80097dc:	f000 fd94 	bl	800a308 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80097e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80097e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e8:	88db      	ldrh	r3, [r3, #6]
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ee:	889b      	ldrh	r3, [r3, #4]
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d010      	beq.n	8009818 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80097f6:	2300      	movs	r3, #0
 80097f8:	623b      	str	r3, [r7, #32]
 80097fa:	e00d      	b.n	8009818 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d006      	beq.n	8009812 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8009804:	4b38      	ldr	r3, [pc, #224]	; (80098e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009806:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800980a:	493a      	ldr	r1, [pc, #232]	; (80098f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800980c:	4838      	ldr	r0, [pc, #224]	; (80098f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800980e:	f000 fd7b 	bl	800a308 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d105      	bne.n	800982a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	7f9b      	ldrb	r3, [r3, #30]
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d059      	beq.n	80098de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d04f      	beq.n	80098d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d006      	beq.n	8009846 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	889b      	ldrh	r3, [r3, #4]
 8009840:	b29b      	uxth	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d002      	beq.n	800984c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	623b      	str	r3, [r7, #32]
 800984a:	e041      	b.n	80098d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800984c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8009850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8009856:	e012      	b.n	800987e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009860:	88db      	ldrh	r3, [r3, #6]
 8009862:	b29a      	uxth	r2, r3
 8009864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009866:	889b      	ldrh	r3, [r3, #4]
 8009868:	b29b      	uxth	r3, r3
 800986a:	429a      	cmp	r2, r3
 800986c:	d002      	beq.n	8009874 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	623b      	str	r3, [r7, #32]
            break;
 8009872:	e007      	b.n	8009884 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8009874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009876:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8009878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	2b00      	cmp	r3, #0
 8009882:	d1e9      	bne.n	8009858 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d022      	beq.n	80098d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d106      	bne.n	80098a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8009892:	4b15      	ldr	r3, [pc, #84]	; (80098e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8009894:	f240 12df 	movw	r2, #479	; 0x1df
 8009898:	4917      	ldr	r1, [pc, #92]	; (80098f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800989a:	4815      	ldr	r0, [pc, #84]	; (80098f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800989c:	f000 fd34 	bl	800a308 <iprintf>
          LWIP_ASSERT("sanity check",
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d106      	bne.n	80098ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80098ac:	4b0e      	ldr	r3, [pc, #56]	; (80098e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80098ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80098b2:	4911      	ldr	r1, [pc, #68]	; (80098f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80098b4:	480e      	ldr	r0, [pc, #56]	; (80098f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80098b6:	f000 fd27 	bl	800a308 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80098ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d006      	beq.n	80098d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80098c2:	4b09      	ldr	r3, [pc, #36]	; (80098e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80098c4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80098c8:	490c      	ldr	r1, [pc, #48]	; (80098fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80098ca:	4809      	ldr	r0, [pc, #36]	; (80098f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80098cc:	f000 fd1c 	bl	800a308 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80098d0:	6a3b      	ldr	r3, [r7, #32]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	bf14      	ite	ne
 80098d6:	2301      	movne	r3, #1
 80098d8:	2300      	moveq	r3, #0
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	e000      	b.n	80098e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3730      	adds	r7, #48	; 0x30
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	0800c564 	.word	0x0800c564
 80098ec:	0800c648 	.word	0x0800c648
 80098f0:	0800c5ac 	.word	0x0800c5ac
 80098f4:	0800c668 	.word	0x0800c668
 80098f8:	0800c6a0 	.word	0x0800c6a0
 80098fc:	0800c6b0 	.word	0x0800c6b0

08009900 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b08e      	sub	sp, #56	; 0x38
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	f003 030f 	and.w	r3, r3, #15
 8009916:	b2db      	uxtb	r3, r3
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	b2db      	uxtb	r3, r3
 800991c:	2b14      	cmp	r3, #20
 800991e:	f040 8167 	bne.w	8009bf0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	88db      	ldrh	r3, [r3, #6]
 8009926:	b29b      	uxth	r3, r3
 8009928:	4618      	mov	r0, r3
 800992a:	f7fc f813 	bl	8005954 <lwip_htons>
 800992e:	4603      	mov	r3, r0
 8009930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009934:	b29b      	uxth	r3, r3
 8009936:	00db      	lsls	r3, r3, #3
 8009938:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993c:	885b      	ldrh	r3, [r3, #2]
 800993e:	b29b      	uxth	r3, r3
 8009940:	4618      	mov	r0, r3
 8009942:	f7fc f807 	bl	8005954 <lwip_htons>
 8009946:	4603      	mov	r3, r0
 8009948:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	f003 030f 	and.w	r3, r3, #15
 8009952:	b2db      	uxtb	r3, r3
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800995a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800995e:	b29b      	uxth	r3, r3
 8009960:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009962:	429a      	cmp	r2, r3
 8009964:	f0c0 8146 	bcc.w	8009bf4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8009968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800996c:	b29b      	uxth	r3, r3
 800996e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7fd fab9 	bl	8006eec <pbuf_clen>
 800997a:	4603      	mov	r3, r0
 800997c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800997e:	4b9f      	ldr	r3, [pc, #636]	; (8009bfc <ip4_reass+0x2fc>)
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	461a      	mov	r2, r3
 8009984:	8c3b      	ldrh	r3, [r7, #32]
 8009986:	4413      	add	r3, r2
 8009988:	2b0a      	cmp	r3, #10
 800998a:	dd10      	ble.n	80099ae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800998c:	8c3b      	ldrh	r3, [r7, #32]
 800998e:	4619      	mov	r1, r3
 8009990:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009992:	f7ff fd81 	bl	8009498 <ip_reass_remove_oldest_datagram>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 812d 	beq.w	8009bf8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800999e:	4b97      	ldr	r3, [pc, #604]	; (8009bfc <ip4_reass+0x2fc>)
 80099a0:	881b      	ldrh	r3, [r3, #0]
 80099a2:	461a      	mov	r2, r3
 80099a4:	8c3b      	ldrh	r3, [r7, #32]
 80099a6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80099a8:	2b0a      	cmp	r3, #10
 80099aa:	f300 8125 	bgt.w	8009bf8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80099ae:	4b94      	ldr	r3, [pc, #592]	; (8009c00 <ip4_reass+0x300>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	633b      	str	r3, [r7, #48]	; 0x30
 80099b4:	e015      	b.n	80099e2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80099b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b8:	695a      	ldr	r2, [r3, #20]
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d10c      	bne.n	80099dc <ip4_reass+0xdc>
 80099c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c4:	699a      	ldr	r2, [r3, #24]
 80099c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d106      	bne.n	80099dc <ip4_reass+0xdc>
 80099ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d0:	899a      	ldrh	r2, [r3, #12]
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	889b      	ldrh	r3, [r3, #4]
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	429a      	cmp	r2, r3
 80099da:	d006      	beq.n	80099ea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	633b      	str	r3, [r7, #48]	; 0x30
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e6      	bne.n	80099b6 <ip4_reass+0xb6>
 80099e8:	e000      	b.n	80099ec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80099ea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d109      	bne.n	8009a06 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80099f2:	8c3b      	ldrh	r3, [r7, #32]
 80099f4:	4619      	mov	r1, r3
 80099f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099f8:	f7ff fdb0 	bl	800955c <ip_reass_enqueue_new_datagram>
 80099fc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d11c      	bne.n	8009a3e <ip4_reass+0x13e>
      goto nullreturn;
 8009a04:	e109      	b.n	8009c1a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8009a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a08:	88db      	ldrh	r3, [r3, #6]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fb ffa1 	bl	8005954 <lwip_htons>
 8009a12:	4603      	mov	r3, r0
 8009a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d110      	bne.n	8009a3e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8009a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1e:	89db      	ldrh	r3, [r3, #14]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7fb ff97 	bl	8005954 <lwip_htons>
 8009a26:	4603      	mov	r3, r0
 8009a28:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d006      	beq.n	8009a3e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8009a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a32:	3308      	adds	r3, #8
 8009a34:	2214      	movs	r2, #20
 8009a36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f000 fba5 	bl	800a188 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8009a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a40:	88db      	ldrh	r3, [r3, #6]
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	f003 0320 	and.w	r3, r3, #32
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	bf0c      	ite	eq
 8009a4c:	2301      	moveq	r3, #1
 8009a4e:	2300      	movne	r3, #0
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00e      	beq.n	8009a78 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8009a5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009a5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a5e:	4413      	add	r3, r2
 8009a60:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8009a62:	8b7a      	ldrh	r2, [r7, #26]
 8009a64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a66:	429a      	cmp	r2, r3
 8009a68:	f0c0 80a0 	bcc.w	8009bac <ip4_reass+0x2ac>
 8009a6c:	8b7b      	ldrh	r3, [r7, #26]
 8009a6e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8009a72:	4293      	cmp	r3, r2
 8009a74:	f200 809a 	bhi.w	8009bac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8009a78:	69fa      	ldr	r2, [r7, #28]
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a7e:	f7ff fdd5 	bl	800962c <ip_reass_chain_frag_into_datagram_and_validate>
 8009a82:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8a:	f000 8091 	beq.w	8009bb0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8009a8e:	4b5b      	ldr	r3, [pc, #364]	; (8009bfc <ip4_reass+0x2fc>)
 8009a90:	881a      	ldrh	r2, [r3, #0]
 8009a92:	8c3b      	ldrh	r3, [r7, #32]
 8009a94:	4413      	add	r3, r2
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	4b58      	ldr	r3, [pc, #352]	; (8009bfc <ip4_reass+0x2fc>)
 8009a9a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00d      	beq.n	8009abe <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8009aa2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009aa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009aa6:	4413      	add	r3, r2
 8009aa8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aac:	8a7a      	ldrh	r2, [r7, #18]
 8009aae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab2:	7f9b      	ldrb	r3, [r3, #30]
 8009ab4:	f043 0301 	orr.w	r3, r3, #1
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d171      	bne.n	8009ba8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	8b9b      	ldrh	r3, [r3, #28]
 8009ac8:	3314      	adds	r3, #20
 8009aca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8009acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae0:	3308      	adds	r3, #8
 8009ae2:	2214      	movs	r2, #20
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ae8:	f000 fb4e 	bl	800a188 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8009aec:	8a3b      	ldrh	r3, [r7, #16]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fb ff30 	bl	8005954 <lwip_htons>
 8009af4:	4603      	mov	r3, r0
 8009af6:	461a      	mov	r2, r3
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	2200      	movs	r2, #0
 8009b00:	719a      	strb	r2, [r3, #6]
 8009b02:	2200      	movs	r2, #0
 8009b04:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8009b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b08:	2200      	movs	r2, #0
 8009b0a:	729a      	strb	r2, [r3, #10]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8009b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8009b16:	e00d      	b.n	8009b34 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8009b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8009b1e:	2114      	movs	r1, #20
 8009b20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009b22:	f7fd f8d5 	bl	8006cd0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8009b26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f7fd fa19 	bl	8006f60 <pbuf_cat>
      r = iprh->next_pbuf;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8009b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1ee      	bne.n	8009b18 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8009b3a:	4b31      	ldr	r3, [pc, #196]	; (8009c00 <ip4_reass+0x300>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d102      	bne.n	8009b4a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8009b44:	2300      	movs	r3, #0
 8009b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b48:	e010      	b.n	8009b6c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8009b4a:	4b2d      	ldr	r3, [pc, #180]	; (8009c00 <ip4_reass+0x300>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b50:	e007      	b.n	8009b62 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d006      	beq.n	8009b6a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8009b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1f4      	bne.n	8009b52 <ip4_reass+0x252>
 8009b68:	e000      	b.n	8009b6c <ip4_reass+0x26c>
          break;
 8009b6a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8009b6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b70:	f7ff fd2e 	bl	80095d0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7fd f9b9 	bl	8006eec <pbuf_clen>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8009b7e:	4b1f      	ldr	r3, [pc, #124]	; (8009bfc <ip4_reass+0x2fc>)
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	8c3a      	ldrh	r2, [r7, #32]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d906      	bls.n	8009b96 <ip4_reass+0x296>
 8009b88:	4b1e      	ldr	r3, [pc, #120]	; (8009c04 <ip4_reass+0x304>)
 8009b8a:	f240 229b 	movw	r2, #667	; 0x29b
 8009b8e:	491e      	ldr	r1, [pc, #120]	; (8009c08 <ip4_reass+0x308>)
 8009b90:	481e      	ldr	r0, [pc, #120]	; (8009c0c <ip4_reass+0x30c>)
 8009b92:	f000 fbb9 	bl	800a308 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8009b96:	4b19      	ldr	r3, [pc, #100]	; (8009bfc <ip4_reass+0x2fc>)
 8009b98:	881a      	ldrh	r2, [r3, #0]
 8009b9a:	8c3b      	ldrh	r3, [r7, #32]
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	4b16      	ldr	r3, [pc, #88]	; (8009bfc <ip4_reass+0x2fc>)
 8009ba2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	e03c      	b.n	8009c22 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	e03a      	b.n	8009c22 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8009bac:	bf00      	nop
 8009bae:	e000      	b.n	8009bb2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8009bb0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8009bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d106      	bne.n	8009bc6 <ip4_reass+0x2c6>
 8009bb8:	4b12      	ldr	r3, [pc, #72]	; (8009c04 <ip4_reass+0x304>)
 8009bba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8009bbe:	4914      	ldr	r1, [pc, #80]	; (8009c10 <ip4_reass+0x310>)
 8009bc0:	4812      	ldr	r0, [pc, #72]	; (8009c0c <ip4_reass+0x30c>)
 8009bc2:	f000 fba1 	bl	800a308 <iprintf>
  if (ipr->p == NULL) {
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d124      	bne.n	8009c18 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8009bce:	4b0c      	ldr	r3, [pc, #48]	; (8009c00 <ip4_reass+0x300>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d006      	beq.n	8009be6 <ip4_reass+0x2e6>
 8009bd8:	4b0a      	ldr	r3, [pc, #40]	; (8009c04 <ip4_reass+0x304>)
 8009bda:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009bde:	490d      	ldr	r1, [pc, #52]	; (8009c14 <ip4_reass+0x314>)
 8009be0:	480a      	ldr	r0, [pc, #40]	; (8009c0c <ip4_reass+0x30c>)
 8009be2:	f000 fb91 	bl	800a308 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8009be6:	2100      	movs	r1, #0
 8009be8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bea:	f7ff fcf1 	bl	80095d0 <ip_reass_dequeue_datagram>
 8009bee:	e014      	b.n	8009c1a <ip4_reass+0x31a>
    goto nullreturn;
 8009bf0:	bf00      	nop
 8009bf2:	e012      	b.n	8009c1a <ip4_reass+0x31a>
    goto nullreturn;
 8009bf4:	bf00      	nop
 8009bf6:	e010      	b.n	8009c1a <ip4_reass+0x31a>
      goto nullreturn;
 8009bf8:	bf00      	nop
 8009bfa:	e00e      	b.n	8009c1a <ip4_reass+0x31a>
 8009bfc:	200001d0 	.word	0x200001d0
 8009c00:	200001cc 	.word	0x200001cc
 8009c04:	0800c564 	.word	0x0800c564
 8009c08:	0800c6d4 	.word	0x0800c6d4
 8009c0c:	0800c5ac 	.word	0x0800c5ac
 8009c10:	0800c6f0 	.word	0x0800c6f0
 8009c14:	0800c6fc 	.word	0x0800c6fc
  }

nullreturn:
 8009c18:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f7fd f8de 	bl	8006ddc <pbuf_free>
  return NULL;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3738      	adds	r7, #56	; 0x38
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop

08009c2c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8009c30:	2003      	movs	r0, #3
 8009c32:	f7fc fac9 	bl	80061c8 <memp_malloc>
 8009c36:	4603      	mov	r3, r0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d106      	bne.n	8009c58 <ip_frag_free_pbuf_custom_ref+0x1c>
 8009c4a:	4b07      	ldr	r3, [pc, #28]	; (8009c68 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8009c4c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8009c50:	4906      	ldr	r1, [pc, #24]	; (8009c6c <ip_frag_free_pbuf_custom_ref+0x30>)
 8009c52:	4807      	ldr	r0, [pc, #28]	; (8009c70 <ip_frag_free_pbuf_custom_ref+0x34>)
 8009c54:	f000 fb58 	bl	800a308 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8009c58:	6879      	ldr	r1, [r7, #4]
 8009c5a:	2003      	movs	r0, #3
 8009c5c:	f7fc fb00 	bl	8006260 <memp_free>
}
 8009c60:	bf00      	nop
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	0800c564 	.word	0x0800c564
 8009c6c:	0800c71c 	.word	0x0800c71c
 8009c70:	0800c5ac 	.word	0x0800c5ac

08009c74 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d106      	bne.n	8009c94 <ipfrag_free_pbuf_custom+0x20>
 8009c86:	4b11      	ldr	r3, [pc, #68]	; (8009ccc <ipfrag_free_pbuf_custom+0x58>)
 8009c88:	f240 22ce 	movw	r2, #718	; 0x2ce
 8009c8c:	4910      	ldr	r1, [pc, #64]	; (8009cd0 <ipfrag_free_pbuf_custom+0x5c>)
 8009c8e:	4811      	ldr	r0, [pc, #68]	; (8009cd4 <ipfrag_free_pbuf_custom+0x60>)
 8009c90:	f000 fb3a 	bl	800a308 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d006      	beq.n	8009caa <ipfrag_free_pbuf_custom+0x36>
 8009c9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ccc <ipfrag_free_pbuf_custom+0x58>)
 8009c9e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8009ca2:	490d      	ldr	r1, [pc, #52]	; (8009cd8 <ipfrag_free_pbuf_custom+0x64>)
 8009ca4:	480b      	ldr	r0, [pc, #44]	; (8009cd4 <ipfrag_free_pbuf_custom+0x60>)
 8009ca6:	f000 fb2f 	bl	800a308 <iprintf>
  if (pcr->original != NULL) {
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d004      	beq.n	8009cbc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	695b      	ldr	r3, [r3, #20]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fd f890 	bl	8006ddc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f7ff ffbd 	bl	8009c3c <ip_frag_free_pbuf_custom_ref>
}
 8009cc2:	bf00      	nop
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	0800c564 	.word	0x0800c564
 8009cd0:	0800c728 	.word	0x0800c728
 8009cd4:	0800c5ac 	.word	0x0800c5ac
 8009cd8:	0800c734 	.word	0x0800c734

08009cdc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b094      	sub	sp, #80	; 0x50
 8009ce0:	af02      	add	r7, sp, #8
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009cf2:	3b14      	subs	r3, #20
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	da00      	bge.n	8009cfa <ip4_frag+0x1e>
 8009cf8:	3307      	adds	r3, #7
 8009cfa:	10db      	asrs	r3, r3, #3
 8009cfc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8009cfe:	2314      	movs	r3, #20
 8009d00:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8009d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	f003 030f 	and.w	r3, r3, #15
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b14      	cmp	r3, #20
 8009d1c:	d002      	beq.n	8009d24 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8009d1e:	f06f 0305 	mvn.w	r3, #5
 8009d22:	e110      	b.n	8009f46 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	895b      	ldrh	r3, [r3, #10]
 8009d28:	2b13      	cmp	r3, #19
 8009d2a:	d809      	bhi.n	8009d40 <ip4_frag+0x64>
 8009d2c:	4b88      	ldr	r3, [pc, #544]	; (8009f50 <ip4_frag+0x274>)
 8009d2e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8009d32:	4988      	ldr	r1, [pc, #544]	; (8009f54 <ip4_frag+0x278>)
 8009d34:	4888      	ldr	r0, [pc, #544]	; (8009f58 <ip4_frag+0x27c>)
 8009d36:	f000 fae7 	bl	800a308 <iprintf>
 8009d3a:	f06f 0305 	mvn.w	r3, #5
 8009d3e:	e102      	b.n	8009f46 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	88db      	ldrh	r3, [r3, #6]
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7fb fe04 	bl	8005954 <lwip_htons>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8009d50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009d52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8009d5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d60:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	891b      	ldrh	r3, [r3, #8]
 8009d66:	3b14      	subs	r3, #20
 8009d68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8009d6c:	e0e1      	b.n	8009f32 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8009d6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009d70:	00db      	lsls	r3, r3, #3
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	bf28      	it	cs
 8009d7c:	4613      	movcs	r3, r2
 8009d7e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8009d80:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009d84:	2114      	movs	r1, #20
 8009d86:	200e      	movs	r0, #14
 8009d88:	f7fc fd46 	bl	8006818 <pbuf_alloc>
 8009d8c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8009d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 80d5 	beq.w	8009f40 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	895b      	ldrh	r3, [r3, #10]
 8009d9a:	2b13      	cmp	r3, #19
 8009d9c:	d806      	bhi.n	8009dac <ip4_frag+0xd0>
 8009d9e:	4b6c      	ldr	r3, [pc, #432]	; (8009f50 <ip4_frag+0x274>)
 8009da0:	f44f 7249 	mov.w	r2, #804	; 0x324
 8009da4:	496d      	ldr	r1, [pc, #436]	; (8009f5c <ip4_frag+0x280>)
 8009da6:	486c      	ldr	r0, [pc, #432]	; (8009f58 <ip4_frag+0x27c>)
 8009da8:	f000 faae 	bl	800a308 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8009dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	2214      	movs	r2, #20
 8009db2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 f9e7 	bl	800a188 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8009dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8009dc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009dc2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8009dc6:	e064      	b.n	8009e92 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	895a      	ldrh	r2, [r3, #10]
 8009dcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	895b      	ldrh	r3, [r3, #10]
 8009dd6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d906      	bls.n	8009dea <ip4_frag+0x10e>
 8009ddc:	4b5c      	ldr	r3, [pc, #368]	; (8009f50 <ip4_frag+0x274>)
 8009dde:	f240 322d 	movw	r2, #813	; 0x32d
 8009de2:	495f      	ldr	r1, [pc, #380]	; (8009f60 <ip4_frag+0x284>)
 8009de4:	485c      	ldr	r0, [pc, #368]	; (8009f58 <ip4_frag+0x27c>)
 8009de6:	f000 fa8f 	bl	800a308 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8009dea:	8bfa      	ldrh	r2, [r7, #30]
 8009dec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009df0:	4293      	cmp	r3, r2
 8009df2:	bf28      	it	cs
 8009df4:	4613      	movcs	r3, r2
 8009df6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8009dfa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d105      	bne.n	8009e0e <ip4_frag+0x132>
        poff = 0;
 8009e02:	2300      	movs	r3, #0
 8009e04:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	60fb      	str	r3, [r7, #12]
        continue;
 8009e0c:	e041      	b.n	8009e92 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8009e0e:	f7ff ff0d 	bl	8009c2c <ip_frag_alloc_pbuf_custom_ref>
 8009e12:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d103      	bne.n	8009e22 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8009e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e1c:	f7fc ffde 	bl	8006ddc <pbuf_free>
        goto memerr;
 8009e20:	e08f      	b.n	8009f42 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8009e22:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8009e28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8009e30:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8009e34:	9201      	str	r2, [sp, #4]
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2241      	movs	r2, #65	; 0x41
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	f7fc fe13 	bl	8006a68 <pbuf_alloced_custom>
 8009e42:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d106      	bne.n	8009e58 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8009e4a:	69b8      	ldr	r0, [r7, #24]
 8009e4c:	f7ff fef6 	bl	8009c3c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8009e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e52:	f7fc ffc3 	bl	8006ddc <pbuf_free>
        goto memerr;
 8009e56:	e074      	b.n	8009f42 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f7fd f85f 	bl	8006f1c <pbuf_ref>
      pcr->original = p;
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8009e64:	69bb      	ldr	r3, [r7, #24]
 8009e66:	4a3f      	ldr	r2, [pc, #252]	; (8009f64 <ip4_frag+0x288>)
 8009e68:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8009e6a:	6979      	ldr	r1, [r7, #20]
 8009e6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e6e:	f7fd f877 	bl	8006f60 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8009e72:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8009e76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009e7a:	1ad3      	subs	r3, r2, r3
 8009e7c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8009e80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d004      	beq.n	8009e92 <ip4_frag+0x1b6>
        poff = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8009e92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d196      	bne.n	8009dc8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8009e9a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8009e9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009ea0:	4413      	add	r3, r2
 8009ea2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009ea8:	f1a3 0213 	sub.w	r2, r3, #19
 8009eac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	bfcc      	ite	gt
 8009eb4:	2301      	movgt	r3, #1
 8009eb6:	2300      	movle	r3, #0
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8009ebc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ec4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <ip4_frag+0x1f6>
 8009ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8009ed2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009ed4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ed8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8009eda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009edc:	4618      	mov	r0, r3
 8009ede:	f7fb fd39 	bl	8005954 <lwip_htons>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8009eea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009eec:	3314      	adds	r3, #20
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fb fd2f 	bl	8005954 <lwip_htons>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	461a      	mov	r2, r3
 8009efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8009efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f00:	2200      	movs	r2, #0
 8009f02:	729a      	strb	r2, [r3, #10]
 8009f04:	2200      	movs	r2, #0
 8009f06:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	695b      	ldr	r3, [r3, #20]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f10:	68b8      	ldr	r0, [r7, #8]
 8009f12:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8009f14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f16:	f7fc ff61 	bl	8006ddc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8009f1a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009f1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8009f26:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009f2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8009f32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	f47f af19 	bne.w	8009d6e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	e002      	b.n	8009f46 <ip4_frag+0x26a>
      goto memerr;
 8009f40:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8009f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3748      	adds	r7, #72	; 0x48
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	0800c564 	.word	0x0800c564
 8009f54:	0800c740 	.word	0x0800c740
 8009f58:	0800c5ac 	.word	0x0800c5ac
 8009f5c:	0800c75c 	.word	0x0800c75c
 8009f60:	0800c77c 	.word	0x0800c77c
 8009f64:	08009c75 	.word	0x08009c75

08009f68 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8009f72:	230e      	movs	r3, #14
 8009f74:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	895b      	ldrh	r3, [r3, #10]
 8009f7a:	2b0e      	cmp	r3, #14
 8009f7c:	d96e      	bls.n	800a05c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	7bdb      	ldrb	r3, [r3, #15]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d106      	bne.n	8009f94 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	7b1a      	ldrb	r2, [r3, #12]
 8009f9e:	7b5b      	ldrb	r3, [r3, #13]
 8009fa0:	021b      	lsls	r3, r3, #8
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	f003 0301 	and.w	r3, r3, #1
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d023      	beq.n	8009ffa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d10f      	bne.n	8009fda <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	785b      	ldrb	r3, [r3, #1]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d11b      	bne.n	8009ffa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8009fc6:	2b5e      	cmp	r3, #94	; 0x5e
 8009fc8:	d117      	bne.n	8009ffa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	7b5b      	ldrb	r3, [r3, #13]
 8009fce:	f043 0310 	orr.w	r3, r3, #16
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	735a      	strb	r2, [r3, #13]
 8009fd8:	e00f      	b.n	8009ffa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	2206      	movs	r2, #6
 8009fde:	4928      	ldr	r1, [pc, #160]	; (800a080 <ethernet_input+0x118>)
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 f8c3 	bl	800a16c <memcmp>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d106      	bne.n	8009ffa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	7b5b      	ldrb	r3, [r3, #13]
 8009ff0:	f043 0308 	orr.w	r3, r3, #8
 8009ff4:	b2da      	uxtb	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8009ffa:	89fb      	ldrh	r3, [r7, #14]
 8009ffc:	2b08      	cmp	r3, #8
 8009ffe:	d003      	beq.n	800a008 <ethernet_input+0xa0>
 800a000:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800a004:	d014      	beq.n	800a030 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800a006:	e032      	b.n	800a06e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a00e:	f003 0308 	and.w	r3, r3, #8
 800a012:	2b00      	cmp	r3, #0
 800a014:	d024      	beq.n	800a060 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a016:	8afb      	ldrh	r3, [r7, #22]
 800a018:	4619      	mov	r1, r3
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7fc fe58 	bl	8006cd0 <pbuf_remove_header>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d11e      	bne.n	800a064 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800a026:	6839      	ldr	r1, [r7, #0]
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f7fe ff25 	bl	8008e78 <ip4_input>
      break;
 800a02e:	e013      	b.n	800a058 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a036:	f003 0308 	and.w	r3, r3, #8
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d014      	beq.n	800a068 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a03e:	8afb      	ldrh	r3, [r7, #22]
 800a040:	4619      	mov	r1, r3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7fc fe44 	bl	8006cd0 <pbuf_remove_header>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10e      	bne.n	800a06c <ethernet_input+0x104>
        etharp_input(p, netif);
 800a04e:	6839      	ldr	r1, [r7, #0]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7fe f8c7 	bl	80081e4 <etharp_input>
      break;
 800a056:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800a058:	2300      	movs	r3, #0
 800a05a:	e00c      	b.n	800a076 <ethernet_input+0x10e>
    goto free_and_return;
 800a05c:	bf00      	nop
 800a05e:	e006      	b.n	800a06e <ethernet_input+0x106>
        goto free_and_return;
 800a060:	bf00      	nop
 800a062:	e004      	b.n	800a06e <ethernet_input+0x106>
        goto free_and_return;
 800a064:	bf00      	nop
 800a066:	e002      	b.n	800a06e <ethernet_input+0x106>
        goto free_and_return;
 800a068:	bf00      	nop
 800a06a:	e000      	b.n	800a06e <ethernet_input+0x106>
        goto free_and_return;
 800a06c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f7fc feb4 	bl	8006ddc <pbuf_free>
  return ERR_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	0800c8bc 	.word	0x0800c8bc

0800a084 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800a092:	8c3b      	ldrh	r3, [r7, #32]
 800a094:	4618      	mov	r0, r3
 800a096:	f7fb fc5d 	bl	8005954 <lwip_htons>
 800a09a:	4603      	mov	r3, r0
 800a09c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800a09e:	210e      	movs	r1, #14
 800a0a0:	68b8      	ldr	r0, [r7, #8]
 800a0a2:	f7fc fe05 	bl	8006cb0 <pbuf_add_header>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d125      	bne.n	800a0f8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	8afa      	ldrh	r2, [r7, #22]
 800a0b6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	2206      	movs	r2, #6
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 f862 	bl	800a188 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	3306      	adds	r3, #6
 800a0c8:	2206      	movs	r2, #6
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 f85b 	bl	800a188 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a0d8:	2b06      	cmp	r3, #6
 800a0da:	d006      	beq.n	800a0ea <ethernet_output+0x66>
 800a0dc:	4b0a      	ldr	r3, [pc, #40]	; (800a108 <ethernet_output+0x84>)
 800a0de:	f44f 7299 	mov.w	r2, #306	; 0x132
 800a0e2:	490a      	ldr	r1, [pc, #40]	; (800a10c <ethernet_output+0x88>)
 800a0e4:	480a      	ldr	r0, [pc, #40]	; (800a110 <ethernet_output+0x8c>)
 800a0e6:	f000 f90f 	bl	800a308 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	4798      	blx	r3
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	e002      	b.n	800a0fe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800a0f8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800a0fa:	f06f 0301 	mvn.w	r3, #1
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3718      	adds	r7, #24
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	0800c78c 	.word	0x0800c78c
 800a10c:	0800c7c4 	.word	0x0800c7c4
 800a110:	0800c7f8 	.word	0x0800c7f8

0800a114 <__libc_init_array>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	4d0d      	ldr	r5, [pc, #52]	; (800a14c <__libc_init_array+0x38>)
 800a118:	4c0d      	ldr	r4, [pc, #52]	; (800a150 <__libc_init_array+0x3c>)
 800a11a:	1b64      	subs	r4, r4, r5
 800a11c:	10a4      	asrs	r4, r4, #2
 800a11e:	2600      	movs	r6, #0
 800a120:	42a6      	cmp	r6, r4
 800a122:	d109      	bne.n	800a138 <__libc_init_array+0x24>
 800a124:	4d0b      	ldr	r5, [pc, #44]	; (800a154 <__libc_init_array+0x40>)
 800a126:	4c0c      	ldr	r4, [pc, #48]	; (800a158 <__libc_init_array+0x44>)
 800a128:	f001 f856 	bl	800b1d8 <_init>
 800a12c:	1b64      	subs	r4, r4, r5
 800a12e:	10a4      	asrs	r4, r4, #2
 800a130:	2600      	movs	r6, #0
 800a132:	42a6      	cmp	r6, r4
 800a134:	d105      	bne.n	800a142 <__libc_init_array+0x2e>
 800a136:	bd70      	pop	{r4, r5, r6, pc}
 800a138:	f855 3b04 	ldr.w	r3, [r5], #4
 800a13c:	4798      	blx	r3
 800a13e:	3601      	adds	r6, #1
 800a140:	e7ee      	b.n	800a120 <__libc_init_array+0xc>
 800a142:	f855 3b04 	ldr.w	r3, [r5], #4
 800a146:	4798      	blx	r3
 800a148:	3601      	adds	r6, #1
 800a14a:	e7f2      	b.n	800a132 <__libc_init_array+0x1e>
 800a14c:	0800ca20 	.word	0x0800ca20
 800a150:	0800ca20 	.word	0x0800ca20
 800a154:	0800ca20 	.word	0x0800ca20
 800a158:	0800ca24 	.word	0x0800ca24

0800a15c <malloc>:
 800a15c:	4b02      	ldr	r3, [pc, #8]	; (800a168 <malloc+0xc>)
 800a15e:	4601      	mov	r1, r0
 800a160:	6818      	ldr	r0, [r3, #0]
 800a162:	f000 b877 	b.w	800a254 <_malloc_r>
 800a166:	bf00      	nop
 800a168:	20000010 	.word	0x20000010

0800a16c <memcmp>:
 800a16c:	b530      	push	{r4, r5, lr}
 800a16e:	3901      	subs	r1, #1
 800a170:	2400      	movs	r4, #0
 800a172:	42a2      	cmp	r2, r4
 800a174:	d101      	bne.n	800a17a <memcmp+0xe>
 800a176:	2000      	movs	r0, #0
 800a178:	e005      	b.n	800a186 <memcmp+0x1a>
 800a17a:	5d03      	ldrb	r3, [r0, r4]
 800a17c:	3401      	adds	r4, #1
 800a17e:	5d0d      	ldrb	r5, [r1, r4]
 800a180:	42ab      	cmp	r3, r5
 800a182:	d0f6      	beq.n	800a172 <memcmp+0x6>
 800a184:	1b58      	subs	r0, r3, r5
 800a186:	bd30      	pop	{r4, r5, pc}

0800a188 <memcpy>:
 800a188:	440a      	add	r2, r1
 800a18a:	4291      	cmp	r1, r2
 800a18c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a190:	d100      	bne.n	800a194 <memcpy+0xc>
 800a192:	4770      	bx	lr
 800a194:	b510      	push	{r4, lr}
 800a196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a19a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a19e:	4291      	cmp	r1, r2
 800a1a0:	d1f9      	bne.n	800a196 <memcpy+0xe>
 800a1a2:	bd10      	pop	{r4, pc}

0800a1a4 <memset>:
 800a1a4:	4402      	add	r2, r0
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d100      	bne.n	800a1ae <memset+0xa>
 800a1ac:	4770      	bx	lr
 800a1ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a1b2:	e7f9      	b.n	800a1a8 <memset+0x4>

0800a1b4 <_free_r>:
 800a1b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1b6:	2900      	cmp	r1, #0
 800a1b8:	d048      	beq.n	800a24c <_free_r+0x98>
 800a1ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1be:	9001      	str	r0, [sp, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a1c6:	bfb8      	it	lt
 800a1c8:	18e4      	addlt	r4, r4, r3
 800a1ca:	f000 fa2d 	bl	800a628 <__malloc_lock>
 800a1ce:	4a20      	ldr	r2, [pc, #128]	; (800a250 <_free_r+0x9c>)
 800a1d0:	9801      	ldr	r0, [sp, #4]
 800a1d2:	6813      	ldr	r3, [r2, #0]
 800a1d4:	4615      	mov	r5, r2
 800a1d6:	b933      	cbnz	r3, 800a1e6 <_free_r+0x32>
 800a1d8:	6063      	str	r3, [r4, #4]
 800a1da:	6014      	str	r4, [r2, #0]
 800a1dc:	b003      	add	sp, #12
 800a1de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1e2:	f000 ba27 	b.w	800a634 <__malloc_unlock>
 800a1e6:	42a3      	cmp	r3, r4
 800a1e8:	d90b      	bls.n	800a202 <_free_r+0x4e>
 800a1ea:	6821      	ldr	r1, [r4, #0]
 800a1ec:	1862      	adds	r2, r4, r1
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	bf04      	itt	eq
 800a1f2:	681a      	ldreq	r2, [r3, #0]
 800a1f4:	685b      	ldreq	r3, [r3, #4]
 800a1f6:	6063      	str	r3, [r4, #4]
 800a1f8:	bf04      	itt	eq
 800a1fa:	1852      	addeq	r2, r2, r1
 800a1fc:	6022      	streq	r2, [r4, #0]
 800a1fe:	602c      	str	r4, [r5, #0]
 800a200:	e7ec      	b.n	800a1dc <_free_r+0x28>
 800a202:	461a      	mov	r2, r3
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	b10b      	cbz	r3, 800a20c <_free_r+0x58>
 800a208:	42a3      	cmp	r3, r4
 800a20a:	d9fa      	bls.n	800a202 <_free_r+0x4e>
 800a20c:	6811      	ldr	r1, [r2, #0]
 800a20e:	1855      	adds	r5, r2, r1
 800a210:	42a5      	cmp	r5, r4
 800a212:	d10b      	bne.n	800a22c <_free_r+0x78>
 800a214:	6824      	ldr	r4, [r4, #0]
 800a216:	4421      	add	r1, r4
 800a218:	1854      	adds	r4, r2, r1
 800a21a:	42a3      	cmp	r3, r4
 800a21c:	6011      	str	r1, [r2, #0]
 800a21e:	d1dd      	bne.n	800a1dc <_free_r+0x28>
 800a220:	681c      	ldr	r4, [r3, #0]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	6053      	str	r3, [r2, #4]
 800a226:	4421      	add	r1, r4
 800a228:	6011      	str	r1, [r2, #0]
 800a22a:	e7d7      	b.n	800a1dc <_free_r+0x28>
 800a22c:	d902      	bls.n	800a234 <_free_r+0x80>
 800a22e:	230c      	movs	r3, #12
 800a230:	6003      	str	r3, [r0, #0]
 800a232:	e7d3      	b.n	800a1dc <_free_r+0x28>
 800a234:	6825      	ldr	r5, [r4, #0]
 800a236:	1961      	adds	r1, r4, r5
 800a238:	428b      	cmp	r3, r1
 800a23a:	bf04      	itt	eq
 800a23c:	6819      	ldreq	r1, [r3, #0]
 800a23e:	685b      	ldreq	r3, [r3, #4]
 800a240:	6063      	str	r3, [r4, #4]
 800a242:	bf04      	itt	eq
 800a244:	1949      	addeq	r1, r1, r5
 800a246:	6021      	streq	r1, [r4, #0]
 800a248:	6054      	str	r4, [r2, #4]
 800a24a:	e7c7      	b.n	800a1dc <_free_r+0x28>
 800a24c:	b003      	add	sp, #12
 800a24e:	bd30      	pop	{r4, r5, pc}
 800a250:	200001d4 	.word	0x200001d4

0800a254 <_malloc_r>:
 800a254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a256:	1ccd      	adds	r5, r1, #3
 800a258:	f025 0503 	bic.w	r5, r5, #3
 800a25c:	3508      	adds	r5, #8
 800a25e:	2d0c      	cmp	r5, #12
 800a260:	bf38      	it	cc
 800a262:	250c      	movcc	r5, #12
 800a264:	2d00      	cmp	r5, #0
 800a266:	4606      	mov	r6, r0
 800a268:	db01      	blt.n	800a26e <_malloc_r+0x1a>
 800a26a:	42a9      	cmp	r1, r5
 800a26c:	d903      	bls.n	800a276 <_malloc_r+0x22>
 800a26e:	230c      	movs	r3, #12
 800a270:	6033      	str	r3, [r6, #0]
 800a272:	2000      	movs	r0, #0
 800a274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a276:	f000 f9d7 	bl	800a628 <__malloc_lock>
 800a27a:	4921      	ldr	r1, [pc, #132]	; (800a300 <_malloc_r+0xac>)
 800a27c:	680a      	ldr	r2, [r1, #0]
 800a27e:	4614      	mov	r4, r2
 800a280:	b99c      	cbnz	r4, 800a2aa <_malloc_r+0x56>
 800a282:	4f20      	ldr	r7, [pc, #128]	; (800a304 <_malloc_r+0xb0>)
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	b923      	cbnz	r3, 800a292 <_malloc_r+0x3e>
 800a288:	4621      	mov	r1, r4
 800a28a:	4630      	mov	r0, r6
 800a28c:	f000 f894 	bl	800a3b8 <_sbrk_r>
 800a290:	6038      	str	r0, [r7, #0]
 800a292:	4629      	mov	r1, r5
 800a294:	4630      	mov	r0, r6
 800a296:	f000 f88f 	bl	800a3b8 <_sbrk_r>
 800a29a:	1c43      	adds	r3, r0, #1
 800a29c:	d123      	bne.n	800a2e6 <_malloc_r+0x92>
 800a29e:	230c      	movs	r3, #12
 800a2a0:	6033      	str	r3, [r6, #0]
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	f000 f9c6 	bl	800a634 <__malloc_unlock>
 800a2a8:	e7e3      	b.n	800a272 <_malloc_r+0x1e>
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	1b5b      	subs	r3, r3, r5
 800a2ae:	d417      	bmi.n	800a2e0 <_malloc_r+0x8c>
 800a2b0:	2b0b      	cmp	r3, #11
 800a2b2:	d903      	bls.n	800a2bc <_malloc_r+0x68>
 800a2b4:	6023      	str	r3, [r4, #0]
 800a2b6:	441c      	add	r4, r3
 800a2b8:	6025      	str	r5, [r4, #0]
 800a2ba:	e004      	b.n	800a2c6 <_malloc_r+0x72>
 800a2bc:	6863      	ldr	r3, [r4, #4]
 800a2be:	42a2      	cmp	r2, r4
 800a2c0:	bf0c      	ite	eq
 800a2c2:	600b      	streq	r3, [r1, #0]
 800a2c4:	6053      	strne	r3, [r2, #4]
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f000 f9b4 	bl	800a634 <__malloc_unlock>
 800a2cc:	f104 000b 	add.w	r0, r4, #11
 800a2d0:	1d23      	adds	r3, r4, #4
 800a2d2:	f020 0007 	bic.w	r0, r0, #7
 800a2d6:	1ac2      	subs	r2, r0, r3
 800a2d8:	d0cc      	beq.n	800a274 <_malloc_r+0x20>
 800a2da:	1a1b      	subs	r3, r3, r0
 800a2dc:	50a3      	str	r3, [r4, r2]
 800a2de:	e7c9      	b.n	800a274 <_malloc_r+0x20>
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	6864      	ldr	r4, [r4, #4]
 800a2e4:	e7cc      	b.n	800a280 <_malloc_r+0x2c>
 800a2e6:	1cc4      	adds	r4, r0, #3
 800a2e8:	f024 0403 	bic.w	r4, r4, #3
 800a2ec:	42a0      	cmp	r0, r4
 800a2ee:	d0e3      	beq.n	800a2b8 <_malloc_r+0x64>
 800a2f0:	1a21      	subs	r1, r4, r0
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f000 f860 	bl	800a3b8 <_sbrk_r>
 800a2f8:	3001      	adds	r0, #1
 800a2fa:	d1dd      	bne.n	800a2b8 <_malloc_r+0x64>
 800a2fc:	e7cf      	b.n	800a29e <_malloc_r+0x4a>
 800a2fe:	bf00      	nop
 800a300:	200001d4 	.word	0x200001d4
 800a304:	200001d8 	.word	0x200001d8

0800a308 <iprintf>:
 800a308:	b40f      	push	{r0, r1, r2, r3}
 800a30a:	4b0a      	ldr	r3, [pc, #40]	; (800a334 <iprintf+0x2c>)
 800a30c:	b513      	push	{r0, r1, r4, lr}
 800a30e:	681c      	ldr	r4, [r3, #0]
 800a310:	b124      	cbz	r4, 800a31c <iprintf+0x14>
 800a312:	69a3      	ldr	r3, [r4, #24]
 800a314:	b913      	cbnz	r3, 800a31c <iprintf+0x14>
 800a316:	4620      	mov	r0, r4
 800a318:	f000 f8d4 	bl	800a4c4 <__sinit>
 800a31c:	ab05      	add	r3, sp, #20
 800a31e:	9a04      	ldr	r2, [sp, #16]
 800a320:	68a1      	ldr	r1, [r4, #8]
 800a322:	9301      	str	r3, [sp, #4]
 800a324:	4620      	mov	r0, r4
 800a326:	f000 f9b5 	bl	800a694 <_vfiprintf_r>
 800a32a:	b002      	add	sp, #8
 800a32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a330:	b004      	add	sp, #16
 800a332:	4770      	bx	lr
 800a334:	20000010 	.word	0x20000010

0800a338 <rand>:
 800a338:	4b17      	ldr	r3, [pc, #92]	; (800a398 <rand+0x60>)
 800a33a:	b510      	push	{r4, lr}
 800a33c:	681c      	ldr	r4, [r3, #0]
 800a33e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a340:	b9b3      	cbnz	r3, 800a370 <rand+0x38>
 800a342:	2018      	movs	r0, #24
 800a344:	f7ff ff0a 	bl	800a15c <malloc>
 800a348:	63a0      	str	r0, [r4, #56]	; 0x38
 800a34a:	b928      	cbnz	r0, 800a358 <rand+0x20>
 800a34c:	4602      	mov	r2, r0
 800a34e:	4b13      	ldr	r3, [pc, #76]	; (800a39c <rand+0x64>)
 800a350:	4813      	ldr	r0, [pc, #76]	; (800a3a0 <rand+0x68>)
 800a352:	214e      	movs	r1, #78	; 0x4e
 800a354:	f000 f840 	bl	800a3d8 <__assert_func>
 800a358:	4a12      	ldr	r2, [pc, #72]	; (800a3a4 <rand+0x6c>)
 800a35a:	4b13      	ldr	r3, [pc, #76]	; (800a3a8 <rand+0x70>)
 800a35c:	e9c0 2300 	strd	r2, r3, [r0]
 800a360:	4b12      	ldr	r3, [pc, #72]	; (800a3ac <rand+0x74>)
 800a362:	6083      	str	r3, [r0, #8]
 800a364:	230b      	movs	r3, #11
 800a366:	8183      	strh	r3, [r0, #12]
 800a368:	2201      	movs	r2, #1
 800a36a:	2300      	movs	r3, #0
 800a36c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a370:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a372:	480f      	ldr	r0, [pc, #60]	; (800a3b0 <rand+0x78>)
 800a374:	690a      	ldr	r2, [r1, #16]
 800a376:	694b      	ldr	r3, [r1, #20]
 800a378:	4c0e      	ldr	r4, [pc, #56]	; (800a3b4 <rand+0x7c>)
 800a37a:	4350      	muls	r0, r2
 800a37c:	fb04 0003 	mla	r0, r4, r3, r0
 800a380:	fba2 3404 	umull	r3, r4, r2, r4
 800a384:	1c5a      	adds	r2, r3, #1
 800a386:	4404      	add	r4, r0
 800a388:	f144 0000 	adc.w	r0, r4, #0
 800a38c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800a390:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a394:	bd10      	pop	{r4, pc}
 800a396:	bf00      	nop
 800a398:	20000010 	.word	0x20000010
 800a39c:	0800c8d0 	.word	0x0800c8d0
 800a3a0:	0800c8e7 	.word	0x0800c8e7
 800a3a4:	abcd330e 	.word	0xabcd330e
 800a3a8:	e66d1234 	.word	0xe66d1234
 800a3ac:	0005deec 	.word	0x0005deec
 800a3b0:	5851f42d 	.word	0x5851f42d
 800a3b4:	4c957f2d 	.word	0x4c957f2d

0800a3b8 <_sbrk_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4d06      	ldr	r5, [pc, #24]	; (800a3d4 <_sbrk_r+0x1c>)
 800a3bc:	2300      	movs	r3, #0
 800a3be:	4604      	mov	r4, r0
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	602b      	str	r3, [r5, #0]
 800a3c4:	f7f7 f83c 	bl	8001440 <_sbrk>
 800a3c8:	1c43      	adds	r3, r0, #1
 800a3ca:	d102      	bne.n	800a3d2 <_sbrk_r+0x1a>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	b103      	cbz	r3, 800a3d2 <_sbrk_r+0x1a>
 800a3d0:	6023      	str	r3, [r4, #0]
 800a3d2:	bd38      	pop	{r3, r4, r5, pc}
 800a3d4:	200066f8 	.word	0x200066f8

0800a3d8 <__assert_func>:
 800a3d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3da:	4614      	mov	r4, r2
 800a3dc:	461a      	mov	r2, r3
 800a3de:	4b09      	ldr	r3, [pc, #36]	; (800a404 <__assert_func+0x2c>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	68d8      	ldr	r0, [r3, #12]
 800a3e6:	b14c      	cbz	r4, 800a3fc <__assert_func+0x24>
 800a3e8:	4b07      	ldr	r3, [pc, #28]	; (800a408 <__assert_func+0x30>)
 800a3ea:	9100      	str	r1, [sp, #0]
 800a3ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a3f0:	4906      	ldr	r1, [pc, #24]	; (800a40c <__assert_func+0x34>)
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	f000 f8e4 	bl	800a5c0 <fiprintf>
 800a3f8:	f000 fd26 	bl	800ae48 <abort>
 800a3fc:	4b04      	ldr	r3, [pc, #16]	; (800a410 <__assert_func+0x38>)
 800a3fe:	461c      	mov	r4, r3
 800a400:	e7f3      	b.n	800a3ea <__assert_func+0x12>
 800a402:	bf00      	nop
 800a404:	20000010 	.word	0x20000010
 800a408:	0800c946 	.word	0x0800c946
 800a40c:	0800c953 	.word	0x0800c953
 800a410:	0800c981 	.word	0x0800c981

0800a414 <std>:
 800a414:	2300      	movs	r3, #0
 800a416:	b510      	push	{r4, lr}
 800a418:	4604      	mov	r4, r0
 800a41a:	e9c0 3300 	strd	r3, r3, [r0]
 800a41e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a422:	6083      	str	r3, [r0, #8]
 800a424:	8181      	strh	r1, [r0, #12]
 800a426:	6643      	str	r3, [r0, #100]	; 0x64
 800a428:	81c2      	strh	r2, [r0, #14]
 800a42a:	6183      	str	r3, [r0, #24]
 800a42c:	4619      	mov	r1, r3
 800a42e:	2208      	movs	r2, #8
 800a430:	305c      	adds	r0, #92	; 0x5c
 800a432:	f7ff feb7 	bl	800a1a4 <memset>
 800a436:	4b05      	ldr	r3, [pc, #20]	; (800a44c <std+0x38>)
 800a438:	6263      	str	r3, [r4, #36]	; 0x24
 800a43a:	4b05      	ldr	r3, [pc, #20]	; (800a450 <std+0x3c>)
 800a43c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a43e:	4b05      	ldr	r3, [pc, #20]	; (800a454 <std+0x40>)
 800a440:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a442:	4b05      	ldr	r3, [pc, #20]	; (800a458 <std+0x44>)
 800a444:	6224      	str	r4, [r4, #32]
 800a446:	6323      	str	r3, [r4, #48]	; 0x30
 800a448:	bd10      	pop	{r4, pc}
 800a44a:	bf00      	nop
 800a44c:	0800ac1d 	.word	0x0800ac1d
 800a450:	0800ac3f 	.word	0x0800ac3f
 800a454:	0800ac77 	.word	0x0800ac77
 800a458:	0800ac9b 	.word	0x0800ac9b

0800a45c <_cleanup_r>:
 800a45c:	4901      	ldr	r1, [pc, #4]	; (800a464 <_cleanup_r+0x8>)
 800a45e:	f000 b8c1 	b.w	800a5e4 <_fwalk_reent>
 800a462:	bf00      	nop
 800a464:	0800af85 	.word	0x0800af85

0800a468 <__sfmoreglue>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	1e4a      	subs	r2, r1, #1
 800a46c:	2568      	movs	r5, #104	; 0x68
 800a46e:	4355      	muls	r5, r2
 800a470:	460e      	mov	r6, r1
 800a472:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a476:	f7ff feed 	bl	800a254 <_malloc_r>
 800a47a:	4604      	mov	r4, r0
 800a47c:	b140      	cbz	r0, 800a490 <__sfmoreglue+0x28>
 800a47e:	2100      	movs	r1, #0
 800a480:	e9c0 1600 	strd	r1, r6, [r0]
 800a484:	300c      	adds	r0, #12
 800a486:	60a0      	str	r0, [r4, #8]
 800a488:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a48c:	f7ff fe8a 	bl	800a1a4 <memset>
 800a490:	4620      	mov	r0, r4
 800a492:	bd70      	pop	{r4, r5, r6, pc}

0800a494 <__sfp_lock_acquire>:
 800a494:	4801      	ldr	r0, [pc, #4]	; (800a49c <__sfp_lock_acquire+0x8>)
 800a496:	f000 b8c5 	b.w	800a624 <__retarget_lock_acquire_recursive>
 800a49a:	bf00      	nop
 800a49c:	20006704 	.word	0x20006704

0800a4a0 <__sfp_lock_release>:
 800a4a0:	4801      	ldr	r0, [pc, #4]	; (800a4a8 <__sfp_lock_release+0x8>)
 800a4a2:	f000 b8c0 	b.w	800a626 <__retarget_lock_release_recursive>
 800a4a6:	bf00      	nop
 800a4a8:	20006704 	.word	0x20006704

0800a4ac <__sinit_lock_acquire>:
 800a4ac:	4801      	ldr	r0, [pc, #4]	; (800a4b4 <__sinit_lock_acquire+0x8>)
 800a4ae:	f000 b8b9 	b.w	800a624 <__retarget_lock_acquire_recursive>
 800a4b2:	bf00      	nop
 800a4b4:	200066ff 	.word	0x200066ff

0800a4b8 <__sinit_lock_release>:
 800a4b8:	4801      	ldr	r0, [pc, #4]	; (800a4c0 <__sinit_lock_release+0x8>)
 800a4ba:	f000 b8b4 	b.w	800a626 <__retarget_lock_release_recursive>
 800a4be:	bf00      	nop
 800a4c0:	200066ff 	.word	0x200066ff

0800a4c4 <__sinit>:
 800a4c4:	b510      	push	{r4, lr}
 800a4c6:	4604      	mov	r4, r0
 800a4c8:	f7ff fff0 	bl	800a4ac <__sinit_lock_acquire>
 800a4cc:	69a3      	ldr	r3, [r4, #24]
 800a4ce:	b11b      	cbz	r3, 800a4d8 <__sinit+0x14>
 800a4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4d4:	f7ff bff0 	b.w	800a4b8 <__sinit_lock_release>
 800a4d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4dc:	6523      	str	r3, [r4, #80]	; 0x50
 800a4de:	4b13      	ldr	r3, [pc, #76]	; (800a52c <__sinit+0x68>)
 800a4e0:	4a13      	ldr	r2, [pc, #76]	; (800a530 <__sinit+0x6c>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4e6:	42a3      	cmp	r3, r4
 800a4e8:	bf04      	itt	eq
 800a4ea:	2301      	moveq	r3, #1
 800a4ec:	61a3      	streq	r3, [r4, #24]
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f000 f820 	bl	800a534 <__sfp>
 800a4f4:	6060      	str	r0, [r4, #4]
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f000 f81c 	bl	800a534 <__sfp>
 800a4fc:	60a0      	str	r0, [r4, #8]
 800a4fe:	4620      	mov	r0, r4
 800a500:	f000 f818 	bl	800a534 <__sfp>
 800a504:	2200      	movs	r2, #0
 800a506:	60e0      	str	r0, [r4, #12]
 800a508:	2104      	movs	r1, #4
 800a50a:	6860      	ldr	r0, [r4, #4]
 800a50c:	f7ff ff82 	bl	800a414 <std>
 800a510:	68a0      	ldr	r0, [r4, #8]
 800a512:	2201      	movs	r2, #1
 800a514:	2109      	movs	r1, #9
 800a516:	f7ff ff7d 	bl	800a414 <std>
 800a51a:	68e0      	ldr	r0, [r4, #12]
 800a51c:	2202      	movs	r2, #2
 800a51e:	2112      	movs	r1, #18
 800a520:	f7ff ff78 	bl	800a414 <std>
 800a524:	2301      	movs	r3, #1
 800a526:	61a3      	str	r3, [r4, #24]
 800a528:	e7d2      	b.n	800a4d0 <__sinit+0xc>
 800a52a:	bf00      	nop
 800a52c:	0800c8cc 	.word	0x0800c8cc
 800a530:	0800a45d 	.word	0x0800a45d

0800a534 <__sfp>:
 800a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a536:	4607      	mov	r7, r0
 800a538:	f7ff ffac 	bl	800a494 <__sfp_lock_acquire>
 800a53c:	4b1e      	ldr	r3, [pc, #120]	; (800a5b8 <__sfp+0x84>)
 800a53e:	681e      	ldr	r6, [r3, #0]
 800a540:	69b3      	ldr	r3, [r6, #24]
 800a542:	b913      	cbnz	r3, 800a54a <__sfp+0x16>
 800a544:	4630      	mov	r0, r6
 800a546:	f7ff ffbd 	bl	800a4c4 <__sinit>
 800a54a:	3648      	adds	r6, #72	; 0x48
 800a54c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a550:	3b01      	subs	r3, #1
 800a552:	d503      	bpl.n	800a55c <__sfp+0x28>
 800a554:	6833      	ldr	r3, [r6, #0]
 800a556:	b30b      	cbz	r3, 800a59c <__sfp+0x68>
 800a558:	6836      	ldr	r6, [r6, #0]
 800a55a:	e7f7      	b.n	800a54c <__sfp+0x18>
 800a55c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a560:	b9d5      	cbnz	r5, 800a598 <__sfp+0x64>
 800a562:	4b16      	ldr	r3, [pc, #88]	; (800a5bc <__sfp+0x88>)
 800a564:	60e3      	str	r3, [r4, #12]
 800a566:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a56a:	6665      	str	r5, [r4, #100]	; 0x64
 800a56c:	f000 f859 	bl	800a622 <__retarget_lock_init_recursive>
 800a570:	f7ff ff96 	bl	800a4a0 <__sfp_lock_release>
 800a574:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a578:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a57c:	6025      	str	r5, [r4, #0]
 800a57e:	61a5      	str	r5, [r4, #24]
 800a580:	2208      	movs	r2, #8
 800a582:	4629      	mov	r1, r5
 800a584:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a588:	f7ff fe0c 	bl	800a1a4 <memset>
 800a58c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a590:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a594:	4620      	mov	r0, r4
 800a596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a598:	3468      	adds	r4, #104	; 0x68
 800a59a:	e7d9      	b.n	800a550 <__sfp+0x1c>
 800a59c:	2104      	movs	r1, #4
 800a59e:	4638      	mov	r0, r7
 800a5a0:	f7ff ff62 	bl	800a468 <__sfmoreglue>
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	6030      	str	r0, [r6, #0]
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	d1d5      	bne.n	800a558 <__sfp+0x24>
 800a5ac:	f7ff ff78 	bl	800a4a0 <__sfp_lock_release>
 800a5b0:	230c      	movs	r3, #12
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	e7ee      	b.n	800a594 <__sfp+0x60>
 800a5b6:	bf00      	nop
 800a5b8:	0800c8cc 	.word	0x0800c8cc
 800a5bc:	ffff0001 	.word	0xffff0001

0800a5c0 <fiprintf>:
 800a5c0:	b40e      	push	{r1, r2, r3}
 800a5c2:	b503      	push	{r0, r1, lr}
 800a5c4:	4601      	mov	r1, r0
 800a5c6:	ab03      	add	r3, sp, #12
 800a5c8:	4805      	ldr	r0, [pc, #20]	; (800a5e0 <fiprintf+0x20>)
 800a5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ce:	6800      	ldr	r0, [r0, #0]
 800a5d0:	9301      	str	r3, [sp, #4]
 800a5d2:	f000 f85f 	bl	800a694 <_vfiprintf_r>
 800a5d6:	b002      	add	sp, #8
 800a5d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5dc:	b003      	add	sp, #12
 800a5de:	4770      	bx	lr
 800a5e0:	20000010 	.word	0x20000010

0800a5e4 <_fwalk_reent>:
 800a5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e8:	4606      	mov	r6, r0
 800a5ea:	4688      	mov	r8, r1
 800a5ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5f0:	2700      	movs	r7, #0
 800a5f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5f6:	f1b9 0901 	subs.w	r9, r9, #1
 800a5fa:	d505      	bpl.n	800a608 <_fwalk_reent+0x24>
 800a5fc:	6824      	ldr	r4, [r4, #0]
 800a5fe:	2c00      	cmp	r4, #0
 800a600:	d1f7      	bne.n	800a5f2 <_fwalk_reent+0xe>
 800a602:	4638      	mov	r0, r7
 800a604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a608:	89ab      	ldrh	r3, [r5, #12]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d907      	bls.n	800a61e <_fwalk_reent+0x3a>
 800a60e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a612:	3301      	adds	r3, #1
 800a614:	d003      	beq.n	800a61e <_fwalk_reent+0x3a>
 800a616:	4629      	mov	r1, r5
 800a618:	4630      	mov	r0, r6
 800a61a:	47c0      	blx	r8
 800a61c:	4307      	orrs	r7, r0
 800a61e:	3568      	adds	r5, #104	; 0x68
 800a620:	e7e9      	b.n	800a5f6 <_fwalk_reent+0x12>

0800a622 <__retarget_lock_init_recursive>:
 800a622:	4770      	bx	lr

0800a624 <__retarget_lock_acquire_recursive>:
 800a624:	4770      	bx	lr

0800a626 <__retarget_lock_release_recursive>:
 800a626:	4770      	bx	lr

0800a628 <__malloc_lock>:
 800a628:	4801      	ldr	r0, [pc, #4]	; (800a630 <__malloc_lock+0x8>)
 800a62a:	f7ff bffb 	b.w	800a624 <__retarget_lock_acquire_recursive>
 800a62e:	bf00      	nop
 800a630:	20006700 	.word	0x20006700

0800a634 <__malloc_unlock>:
 800a634:	4801      	ldr	r0, [pc, #4]	; (800a63c <__malloc_unlock+0x8>)
 800a636:	f7ff bff6 	b.w	800a626 <__retarget_lock_release_recursive>
 800a63a:	bf00      	nop
 800a63c:	20006700 	.word	0x20006700

0800a640 <__sfputc_r>:
 800a640:	6893      	ldr	r3, [r2, #8]
 800a642:	3b01      	subs	r3, #1
 800a644:	2b00      	cmp	r3, #0
 800a646:	b410      	push	{r4}
 800a648:	6093      	str	r3, [r2, #8]
 800a64a:	da08      	bge.n	800a65e <__sfputc_r+0x1e>
 800a64c:	6994      	ldr	r4, [r2, #24]
 800a64e:	42a3      	cmp	r3, r4
 800a650:	db01      	blt.n	800a656 <__sfputc_r+0x16>
 800a652:	290a      	cmp	r1, #10
 800a654:	d103      	bne.n	800a65e <__sfputc_r+0x1e>
 800a656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a65a:	f000 bb23 	b.w	800aca4 <__swbuf_r>
 800a65e:	6813      	ldr	r3, [r2, #0]
 800a660:	1c58      	adds	r0, r3, #1
 800a662:	6010      	str	r0, [r2, #0]
 800a664:	7019      	strb	r1, [r3, #0]
 800a666:	4608      	mov	r0, r1
 800a668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <__sfputs_r>:
 800a66e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a670:	4606      	mov	r6, r0
 800a672:	460f      	mov	r7, r1
 800a674:	4614      	mov	r4, r2
 800a676:	18d5      	adds	r5, r2, r3
 800a678:	42ac      	cmp	r4, r5
 800a67a:	d101      	bne.n	800a680 <__sfputs_r+0x12>
 800a67c:	2000      	movs	r0, #0
 800a67e:	e007      	b.n	800a690 <__sfputs_r+0x22>
 800a680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a684:	463a      	mov	r2, r7
 800a686:	4630      	mov	r0, r6
 800a688:	f7ff ffda 	bl	800a640 <__sfputc_r>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d1f3      	bne.n	800a678 <__sfputs_r+0xa>
 800a690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a694 <_vfiprintf_r>:
 800a694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a698:	460d      	mov	r5, r1
 800a69a:	b09d      	sub	sp, #116	; 0x74
 800a69c:	4614      	mov	r4, r2
 800a69e:	4698      	mov	r8, r3
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	b118      	cbz	r0, 800a6ac <_vfiprintf_r+0x18>
 800a6a4:	6983      	ldr	r3, [r0, #24]
 800a6a6:	b90b      	cbnz	r3, 800a6ac <_vfiprintf_r+0x18>
 800a6a8:	f7ff ff0c 	bl	800a4c4 <__sinit>
 800a6ac:	4b89      	ldr	r3, [pc, #548]	; (800a8d4 <_vfiprintf_r+0x240>)
 800a6ae:	429d      	cmp	r5, r3
 800a6b0:	d11b      	bne.n	800a6ea <_vfiprintf_r+0x56>
 800a6b2:	6875      	ldr	r5, [r6, #4]
 800a6b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6b6:	07d9      	lsls	r1, r3, #31
 800a6b8:	d405      	bmi.n	800a6c6 <_vfiprintf_r+0x32>
 800a6ba:	89ab      	ldrh	r3, [r5, #12]
 800a6bc:	059a      	lsls	r2, r3, #22
 800a6be:	d402      	bmi.n	800a6c6 <_vfiprintf_r+0x32>
 800a6c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6c2:	f7ff ffaf 	bl	800a624 <__retarget_lock_acquire_recursive>
 800a6c6:	89ab      	ldrh	r3, [r5, #12]
 800a6c8:	071b      	lsls	r3, r3, #28
 800a6ca:	d501      	bpl.n	800a6d0 <_vfiprintf_r+0x3c>
 800a6cc:	692b      	ldr	r3, [r5, #16]
 800a6ce:	b9eb      	cbnz	r3, 800a70c <_vfiprintf_r+0x78>
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f000 fb4a 	bl	800ad6c <__swsetup_r>
 800a6d8:	b1c0      	cbz	r0, 800a70c <_vfiprintf_r+0x78>
 800a6da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6dc:	07dc      	lsls	r4, r3, #31
 800a6de:	d50e      	bpl.n	800a6fe <_vfiprintf_r+0x6a>
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e4:	b01d      	add	sp, #116	; 0x74
 800a6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ea:	4b7b      	ldr	r3, [pc, #492]	; (800a8d8 <_vfiprintf_r+0x244>)
 800a6ec:	429d      	cmp	r5, r3
 800a6ee:	d101      	bne.n	800a6f4 <_vfiprintf_r+0x60>
 800a6f0:	68b5      	ldr	r5, [r6, #8]
 800a6f2:	e7df      	b.n	800a6b4 <_vfiprintf_r+0x20>
 800a6f4:	4b79      	ldr	r3, [pc, #484]	; (800a8dc <_vfiprintf_r+0x248>)
 800a6f6:	429d      	cmp	r5, r3
 800a6f8:	bf08      	it	eq
 800a6fa:	68f5      	ldreq	r5, [r6, #12]
 800a6fc:	e7da      	b.n	800a6b4 <_vfiprintf_r+0x20>
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	0598      	lsls	r0, r3, #22
 800a702:	d4ed      	bmi.n	800a6e0 <_vfiprintf_r+0x4c>
 800a704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a706:	f7ff ff8e 	bl	800a626 <__retarget_lock_release_recursive>
 800a70a:	e7e9      	b.n	800a6e0 <_vfiprintf_r+0x4c>
 800a70c:	2300      	movs	r3, #0
 800a70e:	9309      	str	r3, [sp, #36]	; 0x24
 800a710:	2320      	movs	r3, #32
 800a712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a716:	f8cd 800c 	str.w	r8, [sp, #12]
 800a71a:	2330      	movs	r3, #48	; 0x30
 800a71c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8e0 <_vfiprintf_r+0x24c>
 800a720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a724:	f04f 0901 	mov.w	r9, #1
 800a728:	4623      	mov	r3, r4
 800a72a:	469a      	mov	sl, r3
 800a72c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a730:	b10a      	cbz	r2, 800a736 <_vfiprintf_r+0xa2>
 800a732:	2a25      	cmp	r2, #37	; 0x25
 800a734:	d1f9      	bne.n	800a72a <_vfiprintf_r+0x96>
 800a736:	ebba 0b04 	subs.w	fp, sl, r4
 800a73a:	d00b      	beq.n	800a754 <_vfiprintf_r+0xc0>
 800a73c:	465b      	mov	r3, fp
 800a73e:	4622      	mov	r2, r4
 800a740:	4629      	mov	r1, r5
 800a742:	4630      	mov	r0, r6
 800a744:	f7ff ff93 	bl	800a66e <__sfputs_r>
 800a748:	3001      	adds	r0, #1
 800a74a:	f000 80aa 	beq.w	800a8a2 <_vfiprintf_r+0x20e>
 800a74e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a750:	445a      	add	r2, fp
 800a752:	9209      	str	r2, [sp, #36]	; 0x24
 800a754:	f89a 3000 	ldrb.w	r3, [sl]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 80a2 	beq.w	800a8a2 <_vfiprintf_r+0x20e>
 800a75e:	2300      	movs	r3, #0
 800a760:	f04f 32ff 	mov.w	r2, #4294967295
 800a764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a768:	f10a 0a01 	add.w	sl, sl, #1
 800a76c:	9304      	str	r3, [sp, #16]
 800a76e:	9307      	str	r3, [sp, #28]
 800a770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a774:	931a      	str	r3, [sp, #104]	; 0x68
 800a776:	4654      	mov	r4, sl
 800a778:	2205      	movs	r2, #5
 800a77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77e:	4858      	ldr	r0, [pc, #352]	; (800a8e0 <_vfiprintf_r+0x24c>)
 800a780:	f7f5 fd46 	bl	8000210 <memchr>
 800a784:	9a04      	ldr	r2, [sp, #16]
 800a786:	b9d8      	cbnz	r0, 800a7c0 <_vfiprintf_r+0x12c>
 800a788:	06d1      	lsls	r1, r2, #27
 800a78a:	bf44      	itt	mi
 800a78c:	2320      	movmi	r3, #32
 800a78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a792:	0713      	lsls	r3, r2, #28
 800a794:	bf44      	itt	mi
 800a796:	232b      	movmi	r3, #43	; 0x2b
 800a798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a79c:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a7a2:	d015      	beq.n	800a7d0 <_vfiprintf_r+0x13c>
 800a7a4:	9a07      	ldr	r2, [sp, #28]
 800a7a6:	4654      	mov	r4, sl
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	f04f 0c0a 	mov.w	ip, #10
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7b4:	3b30      	subs	r3, #48	; 0x30
 800a7b6:	2b09      	cmp	r3, #9
 800a7b8:	d94e      	bls.n	800a858 <_vfiprintf_r+0x1c4>
 800a7ba:	b1b0      	cbz	r0, 800a7ea <_vfiprintf_r+0x156>
 800a7bc:	9207      	str	r2, [sp, #28]
 800a7be:	e014      	b.n	800a7ea <_vfiprintf_r+0x156>
 800a7c0:	eba0 0308 	sub.w	r3, r0, r8
 800a7c4:	fa09 f303 	lsl.w	r3, r9, r3
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	46a2      	mov	sl, r4
 800a7ce:	e7d2      	b.n	800a776 <_vfiprintf_r+0xe2>
 800a7d0:	9b03      	ldr	r3, [sp, #12]
 800a7d2:	1d19      	adds	r1, r3, #4
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	9103      	str	r1, [sp, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bfbb      	ittet	lt
 800a7dc:	425b      	neglt	r3, r3
 800a7de:	f042 0202 	orrlt.w	r2, r2, #2
 800a7e2:	9307      	strge	r3, [sp, #28]
 800a7e4:	9307      	strlt	r3, [sp, #28]
 800a7e6:	bfb8      	it	lt
 800a7e8:	9204      	strlt	r2, [sp, #16]
 800a7ea:	7823      	ldrb	r3, [r4, #0]
 800a7ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ee:	d10c      	bne.n	800a80a <_vfiprintf_r+0x176>
 800a7f0:	7863      	ldrb	r3, [r4, #1]
 800a7f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f4:	d135      	bne.n	800a862 <_vfiprintf_r+0x1ce>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	1d1a      	adds	r2, r3, #4
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	9203      	str	r2, [sp, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	bfb8      	it	lt
 800a802:	f04f 33ff 	movlt.w	r3, #4294967295
 800a806:	3402      	adds	r4, #2
 800a808:	9305      	str	r3, [sp, #20]
 800a80a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8f0 <_vfiprintf_r+0x25c>
 800a80e:	7821      	ldrb	r1, [r4, #0]
 800a810:	2203      	movs	r2, #3
 800a812:	4650      	mov	r0, sl
 800a814:	f7f5 fcfc 	bl	8000210 <memchr>
 800a818:	b140      	cbz	r0, 800a82c <_vfiprintf_r+0x198>
 800a81a:	2340      	movs	r3, #64	; 0x40
 800a81c:	eba0 000a 	sub.w	r0, r0, sl
 800a820:	fa03 f000 	lsl.w	r0, r3, r0
 800a824:	9b04      	ldr	r3, [sp, #16]
 800a826:	4303      	orrs	r3, r0
 800a828:	3401      	adds	r4, #1
 800a82a:	9304      	str	r3, [sp, #16]
 800a82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a830:	482c      	ldr	r0, [pc, #176]	; (800a8e4 <_vfiprintf_r+0x250>)
 800a832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a836:	2206      	movs	r2, #6
 800a838:	f7f5 fcea 	bl	8000210 <memchr>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d03f      	beq.n	800a8c0 <_vfiprintf_r+0x22c>
 800a840:	4b29      	ldr	r3, [pc, #164]	; (800a8e8 <_vfiprintf_r+0x254>)
 800a842:	bb1b      	cbnz	r3, 800a88c <_vfiprintf_r+0x1f8>
 800a844:	9b03      	ldr	r3, [sp, #12]
 800a846:	3307      	adds	r3, #7
 800a848:	f023 0307 	bic.w	r3, r3, #7
 800a84c:	3308      	adds	r3, #8
 800a84e:	9303      	str	r3, [sp, #12]
 800a850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a852:	443b      	add	r3, r7
 800a854:	9309      	str	r3, [sp, #36]	; 0x24
 800a856:	e767      	b.n	800a728 <_vfiprintf_r+0x94>
 800a858:	fb0c 3202 	mla	r2, ip, r2, r3
 800a85c:	460c      	mov	r4, r1
 800a85e:	2001      	movs	r0, #1
 800a860:	e7a5      	b.n	800a7ae <_vfiprintf_r+0x11a>
 800a862:	2300      	movs	r3, #0
 800a864:	3401      	adds	r4, #1
 800a866:	9305      	str	r3, [sp, #20]
 800a868:	4619      	mov	r1, r3
 800a86a:	f04f 0c0a 	mov.w	ip, #10
 800a86e:	4620      	mov	r0, r4
 800a870:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a874:	3a30      	subs	r2, #48	; 0x30
 800a876:	2a09      	cmp	r2, #9
 800a878:	d903      	bls.n	800a882 <_vfiprintf_r+0x1ee>
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d0c5      	beq.n	800a80a <_vfiprintf_r+0x176>
 800a87e:	9105      	str	r1, [sp, #20]
 800a880:	e7c3      	b.n	800a80a <_vfiprintf_r+0x176>
 800a882:	fb0c 2101 	mla	r1, ip, r1, r2
 800a886:	4604      	mov	r4, r0
 800a888:	2301      	movs	r3, #1
 800a88a:	e7f0      	b.n	800a86e <_vfiprintf_r+0x1da>
 800a88c:	ab03      	add	r3, sp, #12
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	462a      	mov	r2, r5
 800a892:	4b16      	ldr	r3, [pc, #88]	; (800a8ec <_vfiprintf_r+0x258>)
 800a894:	a904      	add	r1, sp, #16
 800a896:	4630      	mov	r0, r6
 800a898:	f3af 8000 	nop.w
 800a89c:	4607      	mov	r7, r0
 800a89e:	1c78      	adds	r0, r7, #1
 800a8a0:	d1d6      	bne.n	800a850 <_vfiprintf_r+0x1bc>
 800a8a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8a4:	07d9      	lsls	r1, r3, #31
 800a8a6:	d405      	bmi.n	800a8b4 <_vfiprintf_r+0x220>
 800a8a8:	89ab      	ldrh	r3, [r5, #12]
 800a8aa:	059a      	lsls	r2, r3, #22
 800a8ac:	d402      	bmi.n	800a8b4 <_vfiprintf_r+0x220>
 800a8ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8b0:	f7ff feb9 	bl	800a626 <__retarget_lock_release_recursive>
 800a8b4:	89ab      	ldrh	r3, [r5, #12]
 800a8b6:	065b      	lsls	r3, r3, #25
 800a8b8:	f53f af12 	bmi.w	800a6e0 <_vfiprintf_r+0x4c>
 800a8bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8be:	e711      	b.n	800a6e4 <_vfiprintf_r+0x50>
 800a8c0:	ab03      	add	r3, sp, #12
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	462a      	mov	r2, r5
 800a8c6:	4b09      	ldr	r3, [pc, #36]	; (800a8ec <_vfiprintf_r+0x258>)
 800a8c8:	a904      	add	r1, sp, #16
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	f000 f880 	bl	800a9d0 <_printf_i>
 800a8d0:	e7e4      	b.n	800a89c <_vfiprintf_r+0x208>
 800a8d2:	bf00      	nop
 800a8d4:	0800c9a4 	.word	0x0800c9a4
 800a8d8:	0800c9c4 	.word	0x0800c9c4
 800a8dc:	0800c984 	.word	0x0800c984
 800a8e0:	0800c9e4 	.word	0x0800c9e4
 800a8e4:	0800c9ee 	.word	0x0800c9ee
 800a8e8:	00000000 	.word	0x00000000
 800a8ec:	0800a66f 	.word	0x0800a66f
 800a8f0:	0800c9ea 	.word	0x0800c9ea

0800a8f4 <_printf_common>:
 800a8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f8:	4616      	mov	r6, r2
 800a8fa:	4699      	mov	r9, r3
 800a8fc:	688a      	ldr	r2, [r1, #8]
 800a8fe:	690b      	ldr	r3, [r1, #16]
 800a900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a904:	4293      	cmp	r3, r2
 800a906:	bfb8      	it	lt
 800a908:	4613      	movlt	r3, r2
 800a90a:	6033      	str	r3, [r6, #0]
 800a90c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a910:	4607      	mov	r7, r0
 800a912:	460c      	mov	r4, r1
 800a914:	b10a      	cbz	r2, 800a91a <_printf_common+0x26>
 800a916:	3301      	adds	r3, #1
 800a918:	6033      	str	r3, [r6, #0]
 800a91a:	6823      	ldr	r3, [r4, #0]
 800a91c:	0699      	lsls	r1, r3, #26
 800a91e:	bf42      	ittt	mi
 800a920:	6833      	ldrmi	r3, [r6, #0]
 800a922:	3302      	addmi	r3, #2
 800a924:	6033      	strmi	r3, [r6, #0]
 800a926:	6825      	ldr	r5, [r4, #0]
 800a928:	f015 0506 	ands.w	r5, r5, #6
 800a92c:	d106      	bne.n	800a93c <_printf_common+0x48>
 800a92e:	f104 0a19 	add.w	sl, r4, #25
 800a932:	68e3      	ldr	r3, [r4, #12]
 800a934:	6832      	ldr	r2, [r6, #0]
 800a936:	1a9b      	subs	r3, r3, r2
 800a938:	42ab      	cmp	r3, r5
 800a93a:	dc26      	bgt.n	800a98a <_printf_common+0x96>
 800a93c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a940:	1e13      	subs	r3, r2, #0
 800a942:	6822      	ldr	r2, [r4, #0]
 800a944:	bf18      	it	ne
 800a946:	2301      	movne	r3, #1
 800a948:	0692      	lsls	r2, r2, #26
 800a94a:	d42b      	bmi.n	800a9a4 <_printf_common+0xb0>
 800a94c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a950:	4649      	mov	r1, r9
 800a952:	4638      	mov	r0, r7
 800a954:	47c0      	blx	r8
 800a956:	3001      	adds	r0, #1
 800a958:	d01e      	beq.n	800a998 <_printf_common+0xa4>
 800a95a:	6823      	ldr	r3, [r4, #0]
 800a95c:	68e5      	ldr	r5, [r4, #12]
 800a95e:	6832      	ldr	r2, [r6, #0]
 800a960:	f003 0306 	and.w	r3, r3, #6
 800a964:	2b04      	cmp	r3, #4
 800a966:	bf08      	it	eq
 800a968:	1aad      	subeq	r5, r5, r2
 800a96a:	68a3      	ldr	r3, [r4, #8]
 800a96c:	6922      	ldr	r2, [r4, #16]
 800a96e:	bf0c      	ite	eq
 800a970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a974:	2500      	movne	r5, #0
 800a976:	4293      	cmp	r3, r2
 800a978:	bfc4      	itt	gt
 800a97a:	1a9b      	subgt	r3, r3, r2
 800a97c:	18ed      	addgt	r5, r5, r3
 800a97e:	2600      	movs	r6, #0
 800a980:	341a      	adds	r4, #26
 800a982:	42b5      	cmp	r5, r6
 800a984:	d11a      	bne.n	800a9bc <_printf_common+0xc8>
 800a986:	2000      	movs	r0, #0
 800a988:	e008      	b.n	800a99c <_printf_common+0xa8>
 800a98a:	2301      	movs	r3, #1
 800a98c:	4652      	mov	r2, sl
 800a98e:	4649      	mov	r1, r9
 800a990:	4638      	mov	r0, r7
 800a992:	47c0      	blx	r8
 800a994:	3001      	adds	r0, #1
 800a996:	d103      	bne.n	800a9a0 <_printf_common+0xac>
 800a998:	f04f 30ff 	mov.w	r0, #4294967295
 800a99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a0:	3501      	adds	r5, #1
 800a9a2:	e7c6      	b.n	800a932 <_printf_common+0x3e>
 800a9a4:	18e1      	adds	r1, r4, r3
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	2030      	movs	r0, #48	; 0x30
 800a9aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9ae:	4422      	add	r2, r4
 800a9b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9b8:	3302      	adds	r3, #2
 800a9ba:	e7c7      	b.n	800a94c <_printf_common+0x58>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	4622      	mov	r2, r4
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	4638      	mov	r0, r7
 800a9c4:	47c0      	blx	r8
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	d0e6      	beq.n	800a998 <_printf_common+0xa4>
 800a9ca:	3601      	adds	r6, #1
 800a9cc:	e7d9      	b.n	800a982 <_printf_common+0x8e>
	...

0800a9d0 <_printf_i>:
 800a9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	4691      	mov	r9, r2
 800a9d8:	7e27      	ldrb	r7, [r4, #24]
 800a9da:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a9dc:	2f78      	cmp	r7, #120	; 0x78
 800a9de:	4680      	mov	r8, r0
 800a9e0:	469a      	mov	sl, r3
 800a9e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9e6:	d807      	bhi.n	800a9f8 <_printf_i+0x28>
 800a9e8:	2f62      	cmp	r7, #98	; 0x62
 800a9ea:	d80a      	bhi.n	800aa02 <_printf_i+0x32>
 800a9ec:	2f00      	cmp	r7, #0
 800a9ee:	f000 80d8 	beq.w	800aba2 <_printf_i+0x1d2>
 800a9f2:	2f58      	cmp	r7, #88	; 0x58
 800a9f4:	f000 80a3 	beq.w	800ab3e <_printf_i+0x16e>
 800a9f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a9fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa00:	e03a      	b.n	800aa78 <_printf_i+0xa8>
 800aa02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa06:	2b15      	cmp	r3, #21
 800aa08:	d8f6      	bhi.n	800a9f8 <_printf_i+0x28>
 800aa0a:	a001      	add	r0, pc, #4	; (adr r0, 800aa10 <_printf_i+0x40>)
 800aa0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aa10:	0800aa69 	.word	0x0800aa69
 800aa14:	0800aa7d 	.word	0x0800aa7d
 800aa18:	0800a9f9 	.word	0x0800a9f9
 800aa1c:	0800a9f9 	.word	0x0800a9f9
 800aa20:	0800a9f9 	.word	0x0800a9f9
 800aa24:	0800a9f9 	.word	0x0800a9f9
 800aa28:	0800aa7d 	.word	0x0800aa7d
 800aa2c:	0800a9f9 	.word	0x0800a9f9
 800aa30:	0800a9f9 	.word	0x0800a9f9
 800aa34:	0800a9f9 	.word	0x0800a9f9
 800aa38:	0800a9f9 	.word	0x0800a9f9
 800aa3c:	0800ab89 	.word	0x0800ab89
 800aa40:	0800aaad 	.word	0x0800aaad
 800aa44:	0800ab6b 	.word	0x0800ab6b
 800aa48:	0800a9f9 	.word	0x0800a9f9
 800aa4c:	0800a9f9 	.word	0x0800a9f9
 800aa50:	0800abab 	.word	0x0800abab
 800aa54:	0800a9f9 	.word	0x0800a9f9
 800aa58:	0800aaad 	.word	0x0800aaad
 800aa5c:	0800a9f9 	.word	0x0800a9f9
 800aa60:	0800a9f9 	.word	0x0800a9f9
 800aa64:	0800ab73 	.word	0x0800ab73
 800aa68:	680b      	ldr	r3, [r1, #0]
 800aa6a:	1d1a      	adds	r2, r3, #4
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	600a      	str	r2, [r1, #0]
 800aa70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e0a3      	b.n	800abc4 <_printf_i+0x1f4>
 800aa7c:	6825      	ldr	r5, [r4, #0]
 800aa7e:	6808      	ldr	r0, [r1, #0]
 800aa80:	062e      	lsls	r6, r5, #24
 800aa82:	f100 0304 	add.w	r3, r0, #4
 800aa86:	d50a      	bpl.n	800aa9e <_printf_i+0xce>
 800aa88:	6805      	ldr	r5, [r0, #0]
 800aa8a:	600b      	str	r3, [r1, #0]
 800aa8c:	2d00      	cmp	r5, #0
 800aa8e:	da03      	bge.n	800aa98 <_printf_i+0xc8>
 800aa90:	232d      	movs	r3, #45	; 0x2d
 800aa92:	426d      	negs	r5, r5
 800aa94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa98:	485e      	ldr	r0, [pc, #376]	; (800ac14 <_printf_i+0x244>)
 800aa9a:	230a      	movs	r3, #10
 800aa9c:	e019      	b.n	800aad2 <_printf_i+0x102>
 800aa9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800aaa2:	6805      	ldr	r5, [r0, #0]
 800aaa4:	600b      	str	r3, [r1, #0]
 800aaa6:	bf18      	it	ne
 800aaa8:	b22d      	sxthne	r5, r5
 800aaaa:	e7ef      	b.n	800aa8c <_printf_i+0xbc>
 800aaac:	680b      	ldr	r3, [r1, #0]
 800aaae:	6825      	ldr	r5, [r4, #0]
 800aab0:	1d18      	adds	r0, r3, #4
 800aab2:	6008      	str	r0, [r1, #0]
 800aab4:	0628      	lsls	r0, r5, #24
 800aab6:	d501      	bpl.n	800aabc <_printf_i+0xec>
 800aab8:	681d      	ldr	r5, [r3, #0]
 800aaba:	e002      	b.n	800aac2 <_printf_i+0xf2>
 800aabc:	0669      	lsls	r1, r5, #25
 800aabe:	d5fb      	bpl.n	800aab8 <_printf_i+0xe8>
 800aac0:	881d      	ldrh	r5, [r3, #0]
 800aac2:	4854      	ldr	r0, [pc, #336]	; (800ac14 <_printf_i+0x244>)
 800aac4:	2f6f      	cmp	r7, #111	; 0x6f
 800aac6:	bf0c      	ite	eq
 800aac8:	2308      	moveq	r3, #8
 800aaca:	230a      	movne	r3, #10
 800aacc:	2100      	movs	r1, #0
 800aace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aad2:	6866      	ldr	r6, [r4, #4]
 800aad4:	60a6      	str	r6, [r4, #8]
 800aad6:	2e00      	cmp	r6, #0
 800aad8:	bfa2      	ittt	ge
 800aada:	6821      	ldrge	r1, [r4, #0]
 800aadc:	f021 0104 	bicge.w	r1, r1, #4
 800aae0:	6021      	strge	r1, [r4, #0]
 800aae2:	b90d      	cbnz	r5, 800aae8 <_printf_i+0x118>
 800aae4:	2e00      	cmp	r6, #0
 800aae6:	d04d      	beq.n	800ab84 <_printf_i+0x1b4>
 800aae8:	4616      	mov	r6, r2
 800aaea:	fbb5 f1f3 	udiv	r1, r5, r3
 800aaee:	fb03 5711 	mls	r7, r3, r1, r5
 800aaf2:	5dc7      	ldrb	r7, [r0, r7]
 800aaf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aaf8:	462f      	mov	r7, r5
 800aafa:	42bb      	cmp	r3, r7
 800aafc:	460d      	mov	r5, r1
 800aafe:	d9f4      	bls.n	800aaea <_printf_i+0x11a>
 800ab00:	2b08      	cmp	r3, #8
 800ab02:	d10b      	bne.n	800ab1c <_printf_i+0x14c>
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	07df      	lsls	r7, r3, #31
 800ab08:	d508      	bpl.n	800ab1c <_printf_i+0x14c>
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	6861      	ldr	r1, [r4, #4]
 800ab0e:	4299      	cmp	r1, r3
 800ab10:	bfde      	ittt	le
 800ab12:	2330      	movle	r3, #48	; 0x30
 800ab14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab1c:	1b92      	subs	r2, r2, r6
 800ab1e:	6122      	str	r2, [r4, #16]
 800ab20:	f8cd a000 	str.w	sl, [sp]
 800ab24:	464b      	mov	r3, r9
 800ab26:	aa03      	add	r2, sp, #12
 800ab28:	4621      	mov	r1, r4
 800ab2a:	4640      	mov	r0, r8
 800ab2c:	f7ff fee2 	bl	800a8f4 <_printf_common>
 800ab30:	3001      	adds	r0, #1
 800ab32:	d14c      	bne.n	800abce <_printf_i+0x1fe>
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	b004      	add	sp, #16
 800ab3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab3e:	4835      	ldr	r0, [pc, #212]	; (800ac14 <_printf_i+0x244>)
 800ab40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	680e      	ldr	r6, [r1, #0]
 800ab48:	061f      	lsls	r7, r3, #24
 800ab4a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ab4e:	600e      	str	r6, [r1, #0]
 800ab50:	d514      	bpl.n	800ab7c <_printf_i+0x1ac>
 800ab52:	07d9      	lsls	r1, r3, #31
 800ab54:	bf44      	itt	mi
 800ab56:	f043 0320 	orrmi.w	r3, r3, #32
 800ab5a:	6023      	strmi	r3, [r4, #0]
 800ab5c:	b91d      	cbnz	r5, 800ab66 <_printf_i+0x196>
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	f023 0320 	bic.w	r3, r3, #32
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	2310      	movs	r3, #16
 800ab68:	e7b0      	b.n	800aacc <_printf_i+0xfc>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	f043 0320 	orr.w	r3, r3, #32
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	2378      	movs	r3, #120	; 0x78
 800ab74:	4828      	ldr	r0, [pc, #160]	; (800ac18 <_printf_i+0x248>)
 800ab76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab7a:	e7e3      	b.n	800ab44 <_printf_i+0x174>
 800ab7c:	065e      	lsls	r6, r3, #25
 800ab7e:	bf48      	it	mi
 800ab80:	b2ad      	uxthmi	r5, r5
 800ab82:	e7e6      	b.n	800ab52 <_printf_i+0x182>
 800ab84:	4616      	mov	r6, r2
 800ab86:	e7bb      	b.n	800ab00 <_printf_i+0x130>
 800ab88:	680b      	ldr	r3, [r1, #0]
 800ab8a:	6826      	ldr	r6, [r4, #0]
 800ab8c:	6960      	ldr	r0, [r4, #20]
 800ab8e:	1d1d      	adds	r5, r3, #4
 800ab90:	600d      	str	r5, [r1, #0]
 800ab92:	0635      	lsls	r5, r6, #24
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	d501      	bpl.n	800ab9c <_printf_i+0x1cc>
 800ab98:	6018      	str	r0, [r3, #0]
 800ab9a:	e002      	b.n	800aba2 <_printf_i+0x1d2>
 800ab9c:	0671      	lsls	r1, r6, #25
 800ab9e:	d5fb      	bpl.n	800ab98 <_printf_i+0x1c8>
 800aba0:	8018      	strh	r0, [r3, #0]
 800aba2:	2300      	movs	r3, #0
 800aba4:	6123      	str	r3, [r4, #16]
 800aba6:	4616      	mov	r6, r2
 800aba8:	e7ba      	b.n	800ab20 <_printf_i+0x150>
 800abaa:	680b      	ldr	r3, [r1, #0]
 800abac:	1d1a      	adds	r2, r3, #4
 800abae:	600a      	str	r2, [r1, #0]
 800abb0:	681e      	ldr	r6, [r3, #0]
 800abb2:	6862      	ldr	r2, [r4, #4]
 800abb4:	2100      	movs	r1, #0
 800abb6:	4630      	mov	r0, r6
 800abb8:	f7f5 fb2a 	bl	8000210 <memchr>
 800abbc:	b108      	cbz	r0, 800abc2 <_printf_i+0x1f2>
 800abbe:	1b80      	subs	r0, r0, r6
 800abc0:	6060      	str	r0, [r4, #4]
 800abc2:	6863      	ldr	r3, [r4, #4]
 800abc4:	6123      	str	r3, [r4, #16]
 800abc6:	2300      	movs	r3, #0
 800abc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abcc:	e7a8      	b.n	800ab20 <_printf_i+0x150>
 800abce:	6923      	ldr	r3, [r4, #16]
 800abd0:	4632      	mov	r2, r6
 800abd2:	4649      	mov	r1, r9
 800abd4:	4640      	mov	r0, r8
 800abd6:	47d0      	blx	sl
 800abd8:	3001      	adds	r0, #1
 800abda:	d0ab      	beq.n	800ab34 <_printf_i+0x164>
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	079b      	lsls	r3, r3, #30
 800abe0:	d413      	bmi.n	800ac0a <_printf_i+0x23a>
 800abe2:	68e0      	ldr	r0, [r4, #12]
 800abe4:	9b03      	ldr	r3, [sp, #12]
 800abe6:	4298      	cmp	r0, r3
 800abe8:	bfb8      	it	lt
 800abea:	4618      	movlt	r0, r3
 800abec:	e7a4      	b.n	800ab38 <_printf_i+0x168>
 800abee:	2301      	movs	r3, #1
 800abf0:	4632      	mov	r2, r6
 800abf2:	4649      	mov	r1, r9
 800abf4:	4640      	mov	r0, r8
 800abf6:	47d0      	blx	sl
 800abf8:	3001      	adds	r0, #1
 800abfa:	d09b      	beq.n	800ab34 <_printf_i+0x164>
 800abfc:	3501      	adds	r5, #1
 800abfe:	68e3      	ldr	r3, [r4, #12]
 800ac00:	9903      	ldr	r1, [sp, #12]
 800ac02:	1a5b      	subs	r3, r3, r1
 800ac04:	42ab      	cmp	r3, r5
 800ac06:	dcf2      	bgt.n	800abee <_printf_i+0x21e>
 800ac08:	e7eb      	b.n	800abe2 <_printf_i+0x212>
 800ac0a:	2500      	movs	r5, #0
 800ac0c:	f104 0619 	add.w	r6, r4, #25
 800ac10:	e7f5      	b.n	800abfe <_printf_i+0x22e>
 800ac12:	bf00      	nop
 800ac14:	0800c9f5 	.word	0x0800c9f5
 800ac18:	0800ca06 	.word	0x0800ca06

0800ac1c <__sread>:
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	460c      	mov	r4, r1
 800ac20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac24:	f000 fa60 	bl	800b0e8 <_read_r>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	bfab      	itete	ge
 800ac2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac2e:	89a3      	ldrhlt	r3, [r4, #12]
 800ac30:	181b      	addge	r3, r3, r0
 800ac32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac36:	bfac      	ite	ge
 800ac38:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac3a:	81a3      	strhlt	r3, [r4, #12]
 800ac3c:	bd10      	pop	{r4, pc}

0800ac3e <__swrite>:
 800ac3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac42:	461f      	mov	r7, r3
 800ac44:	898b      	ldrh	r3, [r1, #12]
 800ac46:	05db      	lsls	r3, r3, #23
 800ac48:	4605      	mov	r5, r0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	4616      	mov	r6, r2
 800ac4e:	d505      	bpl.n	800ac5c <__swrite+0x1e>
 800ac50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac54:	2302      	movs	r3, #2
 800ac56:	2200      	movs	r2, #0
 800ac58:	f000 f9d0 	bl	800affc <_lseek_r>
 800ac5c:	89a3      	ldrh	r3, [r4, #12]
 800ac5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac66:	81a3      	strh	r3, [r4, #12]
 800ac68:	4632      	mov	r2, r6
 800ac6a:	463b      	mov	r3, r7
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac72:	f000 b869 	b.w	800ad48 <_write_r>

0800ac76 <__sseek>:
 800ac76:	b510      	push	{r4, lr}
 800ac78:	460c      	mov	r4, r1
 800ac7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac7e:	f000 f9bd 	bl	800affc <_lseek_r>
 800ac82:	1c43      	adds	r3, r0, #1
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	bf15      	itete	ne
 800ac88:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac92:	81a3      	strheq	r3, [r4, #12]
 800ac94:	bf18      	it	ne
 800ac96:	81a3      	strhne	r3, [r4, #12]
 800ac98:	bd10      	pop	{r4, pc}

0800ac9a <__sclose>:
 800ac9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac9e:	f000 b8db 	b.w	800ae58 <_close_r>
	...

0800aca4 <__swbuf_r>:
 800aca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca6:	460e      	mov	r6, r1
 800aca8:	4614      	mov	r4, r2
 800acaa:	4605      	mov	r5, r0
 800acac:	b118      	cbz	r0, 800acb6 <__swbuf_r+0x12>
 800acae:	6983      	ldr	r3, [r0, #24]
 800acb0:	b90b      	cbnz	r3, 800acb6 <__swbuf_r+0x12>
 800acb2:	f7ff fc07 	bl	800a4c4 <__sinit>
 800acb6:	4b21      	ldr	r3, [pc, #132]	; (800ad3c <__swbuf_r+0x98>)
 800acb8:	429c      	cmp	r4, r3
 800acba:	d12b      	bne.n	800ad14 <__swbuf_r+0x70>
 800acbc:	686c      	ldr	r4, [r5, #4]
 800acbe:	69a3      	ldr	r3, [r4, #24]
 800acc0:	60a3      	str	r3, [r4, #8]
 800acc2:	89a3      	ldrh	r3, [r4, #12]
 800acc4:	071a      	lsls	r2, r3, #28
 800acc6:	d52f      	bpl.n	800ad28 <__swbuf_r+0x84>
 800acc8:	6923      	ldr	r3, [r4, #16]
 800acca:	b36b      	cbz	r3, 800ad28 <__swbuf_r+0x84>
 800accc:	6923      	ldr	r3, [r4, #16]
 800acce:	6820      	ldr	r0, [r4, #0]
 800acd0:	1ac0      	subs	r0, r0, r3
 800acd2:	6963      	ldr	r3, [r4, #20]
 800acd4:	b2f6      	uxtb	r6, r6
 800acd6:	4283      	cmp	r3, r0
 800acd8:	4637      	mov	r7, r6
 800acda:	dc04      	bgt.n	800ace6 <__swbuf_r+0x42>
 800acdc:	4621      	mov	r1, r4
 800acde:	4628      	mov	r0, r5
 800ace0:	f000 f950 	bl	800af84 <_fflush_r>
 800ace4:	bb30      	cbnz	r0, 800ad34 <__swbuf_r+0x90>
 800ace6:	68a3      	ldr	r3, [r4, #8]
 800ace8:	3b01      	subs	r3, #1
 800acea:	60a3      	str	r3, [r4, #8]
 800acec:	6823      	ldr	r3, [r4, #0]
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	6022      	str	r2, [r4, #0]
 800acf2:	701e      	strb	r6, [r3, #0]
 800acf4:	6963      	ldr	r3, [r4, #20]
 800acf6:	3001      	adds	r0, #1
 800acf8:	4283      	cmp	r3, r0
 800acfa:	d004      	beq.n	800ad06 <__swbuf_r+0x62>
 800acfc:	89a3      	ldrh	r3, [r4, #12]
 800acfe:	07db      	lsls	r3, r3, #31
 800ad00:	d506      	bpl.n	800ad10 <__swbuf_r+0x6c>
 800ad02:	2e0a      	cmp	r6, #10
 800ad04:	d104      	bne.n	800ad10 <__swbuf_r+0x6c>
 800ad06:	4621      	mov	r1, r4
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f000 f93b 	bl	800af84 <_fflush_r>
 800ad0e:	b988      	cbnz	r0, 800ad34 <__swbuf_r+0x90>
 800ad10:	4638      	mov	r0, r7
 800ad12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad14:	4b0a      	ldr	r3, [pc, #40]	; (800ad40 <__swbuf_r+0x9c>)
 800ad16:	429c      	cmp	r4, r3
 800ad18:	d101      	bne.n	800ad1e <__swbuf_r+0x7a>
 800ad1a:	68ac      	ldr	r4, [r5, #8]
 800ad1c:	e7cf      	b.n	800acbe <__swbuf_r+0x1a>
 800ad1e:	4b09      	ldr	r3, [pc, #36]	; (800ad44 <__swbuf_r+0xa0>)
 800ad20:	429c      	cmp	r4, r3
 800ad22:	bf08      	it	eq
 800ad24:	68ec      	ldreq	r4, [r5, #12]
 800ad26:	e7ca      	b.n	800acbe <__swbuf_r+0x1a>
 800ad28:	4621      	mov	r1, r4
 800ad2a:	4628      	mov	r0, r5
 800ad2c:	f000 f81e 	bl	800ad6c <__swsetup_r>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d0cb      	beq.n	800accc <__swbuf_r+0x28>
 800ad34:	f04f 37ff 	mov.w	r7, #4294967295
 800ad38:	e7ea      	b.n	800ad10 <__swbuf_r+0x6c>
 800ad3a:	bf00      	nop
 800ad3c:	0800c9a4 	.word	0x0800c9a4
 800ad40:	0800c9c4 	.word	0x0800c9c4
 800ad44:	0800c984 	.word	0x0800c984

0800ad48 <_write_r>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	4d07      	ldr	r5, [pc, #28]	; (800ad68 <_write_r+0x20>)
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	4608      	mov	r0, r1
 800ad50:	4611      	mov	r1, r2
 800ad52:	2200      	movs	r2, #0
 800ad54:	602a      	str	r2, [r5, #0]
 800ad56:	461a      	mov	r2, r3
 800ad58:	f7f6 fb21 	bl	800139e <_write>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d102      	bne.n	800ad66 <_write_r+0x1e>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <_write_r+0x1e>
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
 800ad68:	200066f8 	.word	0x200066f8

0800ad6c <__swsetup_r>:
 800ad6c:	4b32      	ldr	r3, [pc, #200]	; (800ae38 <__swsetup_r+0xcc>)
 800ad6e:	b570      	push	{r4, r5, r6, lr}
 800ad70:	681d      	ldr	r5, [r3, #0]
 800ad72:	4606      	mov	r6, r0
 800ad74:	460c      	mov	r4, r1
 800ad76:	b125      	cbz	r5, 800ad82 <__swsetup_r+0x16>
 800ad78:	69ab      	ldr	r3, [r5, #24]
 800ad7a:	b913      	cbnz	r3, 800ad82 <__swsetup_r+0x16>
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	f7ff fba1 	bl	800a4c4 <__sinit>
 800ad82:	4b2e      	ldr	r3, [pc, #184]	; (800ae3c <__swsetup_r+0xd0>)
 800ad84:	429c      	cmp	r4, r3
 800ad86:	d10f      	bne.n	800ada8 <__swsetup_r+0x3c>
 800ad88:	686c      	ldr	r4, [r5, #4]
 800ad8a:	89a3      	ldrh	r3, [r4, #12]
 800ad8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad90:	0719      	lsls	r1, r3, #28
 800ad92:	d42c      	bmi.n	800adee <__swsetup_r+0x82>
 800ad94:	06dd      	lsls	r5, r3, #27
 800ad96:	d411      	bmi.n	800adbc <__swsetup_r+0x50>
 800ad98:	2309      	movs	r3, #9
 800ad9a:	6033      	str	r3, [r6, #0]
 800ad9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ada0:	81a3      	strh	r3, [r4, #12]
 800ada2:	f04f 30ff 	mov.w	r0, #4294967295
 800ada6:	e03e      	b.n	800ae26 <__swsetup_r+0xba>
 800ada8:	4b25      	ldr	r3, [pc, #148]	; (800ae40 <__swsetup_r+0xd4>)
 800adaa:	429c      	cmp	r4, r3
 800adac:	d101      	bne.n	800adb2 <__swsetup_r+0x46>
 800adae:	68ac      	ldr	r4, [r5, #8]
 800adb0:	e7eb      	b.n	800ad8a <__swsetup_r+0x1e>
 800adb2:	4b24      	ldr	r3, [pc, #144]	; (800ae44 <__swsetup_r+0xd8>)
 800adb4:	429c      	cmp	r4, r3
 800adb6:	bf08      	it	eq
 800adb8:	68ec      	ldreq	r4, [r5, #12]
 800adba:	e7e6      	b.n	800ad8a <__swsetup_r+0x1e>
 800adbc:	0758      	lsls	r0, r3, #29
 800adbe:	d512      	bpl.n	800ade6 <__swsetup_r+0x7a>
 800adc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adc2:	b141      	cbz	r1, 800add6 <__swsetup_r+0x6a>
 800adc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adc8:	4299      	cmp	r1, r3
 800adca:	d002      	beq.n	800add2 <__swsetup_r+0x66>
 800adcc:	4630      	mov	r0, r6
 800adce:	f7ff f9f1 	bl	800a1b4 <_free_r>
 800add2:	2300      	movs	r3, #0
 800add4:	6363      	str	r3, [r4, #52]	; 0x34
 800add6:	89a3      	ldrh	r3, [r4, #12]
 800add8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800addc:	81a3      	strh	r3, [r4, #12]
 800adde:	2300      	movs	r3, #0
 800ade0:	6063      	str	r3, [r4, #4]
 800ade2:	6923      	ldr	r3, [r4, #16]
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	f043 0308 	orr.w	r3, r3, #8
 800adec:	81a3      	strh	r3, [r4, #12]
 800adee:	6923      	ldr	r3, [r4, #16]
 800adf0:	b94b      	cbnz	r3, 800ae06 <__swsetup_r+0x9a>
 800adf2:	89a3      	ldrh	r3, [r4, #12]
 800adf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800adf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adfc:	d003      	beq.n	800ae06 <__swsetup_r+0x9a>
 800adfe:	4621      	mov	r1, r4
 800ae00:	4630      	mov	r0, r6
 800ae02:	f000 f931 	bl	800b068 <__smakebuf_r>
 800ae06:	89a0      	ldrh	r0, [r4, #12]
 800ae08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae0c:	f010 0301 	ands.w	r3, r0, #1
 800ae10:	d00a      	beq.n	800ae28 <__swsetup_r+0xbc>
 800ae12:	2300      	movs	r3, #0
 800ae14:	60a3      	str	r3, [r4, #8]
 800ae16:	6963      	ldr	r3, [r4, #20]
 800ae18:	425b      	negs	r3, r3
 800ae1a:	61a3      	str	r3, [r4, #24]
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	b943      	cbnz	r3, 800ae32 <__swsetup_r+0xc6>
 800ae20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae24:	d1ba      	bne.n	800ad9c <__swsetup_r+0x30>
 800ae26:	bd70      	pop	{r4, r5, r6, pc}
 800ae28:	0781      	lsls	r1, r0, #30
 800ae2a:	bf58      	it	pl
 800ae2c:	6963      	ldrpl	r3, [r4, #20]
 800ae2e:	60a3      	str	r3, [r4, #8]
 800ae30:	e7f4      	b.n	800ae1c <__swsetup_r+0xb0>
 800ae32:	2000      	movs	r0, #0
 800ae34:	e7f7      	b.n	800ae26 <__swsetup_r+0xba>
 800ae36:	bf00      	nop
 800ae38:	20000010 	.word	0x20000010
 800ae3c:	0800c9a4 	.word	0x0800c9a4
 800ae40:	0800c9c4 	.word	0x0800c9c4
 800ae44:	0800c984 	.word	0x0800c984

0800ae48 <abort>:
 800ae48:	b508      	push	{r3, lr}
 800ae4a:	2006      	movs	r0, #6
 800ae4c:	f000 f986 	bl	800b15c <raise>
 800ae50:	2001      	movs	r0, #1
 800ae52:	f7f6 fa7d 	bl	8001350 <_exit>
	...

0800ae58 <_close_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4d06      	ldr	r5, [pc, #24]	; (800ae74 <_close_r+0x1c>)
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4608      	mov	r0, r1
 800ae62:	602b      	str	r3, [r5, #0]
 800ae64:	f7f6 fab7 	bl	80013d6 <_close>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d102      	bne.n	800ae72 <_close_r+0x1a>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	b103      	cbz	r3, 800ae72 <_close_r+0x1a>
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	bd38      	pop	{r3, r4, r5, pc}
 800ae74:	200066f8 	.word	0x200066f8

0800ae78 <__sflush_r>:
 800ae78:	898a      	ldrh	r2, [r1, #12]
 800ae7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7e:	4605      	mov	r5, r0
 800ae80:	0710      	lsls	r0, r2, #28
 800ae82:	460c      	mov	r4, r1
 800ae84:	d458      	bmi.n	800af38 <__sflush_r+0xc0>
 800ae86:	684b      	ldr	r3, [r1, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	dc05      	bgt.n	800ae98 <__sflush_r+0x20>
 800ae8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	dc02      	bgt.n	800ae98 <__sflush_r+0x20>
 800ae92:	2000      	movs	r0, #0
 800ae94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae9a:	2e00      	cmp	r6, #0
 800ae9c:	d0f9      	beq.n	800ae92 <__sflush_r+0x1a>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aea4:	682f      	ldr	r7, [r5, #0]
 800aea6:	602b      	str	r3, [r5, #0]
 800aea8:	d032      	beq.n	800af10 <__sflush_r+0x98>
 800aeaa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aeac:	89a3      	ldrh	r3, [r4, #12]
 800aeae:	075a      	lsls	r2, r3, #29
 800aeb0:	d505      	bpl.n	800aebe <__sflush_r+0x46>
 800aeb2:	6863      	ldr	r3, [r4, #4]
 800aeb4:	1ac0      	subs	r0, r0, r3
 800aeb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aeb8:	b10b      	cbz	r3, 800aebe <__sflush_r+0x46>
 800aeba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aebc:	1ac0      	subs	r0, r0, r3
 800aebe:	2300      	movs	r3, #0
 800aec0:	4602      	mov	r2, r0
 800aec2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aec4:	6a21      	ldr	r1, [r4, #32]
 800aec6:	4628      	mov	r0, r5
 800aec8:	47b0      	blx	r6
 800aeca:	1c43      	adds	r3, r0, #1
 800aecc:	89a3      	ldrh	r3, [r4, #12]
 800aece:	d106      	bne.n	800aede <__sflush_r+0x66>
 800aed0:	6829      	ldr	r1, [r5, #0]
 800aed2:	291d      	cmp	r1, #29
 800aed4:	d82c      	bhi.n	800af30 <__sflush_r+0xb8>
 800aed6:	4a2a      	ldr	r2, [pc, #168]	; (800af80 <__sflush_r+0x108>)
 800aed8:	40ca      	lsrs	r2, r1
 800aeda:	07d6      	lsls	r6, r2, #31
 800aedc:	d528      	bpl.n	800af30 <__sflush_r+0xb8>
 800aede:	2200      	movs	r2, #0
 800aee0:	6062      	str	r2, [r4, #4]
 800aee2:	04d9      	lsls	r1, r3, #19
 800aee4:	6922      	ldr	r2, [r4, #16]
 800aee6:	6022      	str	r2, [r4, #0]
 800aee8:	d504      	bpl.n	800aef4 <__sflush_r+0x7c>
 800aeea:	1c42      	adds	r2, r0, #1
 800aeec:	d101      	bne.n	800aef2 <__sflush_r+0x7a>
 800aeee:	682b      	ldr	r3, [r5, #0]
 800aef0:	b903      	cbnz	r3, 800aef4 <__sflush_r+0x7c>
 800aef2:	6560      	str	r0, [r4, #84]	; 0x54
 800aef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aef6:	602f      	str	r7, [r5, #0]
 800aef8:	2900      	cmp	r1, #0
 800aefa:	d0ca      	beq.n	800ae92 <__sflush_r+0x1a>
 800aefc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af00:	4299      	cmp	r1, r3
 800af02:	d002      	beq.n	800af0a <__sflush_r+0x92>
 800af04:	4628      	mov	r0, r5
 800af06:	f7ff f955 	bl	800a1b4 <_free_r>
 800af0a:	2000      	movs	r0, #0
 800af0c:	6360      	str	r0, [r4, #52]	; 0x34
 800af0e:	e7c1      	b.n	800ae94 <__sflush_r+0x1c>
 800af10:	6a21      	ldr	r1, [r4, #32]
 800af12:	2301      	movs	r3, #1
 800af14:	4628      	mov	r0, r5
 800af16:	47b0      	blx	r6
 800af18:	1c41      	adds	r1, r0, #1
 800af1a:	d1c7      	bne.n	800aeac <__sflush_r+0x34>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d0c4      	beq.n	800aeac <__sflush_r+0x34>
 800af22:	2b1d      	cmp	r3, #29
 800af24:	d001      	beq.n	800af2a <__sflush_r+0xb2>
 800af26:	2b16      	cmp	r3, #22
 800af28:	d101      	bne.n	800af2e <__sflush_r+0xb6>
 800af2a:	602f      	str	r7, [r5, #0]
 800af2c:	e7b1      	b.n	800ae92 <__sflush_r+0x1a>
 800af2e:	89a3      	ldrh	r3, [r4, #12]
 800af30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af34:	81a3      	strh	r3, [r4, #12]
 800af36:	e7ad      	b.n	800ae94 <__sflush_r+0x1c>
 800af38:	690f      	ldr	r7, [r1, #16]
 800af3a:	2f00      	cmp	r7, #0
 800af3c:	d0a9      	beq.n	800ae92 <__sflush_r+0x1a>
 800af3e:	0793      	lsls	r3, r2, #30
 800af40:	680e      	ldr	r6, [r1, #0]
 800af42:	bf08      	it	eq
 800af44:	694b      	ldreq	r3, [r1, #20]
 800af46:	600f      	str	r7, [r1, #0]
 800af48:	bf18      	it	ne
 800af4a:	2300      	movne	r3, #0
 800af4c:	eba6 0807 	sub.w	r8, r6, r7
 800af50:	608b      	str	r3, [r1, #8]
 800af52:	f1b8 0f00 	cmp.w	r8, #0
 800af56:	dd9c      	ble.n	800ae92 <__sflush_r+0x1a>
 800af58:	6a21      	ldr	r1, [r4, #32]
 800af5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af5c:	4643      	mov	r3, r8
 800af5e:	463a      	mov	r2, r7
 800af60:	4628      	mov	r0, r5
 800af62:	47b0      	blx	r6
 800af64:	2800      	cmp	r0, #0
 800af66:	dc06      	bgt.n	800af76 <__sflush_r+0xfe>
 800af68:	89a3      	ldrh	r3, [r4, #12]
 800af6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af6e:	81a3      	strh	r3, [r4, #12]
 800af70:	f04f 30ff 	mov.w	r0, #4294967295
 800af74:	e78e      	b.n	800ae94 <__sflush_r+0x1c>
 800af76:	4407      	add	r7, r0
 800af78:	eba8 0800 	sub.w	r8, r8, r0
 800af7c:	e7e9      	b.n	800af52 <__sflush_r+0xda>
 800af7e:	bf00      	nop
 800af80:	20400001 	.word	0x20400001

0800af84 <_fflush_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	690b      	ldr	r3, [r1, #16]
 800af88:	4605      	mov	r5, r0
 800af8a:	460c      	mov	r4, r1
 800af8c:	b913      	cbnz	r3, 800af94 <_fflush_r+0x10>
 800af8e:	2500      	movs	r5, #0
 800af90:	4628      	mov	r0, r5
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	b118      	cbz	r0, 800af9e <_fflush_r+0x1a>
 800af96:	6983      	ldr	r3, [r0, #24]
 800af98:	b90b      	cbnz	r3, 800af9e <_fflush_r+0x1a>
 800af9a:	f7ff fa93 	bl	800a4c4 <__sinit>
 800af9e:	4b14      	ldr	r3, [pc, #80]	; (800aff0 <_fflush_r+0x6c>)
 800afa0:	429c      	cmp	r4, r3
 800afa2:	d11b      	bne.n	800afdc <_fflush_r+0x58>
 800afa4:	686c      	ldr	r4, [r5, #4]
 800afa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d0ef      	beq.n	800af8e <_fflush_r+0xa>
 800afae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afb0:	07d0      	lsls	r0, r2, #31
 800afb2:	d404      	bmi.n	800afbe <_fflush_r+0x3a>
 800afb4:	0599      	lsls	r1, r3, #22
 800afb6:	d402      	bmi.n	800afbe <_fflush_r+0x3a>
 800afb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afba:	f7ff fb33 	bl	800a624 <__retarget_lock_acquire_recursive>
 800afbe:	4628      	mov	r0, r5
 800afc0:	4621      	mov	r1, r4
 800afc2:	f7ff ff59 	bl	800ae78 <__sflush_r>
 800afc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afc8:	07da      	lsls	r2, r3, #31
 800afca:	4605      	mov	r5, r0
 800afcc:	d4e0      	bmi.n	800af90 <_fflush_r+0xc>
 800afce:	89a3      	ldrh	r3, [r4, #12]
 800afd0:	059b      	lsls	r3, r3, #22
 800afd2:	d4dd      	bmi.n	800af90 <_fflush_r+0xc>
 800afd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afd6:	f7ff fb26 	bl	800a626 <__retarget_lock_release_recursive>
 800afda:	e7d9      	b.n	800af90 <_fflush_r+0xc>
 800afdc:	4b05      	ldr	r3, [pc, #20]	; (800aff4 <_fflush_r+0x70>)
 800afde:	429c      	cmp	r4, r3
 800afe0:	d101      	bne.n	800afe6 <_fflush_r+0x62>
 800afe2:	68ac      	ldr	r4, [r5, #8]
 800afe4:	e7df      	b.n	800afa6 <_fflush_r+0x22>
 800afe6:	4b04      	ldr	r3, [pc, #16]	; (800aff8 <_fflush_r+0x74>)
 800afe8:	429c      	cmp	r4, r3
 800afea:	bf08      	it	eq
 800afec:	68ec      	ldreq	r4, [r5, #12]
 800afee:	e7da      	b.n	800afa6 <_fflush_r+0x22>
 800aff0:	0800c9a4 	.word	0x0800c9a4
 800aff4:	0800c9c4 	.word	0x0800c9c4
 800aff8:	0800c984 	.word	0x0800c984

0800affc <_lseek_r>:
 800affc:	b538      	push	{r3, r4, r5, lr}
 800affe:	4d07      	ldr	r5, [pc, #28]	; (800b01c <_lseek_r+0x20>)
 800b000:	4604      	mov	r4, r0
 800b002:	4608      	mov	r0, r1
 800b004:	4611      	mov	r1, r2
 800b006:	2200      	movs	r2, #0
 800b008:	602a      	str	r2, [r5, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	f7f6 fa0a 	bl	8001424 <_lseek>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	d102      	bne.n	800b01a <_lseek_r+0x1e>
 800b014:	682b      	ldr	r3, [r5, #0]
 800b016:	b103      	cbz	r3, 800b01a <_lseek_r+0x1e>
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	bd38      	pop	{r3, r4, r5, pc}
 800b01c:	200066f8 	.word	0x200066f8

0800b020 <__swhatbuf_r>:
 800b020:	b570      	push	{r4, r5, r6, lr}
 800b022:	460e      	mov	r6, r1
 800b024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b028:	2900      	cmp	r1, #0
 800b02a:	b096      	sub	sp, #88	; 0x58
 800b02c:	4614      	mov	r4, r2
 800b02e:	461d      	mov	r5, r3
 800b030:	da07      	bge.n	800b042 <__swhatbuf_r+0x22>
 800b032:	2300      	movs	r3, #0
 800b034:	602b      	str	r3, [r5, #0]
 800b036:	89b3      	ldrh	r3, [r6, #12]
 800b038:	061a      	lsls	r2, r3, #24
 800b03a:	d410      	bmi.n	800b05e <__swhatbuf_r+0x3e>
 800b03c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b040:	e00e      	b.n	800b060 <__swhatbuf_r+0x40>
 800b042:	466a      	mov	r2, sp
 800b044:	f000 f8a6 	bl	800b194 <_fstat_r>
 800b048:	2800      	cmp	r0, #0
 800b04a:	dbf2      	blt.n	800b032 <__swhatbuf_r+0x12>
 800b04c:	9a01      	ldr	r2, [sp, #4]
 800b04e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b052:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b056:	425a      	negs	r2, r3
 800b058:	415a      	adcs	r2, r3
 800b05a:	602a      	str	r2, [r5, #0]
 800b05c:	e7ee      	b.n	800b03c <__swhatbuf_r+0x1c>
 800b05e:	2340      	movs	r3, #64	; 0x40
 800b060:	2000      	movs	r0, #0
 800b062:	6023      	str	r3, [r4, #0]
 800b064:	b016      	add	sp, #88	; 0x58
 800b066:	bd70      	pop	{r4, r5, r6, pc}

0800b068 <__smakebuf_r>:
 800b068:	898b      	ldrh	r3, [r1, #12]
 800b06a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b06c:	079d      	lsls	r5, r3, #30
 800b06e:	4606      	mov	r6, r0
 800b070:	460c      	mov	r4, r1
 800b072:	d507      	bpl.n	800b084 <__smakebuf_r+0x1c>
 800b074:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b078:	6023      	str	r3, [r4, #0]
 800b07a:	6123      	str	r3, [r4, #16]
 800b07c:	2301      	movs	r3, #1
 800b07e:	6163      	str	r3, [r4, #20]
 800b080:	b002      	add	sp, #8
 800b082:	bd70      	pop	{r4, r5, r6, pc}
 800b084:	ab01      	add	r3, sp, #4
 800b086:	466a      	mov	r2, sp
 800b088:	f7ff ffca 	bl	800b020 <__swhatbuf_r>
 800b08c:	9900      	ldr	r1, [sp, #0]
 800b08e:	4605      	mov	r5, r0
 800b090:	4630      	mov	r0, r6
 800b092:	f7ff f8df 	bl	800a254 <_malloc_r>
 800b096:	b948      	cbnz	r0, 800b0ac <__smakebuf_r+0x44>
 800b098:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b09c:	059a      	lsls	r2, r3, #22
 800b09e:	d4ef      	bmi.n	800b080 <__smakebuf_r+0x18>
 800b0a0:	f023 0303 	bic.w	r3, r3, #3
 800b0a4:	f043 0302 	orr.w	r3, r3, #2
 800b0a8:	81a3      	strh	r3, [r4, #12]
 800b0aa:	e7e3      	b.n	800b074 <__smakebuf_r+0xc>
 800b0ac:	4b0d      	ldr	r3, [pc, #52]	; (800b0e4 <__smakebuf_r+0x7c>)
 800b0ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0b0:	89a3      	ldrh	r3, [r4, #12]
 800b0b2:	6020      	str	r0, [r4, #0]
 800b0b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0b8:	81a3      	strh	r3, [r4, #12]
 800b0ba:	9b00      	ldr	r3, [sp, #0]
 800b0bc:	6163      	str	r3, [r4, #20]
 800b0be:	9b01      	ldr	r3, [sp, #4]
 800b0c0:	6120      	str	r0, [r4, #16]
 800b0c2:	b15b      	cbz	r3, 800b0dc <__smakebuf_r+0x74>
 800b0c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f000 f875 	bl	800b1b8 <_isatty_r>
 800b0ce:	b128      	cbz	r0, 800b0dc <__smakebuf_r+0x74>
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	f023 0303 	bic.w	r3, r3, #3
 800b0d6:	f043 0301 	orr.w	r3, r3, #1
 800b0da:	81a3      	strh	r3, [r4, #12]
 800b0dc:	89a0      	ldrh	r0, [r4, #12]
 800b0de:	4305      	orrs	r5, r0
 800b0e0:	81a5      	strh	r5, [r4, #12]
 800b0e2:	e7cd      	b.n	800b080 <__smakebuf_r+0x18>
 800b0e4:	0800a45d 	.word	0x0800a45d

0800b0e8 <_read_r>:
 800b0e8:	b538      	push	{r3, r4, r5, lr}
 800b0ea:	4d07      	ldr	r5, [pc, #28]	; (800b108 <_read_r+0x20>)
 800b0ec:	4604      	mov	r4, r0
 800b0ee:	4608      	mov	r0, r1
 800b0f0:	4611      	mov	r1, r2
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	602a      	str	r2, [r5, #0]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	f7f6 f934 	bl	8001364 <_read>
 800b0fc:	1c43      	adds	r3, r0, #1
 800b0fe:	d102      	bne.n	800b106 <_read_r+0x1e>
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	b103      	cbz	r3, 800b106 <_read_r+0x1e>
 800b104:	6023      	str	r3, [r4, #0]
 800b106:	bd38      	pop	{r3, r4, r5, pc}
 800b108:	200066f8 	.word	0x200066f8

0800b10c <_raise_r>:
 800b10c:	291f      	cmp	r1, #31
 800b10e:	b538      	push	{r3, r4, r5, lr}
 800b110:	4604      	mov	r4, r0
 800b112:	460d      	mov	r5, r1
 800b114:	d904      	bls.n	800b120 <_raise_r+0x14>
 800b116:	2316      	movs	r3, #22
 800b118:	6003      	str	r3, [r0, #0]
 800b11a:	f04f 30ff 	mov.w	r0, #4294967295
 800b11e:	bd38      	pop	{r3, r4, r5, pc}
 800b120:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b122:	b112      	cbz	r2, 800b12a <_raise_r+0x1e>
 800b124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b128:	b94b      	cbnz	r3, 800b13e <_raise_r+0x32>
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 f830 	bl	800b190 <_getpid_r>
 800b130:	462a      	mov	r2, r5
 800b132:	4601      	mov	r1, r0
 800b134:	4620      	mov	r0, r4
 800b136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b13a:	f000 b817 	b.w	800b16c <_kill_r>
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d00a      	beq.n	800b158 <_raise_r+0x4c>
 800b142:	1c59      	adds	r1, r3, #1
 800b144:	d103      	bne.n	800b14e <_raise_r+0x42>
 800b146:	2316      	movs	r3, #22
 800b148:	6003      	str	r3, [r0, #0]
 800b14a:	2001      	movs	r0, #1
 800b14c:	e7e7      	b.n	800b11e <_raise_r+0x12>
 800b14e:	2400      	movs	r4, #0
 800b150:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b154:	4628      	mov	r0, r5
 800b156:	4798      	blx	r3
 800b158:	2000      	movs	r0, #0
 800b15a:	e7e0      	b.n	800b11e <_raise_r+0x12>

0800b15c <raise>:
 800b15c:	4b02      	ldr	r3, [pc, #8]	; (800b168 <raise+0xc>)
 800b15e:	4601      	mov	r1, r0
 800b160:	6818      	ldr	r0, [r3, #0]
 800b162:	f7ff bfd3 	b.w	800b10c <_raise_r>
 800b166:	bf00      	nop
 800b168:	20000010 	.word	0x20000010

0800b16c <_kill_r>:
 800b16c:	b538      	push	{r3, r4, r5, lr}
 800b16e:	4d07      	ldr	r5, [pc, #28]	; (800b18c <_kill_r+0x20>)
 800b170:	2300      	movs	r3, #0
 800b172:	4604      	mov	r4, r0
 800b174:	4608      	mov	r0, r1
 800b176:	4611      	mov	r1, r2
 800b178:	602b      	str	r3, [r5, #0]
 800b17a:	f7f6 f8d7 	bl	800132c <_kill>
 800b17e:	1c43      	adds	r3, r0, #1
 800b180:	d102      	bne.n	800b188 <_kill_r+0x1c>
 800b182:	682b      	ldr	r3, [r5, #0]
 800b184:	b103      	cbz	r3, 800b188 <_kill_r+0x1c>
 800b186:	6023      	str	r3, [r4, #0]
 800b188:	bd38      	pop	{r3, r4, r5, pc}
 800b18a:	bf00      	nop
 800b18c:	200066f8 	.word	0x200066f8

0800b190 <_getpid_r>:
 800b190:	f7f6 b8c4 	b.w	800131c <_getpid>

0800b194 <_fstat_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4d07      	ldr	r5, [pc, #28]	; (800b1b4 <_fstat_r+0x20>)
 800b198:	2300      	movs	r3, #0
 800b19a:	4604      	mov	r4, r0
 800b19c:	4608      	mov	r0, r1
 800b19e:	4611      	mov	r1, r2
 800b1a0:	602b      	str	r3, [r5, #0]
 800b1a2:	f7f6 f924 	bl	80013ee <_fstat>
 800b1a6:	1c43      	adds	r3, r0, #1
 800b1a8:	d102      	bne.n	800b1b0 <_fstat_r+0x1c>
 800b1aa:	682b      	ldr	r3, [r5, #0]
 800b1ac:	b103      	cbz	r3, 800b1b0 <_fstat_r+0x1c>
 800b1ae:	6023      	str	r3, [r4, #0]
 800b1b0:	bd38      	pop	{r3, r4, r5, pc}
 800b1b2:	bf00      	nop
 800b1b4:	200066f8 	.word	0x200066f8

0800b1b8 <_isatty_r>:
 800b1b8:	b538      	push	{r3, r4, r5, lr}
 800b1ba:	4d06      	ldr	r5, [pc, #24]	; (800b1d4 <_isatty_r+0x1c>)
 800b1bc:	2300      	movs	r3, #0
 800b1be:	4604      	mov	r4, r0
 800b1c0:	4608      	mov	r0, r1
 800b1c2:	602b      	str	r3, [r5, #0]
 800b1c4:	f7f6 f923 	bl	800140e <_isatty>
 800b1c8:	1c43      	adds	r3, r0, #1
 800b1ca:	d102      	bne.n	800b1d2 <_isatty_r+0x1a>
 800b1cc:	682b      	ldr	r3, [r5, #0]
 800b1ce:	b103      	cbz	r3, 800b1d2 <_isatty_r+0x1a>
 800b1d0:	6023      	str	r3, [r4, #0]
 800b1d2:	bd38      	pop	{r3, r4, r5, pc}
 800b1d4:	200066f8 	.word	0x200066f8

0800b1d8 <_init>:
 800b1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1da:	bf00      	nop
 800b1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1de:	bc08      	pop	{r3}
 800b1e0:	469e      	mov	lr, r3
 800b1e2:	4770      	bx	lr

0800b1e4 <_fini>:
 800b1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e6:	bf00      	nop
 800b1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ea:	bc08      	pop	{r3}
 800b1ec:	469e      	mov	lr, r3
 800b1ee:	4770      	bx	lr
